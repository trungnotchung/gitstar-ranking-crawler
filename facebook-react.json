[
  {
    "release": {
      "tag_name": "v19.1.0",
      "body": "### Owner Stack\r\n\r\nAn Owner Stack is a string representing the components that are directly responsible for rendering a particular component. You can log Owner Stacks when debugging or use Owner Stacks to enhance error overlays or other development tools. Owner Stacks are only available in development builds. Component Stacks in production are unchanged.\r\n\r\n* An Owner Stack is a development-only stack trace that helps identify which components are responsible for rendering a particular component. An Owner Stack is distinct from a Component Stacks, which shows the hierarchy of components leading to an error.\r\n* The [captureOwnerStack API](https://react.dev/reference/react/captureOwnerStack) is only available in development mode and returns a Owner Stack, if available. The API can be used to enhance error overlays or log component relationships when debugging. [#29923](https://github.com/facebook/react/pull/29923), [#32353](https://github.com/facebook/react/pull/32353), [#30306](https://github.com/facebook/react/pull/30306),\r\n[#32538](https://github.com/facebook/react/pull/32538), [#32529](https://github.com/facebook/react/pull/32529), [#32538](https://github.com/facebook/react/pull/32538)\r\n\r\n### React\r\n* Enhanced support for Suspense boundaries to be used anywhere, including the client, server, and during hydration. [#32069](https://github.com/facebook/react/pull/32069), [#32163](https://github.com/facebook/react/pull/32163), [#32224](https://github.com/facebook/react/pull/32224), [#32252](https://github.com/facebook/react/pull/32252)\r\n* Reduced unnecessary client rendering through improved hydration scheduling [#31751](https://github.com/facebook/react/pull/31751)\r\n* Increased priority of client rendered Suspense boundaries [#31776](https://github.com/facebook/react/pull/31776)\r\n* Fixed frozen fallback states by rendering unfinished Suspense boundaries on the client. [#31620](https://github.com/facebook/react/pull/31620)\r\n* Reduced garbage collection pressure by improving Suspense boundary retries. [#31667](https://github.com/facebook/react/pull/31667)\r\n* Fixed erroneous “Waiting for Paint” log when the passive effect phase was not delayed [#31526](https://github.com/facebook/react/pull/31526)\r\n* Fixed a regression causing key warnings for flattened positional children in development mode. [#32117](https://github.com/facebook/react/pull/32117)\r\n* Updated `useId` to use valid CSS selectors, changing format from `:r123:` to `«r123»`. [#32001](https://github.com/facebook/react/pull/32001)\r\n* Added a dev-only warning for null/undefined created in useEffect, useInsertionEffect, and useLayoutEffect. [#32355](https://github.com/facebook/react/pull/32355)\r\n* Fixed a bug where dev-only methods were exported in production builds. React.act is no longer available in production builds. [#32200](https://github.com/facebook/react/pull/32200)\r\n* Improved consistency across prod and dev to improve compatibility with Google Closure Complier and bindings [#31808](https://github.com/facebook/react/pull/31808)\r\n* Improve passive effect scheduling for consistent task yielding. [#31785](https://github.com/facebook/react/pull/31785)\r\n* Fixed asserts in React Native when passChildrenWhenCloningPersistedNodes is enabled for OffscreenComponent rendering. [#32528](https://github.com/facebook/react/pull/32528)\r\n* Fixed component name resolution for Portal [#32640](https://github.com/facebook/react/pull/32640)\r\n* Added support for beforetoggle and toggle events on the dialog element. #32479 [#32479](https://github.com/facebook/react/pull/32479)\r\n\r\n### React DOM\r\n* Fixed double warning when the `href` attribute is an empty string [#31783](https://github.com/facebook/react/pull/31783)\r\n * Fixed an edge case where `getHoistableRoot()` didn’t work properly when the container was a Document [#32321](https://github.com/facebook/react/pull/32321)\r\n* Removed support for using HTML comments (e.g. `<!-- -->`) as a DOM container. [#32250](https://github.com/facebook/react/pull/32250)\r\n* Added support for `<script>` and `<template>` tags to be nested within `<select>` tags. [#31837](https://github.com/facebook/react/pull/31837)\r\n* Fixed responsive images to be preloaded as HTML instead of headers [#32445](https://github.com/facebook/react/pull/32445)\r\n\r\n### use-sync-external-store\r\n* Added `exports` field to `package.json` for `use-sync-external-store` to support various entrypoints. [#25231](https://github.com/facebook/react/pull/25231)\r\n\r\n### React Server Components\r\n* Added `unstable_prerender`, a new experimental API for prerendering React Server Components on the server [#31724](https://github.com/facebook/react/pull/31724)\r\n* Fixed an issue where streams would hang when receiving new chunks after a global error [#31840](https://github.com/facebook/react/pull/31840), [#31851](https://github.com/facebook/react/pull/31851)\r\n* Fixed an issue where pending chunks were counted twice. [#31833](https://github.com/facebook/react/pull/31833)\r\n* Added support for streaming in edge environments [#31852](https://github.com/facebook/react/pull/31852)\r\n* Added support for sending custom error names from a server so that they are available in the client for console replaying. [#32116](https://github.com/facebook/react/pull/32116)\r\n* Updated the server component wire format to remove IDs for hints and console.log because they have no return value [#31671](https://github.com/facebook/react/pull/31671)\r\n* Exposed `registerServerReference` in client builds to handle server references in different environments. [#32534](https://github.com/facebook/react/pull/32534)\r\n* Added react-server-dom-parcel package which integrates Server Components with the [Parcel bundler](https://parceljs.org/) [#31725](https://github.com/facebook/react/pull/31725), [#32132](https://github.com/facebook/react/pull/32132), [#31799](https://github.com/facebook/react/pull/31799), [#32294](https://github.com/facebook/react/pull/32294), [#31741](https://github.com/facebook/react/pull/31741)"
    },
    "commits": [
      {
        "sha": "829401dc173d79994a3401fce24084670f55fb5c",
        "commit": {
          "message": "[Flight] Transport custom error names in dev mode (#32116)\n\nTyped errors is not a feature that Flight currently supports. However,\nfor presentation purposes, serializing a custom error name is something\nwe could support today.\n\nWith this PR, we're now transporting custom error names through the\nserver-client boundary, so that they are available in the client e.g.\nfor console replaying. One example where this can be useful is when you\nwant to print debug information while leveraging the fact that\n`console.warn` displays the error stack, including handling of hiding\nand source mapping stack frames. In this case you may want to show\n`Warning: ...` or `Debug: ...` instead of `Error: ...`.\n\nIn prod mode, we still transport an obfuscated error that uses the\ndefault `Error` name, to not leak any sensitive information from the\nserver to the client. This also means that you must not rely on the\nerror name to discriminate errors, e.g. when handling them in an error\nboundary."
        }
      },
      {
        "sha": "18eaf51bd51fed8dfed661d64c306759101d0bfd",
        "commit": {
          "message": "Support eslint 8+ flat plugin syntax out of the box for eslint-plugin-react-compiler (#32120)\n\n## Summary\n\nThe current docs for the react compiler eslint plugin is based on\nintegrating with the old-style eslint config format. This is generally\nfine, but most plugins (and the [official\ndocs](https://eslint.org/docs/latest/use/configure/configuration-files#configuration-file))\nare now describing themselves in the new format.\n\nThis PR has two changes:\n\n- Update the exports to include a \"flat configuration\"\n- Adds a README change describing how to handle both configs\n\nThe solution is semi-based on @guillaumebrunerie's answer in\nhttps://github.com/reactwg/react-compiler/discussions/25 mixed with\nreading the source code for\n[eslint-plugin-react-refresh](https://github.com/ArnaudBarre/eslint-plugin-react-refresh/blob/main/src/index.ts)\n\n## How did you test this change?\n\nI faked this API in the most recent deploy:\n\n![Screenshot 2025-01-18 at 19 58\n44](https://github.com/user-attachments/assets/ae0e4bea-fb96-4073-a5f7-c886d087b6af)\n\nThen used that in my app:\n\n![Screenshot 2025-01-18 at 20 04\n33](https://github.com/user-attachments/assets/21f77158-7535-453a-b988-49cf59d22d71)\n\nand get myself some compiler messages:\n\n```\n/Users/orta/dev/app/apps/puzzmo.com/src/palette/HoverPopover.tsx\n  31:37  error  Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)  react-compiler/react-compiler\n\n/Users/orta/dev/app/apps/puzzmo.com/src/components/gameplay/PlayGamePauseOverlay.tsx\n   33:7   error  Ref values (the `current` property) may not be accessed during render. (https://react.dev/reference/react/useRef)  react-compiler/react-compiler\n   35:5   error  Ref values (the `current` property) may not be accessed during render. (https://react.dev/reference/react/useRef)  react-compiler/react-compiler\n```"
        }
      },
      {
        "sha": "028c8e6cf5ce2a87147a7e03e503ce94c7a7a0cf",
        "commit": {
          "message": "Add Transition Types (#32105)\n\nThis adds an isomorphic API to add Transition Types, which represent the\ncause, to the current Transition. This is currently mainly for View\nTransitions but as a concept it's broader and we might expand it to more\nfeatures and object types in the future.\n\n```js\nimport { unstable_addTransitionType as addTransitionType } from 'react';\n\nstartTransition(() => {\n  addTransitionType('my-transition-type');\n  setState(...);\n});\n```\n\nIf multiple transitions get entangled this is additive and all\nTransition Types are collected. You can also add more than one type to a\nTransition (hence the `add` prefix).\n\nTransition Types are reset after each commit. Meaning that `<Suspense>`\nrevealing after a `startTransition` does not get any View Transition\ntypes associated with it.\n\nNote that the scoping rules for this is a little \"wrong\" in this\nimplementation. Ideally it would be scoped to the nearest outer\n`startTransition` and grouped with any `setState` inside of it.\nIncluding Actions. However, since we currently don't have AsyncContext\non the client, it would be too easy to drop a Transition Type if there\nwere no other `setState` in the same `await` task. Multiple Transitions\nare entangled together anyway right now as a result. So this just tracks\na global of all pending Transition Types for the next Transition. An\ninherent tricky bit with this API is that you could update multiple\nroots. In that case it should ideally be associated with each root.\nTransition Tracing solves this by associating a Transition with any\nupdates that are later collected but this suffers from the problem\nmentioned above. Therefore, I just associate Transition Types with one\nroot - the first one to commit. Since the View Transitions across roots\nare sequential anyway it kind of makes sense that only one really is the\ncause and the other one is subsequent.\n\nTransition Types can be used to apply different animations based on what\ncaused the Transition. You have three different ways to choose from for\nhow to use them:\n\n## CSS\n\nIt integrates with [View Transition\nTypes](https://www.w3.org/TR/css-view-transitions-2/#active-view-transition-pseudo-examples)\nso you can match different animations based on CSS scopes:\n\n```css\n:root:active-view-transition-type(my-transition-type) {\n  &::view-transition-...(...) {\n    ...\n  }\n}\n```\n\nThis is kind of a PITA to write though and if you have a CSS library\nthat provide View Transition Classes it's difficult to import those into\nthese scopes.\n\n## Class per Type\n\nThis PR also adds an object-as-map form that can be passed to all\n`className` properties:\n\n```js\n<ViewTransition className={{\n  'my-navigation-type': 'hello',\n  'default': 'world',\n}}>\n```\n\nIf multiple types match, then they're joined together. If no types match\nthen the special `\"default\"` entry is used instead. If any type has the\nvalue `\"none\"` then that wins and the ViewTransition is disabled (not\nassigned a name).\n\nThese can be combined with `enter`/`exit`/`update`/`layout`/`share`\nprops to match based on kind of trigger and Transition Type.\n\n```js\n<ViewTransition enter={{\n  'navigation-back': 'enter-right',\n  'navigation-forward': 'enter-left',\n}}\nexit={{\n  'navigation-back': 'exit-right',\n  'navigation-forward': 'exit-left',\n}}>\n```\n\n## Events\n\nIn addition, you can also observe the types in the View Transition Event\ncallbacks as the second argument. That way you can pick different\nimperative Animations based on the cause.\n\n```js\n<ViewTransition onUpdate={(inst, types) => {\n  if (types.includes('navigation-back')) {\n    ...\n  } else if (types.includes('navigation-forward')) {\n    ...\n  } else {\n    ...\n  }\n}}>\n```\n\n## Future\n\nIn the future we might expose types to `useEffect` for more general\npurpose usage. This would also allow non-View Transition based\nAnimations such as existing libraries to use this same feature to\ncoordinate the same concept.\n\nWe might also allow richer objects to be passed along here. Only the\nstrings would apply to View Transitions but the imperative code and\neffects could do something else with them."
        }
      },
      {
        "sha": "b000019578a417ec0a1aeec8bda689db240cb28e",
        "commit": {
          "message": "DevTools: support useEffectEvent and forward-fix experimental prefix support (#32106)\n\n- Adds support for `experimental_useEffectEvent`, now DevTools will be\r\nable to display this hook for inspected element\r\n- Added a use case to DevTools shell, couldn't add case, because we are\r\nusing ReactTestRenderer, which has the corresponding flag disabled.\r\n- Forward-fix logic for handling `experimental` prefix that was added in\r\nhttps://github.com/facebook/react/pull/32088.\r\n\r\n![Screenshot 2025-01-16 at 21 24\r\n12](https://github.com/user-attachments/assets/6fb8ff2a-be47-47b5-bbfc-73d3a586657c)"
        }
      },
      {
        "sha": "5f05181a8b527260fc0a338edcde0e9d3b35ab20",
        "commit": {
          "message": "Include error name in error chunks (#32157)"
        }
      },
      {
        "sha": "9b62ee71f483502db4f44220552b97757b346094",
        "commit": {
          "message": "docs(eslint-plugin-react-compiler): fix typo (#32149)"
        }
      },
      {
        "sha": "e5a2062c80abe2118b8bd32972a5100a2b1ffa01",
        "commit": {
          "message": "fix(react-compiler): `JSXText` emits incorrect with bracket (#32138)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nOur [LlamaIndex](https://www.llamaindex.ai/) Product is blocked by this\r\nbug\r\n\r\nFixes: https://github.com/facebook/react/issues/32137\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->"
        }
      },
      {
        "sha": "19557443c8c2f54571dbb1519403cf310ad6e68b",
        "commit": {
          "message": "[compiler][repro] JSX escape sequences not printed correctly by @babel/generator (#32130)\n\nRepro for https://github.com/facebook/react/issues/32123\r\n\r\nNote that this is only a bug when calling `@babel/generator:generate()`\r\nbefore transforming JSX.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32130).\r\n* #32131\r\n* __->__ #32130"
        }
      },
      {
        "sha": "7c864c98342e6e92a992ac32c1846f13eb1a314c",
        "commit": {
          "message": "[compiler][ez] Patch for JSX escape sequences in @babel/generator (#32131)\n\nFall back to using JSXExpressionContainer for strings potentially\r\ncontaining escape sequences (a single backslash) to fix\r\nhttps://github.com/facebook/react/issues/32123. This is an extension of\r\nhttps://github.com/facebook/react/pull/29079"
        }
      },
      {
        "sha": "b6b33bfb92c095160df7370fb488acb89c55b5ca",
        "commit": {
          "message": "[compiler][ez] rewrite invariant in InferReferenceEffects (#32093)\n\nSmall patch to pass aliased context values into\r\n`Object|ArrayExpression`s\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32093).\r\n* #32099\r\n* #32104\r\n* #32098\r\n* #32097\r\n* #32096\r\n* #32095\r\n* #32094\r\n* __->__ #32093"
        }
      },
      {
        "sha": "deba48a72795d1332fe1df1159fc6b73566667fe",
        "commit": {
          "message": "[compiler] Repro for invalid Array.map type (#32094)\n\nSee test fixture\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32094).\r\n* #32099\r\n* #32104\r\n* #32098\r\n* #32097\r\n* #32096\r\n* #32095\r\n* __->__ #32094\r\n* #32093"
        }
      },
      {
        "sha": "b83090fca2d96283a5c6153abb65eaa5cc81c9ba",
        "commit": {
          "message": "[compiler] Fix invalid Array.map type (#32095)\n\nSee test fixture\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32095).\r\n* #32099\r\n* #32104\r\n* #32098\r\n* #32097\r\n* #32096\r\n* __->__ #32095\r\n* #32094\r\n* #32093"
        }
      },
      {
        "sha": "a0b91fbd650f9398cca12fcda0c426c434eeb6d8",
        "commit": {
          "message": "[compiler][ez] Fix main (bad rebase / amend for #32095) (#32160)\n\nSee title: this fixes test cases broken by\r\nhttps://github.com/facebook/react/pull/32095 adding instead of moving\r\nnew test fixtures"
        }
      },
      {
        "sha": "ae9017ceabb2a36a04c249ad5342e0b1af3e1a54",
        "commit": {
          "message": "Move effect dep inference tests to infer-effect-dependencies directory (#32161)\n\nSummary: Grouping them to make it easy to see that they are all related\r\n\r\nTest Plan:"
        }
      },
      {
        "sha": "de1eaa2655ee29933425695ae0af756bf6713147",
        "commit": {
          "message": "Fix:- Improve HOC support and state preservation in React Refresh (#30660)\n\n## Summary\r\n\r\nThis fixes #30659 , the issue was how the state was preserved and needed\r\nspecial cases for the forward and memo, have also added tests related to\r\nthe same.\r\n## How did you test this change?\r\n\r\n`yarn test packages/react-refresh/src/__tests__/ReactFresh-test.js`\r\n\r\n![Screenshot 2024-08-12 at 4 27\r\n39 PM](https://github.com/user-attachments/assets/2b597a62-c45f-443b-acfc-3232962ba0a3)"
        }
      },
      {
        "sha": "b65afdd0c1f644f3630c4e8cfd9ac264c5ac329f",
        "commit": {
          "message": "Clarify useActionState async non-transition warning (#32207)\n\nhttps://github.com/facebook/react/pull/28491#issuecomment-2094861155"
        }
      },
      {
        "sha": "0f8a1e02ff036974f29347fa870b1f0e8e78666d",
        "commit": {
          "message": "[ci] Make maintainer check workflow usable from other repositories (#32215)\n\nFor use in reactjs/react.dev"
        }
      },
      {
        "sha": "5269823927e1ba0ea14a64478b28c02ba5f0de3e",
        "commit": {
          "message": "[ci] Parse inputs for maintainer check workflow (#32216)\n\nI forgot that workflow calls stringify their inputs"
        }
      },
      {
        "sha": "a6ce56d9a9162c295ef0086762b76506534de201",
        "commit": {
          "message": "[ci] Fix typo (#32217)\n\nyml was a mistake"
        }
      },
      {
        "sha": "9eabb37338e6bea18441dec58a4284fe00ee09ae",
        "commit": {
          "message": "[compiler][be] Remove unused experimental Rust port\n\nI wrote this a couple summers back as an experiment to see how easily we could translate the compiler to Rust. We make extensive use of in-place mutation of the IR, and the experiment proved that this we can get reasonable ergonomics for this in Rust which was cool. We've since ended up using some of the code here for Relay, allowing Relay Compiler to parse JS files to do more fine-grained extraction of data. For React Compiler though, we plan to continue using JavaScript and explore lightweight native wrappers for things like OXC and SWC plugins. We're also working with the Hermes team to eventually compile the compiler with Static Hermes.\n\nAs Tomo always says: always bet on JavaScript.\n\nghstack-source-id: c5770a2efce16a7153dd98702f47bc84d380c8b2\nPull Request resolved: https://github.com/facebook/react/pull/32219"
        }
      },
      {
        "sha": "dc44bca85b19481267ae5f7c0c271f8a5a126654",
        "commit": {
          "message": "fix(react-compiler-healthcheck): Add shebang to banner (#32225)\n\n## Summary\n\nPR https://github.com/facebook/react/pull/31963 migrated the bundler\nfrom Rollup to esbuild, but the `react-compiler-healthcheck` script\nlacks a shebang, leading to issues with `npx` not being able to execute\nit.\n\n\nhttps://github.com/facebook/react/blob/dc7578290f1bc55c358bee3a7eeb5e5f4551adfd/compiler/packages/react-compiler-healthcheck/rollup.config.js#L60-L78\n\n\nhttps://github.com/facebook/react/blob/9eabb37338e6bea18441dec58a4284fe00ee09ae/compiler/packages/react-compiler-healthcheck/scripts/build.js#L38-L53\n\n## How did you test this change?\n\n**Before**\n\n(fail)\n\n```shell\n(main)> npx --version\n10.5.0\n(main)> npx react-compiler-healthcheck\n/home/jeremy/.npm/_npx/67b118a83a29962c/node_modules/.bin/react-compiler-healthcheck: line 1: /bin: Is a directory\n/home/jeremy/.npm/_npx/67b118a83a29962c/node_modules/.bin/react-compiler-healthcheck: line 2: syntax error near unexpected token `('\n/home/jeremy/.npm/_npx/67b118a83a29962c/node_modules/.bin/react-compiler-healthcheck: line 2: ` * Copyright (c) Meta Platforms, Inc. and affiliates.'\n```\n\n**After**\n\n```shell\n(main)> npx react-compiler-healthcheck\nSuccessfully compiled 108 out of 146 components.\nStrictMode usage not found.\nFound no usage of incompatible libraries.\n```"
        }
      },
      {
        "sha": "ddc26c9db16a7be2f05eacc6f0228f42eeff3803",
        "commit": {
          "message": "Swap to Eli's new GitHub username in Maintainers file (#32237)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->"
        }
      },
      {
        "sha": "d676c047b1463169efafc946fba3182c1809651a",
        "commit": {
          "message": "Update MAINTAINERS (#32238)"
        }
      },
      {
        "sha": "37906d4dfbe80d71f312f7347bb9ddb930484d28",
        "commit": {
          "message": "[Flight Parcel] Pass import maps through client references (#32132)\n\nCorresponding Parcel PR:\nhttps://github.com/parcel-bundler/parcel/pull/10073\n\nParcel avoids [cascading cache\ninvalidation](https://philipwalton.com/articles/cascading-cache-invalidation/)\nby injecting a bundle manifest containing a mapping of stable bundle ids\nto hashed URLs. When using an HTML entry point, this is done (as of the\nabove PR) via a native import map. This means that if a bundle's hash\nchanges, only that bundle will be invalidated (plus the HTML itself\nwhich typically has a short caching policy), not any other bundles that\nreference it.\n\nFor RSCs, we cannot currently use native import maps because of client\nside navigations, where a new HTML file is not requested. Eventually,\nmultiple `<script type=\"importmap\">` elements will be supported\n(https://github.com/whatwg/html/pull/10528) ([coming Chrome\n133](https://chromestatus.com/feature/5121916248260608)), at which point\nReact could potentially inject them. In the meantime, I've added some\nAPIs to Parcel to polyfill this. With this change, an import map can be\nsent along with a client reference, containing a mapping for any dynamic\nimports and URL dependencies (e.g. images) that are referenced by the JS\nbundles. On the client, the import map is extended with these new\nmappings prior to executing the referenced bundles. This preserves the\ncaching advantages described above while supporting client navigations."
        }
      },
      {
        "sha": "c492f97541486458ce21653d2669d53d380f0538",
        "commit": {
          "message": "[Fiber] Support Suspense boundaries anywhere (excluding hydration) (#32163)\n\nThis is a follow up to https://github.com/facebook/react/pull/32069\r\n\r\nIn the prior change I updated Fizz to allow you to render Suspense\r\nboundaries at any level within a react-dom application by treating the\r\ndocument body as the default render scope. This change updates Fiber to\r\nprovide similar semantics. Note that this update still does not deliver\r\nhydration so unifying the Fizz and Fiber implementations in a single App\r\nis not possible yet.\r\n\r\nThe implementation required a rework of the getHostSibling and\r\ngetHostParent algorithms. Now most HostSingletons are invisible from a\r\nhost positioning perspective. Head is special in that it is a valid host\r\nscope so when you have Placements inside of it, it will act as the\r\nparent. But body, and html, will not directly participate in host\r\npositioning.\r\n\r\nAdditionally to support flipping to a fallback html, head, and body tag\r\nin a Suspense fallback I updated the offscreen hiding/unhide logic to\r\npierce through singletons when lookin for matching hidable nod\r\nboundaries anywhere (excluding hydration)"
        }
      },
      {
        "sha": "b2357ecd8203341a3668a96d32d68dd519e5430d",
        "commit": {
          "message": "[RN] Add support for document instance in React Native (#32260)\n\n## Summary\r\n\r\nWe're adding support for `Document` instances in React Native (as\r\n`ReactNativeDocument` instances) in\r\nhttps://github.com/facebook/react-native/pull/49012 , which requires the\r\nReact Fabric renderer to handle its lifecycle.\r\n\r\nThis modifies the renderer to create those document instances and\r\nassociate them with the React root, and provides a new method for React\r\nNative to access them given its containerTag / rootTag.\r\n\r\n## How did you test this change?\r\n\r\nTested e2e in https://github.com/facebook/react-native/pull/49012\r\nmanually syncing these changes."
        }
      },
      {
        "sha": "bb9a24d9fc5faa57a85750cd3bb94546baa405ac",
        "commit": {
          "message": "Use fastAddProperties in diffing (#32243)\n\n## Summary\r\n\r\n`fastAddProperties` has shown some perf benefits when used for creating\r\nprops payload for new components. In this PR we'll try to use it for\r\ndiffing props for existing components.\r\n\r\nIt would be good enough if it simply doesn't regress perf. We'll be able\r\nto delete the old `addProperties`, and make `fastAddProperties` the\r\ndefault behaviour.\r\n\r\n## How did you test this change?\r\n\r\n```\r\nyarn lint\r\nyarn flow native\r\nyarn test packages/react-native-renderer -r=xplat --variant=false\r\nyarn test packages/react-native-renderer -r=xplat --variant=true\r\n```"
        }
      },
      {
        "sha": "2fe5b572bc79c51785bcd17dd16e85427c1d2548",
        "commit": {
          "message": "[Fiber] Read the class name from props.layout (#32273)\n\nCopypasta typo."
        }
      },
      {
        "sha": "14f7c072719564ee4269c5fdadb6b8a737546422",
        "commit": {
          "message": "[ci] Try to parallelize devtools builds (#32266)\n\nBuilding DevTools is currently the long pole for the runtime CI job.\nLet's see if we can get the overall runtime for runtime build and test\ndown by speeding this one step up.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32266).\n* #32267\n* __->__ #32266"
        }
      },
      {
        "sha": "f02ba2fcc5de5c280d5c79f52302b04daaaf1e23",
        "commit": {
          "message": "[ci] Remove build_devtools_and_process_artifacts as a dependency to run_devtools_e2e_tests (#32267)\n\nI just noticed that we don't actually need to let the devtools build\nfinish first because the e2e tests don't use those built files. We can\ndecouple them to allow them to run in paralllel."
        }
      },
      {
        "sha": "4b3728f05efbab9624e981339d8a0992a58f9a41",
        "commit": {
          "message": "[Fiber] Track Appearing Named ViewTransition in the accumulateSuspenseyCommit Phase (#32254)\n\nWhen a named ViewTransition component unmounts in one place and mounts\nin a different place we need to match these up so we know a pair has\nbeen created. Since the unmounts are tracked in the snapshot phase we\nneed some way to track the mounts before that.\n\nOriginally the way I did that is by reusing the render phase since there\nwas no other phase in the commit before that. However, that's not quite\ncorrect. Just because something is visited in render doesn't mean it'll\ncommit. E.g. if that tree ends up suspending or erroring. Which would\nlead to a false positive on match. The unmount shouldn't animate in that\ncase.\n\n(Un)fortunately we have already added a traversal before the snapshot\nphase for tracking suspensey CSS. The `accumulateSuspenseyCommit` phase.\nThis needs to find new mounts of Suspensey CSS or if there was a\nreappearing Offscreen boundary it needs to find any Suspensey CSS\nalready inside that tree. This is exactly the same traversal we need to\nfind newly appearing View Transition components. So we can just reuse\nthat."
        }
      },
      {
        "sha": "55b54b0d638a6ae5c7a5ab6dd4fee732cfbc47ad",
        "commit": {
          "message": "[ci] Only install chromium for flight fixtures (#32275)\n\nI noticed we only use chromium in fixtures/flight, so let's specifically\nonly install that browser in ci."
        }
      },
      {
        "sha": "221f3002caa2314cba0a62950da6fb92b453d1d0",
        "commit": {
          "message": "chore[DevTools]: make clipboardWrite optional for chromium (#32262)\n\nAddresses https://github.com/facebook/react/issues/32244.\r\n\r\n### Chromium\r\nWe will use\r\n[chrome.permissions](https://developer.chrome.com/docs/extensions/reference/api/permissions)\r\nfor checking / requesting `clipboardWrite` permission before copying\r\nsomething to the clipboard.\r\n\r\n### Firefox\r\nWe will keep `clipboardWrite` as a required permission, because there is\r\nno reliable and working API for requesting optional permissions for\r\nextensions that are extending browser DevTools:\r\n- `chrome.permissions` is unavailable for devtools pages -\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1796933\r\n- You can't call `chrome.permissions.request` from background, because\r\nthis instruction has to be executed inside user-event callback,\r\nbasically only initiated by user.\r\n\r\nI don't really want to come up with solutions like opening a new tab\r\nwith a button that user has to click."
        }
      },
      {
        "sha": "87c03a0a134b19ffbda6bbef4b12202f4f5a4347",
        "commit": {
          "message": "Fix typo in dangerfile.js which results in an unreachable code path… (#32277)\n\n## Summary\n\nFix typo in dangerfile.js which results in an unreachable code path\nwhich ought to be hit when there is no matching base artifact during\nDangerCI automated code review.\n\nSee:\nhttps://github.com/facebook/react/blob/221f3002caa2314cba0a62950da6fb92b453d1d0/dangerfile.js#L73\nCompare:\nhttps://github.com/facebook/react/blob/221f3002caa2314cba0a62950da6fb92b453d1d0/dangerfile.js#L171\nAnd the case which should hit this code path:\nhttps://github.com/facebook/react/blob/221f3002caa2314cba0a62950da6fb92b453d1d0/dangerfile.js#L160\n\nGiven the above context, the condition `Number === Infinity` is clearly\nmeant to be `decimal === Infinity`, which it will be if the `catch`\nstatement triggers when there is no matching base artifact. Without this\nfix, the primitive value `Infinity` is passed to\n`percentFormatter.format(decimal)`, resulting in the string `'+∞%'`.\nWith this fix, the resulting string will be the intended `'New file'`.\n\n## [Resolves issue\n32278](https://github.com/facebook/react/issues/32278)"
        }
      },
      {
        "sha": "9ff42a8798863c995523e284142b47e3cdfaee80",
        "commit": {
          "message": "Permit non-`DEV` Elements in `React.Children` w/ `DEV` (#32117)"
        }
      },
      {
        "sha": "a657bc5dee29da313d2a03e7864b0665859bc7a8",
        "commit": {
          "message": "build(eslint-plugin-react-hooks): add dev dependencies for typescript migration (#32279)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\nContributing to https://github.com/facebook/react/pull/32240, this\nchange adds the dev dependencies needed to support the migration of the\nplugin to typescript."
        }
      },
      {
        "sha": "19ca800caa01eec2f5e65e547c67b11592bec8b0",
        "commit": {
          "message": "Reconciler: Combine identical cases in findParent (#32210)\n\n## Summary\r\n\r\nWhen lookup `Parent`, `HostRoot` and `HostPortal` should be merged,\r\nbecause when creating a `Portal`, it will also include\r\n`containerInfo`(So we can directly use this `containerInfo` to delete\r\nthe real DOM nodes.), so there is no need to handle them separately.\r\n\r\n## How did you test this change?\r\n\r\nNo behavior changes, all existing tests pass."
        }
      },
      {
        "sha": "152bfe3769f87e29c8d68cb87fdb608d2483b7f1",
        "commit": {
          "message": "[compiler][rfc] Hacky retry pipeline for fire (#32164)\n\nHacky retry pipeline for when transforming `fire(...)` calls encounters\r\nvalidation, todo, or memoization invariant bailouts. Would love feedback\r\non how we implement this to be extensible to other compiler\r\nnon-memoization features (e.g. inlineJSX)\r\n\r\nSome observations:\r\n- Compiler \"front-end\" passes (e.g. lower, type, effect, and mutability\r\ninferences) should be shared for all compiler features -- memo and\r\notherwise\r\n- Many passes (anything dealing with reactive scope ranges, scope blocks\r\n/ dependencies, and optimizations such as ReactiveIR #31974) can be left\r\nout of the retry pipeline. This PR hackily skips memoization features by\r\nremoving reactive scope creation, but we probably should restructure the\r\npipeline to skip these entirely on a retry\r\n- We should maintain a canonical set of \"validation flags\"\r\n\r\nNote the newly added fixtures are prefixed with `bailout-...` when the\r\nretry fire pipeline is used. These fixture outputs contain correctly\r\ninserted `useFire` calls and no memoization."
        }
      },
      {
        "sha": "1f0b03ced0d459129069d565cf5f8e5567881441",
        "commit": {
          "message": "DevTools: fix host component filter option title (#32296)\n\nOverlook that in https://github.com/facebook/react/pull/32086, because\r\nof ternany, it is already string literals, so html entities names no\r\nlonger needed."
        }
      },
      {
        "sha": "a4b2d0d51854b10ca0346ab8977da4975d2a7498",
        "commit": {
          "message": "fix[react-devtools-fusebox]: add extension globals to build (#32297)\n\nWe started using these globals in `react-devtools-shared/src/frontend`\r\ncode, forward-fixing https://github.com/facebook/react/pull/32262."
        }
      },
      {
        "sha": "10a4c88f58233074f293ab387b73e96b67192538",
        "commit": {
          "message": "[compiler] Handle TSInstantiationExpression in lowerExpression (#32302)\n\nFix #31745"
        }
      },
      {
        "sha": "442150e0e2783ce9ab407a113acd2656752323d2",
        "commit": {
          "message": "build(eslint-plugin-react-hooks): tsconfig and global types (#32283)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\nContributing to https://github.com/facebook/react/pull/32240, this\nchange adds the tsconfig, tsup config, and estree type declarations that\nwill be needed for that plugin's typescript migration."
        }
      },
      {
        "sha": "0a82580bfc80538c5ce914514dc86b17c8889954",
        "commit": {
          "message": "[ci] Only notify discord on core team label (#32303)\n\nRather than notify on every label event on a PR by a core team member,\nonly do so for the specific core team label event."
        }
      },
      {
        "sha": "f82c662b8d28461ffdb9f82f3fc26b7b54b9bef5",
        "commit": {
          "message": "[Flight Parcel] Implement findSourceMapURL (#32294)\n\nThis implements `findSourceMapURL` in react-server-dom-parcel, enabling\nsource maps for replayed server errors on the client. It utilizes a new\nendpoint in the Parcel dev server that returns the source map for a\ngiven bundle/file. The error overlay UI has also been updated to handle\nthese stacks. See https://github.com/parcel-bundler/parcel/pull/10082\n\nAlso updated the fixture to the latest Parcel canary. A few APIs have\nchanged. We do have a higher level library wrapper now (`@parcel/rsc`\nadded in https://github.com/parcel-bundler/parcel/pull/10074) but I left\nthe fixture using the lower level APIs directly here since it is easier\nto see how react-server-dom-parcel is used."
        }
      },
      {
        "sha": "8bda71558c8b6f9f19af33271f1bfd0251a1c071",
        "commit": {
          "message": "[Fiber] support hydration when rendering Suspense anywhere (#32224)\n\nfollow up to https://github.com/facebook/react/pull/32163\r\n\r\nThis continues the work of making Suspense workable anywhere in a\r\nreact-dom tree. See the prior PRs for how we handle server rendering and\r\nclient rendering. In this change we update the hydration implementation\r\nto be able to locate expected nodes. In particular this means hydration\r\nunderstands now that the default hydration context is the document body\r\nwhen the container is above the body.\r\n\r\nOne case that is unique to hydration is clearing Suspense boundaries.\r\nWhen hydration fails or when the server instructs the client to recover\r\nan errored boundary it's possible that the html, head, and body tags in\r\nthe initial document were written from a fallback or a different primary\r\ncontent on the server and need to be replaced by the client render.\r\nHowever these tags (and in the case of head, their content) won't be\r\ninside the comment nodes that identify the bounds of the Suspense\r\nboundary. And when client rendering you may not even render the same\r\nsingletons that were server rendered. So when server rendering a\r\nboudnary which contributes to the preamble (the html, head, and body tag\r\nopenings plus the head contents) we emit a special marker comment just\r\nbefore closing the boundary out. This marker encodes which parts of the\r\npreamble this boundary owned. If we need to clear the suspense boundary\r\non the client we read this marker and use it to reset the appropriate\r\nsingleton state."
        }
      },
      {
        "sha": "0605cd9f38f8b9d0ca6f8bd9dd3409db8d6c5c81",
        "commit": {
          "message": "[Fiber] Disable comments as containers in OSS (#32250)\n\n3 years ago we partially disabled comment nodes as valid containers.\r\nSome unflagged support was left in due to legacy APIs like\r\n`unmountComponentAtNode` and `unstable_renderSubtreeIntoContainer` but\r\nthese were since removed in React 19. This update flags the remaining\r\nuses of comments as containers."
        }
      },
      {
        "sha": "32b411496b92455cede3b286eb37c8b183989051",
        "commit": {
          "message": "Set enableViewTransition to dynamic for www (#32306)\n\nUnblocks internal experimentation"
        }
      },
      {
        "sha": "d85cf3e5ab6e049626a8bedddffbaec05c516195",
        "commit": {
          "message": "DevTools: refactor NativeStyleEditor, don't use custom cache implementation (#32298)\n\nWe have this really old (5+ years) feature for inspecting native styles\r\nof React Native Host components.\r\n\r\nWe also have a custom Cache implementation in React DevTools, which was\r\nforked from React at some point. We know that this should be removed,\r\nbut it spans through critical parts of the application, like fetching\r\nand caching inspected element.\r\n\r\nBefore this PR, this was also used for caching native style and layouts\r\nof RN Host components. This approach is out of date, and was based on\r\nthe presence of Suspense boundary around inspected element View, which\r\nwe have removed to speed up element inspection -\r\nhttps://github.com/facebook/react/pull/30555.\r\n \r\nLooks like I've introduced a regression in\r\nhttps://github.com/facebook/react/pull/31956:\r\n- Custom Cache implementation will throw thenables and suspend.\r\n- Because of this, some descendant Suspense boundaries will not resolve\r\nfor a long time, and React will throw an error\r\nhttps://react.dev/errors/482.\r\n\r\nI've switched from a usage of this custom Cache implementation to a\r\nnaive fetching in effect and keeping the layout and style in a local\r\nstate of a Context, which will be propagated downwards. The race should\r\nbe impossible, this is guaranteed by the mechanism for queueing messages\r\nthrough microtasks queue.\r\n\r\nThe only downside is the UI. If you quickly switch between 2 elements,\r\nand one of them has native style, while the other doesn't, UI will feel\r\njumpy. We can address this later with a Suspense boundary, if needed."
        }
      },
      {
        "sha": "ff6283340a10bb72ad0fb16ca027606a9ea1e67c",
        "commit": {
          "message": "Export addTransitionType for www (#32311)\n\nneed dis based api"
        }
      },
      {
        "sha": "b48e739998432fc9672a42d0d04515980b8cae82",
        "commit": {
          "message": "[Fiber] `getHoistableRoot()` should account for Document containers (#32321)\n\nWhile modern DOM implementations all support getRootNode if you are\r\nrunning React in a runtime which does not the fallback logic which uses\r\n`.ownerDocument` works everywhere except when the container is a\r\nDocument itself. This change corrects this by returning the container\r\nintsance if it is a Document type."
        }
      },
      {
        "sha": "a0fdb6306043b9f049106e58dcec107d8dbed2b1",
        "commit": {
          "message": "[Fiber][Dev] Relax dom nesting validation when the root is a Document, html tag, or body tag (#32252)\n\nfollowup to\r\n* https://github.com/facebook/react/pull/32069\r\n* https://github.com/facebook/react/pull/32163\r\n* https://github.com/facebook/react/pull/32224\r\n\r\nin react-dom in Dev we validate that the tag nesting is valid. This is\r\nmotivated primarily because while browsers are tolerant to poor HTML\r\nthere are many cases that if server rendered will be hydrated in a way\r\nthat will break hydration.\r\n\r\nWith the changes to singleton scoping where the document body is now the\r\nimplicit render/hydration context for arbitrary tags at the root we need\r\nto adjust the validation logic to allow for valid programs such as\r\nrendering divs as a child of a Document (since this div will actually\r\ninsert into the body)."
        }
      },
      {
        "sha": "ae3190c5e929ec3b899734e2a6aface7cd4e42d0",
        "commit": {
          "message": "React DevTools 6.1.0 -> 6.1.1 (#32326)\n\nFull list of changes:\r\n* DevTools: refactor NativeStyleEditor, don't use custom cache\r\nimplementation ([hoxyq](https://github.com/hoxyq) in\r\n[#32298](https://github.com/facebook/react/pull/32298))\r\n* fix[react-devtools-fusebox]: add extension globals to build\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32297](https://github.com/facebook/react/pull/32297))\r\n* DevTools: fix host component filter option title\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32296](https://github.com/facebook/react/pull/32296))\r\n* chore[DevTools]: make clipboardWrite optional for chromium\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#32262](https://github.com/facebook/react/pull/32262))\r\n* DevTools: support useEffectEvent and forward-fix experimental prefix\r\nsupport ([hoxyq](https://github.com/hoxyq) in\r\n[#32106](https://github.com/facebook/react/pull/32106))"
        }
      },
      {
        "sha": "44c3d3d665761bba86eb5c143a6eafc0ebf73263",
        "commit": {
          "message": "fix[react-devtools-standalone]: define missing globals (#32327)\n\nSame as what we did for `react-devtools-fusebox` in\r\nhttps://github.com/facebook/react/pull/32297."
        }
      },
      {
        "sha": "8759c5c8d6aef34df576827215ff7ebaeafc79ea",
        "commit": {
          "message": "Ship enableFabricCompleteRootInCommitPhase (#32318)"
        }
      },
      {
        "sha": "76e44c29110f12caff8302da624076b68547b8ef",
        "commit": {
          "message": "[compiler] Improve error messages for unhandled terminal and instruction kinds (#32324)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\nImprove the error message, as the value is currently an object instead\nof a string, which results in it being converted to '[object Object]'.\n\n## How did you test this change?\nAlready tested locally.\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->"
        }
      },
      {
        "sha": "989b0cccc215e5c4692552b0cc01d23938dcf99b",
        "commit": {
          "message": "[compiler] Add simple walltime measurement (#32331)\n\nAdds a new Timing logger event to the compiler which currently only\nrecords the walltime of running the compiler from the time the babel\nplugin's Program visitor enters to the time it exits.\n\nTo enable, run the compiler with `ENABLE_REACT_COMPILER_TIMINGS=1 ...`\nor `export ENABLE_REACT_COMPILER_TIMINGS=1` to set it by default."
        }
      },
      {
        "sha": "bc78de3a521f65f756579fee0996ec5c81f3af73",
        "commit": {
          "message": "[ci] Use 'opened' event for discord notifications (#32332)\n\nWe don't need to wait for it to be labeled now that we have the shared\nmaintainer check workflow.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32332).\n* #32333\n* __->__ #32332"
        }
      },
      {
        "sha": "569c3b28ee968df58ff3c55be9a8efa2ee72fc82",
        "commit": {
          "message": "[ci] Combine sizebot jobs (#32333)\n\nThere's no real reason to have 2 jobs for sizebot. It's more of a\nhistorical artifact from before the GH migration. Merging them should\nrequire one less worker needing to be provisioned and some of the extra\noverhead\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32333).\n* __->__ #32333\n* #32332"
        }
      },
      {
        "sha": "7588b6b291b17fb2130244115b07e9945a864626",
        "commit": {
          "message": "[ci] Disallow PRs against builds branch (#32335)\n\nOur internal build infra relies on a 1:1 mapping between `main` and the\n2 build branches. Directly committing changes to those branches breaks\nthat infra.\n\nAdds a simple workflow to leave a comment and decline the PR."
        }
      },
      {
        "sha": "062fb31155e42b6997a35b97180055814471620c",
        "commit": {
          "message": "[ci] Fix typo (#32337)\n\nOops."
        }
      },
      {
        "sha": "594ea533d39f71fa16503c0e5d5e146e9278647e",
        "commit": {
          "message": "Remove useActionState Hook export from experimental react-server condition (#32342)\n\nThis Hook is not available in RSC environments. This is already the case\nin stable but not in experimental for some reason. Probably an\noversight."
        }
      },
      {
        "sha": "93b58361d9c9632acdda76eb8a1a582d1ff9701a",
        "commit": {
          "message": "Trigger Discord notification when draft PR is set to \"ready for review\" (#32344)\n\nFollow-up for #32332. The Discord webhook seems to ignore draft PRs,\nwhich is a good thing. But when a draft PR is then later set to \"ready\nfor review\" we do want to send another notification that should not be\nfiltered out."
        }
      },
      {
        "sha": "3dd2c627707fea4f45fd8e5cc583036a72e3f77b",
        "commit": {
          "message": "[react-native] fix divergence in synced code (#32348)\n\nAlternative to #32334"
        }
      },
      {
        "sha": "cd90a4d8c0d5dbaa8ab61e839b112b1518d5058f",
        "commit": {
          "message": "[react-native] Suppress Flow nonstrict-import check in ReactNativeTypes (#32349)\n\nSummary: Unblock internal sync.\n\nTest Plan:\n\nReviewers:\n\nSubscribers:\n\nTasks:\n\nTags:"
        }
      },
      {
        "sha": "0a7dc1b1c714e74a1594c712d2317969e6421685",
        "commit": {
          "message": "[devtools] Introduce REACT_DEVTOOLS_PORT for the standalone react-devtools (#30767)\n\n## Summary\r\n\r\nThis PR attempts to make running the React DevTools a little friendlier\r\nin projects that are not completely React.\r\n\r\nAt the moment, running the DevTools with `npx react-devtools` will\r\ndefault to the port to use the `PORT` env variable otherwise it'll fall\r\nback to `8097`. `PORT` is a common env variable, so we can get into this\r\nstrange situation where the a Rails server (eg Puma) is using `PORT`,\r\nand then the React DevTools attempts to boot using the same `PORT`.\r\n\r\nThis PR introduces a dedicated env variable, `REACT_DEVTOOLS_PORT` to\r\nassist in this scenario.\r\n\r\n## How did you test this change?\r\n\r\nI'm using fish shell, so I did the following, please let me know if\r\nthere's a better way:\r\n\r\n```sh\r\ncd packages/react-devtools\r\nset -x PORT 1000\r\nset -x REACT_DEVTOOLS_PORT 2000\r\nnode bin.js\r\n```\r\n\r\nWe can see in the UI that it's listening on `2000`. Without this PR,\r\nit'd listen on `1000`:\r\n\r\n![Screenshot 2024-08-21 at 10 45\r\n42 AM](https://github.com/user-attachments/assets/a5c7590c-1b54-4ac8-9a8b-8eb66ff67cfb)"
        }
      },
      {
        "sha": "899e3d1297ec15a5aa8d73e2f1bd478918090a12",
        "commit": {
          "message": "[crud] Narrow resource type (#32203)\n\nSmall refactor to the `resource` type to narrow it to an arbitrary\nobject or void/null instead of the top type. This makes the overload on\nuseEffect simpler since the return type of create is no longer widened\nto the top type when we merge their definitions.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32203).\n* #32206\n* #32205\n* #32204\n* __->__ #32203"
        }
      },
      {
        "sha": "0461c0d8a49730d1c8ebca2071d9bb7adfc8ac92",
        "commit": {
          "message": "[crud] Rename useResourceEffect flag (#32204)\n\nRename the flag in preparation for the overload.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32204).\n* #32206\n* #32205\n* __->__ #32204"
        }
      },
      {
        "sha": "2c5fd26c07c0fb94ff21a6c10c5a757ef3c5d6a4",
        "commit": {
          "message": "[crud] Merge useResourceEffect into useEffect (#32205)\n\nMerges the useResourceEffect API into useEffect while keeping the\nunderlying implementation the same. useResourceEffect will be removed in\nthe next diff.\n\nTo fork between behavior we rely on a `typeof` check for the updater or\ndestroy function in addition to the CRUD feature flag. This does now\nhave to be checked every time (instead of inlined statically like before\ndue to them being different hooks) which will incur some non-zero amount\n(possibly negligble) of overhead for every effect.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32205).\n* #32206\n* __->__ #32205"
        }
      },
      {
        "sha": "a69b80d07e5d1bf363ed15d6209a55b35e0765c2",
        "commit": {
          "message": "[crud] Remove useResourceEffect (#32206)\n\nRemoves useResourceEffect.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32206).\n* __->__ #32206\n* #32205"
        }
      },
      {
        "sha": "192555bb0ed88db30f91c58651c421f178f90384",
        "commit": {
          "message": "Added dev-only warning for null/undefined create in use*Effect (#32355)\n\n## Summary\n\nFixes #32354.\n\nRe-creation of #15197: adds a dev-only warning if `create == null` to\nthe three `use*Effect` functions:\n\n* `useEffect`\n* `useInsertionEffect`\n* `useLayoutEffect`\n\nUpdates the warning to match the same text given in the\n`react/exhaustive-deps` lint rule.\n\n## How did you test this change?\n\nI applied the changes manually within `node_modules/` on a local clone\nof\nhttps://github.com/JoshuaKGoldberg/repros/tree/react-use-effect-no-arguments.\n\nPlease pardon me for opening a PR addressing a not-accepted issue. I was\nexcited to get back to #15194 -> #15197 now that I have time. 🙂\n\n---------\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>"
        }
      },
      {
        "sha": "f83903bfcc5a61811bd1b69b14f0ebbac4754462",
        "commit": {
          "message": "[RN] Set up test to create public instances lazily in Fabric (#32363)\n\n## Summary\r\n\r\nIn React Native, public instances and internal host nodes are not\r\nrepresented by the same object (ReactNativeElement & shadow nodes vs.\r\njust DOM elements), and the only one that's required for rendering is\r\nthe shadow node. Public instances are generally only necessary when\r\naccessed via refs or events, and that usually happens for a small amount\r\nof components in the tree.\r\n\r\nThis implements an optimization to create the public instance on demand,\r\ninstead of eagerly creating it when creating the host node. We expect\r\nthis to improve performance by reducing the logic we do per node and the\r\nnumber of object allocations.\r\n\r\n## How did you test this change?\r\n\r\nManually synced the changes to React Native and run Fantom tests and\r\nbenchmarks, with the flag enabled and disabled. All tests pass in both\r\ncases, and benchmarks show a slight but consistent performance\r\nimprovement."
        }
      },
      {
        "sha": "d814852baf03c61b1e32b59a45c3f72e00577ac8",
        "commit": {
          "message": "[compiler] Upgrade esbuild (#32368)\n\nJust a simple upgrade"
        }
      },
      {
        "sha": "5a78dd7cfec4217c1feb89ee6312c13f40b01aed",
        "commit": {
          "message": "[ci] Also notify compiler ready for review PRs (#32371)\n\nSimilar to #32344"
        }
      },
      {
        "sha": "e0131f1edae0fc411bf8abb2fed211ca07af60fe",
        "commit": {
          "message": "fix(devtools): Handle nullish values passed to `formatConsoleArguments` (#32372)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nWhen using React Devtools, calling `console.log('%s', null)` in userland\r\ncan cause it to throw an error:\r\n\r\n```\r\nTypeError: Cannot read properties of null (reading 'toString')\r\n```\r\n\r\n## How did you test this change?\r\n\r\nAdded a unit test.\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nSee https://github.com/47ng/nuqs/issues/808."
        }
      },
      {
        "sha": "cbbe8666a8d6e6f1b81dffb11bd5d767e4acd6ac",
        "commit": {
          "message": "fix value formatting of proxies of class instances (#30880)\n\nFor Hookstate Proxies of class instances, `data.constructor.name`\r\nreturns `Proxy({})`, so use\r\n`Object.getPrototypeOf(data).constructor.name` instead, which works\r\ncorrectly from my testing.\r\n\r\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nReact DevTools immediately bricks itself if you inspect any component\r\nthat has a prop that is a Hookstate that wraps a class instance ...\r\nbecause these are proxies where `data.constructor.name` returns some\r\nun-cloneable object, but `Object.getPrototypeOf(data)` doesn't return\r\n`Object` (it returns the prototype of the class inside).\r\n\r\n## How did you test this change?\r\n\r\nThis part of the code has no associated tests at all.\r\n\r\nTechnically,\r\n`packages/react-devtools-shared/src/__tests__/legacy/inspectElement-test.js`\r\nexists, but I tried `yarn test` and these tests aren't even executed\r\nanymore. I can't figure it out, so whatever.\r\n\r\nIf you run this code:\r\n\r\n```js\r\n    class Class {}\r\n    const instance = new Class();\r\n\r\n    const instanceProxy = new Proxy(instance, {\r\n      get(target, key, receiver) {\r\n        if (key === 'constructor') {\r\n          return { name: new Proxy({}, {}) };\r\n        }\r\n\r\n        return Reflect.get(target, key, receiver);\r\n      },\r\n    });\r\n```\r\n\r\nthen `instanceProxy.constructor.name` returns some proxy that cannot be\r\ncloned, but `Object.getPrototypeOf(instanceProxy).constructor.name`\r\nreturns the correct value.\r\n\r\nThis PR fixes the devtools to use\r\n`Object.getPrototypeOf(instanceProxy).constructor.name`.\r\n\r\nI modified my local copy of devtools to use this method and it fixed the\r\nbricking that I experienced.\r\n\r\nRelated #29954"
        }
      },
      {
        "sha": "c6a7e18636e610efd3aa7a437bbcaf321bf73abd",
        "commit": {
          "message": "Ensure `captureOwnerStack` returns `null` when no stack is available (#32353)\n\nCo-authored-by: Younes Henni <youneshenniwrites@gmail.com>"
        }
      },
      {
        "sha": "ed8b68dd178af17a2dd36c8678f81f8b454559a9",
        "commit": {
          "message": "Stop exporting dev-only methods in OSS production builds (#32200)"
        }
      },
      {
        "sha": "32b0cad8f74da3d6e8b07f4ffbad26dfe8d8a71a",
        "commit": {
          "message": "Enable owner stacks in Canary builds (#32053)\n\nPending internal decision to ship in Canary.\nStill off for FB builds.\n\nDocs: https://github.com/reactjs/react.dev/pull/7427"
        }
      },
      {
        "sha": "a53da6abe1593483098df2baf927fe07d80153a5",
        "commit": {
          "message": "Add useSwipeTransition Hook Behind Experimental Flag (#32373)\n\nThis Hook will be used to drive a View Transition based on a gesture.\n\n```js\nconst [value, startGesture] = useSwipeTransition(prev, current, next);\n```\n\nThe `enableSwipeTransition` flag will depend on `enableViewTransition`\nflag but we may decide to ship them independently. This PR doesn't do\nanything interesting yet. There will be a lot more PRs to build out the\nactual functionality. This is just wiring up the plumbing for the new\nHook.\n\nThis first PR is mainly concerned with how the whole starts (and stops).\nThe core API is the `startGesture` function (although there will be\nother conveniences added in the future). You can call this to start a\ngesture with a source provider. You can call this multiple times in one\nevent to batch multiple Hooks listening to the same provider. However,\neach render can only handle one source provider at a time and so it does\none render per scheduled gesture provider.\n\nThis uses a separate `GestureLane` to drive gesture renders by marking\nthe Hook as having an update on that lane. Then schedule a render. These\nrenders should be blocking and in the same microtask as the\n`startGesture` to ensure it can block the paint. So it's similar to\nsync.\n\nIt may not be possible to finish it synchronously e.g. if something\nsuspends. If so, it just tries again later when it can like any other\nrender. This can also happen because it also may not be possible to\ndrive more than one gesture at a time like if we're limited to one View\nTransition per document. So right now you can only run one gesture at a\ntime in practice.\n\nThese renders never commit. This means that we can't clear the\n`GestureLane` the normal way. Instead, we have to clear only the root's\n`pendingLanes` if we don't have any new renders scheduled. Then wait\nuntil something else updates the Fiber after all gestures on it have\nstopped before it really clears."
        }
      },
      {
        "sha": "e670e72fa076449e40172e20d17cc67c1c15419c",
        "commit": {
          "message": "Change TouchedViewDataAtPoint type in ReactNativeTypes to use supported by Flow tooling syntax (#32382)\n\n## Summary\r\n\r\nThe `flow-api-translator` from the `hermes` repo does not support flow\r\ntype spreads. It is currently not able to digest the ReactNativeTypes\r\nfile as it contains unsupported syntax. The simplest solution is to\r\nchange the type of the `TouchedViewDataAtPoint` to equivalent, yet\r\nsupported by the Flow tooling. In this case the intersection can be used\r\nas\r\nthe `TouchedViewDataAtPoint` and `InspectorData` have no common\r\nproperty.\r\n\r\n## How did you test this change?\r\n\r\nRun yarn flow native"
        }
      },
      {
        "sha": "0d9834caeb3b334eaa1be45f136499f51303e7d3",
        "commit": {
          "message": "build: add support to the rollup build for building typescript packages (#32393)"
        }
      },
      {
        "sha": "037b25cfdcd18deea0e1c6c2e8d2548dbf32f7f3",
        "commit": {
          "message": "test(eslint): create eslint test fixtures (#32396)"
        }
      },
      {
        "sha": "5adf40208f4a2f56bda5c059d18ce578c5091dab",
        "commit": {
          "message": "feat(eslint-plugin-react-hooks): convert to typescript and package type declarations (#32240)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\nThis change converts the eslint hooks plugin to typescript, which also\nallows us to include type declarations in the package, for those using\n[typescript eslint\nconfigs](https://eslint.org/blog/2025/01/eslint-v9.18.0-released/#stable-typescript-configuration-file-support).\n\n### Constituent changes that should land before this one\n\n- [x] ~https://github.com/facebook/react/pull/32276~\n- [x] https://github.com/facebook/react/pull/32279\n- [x] https://github.com/facebook/react/pull/32283\n- [x] https://github.com/facebook/react/pull/32393\n- [x] https://github.com/facebook/react/pull/32396\n\nCloses #30119\n\n---------\n\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>"
        }
      },
      {
        "sha": "be91130f184f04c6e7bb9ff18222aba2ef2f96f6",
        "commit": {
          "message": "chore: remove `devEngines` declaration in root package (#32398)\n\nThis change removes the `devEngines` declaration in the root package. It\ndidn't match the package.json spec and in npm 10.9.0 (released in\nOctober), a breaking change was introduced that checks the `devEngines`\nproperty. This causes `npm pack` calls to fail, due to the malformed\n`devEngines`. Since there's already an `.nvmrc` defined in the repo, and\nno strong need to enforce a specific node version for local development,\nthis removes the declaration altogether."
        }
      },
      {
        "sha": "eb1f77dedfc8f7491ecd39b160e4743fa39dfc99",
        "commit": {
          "message": "ci: add workflow for running the eslint plugin e2e tests (#32397)\n\nThis change adds a workflow for PR builds, that runs the e2e tests for\n`eslint-plugin-react-hooks` created in #32396\n\n![screenshot of ci tests\nrunning](https://github.com/user-attachments/assets/307a878c-92b5-44cf-84f2-3b21979b262a)"
        }
      },
      {
        "sha": "4632e36a4ef16a1af24987c56e42b664f6403e64",
        "commit": {
          "message": "refactor(eslint-plugin-react-hooks): change array type and improve conditionals (#32400)\n\n- [build(eslint-plugin-react-hooks): add\nts-linting](https://github.com/facebook/react/commit/4c0fbe73d9abc2681445f62b9450737f3df12ee2)\nThis change adds configuration to the eslint config governing\n`eslint-plugin-react-hooks` to use the typescript-eslint plugin and\nparser. It adds the typescript-recommended config, and configures the\nteam's preferred `array-type` convention.\n\n- [refactor(eslint-plugin-react-hooks): improve\nconditionals](https://github.com/facebook/react/commit/540d0d95bc5172ef95ccc2ad70b4b202b6eeedd2)\nThis change addresses several feedback items from\nhttps://github.com/facebook/react/pull/32240\n\n- [ci (eslint-e2e): exclude nested node_modules from\ncache](https://github.com/facebook/react/pull/32400/commits/a3279f46a85cfb4ddea5a863a6f7c71344280d36)\nThis change removes the nested fixture `node_modules` from being cached,\nso that the symbolic link can be made after the build happens."
        }
      },
      {
        "sha": "8a7b487e3b171c91f2fe18e9142af53f4dd83454",
        "commit": {
          "message": "[flags] enable owner stacks everywhere (#32376)\n\nthis is now canary and on everywhere"
        }
      },
      {
        "sha": "d99f8bba2e07e3bb953f0821d4da5e341136fe5c",
        "commit": {
          "message": "[compiler] Delete LoweredFunction.dependencies and hoisted instructions (#32096)\n\nLoweredFunction dependencies were exclusively used for dependency\r\nextraction (in `propagateScopeDeps`). Now that we have a\r\n`propagateScopeDepsHIR` that recursively traverses into nested\r\nfunctions, we can delete `dependencies` and their associated synthetic\r\n`LoadLocal`/`PropertyLoad` instructions.\r\n\r\n[Internal snapshot\r\ndiff](https://www.internalfb.com/phabricator/paste/view/P1716950202) for\r\nthis change shows ~.2% of files changed. I [read through ~60 of the\r\nchanged\r\nfiles](https://www.internalfb.com/phabricator/paste/view/P1733074307)\r\n- most changes are due to better outlining (due to better DCE)\r\n- a few changes in memo inference are due to changed ordering\r\n```\r\n// source\r\narr.map(() => contextVar.inner);\r\n\r\n// previous instructions\r\n$0 = LoadLocal arr\r\n$1 = $0.map\r\n// Below instructions are synthetic\r\n$2 = LoadLocal contextVar\r\n$3 = $2.inner\r\n$4 = Function deps=$3 context=contextVar {\r\n  ...\r\n}\r\n```\r\n- a few changes are effectively bugfixes (see\r\n`aliased-nested-scope-fn-expr`)\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32096).\r\n* #32099\r\n* #32286\r\n* #32104\r\n* #32098\r\n* #32097\r\n* __->__ #32096"
        }
      },
      {
        "sha": "a92acdb188990b2b64130d74ccd6437dc9db1901",
        "commit": {
          "message": "[compiler] Remove redundant InferMutableContextVariables (#32097)\n\nThis removes special casing for `PropertyStore` mutability inference\r\nwithin FunctionExpressions.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32097).\r\n* #32287\r\n* #32104\r\n* #32098\r\n* __->__ #32097"
        }
      },
      {
        "sha": "498514c04d824f88a9b77595c18c1323f4d1006f",
        "commit": {
          "message": "[compiler] Clean up deadcode: ReactiveFunctionValue (#32098)\n\n(title)\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32098).\r\n* #32287\r\n* #32104\r\n* __->__ #32098\r\n* #32097"
        }
      },
      {
        "sha": "19cc5af41ead904100a55fd2a1cfb40b1380f4be",
        "commit": {
          "message": "[compiler] Clean up deadcode: DeriveMinimalDeps (non-hir fork) (#32104)\n\n(title)\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32104).\r\n* #32287\r\n* __->__ #32104\r\n* #32098\r\n* #32097"
        }
      },
      {
        "sha": "a9575dcf62e5cb6f8b1d8f738aa75ece216d9054",
        "commit": {
          "message": "[compiler] Represent array accesses with PropertyLoad (#32287)\n\nPrior to this PR, our HIR represented property access with numeric\r\nliterals (e.g. `myVar[0]`) as ComputedLoads. This means that they were\r\nsubject to some deopts (most notably, not being easily dedupable /\r\nhoistable as dependencies).\r\n\r\nNow, `PropertyLoad`, `PropertyStore`, etc reference numeric and string\r\nliterals (although not yet string literals that aren't valid babel\r\nidentifiers). The difference between PropertyLoad and ComputedLoad is\r\nfuzzy now (maybe we should rename these).\r\n- PropertyLoad: property keys are string and numeric literals, only when\r\nthe string literals are valid babel identifiers\r\n- ComputedLoad: non-valid babel identifier string literals (rare) and\r\nother non-literal expressions\r\n\r\nThe biggest feature from this PR is that it trivially enables\r\narray-indicing expressions as dependencies. The compiler can also\r\nspecify global and imported types for arrays (e.g. return value of\r\n`useState`)\r\n\r\n\r\nI'm happy to close this if it complicates more than it helps --\r\nalternative options are to entirely rely on instruction reordering-based\r\napproaches like ReactiveGraphIR or make dependency-specific parsing +\r\nhoisting logic more robust."
        }
      },
      {
        "sha": "86b191347474fa98f002217ed88926efc8164c1e",
        "commit": {
          "message": "[compiler][be] Clean up bug test fixtures; evaluate more fixtures (#31812)\n\nTest fixtures testing different compiler features (e.g. non-auto\r\nmemoization) should live in separate directories.\r\n\r\nRemove bug-prefixed fixtures that have since been fixed\r\n\r\nAdd test evaluator export to more fixtures"
        }
      },
      {
        "sha": "a84862dbdc8dada08a9d1df1c72144cd767704b6",
        "commit": {
          "message": "[eslint] Target ES5 (#32420)\n\nUpdate eslint-plugin-react-hooks to be built targetting ES5 instead. For\nvarious reasons our internal infra relies on these files being built\nalready downleveled."
        }
      },
      {
        "sha": "fcb4e0f137db6efa6e180ad12dcfaabd0c590219",
        "commit": {
          "message": "[compiler] remove invariant to account for backedges (#32417)\n\nFixes https://github.com/facebook/react/issues/32269, see comments for\ndetails.\n\nAdded test fixture for repro"
        }
      },
      {
        "sha": "5f31228d7d17f5959a99456d89a52d467ee2f329",
        "commit": {
          "message": "[compiler][playground] Upgrade to Next 15.2.0-canary.64 (#32428)\n\nUpgrade compiler playground to use the newest nextjs release, which\nincludes react compiler transform pipeline optimizations\nhttps://github.com/vercel/next.js/pull/75676/.\n\nAlso made a drive-by fix to avoid the error `Cannot update a component\n('Router') while rendering a different component ('StoreProvider'). To\nlocate the bad setState() call inside 'StoreProvider', follow the stack\ntrace as described in https://react.dev/link/setstate-in-render`. The\nbad setState came from `history.replaceState({}, '', \\`#${hash}\\`);`.\n\nPrior to this, playground ran side effects in a reducer (i.e. during\nrender). These have now been moved an effect."
        }
      },
      {
        "sha": "885532c124f32436723cd51627d06de6e8c13fdd",
        "commit": {
          "message": "Revert \"Ship enableFabricCompleteRootInCommitPhase (#32318)\" (#32434)\n\nThis reverts commit 8759c5c8d6aef34df576827215ff7ebaeafc79ea /\nhttps://github.com/facebook/react/pull/32318\n\nWe discovered that the experiment setup for this was faulty and we need\nto re-run as a back test."
        }
      },
      {
        "sha": "70f1d766e8ae7ca3701193abb8c8a9f2fdbdaa9d",
        "commit": {
          "message": "[flow] Eliminate usage of global React types in ReactNativeTypes.js (#32330)"
        }
      },
      {
        "sha": "88479c6fc31ba2902587694338350ae95733d6b2",
        "commit": {
          "message": "Rerender useSwipeTransition when direction changes (#32379)\n\nWe can only render one direction at a time with View Transitions. When\nthe direction changes we need to do another render in the new direction\n(returning previous or next).\n\nTo determine direction we store the position we started at and anything\nmoving to a lower value (left/up) is \"previous\" direction (`false`) and\nanything else is \"next\" (`true`) direction.\n\nFor the very first render we won't know which direction you're going\nsince you're still on the initial position. It's useful to start the\nrender to allow the view transition to take control before anything\nshifts around so we start from the original position. This is not\nguaranteed though if the render suspends.\n\nFor now we start the first render by guessing the direction such as if\nwe know that prev/next are the same as current. With the upcoming auto\nstart mode we can guess more accurately there before we start. We can\nalso add explicit APIs to `startGesture` but ideally it wouldn't matter.\nIdeally we could just start after the first change in direction from the\nstarting point."
        }
      },
      {
        "sha": "662957cc735a7f630b497ada45af8ff39684d2b9",
        "commit": {
          "message": "Allow passing range option to useSwipeTransition (#32412)\n\nStacked on #32379\n\nTrack the range offsets along the timeline where previous/current/next\nis. This can also be specified as an option. This lets you model more\nthan three states along a timeline by clamping them and then updating\nthe \"current\" as you go.\n\nIt also allows specifying the \"current\" offset as something different\nthan what it was when the gesture started such as if it has to start\nafter scroll has already happened (such as what happens if you listen to\nthe \"scroll\" event)."
        }
      },
      {
        "sha": "27ba5e8b1fcb5724e653caf154dcf4f9519f08f1",
        "commit": {
          "message": "Add Example of a SwipeRecognizer (#32422)\n\nStacked on #32412.\n\nTo effectively `useSwipeTransition` you need something to start and stop\nthe gesture as well as triggering an Action.\n\nThis adds an example Gesture Recognizer to the fixture. Instead of\nhaving this built-in to React itself, instead the idea is to leave this\nto various user space Component libraries. It can be done in different\nways for different use cases. It could use JS driven or native\nScrollTimeline or both.\n\nThis example uses a native scroll with scroll snapping to two edges. If\nyou swipe far enough to snap to the other edge, it triggers an Action at\nthe end.\n\nThis particular example uses a `position: sticky` to wrap the content of\nthe Gesture Recognizer. This means that it's inert by itself. It doesn't\nscroll its content just like a plain JS recognizer using pointer events\nwould. This is useful because it means that scrolling doesn't affect\ncontent before we start (the \"scroll\" event fires after scrolling has\nalready started) so we don't have to both trying to start it earlier. It\nalso means that scrolling doesn't affect the live content which can lead\nto unexpected effects on the View Transition.\n\nI find the inert recognizer the most useful pairing with\n`useSwipeTransition` but it's not the only way to do it. E.g. you can\nalso have a scrollable surface that uses plain scrolling with snapping\nand then just progressively enhances swiping between steps."
        }
      },
      {
        "sha": "9b042f9d593f965d8c7a42f8f5fce322f403381b",
        "commit": {
          "message": "[Fizz] Responsive images should not be preloaded with link headers (#32445)\n\nLink headers are optionally supported for cases where you prefer to send\nresource loading hints before you're ready to send the body of a\nrequest. While many resources can be correctly preloaded from a link\nheader responsive images are currently not supported and end up\npreloading the default src rather than the correctly sized image. Until\nresponsive images are supported React will not allow these images to\npreload as headers and will retain them to preload as HTML.\n\ncloses: #32437"
        }
      },
      {
        "sha": "ad03c48a71cb7d5f7927b527cb9a8da1a3286875",
        "commit": {
          "message": "use-sync-external-store: Add `exports` field to `package.json` (#25231)"
        }
      },
      {
        "sha": "9dd378ff1222335ff133bab2d61001fcc84a1c56",
        "commit": {
          "message": "[RN] Move definition of public instances to ReactNativePrivateInterface (#32446)\n\n## Summary\n\n> [!NOTE]\n> This only modifies types, so shouldn't have an impact at runtime.\n\nSome time ago we moved some type definitions from React to React Native\nin #26437.\n\nThis continues making progress on that so values that are created by\nReact Native and passed to the React renderer (in this case public\ninstances) are actually defined in React Native and not in React.\n\nThis will allow us to modify the definition of some of these types\nwithout having to make changes in the React repository (in the short\nterm, we want to refactor PublicInstance from an object to an interface,\nand then modify that interface to add all the new DOM methods).\n\n## How did you test this change?\n\nManually synced `ReactNativeTypes` on top of\nhttps://github.com/facebook/react-native/pull/49602 and verified Flow\npasses."
        }
      },
      {
        "sha": "25677265038b89c1ee3000e0669339ed160d9d75",
        "commit": {
          "message": "[flags] remove enableRemoveConsolePatches (#32425)\n\nwait to merge until we sync\nhttps://github.com/facebook/react/pull/32376, since that enables it in\nsome testing builds that might break"
        }
      },
      {
        "sha": "22e39ea72e9d10f6634ea580aaba49c2e759ef0e",
        "commit": {
          "message": "Include component name in \"async/await is not supported\" error message if available (#32435)"
        }
      },
      {
        "sha": "dd9974bbb86f14898c3f352672dd7232492802a2",
        "commit": {
          "message": "[forgive] Scaffold workspaces (#31917)\n\nBasic workspace setup for Forgive.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31917).\n* #31918\n* #31927\n* __->__ #31917"
        }
      },
      {
        "sha": "58def9f2e6ddd2ae3dfa9606711f1aea63a220c1",
        "commit": {
          "message": "[forgive] Add build scripts (#31927)\n\nAdds basic build scripts.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31927).\n* #31918\n* __->__ #31927"
        }
      },
      {
        "sha": "d42a90cf4f8a9eb9f41939c7d095a6a93b8816dc",
        "commit": {
          "message": "[forgive] Init (#31918)\n\nInit basic LSP. At the moment the extension doesn't do anything\ninteresting, but it does compile successfully."
        }
      },
      {
        "sha": "2e4db3344f030fe622152ecc231a7c99a81a9c9d",
        "commit": {
          "message": "Use valid CSS selectors in useId format (#32001)\n\nFor the `useId` algorithm we used colon `:` before and after.\nhttps://github.com/facebook/react/pull/23360\n\nThis avoids collisions in general by using an unusual characters. It\nalso avoids collisions when concatenated with some other ID.\nUnfortunately, `:` is not a valid character in `view-transition-name`.\n\nThis PR swaps the format from:\n\n```\n:r123:\n```\n\nTo the unicode:\n\n```\n«r123»\n```\n\nWhich is valid CSS selectors. This also allows them being used for\n`querySelector()` which we didn't really find a legit use for but seems\nok-ish.\n\nThat way you can get a view-transition-name that you can manually\nreference. E.g. to generate styles:\n\n```js\nconst id = useId();\nreturn <>\n  <style>{`\n    ::view-transition-group(${id}) { ... }\n    ::view-transition-old(${id}) { ... }\n    ::view-transition-new(${id}) { ... }\n  `}</style>\n  <ViewTransition name={id}>...</ViewTransition>\n</>;\n```"
        }
      },
      {
        "sha": "403d4fb852384b820a8fe405413891d8c74bbf5d",
        "commit": {
          "message": "Move ViewTransitions helpers to ReactFiberCommitViewTransitions (#32462)\n\nThis doesn't change anything. It just moves some functions.\n\nThis moves the view transitions helper functions into its own file. This\nis similar to how I already moved ReactFiberCommitEffects and\nReactFiberCommitHostEffects out of ReactFiberCommitWork.\n\nThis makes it a bit easier to navigate and get an overview of\nReactFiberCommitWork but another motivation is also so that I can refer\nto these helpers from\n[ReactFiberApplyGesture](https://github.com/facebook/react/pull/32451/files#diff-42297cf327dee8e01d83c85314b8965953b9674e7c4615ce6c430464dcc8550b)."
        }
      },
      {
        "sha": "92e65ca68f6bfc6be515ccacaa918e33b63911df",
        "commit": {
          "message": "[forgive] Add basic codelens provider (#32476)\n\nAdds a first codelens provider for successfully compiled functions. A\nlater PR will add an actual command that will fire when the codelens is\nclicked\n\n![Screenshot 2025-02-25 at 6 40\n20 PM](https://github.com/user-attachments/assets/924586e0-f70a-45d1-b0e6-a89af9371c8d)"
        }
      },
      {
        "sha": "ebc22ef7e15bf38dc91b7033782cedc2f43f7d6e",
        "commit": {
          "message": "[forgive][ez] Ignore test file (#32477)"
        }
      },
      {
        "sha": "2df96224779237f532ca64c8c7e8a8605c06f067",
        "commit": {
          "message": "[release] Update publishing scripts to make publishing allowlisted packages easier (#32486)\n\nIt's getting unwieldy to list every single package to skip in these\ncommands when you only want to publish one, ie\neslint-plugin-react-hooks.\n\nThis adds a new `onlyPackages` and `publishVersion` option to the\npublish commands to make that easier."
        }
      },
      {
        "sha": "227e8414cc5af227b5de339cace2447d4a81c995",
        "commit": {
          "message": "[ci] Add workflow to publish releases (#32487)\n\nAdds a new workflow to publish runtime releases from NPM. Note that I\ncommented out the actual publish command so I can test it out first."
        }
      },
      {
        "sha": "4c9392b43e9f39e17c18ef1c2cd0f0a14e85669c",
        "commit": {
          "message": "[ci] Prepare publish workflow (#32488)\n\nFixes up a few things in the script and workflow to make it possible to\nrun in CI without interactive prompts."
        }
      },
      {
        "sha": "5eb20b3007a8fafaf032c2e028c335ab09217d9f",
        "commit": {
          "message": "[ci] Fix --dry not being passed correctly (#32489)\n\nBoolean params for dry runs are true if the param exists at all, so only\nadd it if we're in dry run mode."
        }
      },
      {
        "sha": "3607f4838a8f4a87160da36aa26bb1432d7a5f11",
        "commit": {
          "message": "Add Commit Scaffolding for Gestures (#32451)\n\nThis adds a `ReactFiberApplyGesture` which is basically intended to be a\nfork of the phases in `ReactFiberCommitWork` except for the fake commit\nthat `useSwipeTransition` does. So far none of the phases are actually\nimplemented yet. This is just the scaffolding around them so I can fill\nthem in later.\n\nThe important bit is that we call `startViewTransition` (via the\n`startGestureTransition` Config) when a gesture starts. We add a paused\nanimation to prevent the transition from committing (even if the\nScrollTimeline goes to 100%). This also locks the documents so that we\ncan't commit any other Transitions until it completes.\n\nWhen the gesture completes (scroll end) then we stop the gesture View\nTransition. If there's no new work scheduled we do that immediately but\nif there was any new work already scheduled, then we assume that this\nwill potentially commit the new state. So we wait for that to finish.\nThis lets us lock the animation in its state instead of snapping back\nand then applying the real update.\n\nUsing this technique we can't actually run a View Transition from the\ncurrent state to the actual committed state because it would snap back\nto the beginning and then run the View Transition from there. Therefore\nany new commit needs to skip View Transitions even if it should've\ntechnically animated to that state. We assume that the new state is the\nsame as the optimistic state you already swiped to. An alternative to\nthis technique could be to commit the optimistic state when we cancel\nand then apply any new updates o top of that. I might explore that in\nthe future.\n\nRegardless it's important that the `action` associated with the swipe\nschedules some work before we cancel. Otherwise it risks reverting\nfirst. So I had to update this in the fixture."
        }
      },
      {
        "sha": "7e2ea902f839264fd327b0df5fae4f6ad8359952",
        "commit": {
          "message": "[ci] Fix discord notification title (#32491)\n\nfun times\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32491).\n* #32492\n* __->__ #32491"
        }
      },
      {
        "sha": "56c7d1070aabe42b955ea0006477ea1ca02dd0c5",
        "commit": {
          "message": "[ci] Upload release for easier debugging (#32492)\n\nUploads the releases that were published in case to help with debugging\nor verifying a dry run.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32492).\n* __->__ #32492\n* #32491"
        }
      },
      {
        "sha": "11ca4f6b6934292168f49cc78d3b2360a602febe",
        "commit": {
          "message": "feat(eslint-plugin-react-hooks): update `engines` declaration (#32458)\n\nIn preparation for the merging of the compiler plugin into this one\n(#32416), this change proactively updates the plugin's `engines`\ndeclaration to require Node versions greater than or equal to 18\n\nBREAKING CHANGE\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>"
        }
      },
      {
        "sha": "d55cc79bcf5cd3bd4cb406381b067d72842f368e",
        "commit": {
          "message": "refactor(eslint-plugin-react-hooks): move rules to `rules` folder (#32411)\n\nSince the compiler plugin is going to be merged into the hooks plugin,\nand ultimately decomposed into several more rules, it would be good to\nstart creating a more traditional folder structure for the plugin. This\nchange just moves the rules into a `rules` folder.\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>"
        }
      },
      {
        "sha": "ca12911d1fbe755b9b2b7d1bf548589317311a82",
        "commit": {
          "message": "feat(eslint-plugin-react-hooks): make flat config the `recommended` config (#32457)\n\nThis change swaps which config `recommended` is aliasing. In 5.2.0, the\nnew flat config was introduced as `recommended-latest`, while\n`recommended` still pointed at the legacy rc-based config, with a note\nthat in the next major version `recommended` would be updated to point\nat `recommend-latest`. This change makes that swap, and make the default\n`recommended` experience the flat config. To continue using the legacy\nrc recommended config, please make the following change in your config\n\n```diff\n- extends: ['plugin:react-hooks/recommended']\n+ extends: ['plugin:react-hooks/recommended-legacy']\n```\n\nThis change also deprecates `recommended-latest` in favor of\n`recommended`. `recommended-latest` will be removed in a future major\nversion.\n\nThe README has been updated to reflect the new usage, and to put the\nflat config sections before the legacy config sections.\n\nI also took the opportunity to change the v9 fixture to use a typescript\nconfig, serving as a demonstration for usage as well as a way to\nvalidate the types are correct.\n\nBREAKING CHANGE\n\n---------\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>"
        }
      },
      {
        "sha": "eda36a1c75ff8ac09fb127f6e04d4af16e49f50f",
        "commit": {
          "message": "[ci] Don't erroneously mark failures as successes (#32493)\n\nRandomly noticed this when I looked at a recent [DevTools regression\ntest run](https://github.com/facebook/react/actions/runs/13578385011).\n\nI don't recall why we added `continue-on-error` previously, but I\nbelieve it was to keep all jobs in the matrix running even if one were\nto fail, in order to fully identify any failures from code changes like\nbuild or test failures.\n\nThere is now a `fail-fast` option which does this.\n[`continue-on-error`](https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idcontinue-on-error)\nnow means:\n\n> Prevents a workflow run from failing when a job fails. Set to true to\nallow a workflow run to pass when this job fails.\n\nso it's not correct to use it."
        }
      },
      {
        "sha": "2980f27779cf37a9656b25418a3c5cfca989e244",
        "commit": {
          "message": "Add a shorthand for building the view-transition fixture (#32496)\n\nI end up rebuilding for testing the view-transition fixture a lot. It\ndoesn't need everything that flight needs so this just adds a short hand\nthat's a little faster to rebuild.\n\n---------\n\nCo-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>"
        }
      },
      {
        "sha": "605a880c8c5191e9f8c52468458709cd17a486c1",
        "commit": {
          "message": "Polyfill onScrollEnd Event in Safari (#32427)\n\nWe added support for `onScrollEnd` in #26789 but it only works in Chrome\nand Firefox. Safari still doesn't support `scrollend` and there's no\nindication that they will anytime soon so this polyfills it.\n\nWhile I don't particularly love our synthetic event system this tries to\nstay within the realm of how our other polyfills work. This implements\nall `onScrollEnd` events as a plugin.\n\nThe basic principle is to first feature detect the `onscrollend` DOM\nproperty to see if there's native support and otherwise just use the\nnative event.\n\nThen we listen to `scroll` events and set a timeout. If we don't get any\nmore scroll events before the timeout we fire `onScrollEnd`. Basically\ndebouncing it. If we're currently pressing down on touch or a mouse then\nwe wait until it is lifted such as if you're scrolling with a finger or\nusing the scrollbars on desktop but isn't currently moving.\n\nIf we do get any native events even though we're in polyfilling mode, we\nuse that as an indication to fire the `onScrollEnd` early.\n\nPart of the motivation is that this becomes extra useful pair for\nhttps://github.com/facebook/react/pull/32422. We also probably need\nthese events to coincide with other gesture related internals so you're\nbetter off using our polyfill so they're synced."
        }
      },
      {
        "sha": "a1f157e9a9b7f90fce9d696add6cee04a6fb5260",
        "commit": {
          "message": "[compiler][ez] Add validation for auto-deps config (#31813)\n\nnumRequiredArgs has to be more than 0 and the pass depends on that\n\n--"
        }
      },
      {
        "sha": "bdce84a53960c267f92a08241dc7b1924f30be55",
        "commit": {
          "message": "[autodeps] Support namespaces (#32162)\n\nSummary: Correctly supports React.useEffect when React is\nimported as `import * as React from 'react'`\n(as well as other namespaces as specified in the config)."
        }
      },
      {
        "sha": "d4e24b349e6530a8e6c95d79ad40b32f93b47070",
        "commit": {
          "message": "[autodeps] Do not include nonreactive refs or setStates in inferred deps (#32236)"
        }
      },
      {
        "sha": "443b7ff2a8437f7736491ae7136c21d75d5a2019",
        "commit": {
          "message": "docs(eslint-plugin-react-hooks): clarify config details for prior versions (#32498)\n\nThis change adds more details about prior versions of the plugin's\nconfig, to help people as they migrate from legacy to flat configs\nacross multiple versions of this plugin. At some point in the 6.0 or 7.0\ncycle, it would probably make sense to re-consolidate this into a single\nversion.\n\nCloses #32494"
        }
      },
      {
        "sha": "d48c69246c9acd3b39c1eec4f3c12103e95cdd66",
        "commit": {
          "message": "[flags] make enableScrollEndPolyfill dynamic (#32517)\n\nWill roll this out in www"
        }
      },
      {
        "sha": "e0fe3479671555e01531dbc3d2fd85d5bd4c5a56",
        "commit": {
          "message": "[flags] remove enableOwnerStacks (#32426)\n\nBassed off: https://github.com/facebook/react/pull/32425\n\nWait to land internally.\n\n[Commit to\nreview.](https://github.com/facebook/react/pull/32426/commits/66aa6a4dbb78106b4f3d3eb367f5c27eb8f30c66)\n\nThis has landed everywhere"
        }
      },
      {
        "sha": "e9252bcdccf7f8f691081e4d48ca47657bc723f9",
        "commit": {
          "message": "During a Swipe Gesture Render a Clone Offscreen and Animate it Onscreen (#32500)\n\nThis is really the essence mechanism of the `useSwipeTransition`\nfeature.\n\nWe don't want to immediately switch to the destination state when\nstarting a gesture. The effects remain mounted on the current state. We\nwant the current state to be \"live\". This is important to for example\nallow a video to keeping playing while starting a swipe (think\nTikTok/Reels) and not stop until you've committed the action. The only\nthing that can be live is the \"new\" state. Therefore we treat the\ndestination as the \"old\" state and perform a reverse animation from\nthere.\n\nIdeally we could apply the old state to the DOM tree, take a snapshot\nand then revert it back in the mutation of `startViewTransition`.\nUnfortunately, the way `startViewTransition` was designed it always\npaints one frame of the \"old\" state which would lead this to cause a\nflicker.\n\nTo work around this, we need to create a clone of any View Transition\nboundary that might be mutated and then render that offscreen. That way\nwe can render the \"current\" state on screen and the \"destination\" state\noffscreen for the screenshots. Being mutated can be either due to React\ndoing a DOM mutation or if a child boundary resizes that causes the\nparent to relayout. We don't have to do this for insertions or deletions\nsince they only appear on one side.\n\nThe worst case scenario is that we have to clone the whole root. That's\nwhat this first PR implements. We clone the container and if it's not\nabsolutely positioned, we position it on top of the current one. If the\ncontainer is `document` or `<html>` we instead clone the `<body>` tag\nsince it's the only one we can insert a duplicate of. If the container\nis deep in the tree we clone just that even though technically we should\nprobably clone the whole document in that case. We just keep the impact\nsmaller. Ideally though we'd never hit this case. In fact, if we clone\nthe document we issue a warning (always for now) since you probably\nshould optimize this. In the future I intend to add optimizations when\naffected View Transition boundaries are absolutely positioned since they\ncannot possibly relayout the parent. This would be the ideal way to use\nthis feature most efficiently but it still works without it.\n\nSince we render the \"old\" state outside the viewport, we need to then\nadjust the animation to put it back into the viewport. This is the\ntrickiest part to get right while still preserving any customization of\nthe View Transitions done using CSS. This current approach reapplies all\nthe animations with adjusted keyframes.\n\nIn the case of an \"exit\" the pseudo-element itself is positioned outside\nthe viewport but since we can't programmatically update the style of the\npseudo-element itself we instead adjust all the keyframes to put it back\ninto the viewport. If there is no animation on the group we add one.\n\nIn the case of an \"update\" the pseudo-element is positioned on the new\nstate which is already inside the viewport. However, the auto-generated\nanimation of the group has a starting keyframe that starts outside the\nviewport. In this case we need to adjust that keyframe.\n\nIn the future I might explore a technique that inserts stylesheets\ninstead of mutating the animations. It might be simpler. But whatever\nhacks work to maximize the compatibility is best."
        }
      },
      {
        "sha": "e03ac20f942124bb3989b3bb58bb7b9bf91a7860",
        "commit": {
          "message": "Set direction in animate call directly (#32523)\n\nSetting the animation's currentTime causes a quirk where the transition\ncan end up off by a bit and the end state can be slightly off the end\ntime.\n\nHowever, I realized that we don't have to because if we just set the\ndirection in the `animate()` call directly the Safari bug goes away."
        }
      },
      {
        "sha": "6b1ae49571b97b15177bda7c1e39a87b42331da9",
        "commit": {
          "message": "[ez] Remove unused netlify.toml (#32530)\n\nI don't think this is in use anymore"
        }
      },
      {
        "sha": "aac177c48439ab294f72e8b5a85059daa3f8a5ee",
        "commit": {
          "message": "Support beforetoggle/toggle events for dialog (#32479)"
        }
      },
      {
        "sha": "e81fcfe3f201a8f626e892fb52ccbd0edba627cb",
        "commit": {
          "message": "[Flight] Expose registerServerReference from the client builds (#32534)\n\nThis is used to register Server References that exist in the current\nenvironment but also exists in the server it might call into. Such as a\nremote server.\n\nIf the value comes from the remote server in the first place then this\nis called automatically to ensure that you can pass a reference back to\nwhere it came from - even if the `serverModuleMap` option is used. This\nwas already the case when `serverModuleMap` wasn't passed. This is how\nyou can pass server references back to the server. However, when we\nadded `serverModuleMap` that pass was skipped because we were getting\nreal functions instead of proxies.\n\nFor functions that wasn't yet passed from the remote server to the\ncurrent server, we can register them eagerly just like we do for\n`import('/server').registerServerReference()`. You can now also do this\nwith `import('/client').registerServerReference()`. We could make them\nshared so you only have to do this once but it might not be possible to\npass to the remote server and the remote server might not even be the\nsame RSC renderer. Therefore I split them. It's up to the compiler\nwhether it should do that or not. It has to know that any function you\nmight call might be able to receive it. This is currently global to a\nspecific RSC renderer."
        }
      },
      {
        "sha": "029e8bd618af23fbdd9efdac565ad81f7d4640d8",
        "commit": {
          "message": "Add Owner Stack to attribute hydration mismatches (#32538)"
        }
      },
      {
        "sha": "9e9b54d7f6c67b452c969abb98f4f7637ed72f56",
        "commit": {
          "message": "[compiler] Make CompilerError compatible with reflection (#32539)"
        }
      },
      {
        "sha": "562f17efab5c39b461ec100898c9a26b54c931e4",
        "commit": {
          "message": "docs(eslint-plugin-react-hooks): add changelog for 5.1.0 & 5.2.0 (#32536)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\n\nAdds changelog entries for the last two minor releases of\n`eslint-plugin-react-hooks`. Fixes #31717.\n\nI chose to not include #31208 (838258144652ab2ef0cbe54d03e9bdd454348d48)\nand #32115 (fd2d2799840d9066a752bb32bbbb07c93f64a891) in the changelog\nas they only changed internals that do not affect consumers of the\nplugin, and it doesn't seem like the changelog previously included such\nchanges.\n\nChanges are sorted by importance (rather than by commit date), with the\nmost important changes first.\n\n## How did you test this change?\n\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->\n\nDocs only, nothing to test."
        }
      },
      {
        "sha": "f9d78089c6ec8dce3a11cdf135d6d27b7a8dc1c5",
        "commit": {
          "message": "[flags] make enableComponentPerformanceTrack dynamic (#32359)"
        }
      },
      {
        "sha": "cc680065c33739cc4c8cd2e8a67312b0c16a6ccc",
        "commit": {
          "message": "Fix asserts caused by OffscreenComponent rendering in React Native with passChildrenWhenCloningPersistedNodes (#32528)\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\n\nThis PR fixes asserts when `passChildrenWhenCloningPersistedNodes` is\nenabled for React Native and OffscreenComponent child rendering unhides\nhost components.\n\nDiscussions around possible fixes for the asserts seen in React Native\nsuggested changing the way we handle hiding/unhiding host components by\nupdating the fiber state with the hidden host component instead of\nsubmitting a hidden clone Fabric and keeping the original as the current\nfiber.\n\nImplementing this fix would require holding onto the original styling of\nthe hidden host component. The reconciler updates the styling by adding\n`display: none` to hide the contents. If the original host component was\nalready hidden, the renderer would lose that information and remove the\nstyling when showing the contents again.\n\nTo reduce the changes required to make\n`passChildrenWhenCloningPersistedNodes` work, this PR falls back to the\noriginal cloning method when OffscreenComponents are part of the\nchildren needed to be added back. This effectively resolve the asserts\ntriggered by the feature in RN and improves overall performance.\n\n## How did you test this change?\n\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->\n\nThis fix was tested by enabling `passChildrenWhenCloningPersistedNodes`\nin an app built with React Native that had a repro for triggering the\nasserts. The asserts do not occur anymore when using the changes in this\nPR.\n\n---------\n\nCo-authored-by: Nick <lefever@meta.com>"
        }
      },
      {
        "sha": "00aa0043c7e32e1c822402edadde6f05535d2075",
        "commit": {
          "message": "[compiler] Migrate compiler packages to tsup (#32550)\n\nCurrently in the `compiler` workspace, we invoke esbuild directly to\nbuild most packages (with the exception of `snap`). This has been mostly\nfine, but does not allow us to do things like generate type declaration\nfiles.\n\nI would like #32416 to be able to consume the merged\neslint-plugin-react-compiler from source rather than via npm, and one of\nthe things that has come up from my exploration in that stack using the\ncompiler from source is that babel-plugin-react-compiler is missing type\ndeclarations. This is primarily because React's build process uses\nrollup + rollup-plugin-typescript, which runs tsc. So the merged plugin\nneeds to typecheck properly in order to build. An alternative might be\nto migrate to something like babel with rollup instead to simply strip\ntypes rather than typecheck before building. The minor downside of that\napproach is that we would need to manually maintain a d.ts file for\neslint-plugin-react-hooks. For now I would like to see if this PR helps\nus make progress rather than go for the slightly worse alternative.\n\n[`tsup`](https://github.com/egoist/tsup) is esbuild based so build\nperformance is comparable. It is slower when generating d.ts files, but\nit's still much faster than rollup which we used prior to esbuild. For\nnow, I have turned off `dts` by default, and it is only passed when\npublishing on npm.\n\nIf you want to also generate d.ts files you can run `yarn build --dts`.\n\n```\n# BEFORE: build all compiler packages (esbuild)\n$ time yarn build\n\n✨  Done in 15.61s.\nyarn build  13.82s user 1.54s system 96% cpu 15.842 total\n\n# ---\n\n# AFTER: build all compiler packages (tsup)\n$ time yarn build\n\n✨  Done in 12.39s.\nyarn build  12.58s user 1.68s system 106% cpu 13.350 total\n\n# ---\n\n# AFTER: build all compiler packages and type declarations (tsup)\n$ time yarn build --dts\n\n✨  Done in 30.69s.\nyarn build  43.57s user 3.20s system 150% cpu 31.061 total\n```\n\nI still need to test if this unblocks #32416 but this stack can be\nlanded independently though as we could probably just release type\ndeclarations on npm. No one should be using the compiler directly, but\nif they really wanted to, lack of type declarations would not stop them\n(cf React secret internals).\n\nNote that I still kept esbuild as we still use it directly for forgive.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32550).\n* #32551\n* __->__ #32550"
        }
      },
      {
        "sha": "d331ba041142a801f8e2101408221732b0ee7f88",
        "commit": {
          "message": "[ci] Fix incorrect condition (#32551)\n\nFixes an incorrect condition for running tests in the compiler\nworkspace.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32551).\n* __->__ #32551\n* #32550"
        }
      },
      {
        "sha": "50ab2dde940bf0027773a944da005277b3d5598a",
        "commit": {
          "message": "Make renameElementSymbol dynamic for native fb (#32566)\n\nUse variant to begin rolling this out internally."
        }
      },
      {
        "sha": "a8c2bbdabf561a53b7908c2b341815e64840e8ca",
        "commit": {
          "message": "Cancel finished view transitions Animations manually in fire-and-forget too (#32545)\n\nOtherwise these can survive into the next View Transition and cause\nhavoc to that transition.\n\nThis was appearing as a flash in Safari in the fixture when going from\nA->B. This triggers a View Transition and at the same time the scroll\nposition updates in an effect. That fires a scroll event which starts a\ngesture. This shouldn't really happen and the SwipeRecognizer should\nideally ignore those but it's good to surface edge cases. That gesture\nis blocked on the View Transition finishing and then immediately after\nit starts a gesture View Transition. That gesture then picked up the\nformer Animation from the previous transition which caused issues. This\nPR fixes that flash."
        }
      },
      {
        "sha": "696950aa69e3f2ef0d720c82705e02b532904d70",
        "commit": {
          "message": "Enable moveBefore in experimental releases (#32549)\n\nEnabling feature detection of early DOM features in a framework is\nreckless. I'm not judging other frameworks (but also a little bit).\nBecause if you do something like `if (moveBefore) moveBefore(a, b) else\ninsertBefore(a, b)` like we do and then the implementation has to change\nthere are still too many websites out there that it becomes impossible\nto change it. It would break the web. It would instead have to change to\na different name. That's what happened with `contains` -> `includes`.\nCounter to popular belief it didn't have anything to do with patching\nprototypes. Therefore, ideally frameworks shouldn't start rely on it\nuntil there's two implementations so that there's time for feedback.\n\nThat's why we didn't immediately enable this even in experimental.\nHowever, at this point there's probably enough feature detection and it\nhas shipped long enough in Chrome that it's unlikely to be able to\nchange at this point.\n\nWe can enable it now. For now just in `@experimental` to see if we can\nflush out issues with it before bringing it to stable."
        }
      },
      {
        "sha": "99e1024051f2e6b2d2849b966e2f4354aef2a1d0",
        "commit": {
          "message": "Check if a child is a new child before calling moveBefore (#32567)\n\nThis fixes a critical issue with moveBefore. I was told that the\ndisconnected -> connected case was going to be relaxed and not be an\nerror but apparently that is not the case.\n\nThis means that we can't use this for initial insertions. Only moves.\n\nUnfortunately React's internals doesn't distinguish these cases. This\nadds a hack that checks each nodes but this is pretty bad for\nperformance. We should only call this in one or the other case.\n\nGiven that we still need feature detection. Both of which means that\nthese calls are no longer inlined and this extra code. I wonder if it's\neven worth it given that you can't even rely on it working anyway since\nnot all browsers have it. Kind of don't want to ship this until all\nbrowsers have it.\n\nEven then we'd ideally refactor React to use separate code paths for\ninitial insertion vs moves. Which leads to some unfortunate code\nduplication."
        }
      },
      {
        "sha": "0ca3deebcf20d2514771a568e1be08801da5cf85",
        "commit": {
          "message": "[rcr] Fix incorrect output platform (#32569)\n\nAccidentally copypasted the wrong esbuild config."
        }
      },
      {
        "sha": "2398554c6034e6d0992fcaa1c2e95f1757cab53e",
        "commit": {
          "message": "[Flight]: Client-side `registerServerReference` must not break `.bind()` (#32565)"
        }
      },
      {
        "sha": "ca8f91f6f6b1b31023eee06c1e2a827ee178b68b",
        "commit": {
          "message": "Log errors from startViewTransition to onRecoverableError (#32540)\n\nWe customize the messages only in DEV to keep it small in prod.\n\nWe skip some messages that are not really errors but more like\ninformation."
        }
      },
      {
        "sha": "6aa8254bb7353fe3096289edc669cf168e9fd190",
        "commit": {
          "message": "Add ref to Fragment (#32465)\n\n*This API is experimental and subject to change or removal.*\n\nThis PR is an alternative to\nhttps://github.com/facebook/react/pull/32421 based on feedback:\nhttps://github.com/facebook/react/pull/32421#pullrequestreview-2625382015\n. The difference here is that we traverse from the Fragment's fiber at\noperation time instead of keeping a set of children on the\n`FragmentInstance`. We still need to handle newly added or removed child\nnodes to apply event listeners and observers, so we treat those updates\nas effects.\n\n**Fragment Refs**\n\nThis PR extends React's Fragment component to accept a `ref` prop. The\nFragment's ref will attach to a custom host instance, which will provide\nan Element-like API for working with the Fragment's host parent and host\nchildren.\n\nHere I've implemented `addEventListener`, `removeEventListener`, and\n`focus` to get started but we'll be iterating on this by adding\nadditional APIs in future PRs. This sets up the mechanism to attach refs\nand perform operations on children. The FragmentInstance is implemented\nin `react-dom` here but is planned for Fabric as well.\n\nThe API works by targeting the first level of host children and proxying\nElement-like APIs to allow developers to manage groups of elements or\nelements that cannot be easily accessed such as from a third-party\nlibrary or deep in a tree of Functional Component wrappers.\n\n```javascript\nimport {Fragment, useRef} from 'react';\n\nconst fragmentRef = useRef(null);\n\n<Fragment ref={fragmentRef}>\n  <div id=\"A\" />\n  <Wrapper>\n    <div id=\"B\">\n      <div id=\"C\" />\n    </div>\n  </Wrapper>\n  <div id=\"D\" />\n</Fragment>\n```\n\nIn this case, calling `fragmentRef.current.addEventListener()` would\napply an event listener to `A`, `B`, and `D`. `C` is skipped because it\nis nested under the first level of Host Component. If another Host\nComponent was appended as a sibling to `A`, `B`, or `D`, the event\nlistener would be applied to that element as well and any other APIs\nwould also affect the newly added child.\n\nThis is an implementation of the basic feature as a starting point for\nfeedback and further iteration."
        }
      },
      {
        "sha": "75c979847f1c6dd954860f17b4dc181ad7c2891e",
        "commit": {
          "message": "Ignore AbortError for gestures (#32579)\n\nFollow up to #32540.\n\nWe do allow gestures to be cancelled early (we call skipTransition) if\nthe gesture stops before it has even started.\n\nThis happens in the fixture when we auto-scroll."
        }
      },
      {
        "sha": "3456b6634abb4a8a2ef500397b94606ce4b6dda7",
        "commit": {
          "message": "[compiler] Repro for object spread and Array.from with mutable iterators (#32520)\n\nSee newly added test fixtures. Repros fixed in later prs of this stack\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32520).\n* #32522\n* #32521\n* __->__ #32520"
        }
      },
      {
        "sha": "4ab827b869dfb89f34df1e38beae0d521b960f23",
        "commit": {
          "message": "[compiler] Dedupe @babel/types (#32581)\n\nExtracting portions of #32416 for easier review. This PR dedupes\n@babel/types to resolve to 7.26.3, for compatibility in the root\nworkspace where eslint-plugin-react-hooks resides.\n\nI also needed to update @babel/preset-typescript in snap.\n\nThe compiler changes in HIR and ReactiveScopes were needed due to types\nchanging. Notably, Babel [added support for optional chaining\nassignment](https://github.com/babel/babel/pull/15751) (currently [Stage\n1](https://github.com/tc39/proposal-optional-chaining-assignment)), so\nin the latest versions of @babel/types, AssignmentExpression.left can\nnow also be of t.OptionalMemberExpression.\n\nGiven that this is in Stage 1, the compiler probably shouldn't support\nthis syntax, so this PR updates HIR to bailout with a TODO if there is a\nnon LVal on the lhs of an Assignment Expression.\n\nThere was also a small superficial SourceLocation change needed in\n`InferReactiveScopeVariables` as Babel 8 changes were [accidentally\nreleased in\n7](https://github.com/babel/babel/issues/10746#issuecomment-2699146670).\nIt doesn't affect our analysis so it seems fine to just update with the\nnew properties.\n\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32581).\n* #32582\n* __->__ #32581\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>"
        }
      },
      {
        "sha": "e0e98d956074f95975a5851a8668fb48f13cb325",
        "commit": {
          "message": "[playground] Update various deps (#32583)\n\nUpdates various deps to align with the rest of the codebase.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32583).\n* #32584\n* __->__ #32583"
        }
      },
      {
        "sha": "26bca0005c7ef82a733c23f08baa1e2b8d702ec9",
        "commit": {
          "message": "[playground] Wait for Monaco to fully load (#32584)\n\nI'm not sure what exactly is causing the flakiness in the playground e2e\ntests but I suspect it's some kind of timing issue.\n\nLet's try waiting for Monaco to be fully initialized before running\ntests.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32584).\n* __->__ #32584\n* #32583"
        }
      },
      {
        "sha": "5135f98795d13aeea6f009b537a660c7afbe17ed",
        "commit": {
          "message": "Add DOM fixture page for Fragment Ref (#32527)\n\nThis adds a page to the DOM fixture to test Fragment Refs. The first\ntest case is for `addEventListener`/`removeEventListener`.\n\nSetting `enableFragmentRefs` to `__EXPERIMENTAL__` and building is\nrequired to run the fixture.\n\n<img width=\"872\" alt=\"Screenshot 2025-03-05 at 12 58 57 PM\"\nsrc=\"https://github.com/user-attachments/assets/fee498b7-fd96-4178-9e82-c46d4cb55c9b\"\n/>"
        }
      },
      {
        "sha": "5de83dcc0f34dc196664cb200088c6253cb2cd34",
        "commit": {
          "message": "[playground] Use onMount to check if the editor is available (#32586)\n\nPlayground test flakiness seems to be fixed but adding this as an extra\nprecaution"
        }
      },
      {
        "sha": "f695f95290aa3560a00e8a3b617205ac9e087e0e",
        "commit": {
          "message": "Update babel configs used in jest (#32588)\n\nExtracting portions of #32416 for easier review.\n\nThis PR updates our babel configs (only used in jest) to support\nclasses.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32588).\n* #32592\n* #32591\n* #32590\n* #32589\n* __->__ #32588\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>"
        }
      },
      {
        "sha": "0e2402eb20de53e08fd0a767554f93e5e53af873",
        "commit": {
          "message": "Update eslint fixtures (#32589)\n\nExtracting portions of #32416 for easier review.\n\nThis PR lightly updates the build scripts for the eslint fixtures.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32589).\n* #32592\n* #32591\n* #32590\n* __->__ #32589\n* #32588\n\n---------\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>"
        }
      },
      {
        "sha": "f31779a112f3b5c9e56d651ad59c2db0bc236981",
        "commit": {
          "message": "[ez] Run Prettier on eslint-plugin-react-compiler/src/types (#32590)\n\nExtracting portions of #32416 for easier review.\n\nThis PR contains small formatting fixes.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32590).\n* #32592\n* #32591\n* __->__ #32590\n* #32589\n* #32588\n\n---------\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>"
        }
      },
      {
        "sha": "8646349aebb514eeef7e01614fb4aeb2f2c7a6c8",
        "commit": {
          "message": "[rollup] Fix codeFrame is not a function (#32591)\n\nExtracting portions of #32416 for easier review.\n\nFixes a small issue where `codeFrame` is not a function when a rollup\nerror was encountered.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32591).\n* #32592\n* __->__ #32591\n* #32590\n* #32589\n* #32588\n\n---------\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>"
        }
      },
      {
        "sha": "a8ab2bcb627ed7c57d2e116b2e13ad5451259c2b",
        "commit": {
          "message": "[rollup] Add support for running prebuild commands (#32592)\n\nExtracting portions of #32416 for easier review.\n\nAdds a new `prebuild` option to allow for a prebuild command to be run\nprior to building the bundle.\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32592).\n* __->__ #32592\n* #32591\n* #32590\n* #32589\n* #32588\n\n---------\n\nCo-authored-by: michael faith <michaelfaith@users.noreply.github.com>"
        }
      },
      {
        "sha": "5ccfcd17ffa0adf9e7f5ba7fbf48e6bf6a4eb67e",
        "commit": {
          "message": "feat(eslint-plugin-react-hooks): merge rule from eslint-plugin-react-compiler into `react-hooks` plugin (#32416)\n\nThis change merges the `react-compiler` rule from\n`eslint-plugin-react-compiler` into the `eslint-plugin-react-hooks`\nplugin. In order to do the move in a way that keeps commit history with\nthe moved files, but also no remove them from their origin until a\nfuture cleanup change can be done, I did the `git mv` first, and then\nrecreated the files that were moved in their original places, as a\nseparate commit. Unfortunately GH shows the moved files as new instead\nof the ones that are truly new. But in the IDE and `git blame`, commit\nhistory is intact with the moved files.\n\nSince this change adds new dependencies, and one of those dependencies\nhas a higher `engines` declaration for `node` than what the plugin\ncurrently has, this is technically a breaking change and will have to go\nout as part of a major release.\n\n### Related Changes\n- https://github.com/facebook/react/pull/32458\n\n---------\n\nCo-authored-by: Lauren Tan <poteto@users.noreply.github.com>"
        }
      },
      {
        "sha": "1b77c3d7b98f21ec707d3accb441c678dac2803f",
        "commit": {
          "message": "Update DEVELOPMENT_GUIDE.md (#32281)\n\nfix: update CONTRIBUTING.md link path\n\nUpdated the relative path to CONTRIBUTING.md from `../CONTRIBUTING.md`\nto `./../../CONTRIBUTING.md` to ensure the correct file is referenced.\n\n<!--\n  Thanks for submitting a pull request!\nWe appreciate you spending the time to work on these changes. Please\nprovide enough information so that others can review your pull request.\nThe three fields below are mandatory.\n\nBefore submitting a pull request, please make sure the following is\ndone:\n\n1. Fork [the repository](https://github.com/facebook/react) and create\nyour branch from `main`.\n  2. Run `yarn` in the repository root.\n3. If you've fixed a bug or added code that should be tested, add tests!\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\nTestName` is helpful in development.\n5. Run `yarn test --prod` to test in the production environment. It\nsupports the same options as `yarn test`.\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\nopen `chrome://inspect`, and press \"Inspect\".\n7. Format your code with\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\ncheck changed files.\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\n  10. If you haven't already, complete the CLA.\n\nLearn more about contributing:\nhttps://reactjs.org/docs/how-to-contribute.html\n-->\n\n## Summary\n\n<!--\nExplain the **motivation** for making this change. What existing problem\ndoes the pull request solve?\n-->\n\n## How did you test this change?\n\n<!--\nDemonstrate the code is solid. Example: The exact commands you ran and\ntheir output, screenshots / videos if the pull request changes the user\ninterface.\nHow exactly did you verify that your PR solves the issue you wanted to\nsolve?\n  If you leave this empty, your PR will very likely be closed.\n-->"
        }
      },
      {
        "sha": "ef06b54f8d1d9818806e221974c8b64efbbfda0d",
        "commit": {
          "message": "fix: clarify which mobx libs are not compatible with compiler (#32570)\n\n## Summary\n\nRight now, `react-compiler-healthcheck` flags `mobx` as a \"known\nincompatible library\". But it's not precisely *MobX* that's\nincompatible. It's the observer HOC that comes from `mobx-react` and\n`mobx-react-lite`.\n\nI've been working on\n[mst-use-observable](https://github.com/coolsoftwaretyler/mst-use-observable),\nwhich makes MobX-State-Tree compatible with the compiler. However,\nprojects that use `mobx-state-tree` and `mst-use-observable` will still\ndepend on `mobx` as a dependency.\n\nAnd there [have been efforts in the past to write a hook for\nobservability](https://github.com/mobxjs/mobx/discussions/2566). So it's\npossible that MobX could become compatible, so long as authors access it\nwith a hook, rather than the HOC.\n\nI would like to propose updating the health check to be a little more\nprecise and flag the HOC dependencies, rather than MobX itself.\n\nThanks in advance for your consideration!\n\n## How did you test this change?\n\n`npx react-compiler-healthcheck` shouldn't flag on `mobx` in\ndependencies, but will for `mobx-react-lite` and `mobx-react`.\n\nTest suites, formatting, linting, all passed.\n\n---------\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>"
        }
      },
      {
        "sha": "ed1264f07701e092ac1a8466611372613d1a0102",
        "commit": {
          "message": "[compiler] Patch array and argument spread mutability (#32521)\n\nArray and argument spreads may mutate stateful iterables. Spread sites\nshould have `ConditionallyMutate` effects (e.g. mutate if the ValueKind\nis mutable, otherwise read).\n\nSee\n- [ecma spec (13.2.4.1 Runtime Semantics: ArrayAccumulation.\nSpreadElement : ...\nAssignmentExpression)](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-arrayaccumulation).\n- [ecma spec 13.3.8.1 Runtime Semantics:\nArgumentListEvaluation](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-argumentlistevaluation)\n\nNote that\n- Object and JSX Attribute spreads do not evaluate iterables (srcs\n[mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#description),\n[ecma](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-propertydefinitionevaluation))\n- An ideal mutability inference system could model known collections\n(i.e. Arrays or Sets) as a \"mutated collection of non-mutable objects\"\n(see `todo-granular-iterator-semantics`), but this is not what we do\ntoday. As such, an array / argument spread will always extend the range\nof built-in arrays, sets, etc\n- Due to HIR limitations, call expressions with argument spreads may\ncause unnecessary bailouts and/or scope merging when we know the call\nitself has `freeze`, `capture`, or `read` semantics (e.g.\n`useHook(...mutableValue)`)\nWe can deal with this by rewriting these call instructions to (1) create\nan intermediate array to consume the iterator and (2) capture and spread\nthe array at the callsite\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32521).\n* #32596\n* #32595\n* #32594\n* #32593\n* #32522\n* __->__ #32521"
        }
      },
      {
        "sha": "38a76009202e161cb023a92c33052b9dac7daf14",
        "commit": {
          "message": "[compiler][optim] Add shape for Array.from (#32522)\n\n(see title)\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32522).\n* #32596\n* #32595\n* #32594\n* #32593\n* __->__ #32522\n* #32521"
        }
      },
      {
        "sha": "eb53139ee50fe53c85e8ad51b21ad0968c1f782d",
        "commit": {
          "message": "[compiler][optim] infer mixedReadOnly for numeric and computed properties (#32593)\n\nExpand type inference to infer mixedReadOnly types for numeric and\ncomputed property accesses.\n```js\nfunction Component({idx})\n  const data = useFragment(...)\n  // we want to type `posts` correctly as Array\n  const posts = data.viewers[idx].posts.slice(0, 5);\n  // ...\n}\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32593).\n* #32596\n* #32595\n* #32594\n* __->__ #32593\n* #32522\n* #32521"
        }
      },
      {
        "sha": "89a46a57df3a3cc309fff937794341ab215e01e9",
        "commit": {
          "message": "[compiler][optim] more shapes for mixedreadonly (#32594)\n\n- Add `at`, `indexOf`, and `includes`\n- Optimize MixedReadOnly which is currently only used by hook return\nvalues. Hook return values are typed as Frozen, this change propagates\nthat to return values of aliasing function calls (such as `at`). One\npotential issue is that developers may pass\n`enableAssumeHooksFollowRulesOfReact:false` and set\n`transitiveMixedData`, expecting their transitive mixed data to be\nmutable. This is a bit of an edge case and already doesn't have clear\nsemantics.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32594).\n* #32596\n* #32595\n* __->__ #32594\n* #32593\n* #32522\n* #32521"
        }
      },
      {
        "sha": "1c79cb82ab8d3bd1f099115704f28df1097beb46",
        "commit": {
          "message": "[compiler][ez] Move compiler gating tests (#32595)\n\nMove all gating tests to `gating/`\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32595).\n* #32596\n* __->__ #32595\n* #32594\n* #32593\n* #32522\n* #32521"
        }
      },
      {
        "sha": "f457d0b4c6dd70c10acb9c93c7d01c80d8e23b92",
        "commit": {
          "message": "[compiler][ez] Only fail gating hoisting check for referenced identifiers (#32596)\n\nReduce false positive bailouts by using the same\n`isReferencedIdentifier` logic that the compiler also uses for\ndetermining context variables and a function's own hoisted declarations.\n\nDetails:\nPreviously, we counted every babel identifier as a reference. This is\nproblematic because babel counts most string symbols as an identifier.\n\n```js\nprint(x);  // x is an identifier as expected\nobj.x      // x is.. also an identifier here\n{x: 2}     // x is also an identifier here\n```\n\nThis PR adds a check for `isReferencedIdentifier`. Note that only\nnon-lval\nreferences pass this check. This should be fine as we don't need to\nhoist function declarations before writes to the same lvalue (which\nshould error in strict mode anyways)\n```js\nprint(x);  // isReferencedIdentifier(x) -> true\nobj.x      // isReferencedIdentifier(x) -> false\n{x: 2}     // isReferencedIdentifier(x) -> false\nx = 2      // isReferencedIdentifier(x) -> false\n```\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32596).\n* __->__ #32596\n* #32595\n* #32594\n* #32593\n* #32522\n* #32521"
        }
      },
      {
        "sha": "0df46f01a90f16e771a80cf13dadce3aca091b95",
        "commit": {
          "message": "[ci] Update eslint-plugin-react-hooks output location for Meta builds (#32601)\n\nUpdates where this file is output so we can sync it independently to\nanother directory."
        }
      },
      {
        "sha": "77987e5ee370dd40c53a6f026c8026065cc3178c",
        "commit": {
          "message": "[ci] mkdir before mv (#32602)\n\nMissed this earlier."
        }
      },
      {
        "sha": "93b61fc4ecb34abec2b55c206f34ed22dd340b71",
        "commit": {
          "message": "[compiler][ez] Stop bailing out early for hoisted gated functions (#32597)\n\nSome code movement for the next PR\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32597).\n* #32598\n* __->__ #32597"
        }
      },
      {
        "sha": "d92e5713be2dc78f467c31fce4a1e5c84a74e4e6",
        "commit": {
          "message": "[compiler] Avoid bailouts when inserting gating (#32598)\n\nThis change fixes a coverage hole in rolling out with `gating`. Prior to\nthis PR, configuring `gating` causes React Compiler to bail out of\noptimizing some functions.\n\nThis means that it's not entirely safe to cutover from `gating` enabled\nfor all users (i.e. rolled out 100%) to removing the `gating` config\naltogether, as new functions may be opted into compilation when they\nstop bailing out due to gating-specific logic.\n\nThis is technically slightly slower due to the additional function\nindirection. An alternative approach is to recommend running a codemod\nto insert `use no memo`s on currently-bailing out functions before\nremoving the`gating` config.\n\n---\nTested [internally](\nhttps://fburl.com/diff/q982ovua) by enabling on a page that previously\nhad a few hundred bailouts due to gating + hoisted function declarations\nand (1) clicking around locally and (2) running a bunch of e2e tests"
        }
      },
      {
        "sha": "7939d92fcc95ad5ee719c38272eaef14a3750fc0",
        "commit": {
          "message": "[compiler] clean up retry pipeline: `fireRetry` flag -> compileMode (#32511)\n\nRemoves `EnvironmentConfig.enableMinimalTransformsForRetry` in favor of\n`run` parameters. This is a minimal difference but lets us explicitly\nopt out certain compiler passes based on mode parameters, instead of\nenvironment configurations\n\nRetry flags don't really make sense to have in `EnvironmentConfig`\nanyways as the config is user-facing API, while retrying is a compiler\nimplementation detail.\n\n(per @josephsavona's feedback\nhttps://github.com/facebook/react/pull/32164#issuecomment-2608616479)\n> Re the \"hacky\" framing of this in the PR title: I think this is fine.\nI can see having something like a compilation or output mode that we use\nwhen running the pipeline. Rather than changing environment settings\nwhen we re-run, various passes could take effect based on the\ncombination of the mode + env flags. The modes might be:\n>\n> * Full: transform, validate, memoize. This is the default today.\n> * Transform: Along the lines of the backup mode in this PR. Only\napplies transforms that do not require following the rules of React,\nlike `fire()`.\n> * Validate: This could be used for ESLint.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32511).\n* #32512\n* __->__ #32511"
        }
      },
      {
        "sha": "67338703aa52d662998733e58671dc9fe1edae47",
        "commit": {
          "message": "[ci] Update yarn and node_modules cache key (#32603)\n\nNow that the compiler lint rule is merged into\neslint-plugin-react-hooks, we also need to update our caches so compiler\ndependencies are also cached. This should fix the CI walltime regression\nwe are now seeing.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32603).\n* #32604\n* __->__ #32603"
        }
      },
      {
        "sha": "ef1103d3e92168803000e12d9a27cb7440e5e1c8",
        "commit": {
          "message": "[ci] Fix node_modules cache glob (#32604)\n\nSeems like the stringified cache path can cause some directories not to\nbe cached, trying an alternative format"
        }
      },
      {
        "sha": "e9d80d939ee0f6b1d6146eb11917c433a7791d17",
        "commit": {
          "message": "Revert \"[ci] Fix node_modules cache glob (#32604)\" (#32606)\n\nThis reverts commit ef1103d3e92168803000e12d9a27cb7440e5e1c8.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32606).\n* #32609\n* #32608\n* #32607\n* __->__ #32606"
        }
      },
      {
        "sha": "5200721e5c93a59f8af0403d61abe513cb7d32fe",
        "commit": {
          "message": "Revert \"[ci] Update yarn and node_modules cache key (#32603)\" (#32607)\n\nThis reverts commit 67338703aa52d662998733e58671dc9fe1edae47.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32607).\n* #32609\n* #32608\n* __->__ #32607"
        }
      },
      {
        "sha": "4eba294c69422ade02f2bb4d6a0255755b406b32",
        "commit": {
          "message": "[ci] Cache runtime and compiler only for test runs (#32608)\n\nWe only need the compiler built for `yarn test` in the root directory.\nRather than always cache both for every step, let's just do it where\nit's needed explicitly.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32608).\n* #32609\n* __->__ #32608"
        }
      },
      {
        "sha": "f3c956006a90dc68210bd3e19497d10fb9b028d3",
        "commit": {
          "message": "[ci] Update node_modules cache path (#32609)\n\nAlternative of #32604.\n\nBust all old caches since I reverted some other changes to the keys."
        }
      },
      {
        "sha": "5398b7115847e87c0053aa719728d8dd1a635ccd",
        "commit": {
          "message": "[compiler] detect and throw on untransformed required features (#32512)\n\nTraverse program after running compiler transform to find untransformed\nreferences to compiler features (e.g. `inferEffectDeps`, `fire`).\n\nHard error to fail the babel pipeline when the compiler fails to\ntransform these features to give predictable runtime semantics.\nUntransformed calls to functions like `fire` will throw at runtime\nanyways, so let's fail the build to catch these earlier.\n\nNote that with this fails the build *regardless of panicThreshold*"
        }
      },
      {
        "sha": "1b6e3dd985c0cfaa4f15fae6fda26f7b57bd25da",
        "commit": {
          "message": "Merge restoreEnterViewTransitions and restoreExitViewTransitions (#32585)\n\nThis is the exact same code in both cases. It's just general clean up.\n\nBy unifying them it becomes less confusing to reuse these helpers in the\nApply Gesture path where the naming is reversed."
        }
      },
      {
        "sha": "3e956805e899bff7aea7b19c56e6adaf362cdc2b",
        "commit": {
          "message": "Gate flushGestureMutations and flushGestureAnimations (#32605)\n\nNormally these are gated by the whole commitGestureOnRoot path but in\nthe case of an early commit these phases may need to be invoked.\nEarlier. Those paths weren't gated which I noticed when I started adding\ncode to them."
        }
      },
      {
        "sha": "6daef4e7c8eea99c1b7eb7e451e028c6d7358321",
        "commit": {
          "message": "Make xViewTransitionToHostInstances helpers reusable (#32611)\n\nThis prepares from being able to reuse some this in ApplyGesture.\n\nThese all start with resetting a counter but it's tricky to have to\nremember to do this and tricky to do from the outside of this module. So\nwe make an exported helper that does the resetting. Ideally it gets\ninlined.\n\nWe also stop passing \"current\" to measureViewTransitionHostInstances.\nSame thing for cancelViewTransitionHostInstances. This doesn't make\nsense for \"nested\" which has not updated and so might not have an\nalternate. Instead we pass in the old and new name if they might be\ndifferent."
        }
      },
      {
        "sha": "c4a3b92e098cf1896939758e7419cbdb0e2f0cf4",
        "commit": {
          "message": "Add more phases to the ReactFiberApplyGesture (#32578)\n\nStacked on #32585 and #32605.\n\nThis adds more loops for the phases of \"Apply Gesture\". It doesn't\nimplement the interesting bit yet like adding view-transition-names and\nmeasurements. I'll do that in a separate PR to keep reviewing easier.\n\nThe three phases of this approach is roughly:\n\n- Clone and apply names to the \"old\" state.\n- Inside startViewTransition: Apply names to the \"new\" state. Measure\nboth the \"old\" and \"new\" state to know whether to cancel some of them.\nDelete the clones which will include all the \"old\" names.\n- After startViewTransition: Restore \"new\" names back to no\nview-transition-name.\n\nSince we don't have any other Effects in these phases we have a bit more\nflexibility and we can avoid extra phases that traverse the tree. I've\ntried to avoid any additional passes.\n\nAn interesting consequence of this approach is that we could measure\nboth the \"old\" and \"new\" state before `startViewTransition`. This would\nbe more efficient because we wouldn't need to take View Transition\nsnapshots of parts of the tree that won't actually animate. However,\nthat would require an extra pass and force layout earlier. It would also\nhave different semantics from the fire-and-forget View Transitions\nbecause we could optimize better which can be visible. It would also not\naccount for any late mutations. So I decided to instead let the layout\nbe computed by painting as usual and then measure both \"old\" and \"new\"\ninside the startViewTransition instead. Then canceling anything that\ndoesn't animate to keep it consistent.\n\nUnfortunately, though there's not a lot of code sharing possible in\nthese phases because the strategy is so different with the cloning and\nbecause the animation is performed in reverse. The \"finishedWork\" Fiber\nrepresents the \"old\" state and the \"current\" Fiber represents the \"new\"\nstate.\n\nThe most complicated phase is the cloning. I actually ended up having to\nmake a very different pattern from the other phases and CommitWork in\ngeneral. Because we have to clone as we go and also do other things like\napply names and finding pairs, it has more phases. I ended up with an\napproach that uses three different loops. The outer one for updated\ntrees, one for inserted trees that don't need cloning (doesn't include\nreappearing offscreen) and one for not updated trees that still need\ncloning. Inside each loop it can also be in different phases which I\ntrack with the `visitPhase` enum - this pattern is kind of new.\n\nAdditionally, we need to measure the cloned nodes after we've applied\nmutations to them and we have to wait until the whole tree is inserted.\nWe don't have a reference to these DOM elements in the Fiber tree since\nthat still refers to the original ones. We need to store the cloned\nelements somewhere. So I added a temporary field on the\nViewTransitionState to keep track of any clones owned by that\nViewTransition.\n\nWhen we deep clone an unchanged subtree we don't have DOM element\ninstances. It wouldn't be quite safe to try to find them from the tree\nstructure. So we need to avoid the deep clones if we might need DOM\nelements. Therefore we keep traversing in the case where we need to find\nnested ViewTransition boundaries that are either potentially affected by\nlayout or a \"pair\".\n\nFor the other two phases the pattern there's a lot of code duplication\nsince it's slightly different from the commit ones but they at least\nfollow the same pattern. For the restore phase I was actually able to\nreuse most of the code.\n\nI don't love how much code this is."
        }
      },
      {
        "sha": "2e385738a4dfd1554c146f6313b1530a09b5ce78",
        "commit": {
          "message": "Find Pairs and Apply View Transition Names to the Clones in the \"old\" Phase (#32599)\n\nStacked on #32578.\n\nWe need to apply view-transition-names to the clones that we create in\nthe \"old\" phase for the ViewTransition boundaries that should activate.\n\nFinding pairs is a little trickier than in\nReactFiberCommitViewTransitions. Normally we collect all name\n\"insertions\" in the `accumulateSuspenseyCommit` phase before we even\ncommit. Then in the snapshot do we visit all \"deletions\" and since we\nalready collected all the insertions we know immediately if the deletion\nhad a pair and should therefore get a \"name\" assigned to activate the\nboundary. For ReactFiberApplyGesture we need to assign names to\n\"insertions\" since it's in reverse but we don't already have a map of\ndeletions. Therefore we need to first visit all deletions.\n\nInstead of doing that in a completely separate pass, we instead visit\ndeletions in the same pass to find pairs. Since this is in the same pass\nwe might visit insertions before deletions or vice versa depending on\ndocument order. However, we can deal with this by applying the name to\nthe insertion when we find the deletion if we've already made the clones\nat that point.\n\nApplying names to pure exits, updates or nested (relayout) is a bit more\nstraight-forward."
        }
      },
      {
        "sha": "2c560374d6276c51cfeeff7af39628058c155a13",
        "commit": {
          "message": "Measure and apply names for the \"new\" phase (#32612)\n\nStacked on #32599 and #32611.\n\nThis is able to reuse the code from CommitViewTransitions for \"enter\",\n\"shared\" and \"layout\". The difference is that for \"enter\"/\"shared\" in\nthe \"new\" phase we pass in the deletions.\n\nFor \"layout\" of nested boundaries we just need to measure the clones at\nthe same time we measure the original nodes since we haven't measured\nthem in a previous phase in the current approach.\n\nWith these updates, things move around more like expected in the fixture\nbecause we're now applying the appropriate pairs to trigger individual\nanimations instead of just the full document cross-fade.\n\nThe \"update\" phase is a little more complicated and is coming soon."
        }
      },
      {
        "sha": "6b5d9fd3166eb58b469fb23f7b96972b184c0218",
        "commit": {
          "message": "Move traverseFragmentInstanceChildren to internal ReactFiberTreeReflection (#32613)\n\nThis is a nit but a Config should not have to know anything about the\ninternals of Fibers. Ideally it shouldn't even access them but we have\nsome cases where we need pointers back in like for this fragment.\n\nThe way we've typically abstracted this is using the\n`ReactFiberTreeReflection` helper that's in the `react-reconciler`. Such\nas in the event system.\nhttps://github.com/facebook/react/blob/f3c956006a90dc68210bd3e19497d10fb9b028d3/packages/react-dom-bindings/src/events/ReactDOMEventListener.js#L22-L26\n\nWe sometimes cheat but we really should clean this up such that a\n`Fiber` is actually an opaque type to the Configs and it can never dot\ninto it without using a helper.\n\nSo this just moves `traverseFragmentInstanceChildren` to\nReactFiberTreeReflection so that the ConfigDOM doesn't ever dot into its\nfields itself. It just passes the Fiber through back into the\nreact-reconciler. I had to add a wrapper to read the `.child` to avoid\nthat being assumed too. I also noticed that FragmentInstanceType is not\nactually passed through so that argument is unnecessary."
        }
      },
      {
        "sha": "17d274dc127400b31379a1b26c5be53599c36aa5",
        "commit": {
          "message": "Remove Mutation Check Around commit/measureUpdateViewTransition (#32617)\n\nThere's two ways to find updated View Transitions.\n\nOne is the \"commit/measureNestedViewTransitions\" pass which is used to\nfind things in unchanged subtrees. This can only lead to the relayout\ncase since there's can't possibly be any mutations in the subtree. This\nis only triggered when none of the direct siblings have any mutations at\nall.\n\nThe other case is \"commit/measureUpdateViewTransition\" which is for a\nViewTransition that itself has mutations scheduled inside of it which\nleads to the \"update\" case.\n\nHowever, there's a case between these two cases. When a direct sibling\nhas a mutation but there's also a ViewTransition exactly at the same\nlevel. In that case we can't bail out on the whole set of children so we\nwon't trigger the \"nested\" case. Previously we also didn't trigger the\n\"commit/measureUpdateViewTransition\" case because we first checked if\nthat had any mutations inside of it at all. This leads to neither case\npicking up this boundary.\n\nWe could check if the ViewTransition itself has any mutations inside and\nif not trigger the nested path.\n\nThere's a simpler way though. Because\n`commit/measureUpdateViewTransition` is actually just optimistic. The\nflags are pessimistic and we don't know for sure if there will actually\nbe a mutation until we've traversed the tree. It can sometimes lead to\nthe \"relayout\" case. So we can just use that same path, knowing that\nit'll just lead to the layout pass. Therefore it's safe to just remove\nthis check."
        }
      },
      {
        "sha": "99563e91736e9de473c4865d5cb6fd9eb1a26bcb",
        "commit": {
          "message": "Partially revert #32588 (#32621)\n\nhttps://github.com/facebook/react/pull/32588 changed the babel config\nimpacting local tests, and I'm not able to run test:\n\n<img width=\"1354\" alt=\"Screenshot 2025-03-15 at 2 37 00 PM\"\nsrc=\"https://github.com/user-attachments/assets/2d4afe39-6ab6-4c83-87a9-ceb0ee5f8df5\"\n/>\n\n\nThis PR reverts those changes until we can re-land with a fix."
        }
      },
      {
        "sha": "1a191701fe5000098d23328b2ea9d70457fea1f8",
        "commit": {
          "message": "[refactor] Add element type for Activity (#32499)\n\nThis PR separates Activity to it's own element type separate from\nOffscreen. The goal is to allow us to add Activity element boundary\nsemantics during hydration similar to Suspense semantics, without\nimpacting the Offscreen behavior in suspended children."
        }
      },
      {
        "sha": "df319522758b7fdfed3ddfa517cc1cc298ef1602",
        "commit": {
          "message": "Remove offscreen type (#32639)\n\nBased off https://github.com/facebook/react/pull/32499\n\nThis is no longer used.\n\n[Review\ncommit](https://github.com/facebook/react/commit/88c297d12f8b2562be3982fba867f03a137551cb)"
        }
      },
      {
        "sha": "8243f3f0631698e819c690710a7f18f767068981",
        "commit": {
          "message": "[bug] Fix component name for Portal and add tests (#32640)\n\nBased off: https://github.com/facebook/react/pull/32499\n\nWhile looking into `React.lazy` issues for built-ins, I noticed we\nalready error for `lazy` with build-ins, but we don't have any tests for\n`getComponentNameFromType` using all the built-ins. This may be\nsomething we should handle, but for now we should at least have tests.\n\nHere's why: while writing tests, I noticed we check `type` instead of\n`$$typeof` for portals:\n\n\nhttps://github.com/facebook/react/blob/9cdf8a99edcfd94d7420835ea663edca04237527/packages/react-reconciler/src/ReactPortal.js#L25-L32\n\nThis PR adds tests for all the built-ins and fixes the portal bug.\n\n[Commit to\nreview](https://github.com/facebook/react/pull/32640/commits/e068c167d48d4df01e79db8f13276bb46d7ab439)"
        }
      },
      {
        "sha": "cd28a946d57695a025581c0ff851bde08ea6ca27",
        "commit": {
          "message": "Add observer methods to fragment instances (#32619)\n\nThis implements `observeUsing(observer)` and `unobserverUsing(observer)`\non fragment instances. IntersectionObservers and ResizeObservers can be\npassed to observe each host child of the fragment. This is the\nequivalent to calling `observer.observe(child)` or\n`observer.unobserve(child)` for each child target.\n\nJust like the addEventListener, the observer is held on the fragment\ninstance and applied to any newly mounted child. So you can do things\nlike wrap a paginated list in a fragment and have each child\nautomatically observed as they commit in.\n\nUnlike, the event listeners though, we don't `unobserve` when a child is\nremoved. If a removed child is currently intersecting, the observer\ncallback will be called when it is removed with an empty rect. This lets\nyou track all the currently intersecting elements by setting state from\nthe observer callback and either adding or removing them from your list\ndepending on the intersecting state. If you want to track the removal of\nitems offscreen, you'd have to maintain that state separately and append\nintersecting data to it in the observer callback. This is what the\nfixture example does.\n\nThere could be more convenient ways of managing the state of multiple\nchild intersections, but basic examples are able to be modeled with the\nsimple implementation. Let's see how the usage goes as we integrate this\nwith more advanced loggers and other features.\n\nFor now you can only attach one observer to an instance. This could\nchange based on usage but the fragments are composable and could be\nstacked as one way to apply multiple observers to the same elements.\n\nIn practice, one pattern we expect to enable is more composable logging\nsuch as\n\n```javascript\nfunction Feed({ items }) {\n  return (\n    <ImpressionLogger>\n      {items.map((item) => (\n        <FeedItem />\n      ))}\n    </ImpressionLogger>\n  );\n}\n```\n\nwhere `ImpressionLogger` would set up the IntersectionObserver using a\nfragment ref with the required business logic and various components\ncould layer it wherever the logging is needed. Currently most callsites\nuse a hook form, which can require wiring up refs through the tree and\nmerging refs for multiple loggers."
        }
      },
      {
        "sha": "fbcda19a23da819889afdd7164b29c556fbcfc7a",
        "commit": {
          "message": "[devtools] add filters for internal builds (#32646)\n\nWe don't have an experimental-only build of devtools, but we can at\nleast add these filters to the internal build.\n\nA better way would be to use feature detection, but I'm not sure how and\nthis isn't a very heavily used feautre."
        }
      },
      {
        "sha": "9320a0139df876509c8ebb6f6fd950a6690bd5d9",
        "commit": {
          "message": "Fix COMMIT_SHA when generating PR artifacts (#32647)\n\nFollow-up to #31850. We want to build using the original commit SHA, not\nthe merge commit that GitHub Actions creates behind the scenes. We were\nalready checking out the correct commit object, but the COMMIT_SHA\nartifact was still pointing to the merge commit.\n\nThis should fix the sizebot links to point to working URLs, too."
        }
      },
      {
        "sha": "6c6699f3d2d15428575005a037b73bcb0b5bd0e4",
        "commit": {
          "message": "[ci] Don't use third party action to push commits (#32648)\n\nIn light of recent third party actions being compromised, let's just\npush the commit ourselves rather than use a third party action. We\nalready detect if changes are needed, so the step will only run if so.\n\nI also added a `dry_run` option to the manual runs of this workflow for\ntesting.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32648).\n* #32650\n* #32649\n* __->__ #32648"
        }
      },
      {
        "sha": "c37d89827e64d7ed34d9a2a3edce9cd00baafb3e",
        "commit": {
          "message": "[ci] Pin Discord webhook action to specific commit sha (#32649)\n\nPins the discord webhook action to\n`86dc739f3f165f16dadc5666051c367efa1692f4`, which is what the v6 tag\npoints to.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32649).\n* #32650\n* __->__ #32649\n* #32648"
        }
      },
      {
        "sha": "ca02c4bb40325c3efbc60969e9199a0c379d2d6b",
        "commit": {
          "message": "[ci][ez] use yarn --cwd (#32650)\n\nRun yarn install via `--cwd` instead of `working-directory` to make the\nlabels clearer\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32650).\n* __->__ #32650\n* #32649\n* #32648"
        }
      },
      {
        "sha": "9fde224a53693101a4d15e038d6db37e7a3596ff",
        "commit": {
          "message": "Materialize the tree ID when ViewTransition name=auto consumes one (#32651)\n\nViewTransition uses the `useId` algorithm to auto-assign names. This\nensures that we could animate between SSR content and client content by\nensuring that the names line up.\n\nHowever, I missed that we need to bump the id (materialize it) when we\ndo that. This is what function components do if they use one or more\n`useId()`. This caused duplicate names when two ViewTransitions were\nnested without any siblings since they would share name."
        }
      },
      {
        "sha": "02372952e4f24fa02dcb9b32af26cb2472617cef",
        "commit": {
          "message": "Don't auto-start browser in SSR fixtures (#32652)\n\nI end up restarting these a lot and it's annoying to have it open\nanother tab each time.\n\nThe flight fixture already doesn't auto-start."
        }
      },
      {
        "sha": "90b511ec7a9f2f3fd2b7f0039d8fc52c23f573a1",
        "commit": {
          "message": "fix(react-compiler): implement NumericLiteral as ObjectPropertyKey (#31791)"
        }
      },
      {
        "sha": "3c3696d5548c8a67f2332fd78332b9366abaf2f9",
        "commit": {
          "message": "Measure Updated ViewTransition Boundaries (#32653)\n\nThis does the same thing for `measureUpdateViewTransition` that we did\nfor `measureNestedViewTransitions` in\nhttps://github.com/facebook/react/pull/32612/commits/e3cbaffef05c7b476c07f7495e06788a9503e636.\nIf a boundary hasn't mutated and didn't change in size, we mark it for\ncancellation. Otherwise we add names to it. The different from the\nCommitViewTransition path is that the \"old\" names are added to the\nclones so this is the first time the \"new\" names.\n\nNow we also cancel any boundaries that were unchanged. So now the root\nno longer animates. We still have to clone them. There are other\noptimizations that can avoid cloning but once we've done all the layouts\nwe can still cancel the running animation and let them just be the\nregular content if they didn't change. Just like the regular\nfire-and-forget path.\n\nThis also fixes the measurement so that we measure clones by adjusting\ntheir position back into the viewport.\n\nThis actually surfaces a bug in Safari that was already in #32612. It\nturns out that the old names aren't picked up for some reason and so in\nSafari they looked more like a cross-fade than what #32612 was supposed\nto fix. However, now that bug is even more apparent because they\nactually just disappear in Safari. I'm not sure what that bug is but\nit's unrelated to this PR so will fix that separately."
        }
      },
      {
        "sha": "a35aaf704cca9a5db16f5b197e3ac17eb960b72f",
        "commit": {
          "message": "Update ViewTransition fixture to include bigger buttons/swipe (#32656)\n\nI made the button a bit bigger and moved the swipe recognizer around the\nwhole screen. Typically these are used around the whole content without\nany affordances and not as a standalone scrubber. Ideally the swipe\nwould be able to be inside the animating content but it can't yet due to\n[this Safari bug](https://bugs.webkit.org/show_bug.cgi?id=288795).\n\nAdded back some paragraphs so that scrolling can be tested properly. It\nappears it's possible to get the swipe to be a bit misaligned if you\nscroll enough on iOS.\n\n<img width=\"437\" alt=\"Screenshot 2025-03-17 at 10 27 42 PM\"\nsrc=\"https://github.com/user-attachments/assets/589dc828-717e-420c-83dc-94ae6ad59791\"\n/>"
        }
      },
      {
        "sha": "c69a5fc53a5135136668ca878f99b634d2374837",
        "commit": {
          "message": "Add blur() and focusLast() to fragment instances (#32654)\n\n`focus()` was added in https://github.com/facebook/react/pull/32465.\nHere we add `focusLast()` and `blur()`. I also extended `focus` to take\noptions.\n\n`focus` will focus the first focusable element. `focusLast` will focus\nthe last focusable element. We could consider a `focusFirst` naming or\neven the `focusWithin` used by test selector APIs as well.\n\n`blur` will only have an effect if the current `document.activeElement`\nis one of the fragment children."
        }
      },
      {
        "sha": "476f53879e80d4ee976ed036a0e8986126fa3117",
        "commit": {
          "message": "Add getClientRects to fragment instances (#32660)\n\nAdds `getClientRects()` to fragment instances with a fixture test case.\n`Element.getClientRect` returns a collection of `DOMRect`s (see example\nof multiline span returning two `DOMRect` boxes).\n`fragmentInstance.getClientRects` here flattens those collections into\nan array of rects."
        }
      },
      {
        "sha": "86d5ac0882305c5bbff0fd7b40385e7d50d0d2b4",
        "commit": {
          "message": "Revert \"Fix:- Improve HOC support and state preservation in React Refresh\" (#32214)\n\nReverts facebook/react#30660\n\nI don’t feel confident in the approach. This part of code is supposed to\nrely on the module bundler behaving as expected. _Maybe_ this is correct\nbut I need to review it closer — it was intentionally _not_ implemented\nthis way originally.\n\nI’ll try to take a closer look some time this week. We don’t have to\nmerge this revert right now but just flagging that I don’t understand\nthe thinking behind the new approach and don’t have confidence in it."
        }
      },
      {
        "sha": "6584a6eec488a7a155fe2231874aecf178b07a9a",
        "commit": {
          "message": "[compiler] Hoist dependencies from functions more conservatively (#32616)\n\nAlternative to facebook/react#31584 which sets\nenableTreatFunctionDepsAsConditional:true` by default.\n\nThis PR changes dependency hoisting to be more conservative while trying\nto preserve an optimal \"happy path\". We assume that a function \"is\nlikely called\" if we observe the following in the react function body.\n\n- a direct callsite\n- passed directly as a jsx attribute or child\n- passed directly to a hook\n- a direct return\n\nA function is also \"likely called\" if it is directly called, passed to\njsx / hooks, or returned from another function that \"is likely called\".\n\nNote that this approach marks the function definition site with its\nhoistable properties (not its use site). I tried implementing use-site\nhoisting semantics, but it felt both unpredictable (i.e. as a developer,\nI can't trust that callbacks are well memoized) and not helpful (type +\nnull checks of a value are usually colocated with their use site)\n\nIn this fixture (copied here for easy reference), it should be safe to\nuse `a.value` and `b.value` as dependencies, even though these functions\nare conditionally called.\n```js\n// inner-function/nullable-objects/assume-invoked/conditional-call-chain.tsx\nfunction Component({a, b}) {\n  const logA = () => {\n    console.log(a.value);\n  };\n  const logB = () => {\n    console.log(b.value);\n  };\n  const hasLogged = useRef(false);\n  const log = () => {\n    if (!hasLogged.current) {\n      logA();\n      logB();\n      hasLogged.current = true;\n    }\n  };\n  return <Stringify log={log} shouldInvokeFns={true} />;\n}\n```\n\nOn the other hand, this means that we produce invalid output for code\nlike manually implementing `Array.map`\n```js\n// inner-function/nullable-objects/bug-invalid-array-map-manual.js\nfunction useFoo({arr1, arr2}) {\n  const cb = e => arr2[0].value + e.value;\n  const y = [];\n  for (let i = 0; i < arr1.length; i++) {\n    y.push(cb(arr1[i]));\n  }\n  return y;\n}\n```"
        }
      },
      {
        "sha": "c2a196174763e0b4f16ed1c512ed4442b062395e",
        "commit": {
          "message": "Minor Fixes to View Transition Fixture (#32664)\n\nFollow up to #32656.\n\nRemove touchAction from SwipeRecognizer. I was under the wrong\nimpression that this was only the touch-action applied to this\nparticular element, but that parents would still win but in fact this\nblocks the parent from scrolling in the other direction. By specifying a\nfixed direction it also blocked rage-swiping in the other direction\nearly on.\n\nDisable pointer-events on view-transition so that the scroll can be hit.\nThis means that touches hit below the items animating above. This allows\nswiping to happen again before momentum scroll has finished. Previously\nthey were ignored. This only works as long as the SwipeRecognizer is\nitself not animating. This means you can now rage-swipe in both\ndirections quickly."
        }
      },
      {
        "sha": "646835fb59f9ad8557b9f3641515697c153e3faa",
        "commit": {
          "message": "[ci] Properly format commit message (#32668)\n\nUsing the github variable for the commit message replaces the variable\ninline. If the commit message contains quotes or other characters that\nneed to be escaped, this breaks the workflow.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32668).\n* #32669\n* __->__ #32668"
        }
      },
      {
        "sha": "db7dfe05508392ba3bdf7bc24717fe71f9b84a29",
        "commit": {
          "message": "[eprh] Don't transpile to es5 (#32669)\n\nNow that we've moved the sync location of the plugin, we no longer need\nthis since those restrictions no longer apply.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32669).\n* __->__ #32669\n* #32668"
        }
      },
      {
        "sha": "b0446ff06a484127412638c2be9a0382c6f3a84b",
        "commit": {
          "message": "[ci] Properly format commit message take 2 (#32673)\n\nWe need to use the commit message from `main`, not the builds branch"
        }
      },
      {
        "sha": "e9c3b27b4b86c5030df96d8a1e4228b5341164b0",
        "commit": {
          "message": "[ci] Bump all node_modules cache keys (#32671)\n\nI'm seeing a lot of instances of\n\n> Failed to save: Unable to reserve cache with key\nruntime-and-compiler-node_modules-v5-X64-Linux-e454609794aae66da9909c77dd6efa073eceff7f44d6527611f8465e102578b4,\nanother job may be creating this cache.\n\nwhich is adding ~20 seconds to every step. Let's try to bust the cache\nfollowing this\n[comment](https://github.com/actions/cache/issues/485#issuecomment-744145040)\nand see if that helps.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32671).\n* #32672\n* __->__ #32671"
        }
      },
      {
        "sha": "ada8bbbd6aa76bc472863589128833e30cacaef3",
        "commit": {
          "message": "[eslint-plugin-react-compiler] Fix type error with recommended config (#32666)\n\n## Summary\n\nIn the recommended configuration for `eslint-plugin-react-compiler`,\ni.e. `reactCompiler.configs.recommended`, the rule is typed as `string`\nrather than `eslint.Linter.RuleEntry` or anything assignable thereto,\nwhich results in the following type error if you type check your eslint\nconfiguration:\n```\nProperty ''react-compiler/react-compiler'' is incompatible with index signature.\n  Type 'string' is not assignable to type 'RuleEntry | undefined'.\n```\nSimply adding a const assertion fixes the error.\n\n## How did you test this change?\n\nI emitted declarations for the module and confirmed that the rule is now\ntyped as the string literal `'error'`"
        }
      },
      {
        "sha": "a4842c92ea241593557a3b0dadfbc5460320d375",
        "commit": {
          "message": "[ci] Centralize cache (#32672)\n\nTo avoid race conditions where multiple jobs try to write to the same\ncache, we now centralize saving the cache and then reusing it in every\nsubsequent job.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32672).\n* #32675\n* #32674\n* __->__ #32672"
        }
      },
      {
        "sha": "891a6332e3dc9e6dae087170996afaea42898484",
        "commit": {
          "message": "[ci] Bump build_and_lint to 25 workers (#32674)\n\nIncreases number of workers for `build_and_lint`.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32674).\n* #32675\n* __->__ #32674"
        }
      },
      {
        "sha": "208905257f5da4b05f3153388563cabf14eb85bb",
        "commit": {
          "message": "[ci] Add cache cleanup workflow (#32675)\n\n> Caches have branch scope restriction in place. This means that if\ncaches for a specific branch are using a lot of storage quota, it may\nresult into more frequently used caches from default branch getting\nthrashed. For example, if there are many pull requests happening on a\nrepo and are creating caches, these cannot be used in default branch\nscope but will still occupy a lot of space till they get cleaned up by\neviction policy. But sometime we want to clean them up on a faster\ncadence so as to ensure default branch is not thrashing.\n\n\nhttps://github.com/actions/cache/blob/main/tips-and-workarounds.md#force-deletion-of-caches-overriding-default-cache-eviction-policy\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32675).\n* __->__ #32675\n* #32674"
        }
      },
      {
        "sha": "995410463a0d74e43d91816bcda5f10cff82a14a",
        "commit": {
          "message": "[ci] Parameterize branch cleanup (#32677)\n\nAllow a PR number to be passed as input"
        }
      },
      {
        "sha": "a8c155cab91d4a33d06a904bfc23aadacfba8383",
        "commit": {
          "message": "[ci] Cache playwright browsers (#32678)\n\nNo reason to download them from scratch every time.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32678).\n* #32680\n* #32679\n* __->__ #32678"
        }
      },
      {
        "sha": "d16c26da40c96704e24b43832d2f7057f586c415",
        "commit": {
          "message": "[ci] Specify if-no-files-found on actions/upload-artifact@v4 (#32679)\n\nDefaults to warn, but since some steps require these artifacts to be\nuploaded we specify an error if its not found. Some other steps like\nplaywright test-results are only uploaded on failure so it's okay to\nignore.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32679).\n* #32680\n* __->__ #32679\n* #32678"
        }
      },
      {
        "sha": "19176e3c08dd67879fa134c9de172fcd53df841a",
        "commit": {
          "message": "[ci] Use correct revision for Meta builds (#32680)\n\nThere was a bug previously in our commit artifacts step where the\nemitted REVISION hash would reference the commit on the builds branch\nrather than from `main`.\n\nGiven that our internal manual sync script also does this, let's align\nthem both to always reference the commit from `main` instead.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32680).\n* __->__ #32680\n* #32679\n* #32678"
        }
      },
      {
        "sha": "ff8f6f21f756c81fba284557357eb6e6ce765149",
        "commit": {
          "message": "[ci] Fix Will commit these changes www step (#32681)\n\nUnlike the fbsource version of the step, www doesn't add any changes so\nthe `force` input doesn't actually work"
        }
      },
      {
        "sha": "a4f9bd586b6108562e5fba2be235d8f6b450cb36",
        "commit": {
          "message": "Enable Fragment refs in Experimental (#32670)\n\nThat we can test it out in Next.js router conditionally when\nexperimental is on for other reasons."
        }
      },
      {
        "sha": "3bcf8c23debf0c0c746ed11801fa1fe64dfb0159",
        "commit": {
          "message": "[ci] Warm cache (#32685)\n\nTry restoring from old caches as a base to speed up the case where\nnode_modules needs updating.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32685).\n* #32686\n* __->__ #32685"
        }
      },
      {
        "sha": "87d7e4c55be7fea5efd1e567d52e943ad5d3133d",
        "commit": {
          "message": "[ci] Fail on cache miss (#32686)\n\nSince we use a centralized cache we should fail subsequent steps if the\nchild jobs are unable to restore the cache from the first 2 jobs.\n\nAlso fix some incorrect hashes used for the fixture tests.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32686).\n* __->__ #32686\n* #32685"
        }
      },
      {
        "sha": "112224d8d24b127efa1e680403cca2289c1a261b",
        "commit": {
          "message": "[ci] Also cache playground playwright browsers (#32687)\n\nFollowing #32678, do the same for the playground e2e test since this\nstep can sometimes take many minutes to complete."
        }
      },
      {
        "sha": "5f4c5c920fb454f6b8375bdcd4045eaa82e70928",
        "commit": {
          "message": "[compiler] Validate static components\n\nReact uses function identity to determine whether a given JSX expression represents the same type of component and should reconcile (keep state, update props) or replace (teardown state, create a new instance). This PR adds off-by-default validation to check that developers are not dynamically creating components during render.\n\nThe check is local and intentionally conservative. We specifically look for the results of call expressions, new expressions, or function expressions that are then used directly (or aliased) as a JSX tag. This allows common sketchy but fine-in-practice cases like passing a reference to a component from a parent as props, but catches very obvious mistakes such as:\n\n```js\nfunction Example() {\n  const Component = createComponent();\n  return <Component />;\n}\n```\n\nWe could expand this to catch more cases, but this seems like a reasonable starting point. Note that I tried enabling the validation by default and the only fixtures that error are the new ones added here. I'll also test this internally. What i'm imagining is that we enable this in the linter but not the compiler.\n\nghstack-source-id: e7408c0a55478b40d65489703d209e8fa7205e45\nPull Request resolved: https://github.com/facebook/react/pull/32683"
        }
      },
      {
        "sha": "e3c06424ae1162319d786a76371d649dee412c29",
        "commit": {
          "message": "[compiler] Refactor validations to return Result and log where appropriate\n\nUpdates ~all of our validations to return a Result, and then updates callers to either unwrap() if they should bailout or else just log.\n\nghstack-source-id: 418b5f5aa2b7dd49ca76b3f98a48a35150691d7e\nPull Request resolved: https://github.com/facebook/react/pull/32688"
        }
      },
      {
        "sha": "7943da1e81bb8730db78db99af5f967bdf213a75",
        "commit": {
          "message": "Set accurate value for alwaysThrottleRetries on www (#32684)\n\nThis flag value was updated in\nhttps://github.com/facebook/react/pull/28965 (seemingly unrelated, maybe\nas part of unit testing). But its still controlled by a dynamic flag in\nwww. Let's update this to VARIANT to accurately represent the state of\nthe rollout.\n\nBefore:\n<img width=\"1340\" alt=\"Screenshot 2025-03-20 at 10 45 30 AM\"\nsrc=\"https://github.com/user-attachments/assets/d0405a36-eb71-4108-9e23-8d462cc68fb4\"\n/>\n\nAfter:\n<img width=\"1351\" alt=\"Screenshot 2025-03-20 at 10 45 11 AM\"\nsrc=\"https://github.com/user-attachments/assets/459d260d-7a25-430b-95a6-d6a91d958417\"\n/>"
        }
      },
      {
        "sha": "b630219b1377f3117036b1c6118676c16fdb21b7",
        "commit": {
          "message": "[refactor] move isValidElementType to react-is (#32518)"
        }
      },
      {
        "sha": "74bcf3d0d2c34595e33838149d1d5a2ea7d783c6",
        "commit": {
          "message": "[ci] Don't fail on cache miss (#32690)\n\nPartially reverts #32686.\n\nPR caches inherit from caches generated in `main`. If it cannot find\nthat cache, it will create one scoped to just that PR (and PRs that\ninherit from it).\n\nThere is an edge case where cache eviction can happen in the middle of a\ntest run. If cache eviction removes a `main` cache, child jobs that\ndepend on it will start failing because of the `fail-on-cache-miss`\nsetting.\n\nThis PR reverts the default behavior. If this happens, the workflow will\nstill continue in slow mode where it will `yarn install` child jobs\ninstead of reusing from cache. This is slower but will at least allow\nworkflows to continue.\n\nAdditionally I added restore keys so that we can fallback to other\ncaches if present so `yarn install` doesn't need to start over from\nscratch."
        }
      },
      {
        "sha": "addce2f9f222befc6151251a247247a8463052fa",
        "commit": {
          "message": "[ci] Add daily stale branch cache cleanup (#32691)\n\nCleans up stale non-main caches daily\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32691).\n* #32692\n* __->__ #32691"
        }
      },
      {
        "sha": "b88898605427d1e6bb665d7c9261a9be180e5abd",
        "commit": {
          "message": "[ci] Rename other stale branch workflow (#32692)\n\nMakes it easier to tell what is what\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32692).\n* __->__ #32692\n* #32691"
        }
      },
      {
        "sha": "0962f684a066df4fd2a7db7489cb1984799ad674",
        "commit": {
          "message": "[compiler][bugfix] Don't insert hook guards in retry pipeline (#32665)\n\nFixing bug from https://github.com/facebook/react/pull/32164 -- prior to\nthis PR, we inserted hook guards even for functions that bailed out of\ncompilation."
        }
      },
      {
        "sha": "ac799e569d5899c67d72a3e9af5c18b0672eb998",
        "commit": {
          "message": "[ci] Bump number of shards for test_build to 10 (#32693)\n\nI noticed `test_build` can take a while so let's bump the number of\nshards"
        }
      },
      {
        "sha": "e1e740717ba85597f03fd837a36c7bab5803a0d2",
        "commit": {
          "message": "Force layout before startViewTransition (#32699)\n\nThis works around this Safari bug.\nhttps://bugs.webkit.org/show_bug.cgi?id=290146\n\nThis unfortunate because it may cause additional layouts if there's more\nupdates to the tree coming by manual mutation before it gets painted\nnaturally. However, we might end up wanting to read layout early anyway.\n\nThis affects the fixture because we clone the `<link>` from the `<head>`\nwhich is itself another bug. However, it should be possible to have\n`<link>` tags inserted into the new tree so this is still relevant."
        }
      },
      {
        "sha": "607615f4f6b399c314a567fdbf3ab53fa572991d",
        "commit": {
          "message": "[ci] Scope permissions for runtime_commit_artifacts.yml (#32701)"
        }
      },
      {
        "sha": "ab693a926f13cc2c4c4a3ab19d5405471f87236b",
        "commit": {
          "message": "[ci] Scope permissions for all workflows (#32704)"
        }
      },
      {
        "sha": "daee08562ccf5abf7108b63f274f5ca669ee7dd5",
        "commit": {
          "message": "[activity] remove ref for now (#32645)\n\nFollowup from https://github.com/facebook/react/pull/32499\n\nManual mode is unused and has some bugs such as revealing hidden\nboundaries when manually toggling. We also want to change how manual\nmode works, and do some refactors to Activity to make it easier to\nsupport. For now we'll remove it, then add it back after the other\nchanges we have planned."
        }
      },
      {
        "sha": "fe8c10695cc65502b3e9f9db4b6dbf20f521bb7e",
        "commit": {
          "message": "[ci] Add missing permissions (#32707)\n\nMissed these ones earlier.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32707).\n* #32708\n* __->__ #32707"
        }
      },
      {
        "sha": "4f080e498c4c0b373b3e1a8b0e735fceb83c267b",
        "commit": {
          "message": "[ci] Also give permissions on pull_requests (#32709)\n\nMissed one\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32709).\n* #32708\n* __->__ #32709"
        }
      },
      {
        "sha": "156f0eca20d37f1f5aa2e0f518489f23684c89de",
        "commit": {
          "message": "[ci] Don't use pull_request_target (#32708)\n\n`pull_request_target` gives access to repository secrets and permissions\nfor use from forks, for example to add a comment.\n\n> Due to the dangers inherent to automatic processing of PRs, GitHub’s\nstandard pull_request workflow trigger by default prevents write\npermissions and secrets access to the target repository. However, in\nsome scenarios such access is needed to properly process the PR. To this\nend the pull_request_target workflow trigger was introduced.\n\n> The reason to introduce the pull_request_target trigger was to enable\nworkflows to label PRs (e.g. needs review) or to comment on the PR.\n\n(via\nhttps://securitylab.github.com/resources/github-actions-preventing-pwn-requests/)\n\nIn this case there is no reason for us to allow this, so let's just use\nthe normal `pull_request` trigger which is less permissive.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32708).\n* __->__ #32708\n* #32709"
        }
      },
      {
        "sha": "de4aad5ba693be099b215b5819b5f25d05051a84",
        "commit": {
          "message": "[ci] Add missing permissions to runtime_commit_artifacts.yml (#32710)\n\nTurns out we need permissions to write to `contents` after all.\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32710).\n* #32711\n* __->__ #32710"
        }
      },
      {
        "sha": "6b1a2c1d81630a5f385c5be0f758365b63d92eae",
        "commit": {
          "message": "fix(react-compiler): optimize components declared with arrow function and implicit return and `compilationMode: 'infer'` (#31792)\n\nfixes https://github.com/facebook/react/issues/31601\nhttps://github.com/facebook/react/issues/31639 cc @josephsavona"
        }
      },
      {
        "sha": "da996a15be4f14aeb9726037f4559ff1cb3c2600",
        "commit": {
          "message": "[compiler][be] Move e2e tests to BabelPlugin transformer (#32706)\n\nClean up jest-e2e setup since\nhttps://github.com/facebook/react/pull/32663 and other features need\nprogram context (e.g. changing imports)\n---\n[//]: # (BEGIN SAPLING FOOTER)\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/32706).\n* #32663\n* __->__ #32706"
        }
      },
      {
        "sha": "4a9df08157f001c01b078d259748512211233dcf",
        "commit": {
          "message": "Stop creating Owner Stacks if many have been created recently (#32529)\n\nCo-authored-by: Jack Pope <jackpope1@gmail.com>"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v19.0.0",
      "body": "Below is a list of all new features, APIs, deprecations, and breaking changes. Read [React 19 release post](https://react.dev/blog/2024/04/25/react-19) and [React 19 upgrade guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more information.\r\n\r\n> Note: To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. We recommend upgrading to React 18.3.1 first to help identify any issues before upgrading to React 19.\r\n\r\n## New Features\r\n\r\n### React\r\n\r\n* Actions: `startTransition` can now accept async functions. Functions passed to `startTransition` are called “Actions”. A given Transition can include one or more Actions which update state in the background and update the UI with one commit. In addition to updating state, Actions can now perform side effects including async requests, and the Action will wait for the work to finish before finishing the Transition. This feature allows Transitions to include side effects like `fetch()` in the pending state, and provides support for error handling, and optimistic updates.  \r\n* `useActionState`: is a new hook to order Actions inside of a Transition with access to the state of the action, and the pending state. It accepts a reducer that can call Actions, and the initial state used for first render. It also accepts an optional string that is used if the action is passed to a form `action` prop to support progressive enhancement in forms.  \r\n* `useOptimistic`: is a new hook to update state while a Transition is in progress. It returns the state, and a set function that can be called inside a transition to “optimistically” update the state to expected final value immediately while the Transition completes in the background. When the transition finishes, the state is updated to the new value.  \r\n* `use`: is a new API that allows reading resources in render. In React 19, `use` accepts a promise or Context. If provided a promise, `use` will suspend until a value is resolved. `use` can only be used in render but can be called conditionally.  \r\n* `ref` as a prop: Refs can now be used as props, removing the need for `forwardRef`.  \r\n* **Suspense sibling pre-warming**: When a component suspends, React will immediately commit the fallback of the nearest Suspense boundary, without waiting for the entire sibling tree to render. After the fallback commits, React will schedule another render for the suspended siblings to “pre-warm” lazy requests.\r\n\r\n### React DOM Client\r\n\r\n* `<form> action` prop: Form Actions allow you to manage forms automatically and integrate with `useFormStatus`. When a `<form> action` succeeds, React will automatically reset the form for uncontrolled components. The form can be reset manually with the new `requestFormReset` API.  \r\n* `<button> and <input> formAction` prop: Actions can be passed to the `formAction` prop to configure form submission behavior. This allows using different Actions depending on the input.  \r\n* `useFormStatus`: is a new hook that provides the status of the parent `<form> action`, as if the form was a Context provider. The hook returns the values: `pending`, `data`, `method`, and `action`.  \r\n* Support for Document Metadata: We’ve added support for rendering document metadata tags in components natively. React will automatically hoist them into the `<head>` section of the document.  \r\n* Support for Stylesheets: React 19 will ensure stylesheets are inserted into the `<head>` on the client before revealing the content of a Suspense boundary that depends on that stylesheet.  \r\n* Support for async scripts: Async scripts can be rendered anywhere in the component tree and React will handle ordering and deduplication.  \r\n* Support for preloading resources: React 19 ships with `preinit`, `preload`, `prefetchDNS`, and `preconnect` APIs to optimize initial page loads by moving discovery of additional resources like fonts out of stylesheet loading. They can also be used to prefetch resources used by an anticipated navigation.\r\n\r\n### React DOM Server\r\n\r\n* Added `prerender` and `prerenderToNodeStream` APIs for static site generation. They are designed to work with streaming environments like Node.js Streams and Web Streams. Unlike `renderToString`, they wait for data to load for HTML generation.\r\n\r\n### React Server Components\r\n\r\n* RSC features such as directives, server components, and server functions are now stable. This means libraries that ship with Server Components can now target React 19 as a peer dependency with a react-server export condition for use in frameworks that support the Full-stack React Architecture. The underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. See [docs](https://19.react.dev/reference/rsc/server-components) for how to support React Server Components.\r\n\r\n## Deprecations\r\n\r\n* Deprecated: `element.ref` access: React 19 supports ref as a prop, so we’re deprecating `element.ref` in favor of `element.props.ref`. Accessing will result in a warning.  \r\n* `react-test-renderer`: In React 19, react-test-renderer logs a deprecation warning and has switched to concurrent rendering for web usage. We recommend migrating your tests to  @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro)\r\n\r\n## Breaking Changes\r\n\r\nReact 19 brings in a number of breaking changes, including the removals of long-deprecated APIs. We recommend first upgrading to `18.3.1`, where we've added additional deprecation warnings. Check out the [upgrade guide](https://19.react.dev/blog/2024/04/25/react-19-upgrade-guide) for more details and guidance on codemodding.\r\n\r\n### React\r\n\r\n* New JSX Transform is now required: We introduced [a new JSX transform](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform.  \r\n* Errors in render are not re-thrown: Errors that are not caught by an Error Boundary are now reported to window.reportError. Errors that are caught by an Error Boundary are reported to console.error. We’ve introduced `onUncaughtError` and `onCaughtError` methods to `createRoot` and `hydrateRoot` to customize this error handling.  \r\n* Removed: `propTypes`: Using `propTypes` will now be silently ignored. If required, we recommend migrating to TypeScript or another type-checking solution.  \r\n* Removed: `defaultProps` for functions: ES6 default parameters can be used in place. Class components continue to support `defaultProps` since there is no ES6 alternative.  \r\n* Removed: `contextTypes` and `getChildContext`: Legacy Context for class components has been removed in favor of the `contextType` API.  \r\n* Removed: string refs: Any usage of string refs need to be migrated to ref callbacks.   \r\n* Removed: Module pattern factories: A rarely used pattern that can be migrated to regular functions.  \r\n* Removed: `React.createFactory`: Now that JSX is broadly supported, all `createFactory` usage can be migrated to JSX components.  \r\n* Removed: `react-test-renderer/shallow`: This has been a re-export of [react-shallow-renderer](https://github.com/enzymejs/react-shallow-renderer) since React 18\\. If needed, you can continue to use the third-party package directly. We recommend using @testinglibrary.com/docs/react-testing-library/intro/) or @testingesting-library.com/docs/react-native-testing-library/intro) instead.\r\n\r\n### React DOM\r\n\r\n* Removed: `react-dom/test-utils`: We’ve moved `act` from `react-dom/test-utils` to react. All other utilities have been removed.   \r\n* Removed: `ReactDOM`.`render`, `ReactDOM`.`hydrate`: These have been removed in favor of the concurrent equivalents: `ReactDOM`.`createRoot` and `ReactDOM.hydrateRoot`.  \r\n* Removed: `unmountComponentAtNode`: Removed in favor of `root.unmount()`.  \r\n* Removed: `ReactDOM`.`findDOMNode`: You can replace `ReactDOM`.`findDOMNode` with DOM Refs.\r\n\r\n## Notable Changes\r\n\r\n### React\r\n\r\n* `<Context>` as a provider: You can now render `<Context>` as a provider instead of `<Context.Provider>`.  \r\n* Cleanup functions for refs: When the component unmounts, React will call the cleanup function returned from the ref callback.  \r\n* `useDeferredValue` initial value argument: When provided, `useDeferredValue` will return the initial value for the initial render of a component, then schedule a re-render in the background with the `deferredValue` returned.  \r\n* Support for Custom Elements: React 19 now passes all tests on [Custom Elements Everywhere](https://custom-elements-everywhere.com/).  \r\n* StrictMode changes: `useMemo` and `useCallback` will now reuse the memoized results from the first render, during the second render. Additionally, StrictMode will now double-invoke ref callback functions on initial mount.  \r\n* UMD builds removed: To load React 19 with a script tag, we recommend using an ESM-based CDN such as [esm.sh](http://esm.sh).\r\n\r\n### React DOM\r\n\r\n* Diffs for hydration errors: In the case of a mismatch, React 19 logs a single error with a diff of the mismatched content.  \r\n* Compatibility with third-party scripts and extensions: React will now force a client re-render to fix up any mismatched content caused by elements inserted by third-party JS. \r\n\r\n## TypeScript Changes\r\n\r\nThe most common changes can be codemodded with `npx types-react-codemod@latest preset-19 ./path-to-your-react-ts-files`.\r\n\r\n* Removed deprecated TypeScript types:   \r\n  * `ReactChild` (replacement: `React.ReactElement | number | string)`  \r\n  * `ReactFragment` (replacement: `Iterable<React.ReactNode>`)  \r\n  * `ReactNodeArray` (replacement: `ReadonlyArray<React.ReactNode>`)  \r\n  * `ReactText` (replacement: `number | string`)  \r\n  * `VoidFunctionComponent` (replacement: `FunctionComponent`)  \r\n  * `VFC` (replacement: `FC`)  \r\n  * Moved to `prop-types`: `Requireable`, `ValidationMap`, `Validator`, `WeakValidationMap`  \r\n  * Moved to `create-react-class`: `ClassicComponentClass`, `ClassicComponent`, `ClassicElement`, `ComponentSpec`, `Mixin`, `ReactChildren`, `ReactHTML`, `ReactSVG`, `SFCFactory`  \r\n* Disallow implicit return in refs: refs can now accept cleanup functions. When you return something else, we can’t tell if you intentionally returned something not meant to clean up or returned the wrong value. Implicit returns of anything but functions will now error.   \r\n* Require initial argument to `useRef`: The initial argument is now required to match `useState`, `createContext` etc  \r\n* Refs are mutable by default: Ref objects returned from `useRef()` are now always mutable instead of sometimes being immutable. This feature was too confusing for users and conflicted with legit cases where refs were managed by React and manually written to.  \r\n* Strict `ReactElement` typing: The props of React elements now default to `unknown` instead of `any` if the element is typed as `ReactElement`  \r\n* JSX namespace in TypeScript: The global `JSX` namespace is removed to improve interoperability with other libraries using JSX. Instead, the JSX namespace is available from the React package: `import { JSX } from 'react'`  \r\n* Better `useReducer` typings: Most `useReducer` usage should not require explicit type arguments.  \r\n  For example,\r\n  ```diff  \r\n  -useReducer<React.Reducer<State, Action>>(reducer)  \r\n  +useReducer(reducer)  \r\n  ```\r\n  or  \r\n  ```diff\r\n  -useReducer<React.Reducer<State, Action>>(reducer)  \r\n  +useReducer<State, [Action]>(reducer)\r\n  ```\r\n\r\n\r\n## All Changes\r\n\r\n### React\r\n\r\n* Add support for async Actions ([\\#26621](https://github.com/facebook/react/pull/26621), [\\#26726](https://github.com/facebook/react/pull/26726), [\\#28078](https://github.com/facebook/react/pull/28078), [\\#28097](https://github.com/facebook/react/pull/28097), [\\#29226](https://github.com/facebook/react/pull/29226), [\\#29618](https://github.com/facebook/react/pull/29618), [\\#29670](https://github.com/facebook/react/pull/29670), [\\#26716](https://github.com/facebook/react/pull/26716) by @acdlite and @sebmarkbage)  \r\n* Add `useActionState()` hook to update state based on the result of a Form Action ([\\#27270](https://github.com/facebook/react/pull/27270), [\\#27278](https://github.com/facebook/react/pull/27278), [\\#27309](https://github.com/facebook/react/pull/27309), [\\#27302](https://github.com/facebook/react/pull/27302), [\\#27307](https://github.com/facebook/react/pull/27307), [\\#27366](https://github.com/facebook/react/pull/27366), [\\#27370](https://github.com/facebook/react/pull/27370), [\\#27321](https://github.com/facebook/react/pull/27321), [\\#27374](https://github.com/facebook/react/pull/27374), [\\#27372](https://github.com/facebook/react/pull/27372), [\\#27397](https://github.com/facebook/react/pull/27397), [\\#27399](https://github.com/facebook/react/pull/27399), [\\#27460](https://github.com/facebook/react/pull/27460), [\\#28557](https://github.com/facebook/react/pull/28557), [\\#27570](https://github.com/facebook/react/pull/27570), [\\#27571](https://github.com/facebook/react/pull/27571), [\\#28631](https://github.com/facebook/react/pull/28631), [\\#28788](https://github.com/facebook/react/pull/28788), [\\#29694](https://github.com/facebook/react/pull/29694), [\\#29695](https://github.com/facebook/react/pull/29695), [\\#29694](https://github.com/facebook/react/pull/29694), [\\#29665](https://github.com/facebook/react/pull/29665), [\\#28232](https://github.com/facebook/react/pull/28232), [\\#28319](https://github.com/facebook/react/pull/28319) by @acdlite, @eps1lon, and @rickhanlonii)  \r\n* Add `use()` API to read resources in render ([\\#25084](https://github.com/facebook/react/pull/25084), [\\#25202](https://github.com/facebook/react/pull/25202), [\\#25207](https://github.com/facebook/react/pull/25207), [\\#25214](https://github.com/facebook/react/pull/25214), [\\#25226](https://github.com/facebook/react/pull/25226), [\\#25247](https://github.com/facebook/react/pull/25247), [\\#25539](https://github.com/facebook/react/pull/25539), [\\#25538](https://github.com/facebook/react/pull/25538), [\\#25537](https://github.com/facebook/react/pull/25537), [\\#25543](https://github.com/facebook/react/pull/25543), [\\#25561](https://github.com/facebook/react/pull/25561), [\\#25620](https://github.com/facebook/react/pull/25620), [\\#25615](https://github.com/facebook/react/pull/25615), [\\#25922](https://github.com/facebook/react/pull/25922), [\\#25641](https://github.com/facebook/react/pull/25641), [\\#25634](https://github.com/facebook/react/pull/25634), [\\#26232](https://github.com/facebook/react/pull/26232), [\\#26536](https://github.com/facebook/react/pull/26535), [\\#26739](https://github.com/facebook/react/pull/26739), [\\#28233](https://github.com/facebook/react/pull/28233) by @acdlite, @MofeiZ, @sebmarkbage, @sophiebits, @eps1lon, and @hansottowirtz)  \r\n* Add `useOptimistic()` hook to display mutated state optimistically during an async mutation ([\\#26740](https://github.com/facebook/react/pull/26740), [\\#26772](https://github.com/facebook/react/pull/26772), [\\#27277](https://github.com/facebook/react/pull/27277), [\\#27453](https://github.com/facebook/react/pull/27453), [\\#27454](https://github.com/facebook/react/pull/27454), [\\#27936](https://github.com/facebook/react/pull/27936) by @acdlite)  \r\n* Added an `initialValue` argument to `useDeferredValue()` hook ([\\#27500](https://github.com/facebook/react/pull/27500), [\\#27509](https://github.com/facebook/react/pull/27509), [\\#27512](https://github.com/facebook/react/pull/27512), [\\#27888](https://github.com/facebook/react/pull/27888), [\\#27550](https://github.com/facebook/react/pull/27550) by @acdlite)  \r\n* Support refs as props, warn on `element.ref` access ([\\#28348](https://github.com/facebook/react/pull/28348), [\\#28464](https://github.com/facebook/react/pull/28464), [\\#28731](https://github.com/facebook/react/pull/28731) by @acdlite)  \r\n* Support Custom Elements ([\\#22184](https://github.com/facebook/react/pull/22184), [\\#26524](https://github.com/facebook/react/pull/26524), [\\#26523](https://github.com/facebook/react/pull/26523), [\\#27511](https://github.com/facebook/react/pull/27511), [\\#24541](https://github.com/facebook/react/pull/24541) by @josepharhar, @sebmarkbage, @gnoff and @eps1lon)  \r\n* Add ref cleanup function ([\\#25686](https://github.com/facebook/react/pull/25686), [\\#28883](https://github.com/facebook/react/pull/28883), [\\#28910](https://github.com/facebook/react/pull/28910)  by @sammy-SC), @jackpope, and @kassens)  \r\n* Sibling pre-rendering replaced by sibling pre-warming ([\\#26380](https://github.com/facebook/react/pull/26380), [\\#26549](https://github.com/facebook/react/pull/26549), [\\#30761](https://github.com/facebook/react/pull/30761), [\\#30800](https://github.com/facebook/react/pull/30800), [\\#30762](https://github.com/facebook/react/pull/30762), [\\#30879](https://github.com/facebook/react/pull/30879), [\\#30934](https://github.com/facebook/react/pull/30934), [\\#30952](https://github.com/facebook/react/pull/30952), [\\#31056](https://github.com/facebook/react/pull/31056), [\\#31452](https://github.com/facebook/react/pull/31452) by @sammy-SC), @acdlite, @gnoff, @jackpope, @rickhanlonii)  \r\n* Don’t rethrow errors at the root ([\\#28627](https://github.com/facebook/react/pull/28627), [\\#28641](https://github.com/facebook/react/pull/28641) by @sebmarkbage)  \r\n* Batch sync discrete, continuous, and default lanes ([\\#25700](https://github.com/facebook/react/pull/25700) by @tyao1)  \r\n* Switch `<Context>` to mean `<Context.Provider>` ([\\#28226](https://github.com/facebook/react/pull/28226) by @gaearon)  \r\n* Changes to *StrictMode*  \r\n  * Handle `info`, `group`, and `groupCollapsed` in *StrictMode* logging ([\\#25172](https://github.com/facebook/react/pull/25172) by @timneutkens)  \r\n  * Refs are now attached/detached/attached in *StrictMode* ([\\#25049](https://github.com/facebook/react/pull/25049) by @sammy-SC)\r\n  * Fix `useSyncExternalStore()` hydration in *StrictMode* ([\\#26791](https://github.com/facebook/react/pull/26791) by @sophiebits)  \r\n  * Always trigger `componentWillUnmount()` in *StrictMode* ([\\#26842](https://github.com/facebook/react/pull/26842) by @tyao1)  \r\n  * Restore double invoking `useState()` and `useReducer()` initializer functions in *StrictMode* ([\\#28248](https://github.com/facebook/react/pull/28248) by @eps1lon)  \r\n  * Reuse memoized result from first pass ([\\#25583](https://github.com/facebook/react/pull/25583) by @acdlite)  \r\n  * Fix `useId()` in *StrictMode* ([\\#25713](https://github.com/facebook/react/pull/25713) by @gnoff)  \r\n  * Add component name to *StrictMode* error messages ([\\#25718](https://github.com/facebook/react/pull/25718) by @sammy-SC)\r\n* Add support for rendering BigInt ([\\#24580](https://github.com/facebook/react/pull/24580) by @eps1lon)  \r\n* `act()` no longer checks `shouldYield` which can be inaccurate in test environments ([\\#26317](https://github.com/facebook/react/pull/26317) by @acdlite)  \r\n* Warn when keys are spread with props ([\\#25697](https://github.com/facebook/react/pull/25697), [\\#26080](https://github.com/facebook/react/pull/26080) by @sebmarkbage and @kassens)  \r\n* Generate sourcemaps for production build artifacts ([\\#26446](https://github.com/facebook/react/pull/26446) by @markerikson)  \r\n* Improve stack diffing algorithm ([\\#27132](https://github.com/facebook/react/pull/27132) by @KarimP)  \r\n* Suspense throttling lowered from 500ms to 300ms ([\\#26803](https://github.com/facebook/react/pull/26803) by @acdlite)  \r\n* Lazily propagate context changes ([\\#20890](https://github.com/facebook/react/pull/20890) by @acdlite and @gnoff)  \r\n* Immediately rerender pinged fiber ([\\#25074](https://github.com/facebook/react/pull/25074) by @acdlite)  \r\n* Move update scheduling to microtask ([\\#26512](https://github.com/facebook/react/pull/26512) by @acdlite)  \r\n* Consistently apply throttled retries ([\\#26611](https://github.com/facebook/react/pull/26611), [\\#26802](https://github.com/facebook/react/pull/26802) by @acdlite)  \r\n* Suspend Thenable/Lazy if it's used in React.Children ([\\#28284](https://github.com/facebook/react/pull/28284) by @sebmarkbage)  \r\n* Detect infinite update loops caused by render phase updates ([\\#26625](https://github.com/facebook/react/pull/26625) by @acdlite)  \r\n* Update conditional hooks warning ([\\#29626](https://github.com/facebook/react/pull/29626) by @sophiebits)  \r\n* Update error URLs to go to new docs ([\\#27240](https://github.com/facebook/react/pull/27240) by @rickhanlonii)  \r\n* Rename the `react.element` symbol to `react.transitional.element` ([\\#28813](https://github.com/facebook/react/pull/28813) by @sebmarkbage)  \r\n* Fix crash when suspending in shell during `useSyncExternalStore()` re-render ([\\#27199](https://github.com/facebook/react/pull/27199) by @acdlite)  \r\n* Fix incorrect “detected multiple renderers\" error in tests ([\\#22797](https://github.com/facebook/react/pull/22797) by @eps1lon)  \r\n* Fix bug where effect cleanup may be called twice after bailout ([\\#26561](https://github.com/facebook/react/pull/26561) by @acdlite)  \r\n* Fix suspending in shell during discrete update ([\\#25495](https://github.com/facebook/react/pull/25495) by @acdlite)  \r\n* Fix memory leak after repeated setState bailouts ([\\#25309](https://github.com/facebook/react/pull/25309) by @acdlite)  \r\n* Fix `useSyncExternalStore()` dropped update when state is dispatched in render phase ([\\#25578](https://github.com/facebook/react/pull/25578) by @pandaiolo)  \r\n* Fix logging when rendering a lazy fragment ([\\#30372](https://github.com/facebook/react/pull/30372) by @tomtom-sherman))  \r\n* Remove string refs ([\\#25383](https://github.com/facebook/react/pull/25383), [\\#28322](https://github.com/facebook/react/pull/28322) by @eps1lon and @acdlite)  \r\n* Remove Legacy Context (\\#30319 by @kassens)  \r\n* Remove `RefreshRuntime.findAffectedHostInstances` ([\\#30538](https://github.com/facebook/react/pull/30538) by @gaearon)  \r\n* Remove client caching from `cache()` API ([\\#27977](https://github.com/facebook/react/pull/27977), [\\#28250](https://github.com/facebook/react/pull/28250) by @acdlite and @gnoff)  \r\n* Remove `propTypes` ([\\#28324](https://github.com/facebook/react/pull/28324), [\\#28326](https://github.com/facebook/react/pull/28326) by @gaearon)  \r\n* Remove `defaultProps` support, except for classes ([\\#28733](https://github.com/facebook/react/pull/28733) by @acdlite)  \r\n* Remove UMD builds ([\\#28735](https://github.com/facebook/react/pull/28735) by @gnoff)  \r\n* Remove delay for non-transition updates ([\\#26597](https://github.com/facebook/react/pull/26597) by @acdlite)  \r\n* Remove `createFactory` ([\\#27798](https://github.com/facebook/react/pull/27798) by @kassens)\r\n\r\n### React DOM\r\n\r\n* Adds Form Actions to handle form submission ([\\#26379](https://github.com/facebook/react/pull/26379), [\\#26674](https://github.com/facebook/react/pull/26674), [\\#26689](https://github.com/facebook/react/pull/26689), [\\#26708](https://github.com/facebook/react/pull/26708), [\\#26714](https://github.com/facebook/react/pull/26714),  [\\#26735](https://github.com/facebook/react/pull/26735), [\\#26846](https://github.com/facebook/react/pull/26846), [\\#27358](https://github.com/facebook/react/pull/27358),  [\\#28056](https://github.com/facebook/react/pull/28056) by @sebmarkbage, @acdlite, and @jupapios)  \r\n* Add `useFormStatus()` hook to provide status information of the last form submission ([\\#26719](https://github.com/facebook/react/pull/26719), [\\#26722](https://github.com/facebook/react/pull/26722), [\\#26788](https://github.com/facebook/react/pull/26788),  [\\#29019](https://github.com/facebook/react/pull/29019), [\\#28728](https://github.com/facebook/react/pull/28728), [\\#28413](https://github.com/facebook/react/pull/28413) by @acdlite and @eps1lon)  \r\n* Support for Document Metadata. Adds `preinit`, `preinitModule`, `preconnect`, `prefetchDNS`, `preload`, and `preloadModule` APIs.  \r\n  * [\\#25060](https://github.com/facebook/react/pull/25060), [\\#25243](https://github.com/facebook/react/pull/25243), [\\#25388](https://github.com/facebook/react/pull/25388), [\\#25432](https://github.com/facebook/react/pull/25432), [\\#25436](https://github.com/facebook/react/pull/25436), [\\#25426](https://github.com/facebook/react/pull/25426), [\\#25500](https://github.com/facebook/react/pull/25500), [\\#25480](https://github.com/facebook/react/pull/25480), [\\#25508](https://github.com/facebook/react/pull/25508), [\\#25515](https://github.com/facebook/react/pull/25515), [\\#25514](https://github.com/facebook/react/pull/25514), [\\#25532](https://github.com/facebook/react/pull/25532), [\\#25536](https://github.com/facebook/react/pull/25536), [\\#25534](https://github.com/facebook/react/pull/25534), [\\#25546](https://github.com/facebook/react/pull/25546), [\\#25559](https://github.com/facebook/react/pull/25559), [\\#25569](https://github.com/facebook/react/pull/25569), [\\#25599](https://github.com/facebook/react/pull/25599), [\\#25689](https://github.com/facebook/react/pull/25689), [\\#26106](https://github.com/facebook/react/pull/26106), [\\#26152](https://github.com/facebook/react/pull/26152), [\\#26239](https://github.com/facebook/react/pull/26239), [\\#26237](https://github.com/facebook/react/pull/26237), [\\#26280](https://github.com/facebook/react/pull/26280), [\\#26154](https://github.com/facebook/react/pull/26154), [\\#26256](https://github.com/facebook/react/pull/26256), [\\#26353](https://github.com/facebook/react/pull/26353), [\\#26427](https://github.com/facebook/react/pull/26427), [\\#26450](https://github.com/facebook/react/pull/26450), [\\#26502](https://github.com/facebook/react/pull/26502),  [\\#26514](https://github.com/facebook/react/pull/26514), [\\#26531](https://github.com/facebook/react/pull/26531), [\\#26532](https://github.com/facebook/react/pull/26532), [\\#26557](https://github.com/facebook/react/pull/26557), [\\#26871](https://github.com/facebook/react/pull/26871), [\\#26881](https://github.com/facebook/react/pull/26881), [\\#26877](https://github.com/facebook/react/pull/26877), [\\#26873](https://github.com/facebook/react/pull/26873), [\\#26880](https://github.com/facebook/react/pull/26880), [\\#26942](https://github.com/facebook/react/pull/26942), [\\#26938](https://github.com/facebook/react/pull/26938), [\\#26940](https://github.com/facebook/react/pull/26940), [\\#26939](https://github.com/facebook/react/pull/26939), [\\#27030](https://github.com/facebook/react/pull/27030), [\\#27201](https://github.com/facebook/react/pull/27201), [\\#27212](https://github.com/facebook/react/pull/27212), [\\#27217](https://github.com/facebook/react/pull/27217), [\\#27218](https://github.com/facebook/react/pull/27218), [\\#27220](https://github.com/facebook/react/pull/27220), [\\#27224](https://github.com/facebook/react/pull/27224), [\\#27223](https://github.com/facebook/react/pull/27223), [\\#27269](https://github.com/facebook/react/pull/27269), [\\#27260](https://github.com/facebook/react/pull/27260), [\\#27347](https://github.com/facebook/react/pull/27347), [\\#27346](https://github.com/facebook/react/pull/27346), [\\#27361](https://github.com/facebook/react/pull/27361), [\\#27400](https://github.com/facebook/react/pull/27400), [\\#27541](https://github.com/facebook/react/pull/27541), [\\#27610](https://github.com/facebook/react/pull/27610), [\\#28110](https://github.com/facebook/react/pull/28110), [\\#29693](https://github.com/facebook/react/pull/29693), [\\#29732](https://github.com/facebook/react/pull/29732), [\\#29811](https://github.com/facebook/react/pull/29811), [\\#27586](https://github.com/facebook/react/pull/27586), [\\#28069](https://github.com/facebook/react/pull/28069) by @gnoff, @sebmarkbage, @acdlite, @kassens, @sokra, @sweetliquid  \r\n* Add `fetchPriority` to `<img>` and `<link>` ([\\#25927](https://github.com/facebook/react/pull/25927) by @styfle)  \r\n* Add support for SVG `transformOrigin` prop ([\\#26130](https://github.com/facebook/react/pull/26130) by @aravarav-ind))  \r\n* Add support for `onScrollEnd` event ([\\#26789](https://github.com/facebook/react/pull/26789) by @devongovett)  \r\n* Allow `<hr>` as child of `<select>` ([\\#27632](https://github.com/facebook/react/pull/27632) by @SouSingh)  \r\n* Add support for Popover API ([\\#27981](https://github.com/facebook/react/pull/27981) by @eps1lon)  \r\n* Add support for `inert` ([\\#24730](https://github.com/facebook/react/pull/24730) by @eps1lon)  \r\n* Add support for `imageSizes` and `imageSrcSet` ([\\#22550](https://github.com/facebook/react/pull/22550) by @eps1lon)  \r\n* Synchronously flush transitions in popstate events ([\\#26025](https://github.com/facebook/react/pull/26025), [\\#27559](https://github.com/facebook/react/pull/27559), [\\#27505](https://github.com/facebook/react/pull/27505), [\\#30759](https://github.com/facebook/react/pull/30759) by @tyao1 and @acdlite)  \r\n* `flushSync` exhausts queue even if something throws ([\\#26366](https://github.com/facebook/react/pull/26366) by @acdlite)  \r\n* Throw error if `react` and `react-dom` versions don’t match ([\\#29236](https://github.com/facebook/react/pull/29236) by @acdlite)  \r\n* Ensure `srcset` and `src` are assigned last on `<img>` instances ([\\#30340](https://github.com/facebook/react/pull/30340) by @gnoff)  \r\n* Javascript URLs are replaced with functions that throw errors ([\\#26507](https://github.com/facebook/react/pull/26507), [\\#29808](https://github.com/facebook/react/pull/29808) by @sebmarkbage and @kassens)  \r\n* Treat toggle and beforetoggle as discrete events ([\\#29176](https://github.com/facebook/react/pull/29176) by @eps1lon)  \r\n* Filter out empty `src` and `href` attributes (unless for `<a href=”” />`) ([\\#18513](https://github.com/facebook/react/pull/18513), [\\#28124](https://github.com/facebook/react/pull/28124) by @bvaughn and @eps1lon)  \r\n* Fix unitless `scale` style property ([\\#25601](https://github.com/facebook/react/pull/25601) by @JonnyBurger)  \r\n* Fix `onChange` error message for controlled `<select>` ([\\#27740](https://github.com/facebook/react/pull/27740) by @BikiBiki-das))  \r\n* Fix focus restore in child windows after element reorder ([\\#30951](https://github.com/facebook/react/pull/30951) by @ling1726)  \r\n* Remove `render`, `hydrate`, `findDOMNode`, `unmountComponentAtNode`, `unstable_createEventHandle`, `unstable_renderSubtreeIntoContainer`, and `unstable_runWithPriority`. Move `createRoot` and `hydrateRoot` to `react-dom/client`. ([\\#28271](https://github.com/facebook/react/pull/28271) by @gnoff)  \r\n* Remove `test-utils` ([\\#28541](https://github.com/facebook/react/pull/28541) by @eps1lon)  \r\n* Remove `unstable_flushControlled` ([\\#26397](https://github.com/facebook/react/pull/26397) by @kassens)  \r\n* Remove legacy mode ([\\#28468](https://github.com/facebook/react/pull/28468) by @gnoff)  \r\n* Remove `renderToStaticNodeStream()` ([\\#28873](https://github.com/facebook/react/pull/28873) by @gnoff)  \r\n* Remove `unstable_renderSubtreeIntoContainer` ([\\#29771](https://github.com/facebook/react/pull/29771) by @kassens)\r\n\r\n### React DOM Server\r\n\r\n* Stable release of React Server Components ([Many, many PRs](https://github.com/facebook/react/pulls?q=is%3Apr+is%3Aclosed+%5BFlight%5D+in%3Atitle+created%3A%3C2024-12-01+) by @sebmarkbage, @acdlite, @gnoff, @sammy-SC, @gaearon, @sophiebits, @unstubbable, @lubieowoce)\r\n* Support Server Actions ([\\#26124](https://github.com/facebook/react/pull/26124), [\\#26632](https://github.com/facebook/react/pull/26632), [\\#27459](https://github.com/facebook/react/pull/27459) by @sebmarkbage and @acdlite)  \r\n* Changes to SSR  \r\n  * Add external runtime which bootstraps hydration on the client for binary transparency ([\\#25437](https://github.com/facebook/react/pull/25437), [\\#26169](https://github.com/facebook/react/pull/26169), [\\#25499](https://github.com/facebook/react/pull/25499) by @MofeiZ and @acdlite)  \r\n  * Support subresource integrity for `bootstrapScripts` and `bootstrapModules` ([\\#25104](https://github.com/facebook/react/pull/25104) by @gnoff)  \r\n  * Fix null bytes written at text chunk boundaries ([\\#26228](https://github.com/facebook/react/pull/26228) by @sophiebits)  \r\n  * Fix logic around attribute serialization ([\\#26526](https://github.com/facebook/react/pull/26526) by @gnoff)  \r\n  * Fix precomputed chunk cleared on Node 18 ([\\#25645](https://github.com/facebook/react/pull/25645) by @feedthejim)  \r\n  * Optimize end tag chunks ([\\#27522](https://github.com/facebook/react/pull/27522) by @yujunjung)  \r\n  * Gracefully handle suspending in DOM configs ([\\#26768](https://github.com/facebook/react/pull/26768) by @sebmarkbage)  \r\n  * Check for nullish values on ReactCustomFormAction ([\\#26770](https://github.com/facebook/react/pull/26770) by @sebmarkbage)  \r\n  * Preload `bootstrapModules`, `bootstrapScripts`, and update priority queue ([\\#26754](https://github.com/facebook/react/pull/26754), [\\#26753](https://github.com/facebook/react/pull/26753), [\\#27190](https://github.com/facebook/react/pull/27190), [\\#27189](https://github.com/facebook/react/pull/27189) by @gnoff)  \r\n  * Client render the nearest child or parent suspense boundary if replay errors or is aborted ([\\#27386](https://github.com/facebook/react/pull/27386) by @sebmarkbage)  \r\n  * Don't bail out of flushing if we still have pending root tasks ([\\#27385](https://github.com/facebook/react/pull/27385) by @sebmarkbage)  \r\n  * Ensure Resumable State is Serializable ([\\#27388](https://github.com/facebook/react/pull/27388) by @sebmarkbage)  \r\n  * Remove extra render pass when reverting to client render ([\\#26445](https://github.com/facebook/react/pull/26445) by @acdlite)  \r\n  * Fix unwinding context during selective hydration ([\\#25876](https://github.com/facebook/react/pull/25876) by @tyao1)  \r\n  * Stop flowing and then abort if a stream is cancelled ([\\#27405](https://github.com/facebook/react/pull/27405) by @sebmarkbage)  \r\n  * Pass cancellation reason to abort ([\\#27536](https://github.com/facebook/react/pull/27536) by @sebmarkbage)  \r\n  * Add `onHeaders` entrypoint option ([\\#27641](https://github.com/facebook/react/pull/27641), [\\#27712](https://github.com/facebook/react/pull/27712) by @gnoff)  \r\n  * Escape `<style>` and `<script>` textContent to enable rendering inner content without dangerouslySetInnerHTML ([\\#28870](https://github.com/facebook/react/pull/28870), [\\#28871](https://github.com/facebook/react/pull/28871) by @gnoff)  \r\n  * Fallback to client replaying actions for Blob serialization ([\\#28987](https://github.com/facebook/react/pull/28987) by @sebmarkbage)  \r\n  * Render Suspense fallback if boundary contains new stylesheet during sync update ([\\#28965](https://github.com/facebook/react/pull/28965) by @gnoff)  \r\n  * Fix header length tracking (\\#30327 by @gnoff)  \r\n  * Use `srcset` to trigger load event on mount (\\#30351 by @gnoff)  \r\n  * Don't perform work when closing stream (\\#30497 by @gnoff)  \r\n  * Allow aborting during render (\\#30488, [\\#30730](https://github.com/facebook/react/pull/30730) by @gnoff)  \r\n  * Start initial work immediately (\\#31079 by @gnoff)  \r\n  * A transition flowing into a dehydrated boundary no longer suspends when showing fallback ([\\#27230](https://github.com/facebook/react/pull/27230) by @acdlite)  \r\n  * Fix selective hydration triggers false update loop error ([\\#27439](https://github.com/facebook/react/pull/27439) by @acdlite)  \r\n  * Warn for Child Iterator of all types but allow Generator Components ([\\#28853](https://github.com/facebook/react/pull/28853) by @sebmarkbage)  \r\n  * Include regular stack trace in serialized errors ([\\#28684](https://github.com/facebook/react/pull/28684), [\\#28738](https://github.com/facebook/react/pull/28738) by @sebmarkbage)  \r\n  * Aborting early no longer infinitely suspends ([\\#24751](https://github.com/facebook/react/pull/24751) by @sebmarkbage)  \r\n  * Fix hydration warning suppression in text comparisons ([\\#24784](https://github.com/facebook/react/pull/24784) by @gnoff)  \r\n  * Changes to error handling in SSR\r\n    * Add diffs to hydration warnings ([\\#28502](https://github.com/facebook/react/pull/28502), [\\#28512](https://github.com/facebook/react/pull/28512) by @sebmarkbage)  \r\n    * Make Error creation lazy ([\\#24728](https://github.com/facebook/react/pull/24728) by @sebmarkbage)  \r\n    * Remove recoverable error when a sync update flows into a dehydrated boundary ([\\#25692](https://github.com/facebook/react/pull/25692) by @sebmarkbage)  \r\n    * Don't \"fix up\" mismatched text content with suppressedHydrationWarning ([\\#26391](https://github.com/facebook/react/pull/26391) by @sebmarkbage)  \r\n    * Fix component stacks in errors ([\\#27456](https://github.com/facebook/react/pull/27456) by @sebmarkbage)  \r\n    * Add component stacks to `onError` ([\\#27761](https://github.com/facebook/react/pull/27761), [\\#27850](https://github.com/facebook/react/pull/27850) by @gnoff and @sebmarkbage)  \r\n    * Throw hydration mismatch errors once ([\\#28502](https://github.com/facebook/react/pull/28502) by @sebmarkbage)  \r\n* Add Bun streaming server renderer ([\\#25597](https://github.com/facebook/react/pull/25597) by @colinhacks)  \r\n* Add nonce support to bootstrap scripts ([\\#26738](https://github.com/facebook/react/pull/26738) by @danieltott)  \r\n* Add `crossorigin` support to bootstrap scripts ([\\#26844](https://github.com/facebook/react/pull/26844) by @HenriqueLimas)  \r\n* Support `nonce` and `fetchpriority` in preload links ([\\#26826](https://github.com/facebook/react/pull/26826) by @liuyenwei)  \r\n* Add `referrerPolicy` to `ReactDOM.preload()` ([\\#27096](https://github.com/facebook/react/pull/27096) by @styfle)  \r\n* Add server condition for `react/jsx-dev-runtime` ([\\#28921](https://github.com/facebook/react/pull/28921) by @himself65)   \r\n* Export version ([\\#29596](https://github.com/facebook/react/pull/29596) by @unstubbable)  \r\n* Rename the secret export of Client and Server internals ([\\#28786](https://github.com/facebook/react/pull/28786), [\\#28789](https://github.com/facebook/react/pull/28789) by @sebmarkbage)  \r\n* Remove layout effect warning on server ([\\#26395](https://github.com/facebook/react/pull/26395) by @rickhanlonii)  \r\n* Remove `errorInfo.digest` from `onRecoverableError` ([\\#28222](https://github.com/facebook/react/pull/28222) by @gnoff)\r\n\r\n### ReactTestRenderer\r\n\r\n* Add deprecation error to `react-test-renderer` on web ([\\#27903](https://github.com/facebook/react/pull/27903), [\\#28904](https://github.com/facebook/react/pull/28904) by @jackpope and @acdlite)  \r\n* Render with ConcurrentRoot on web ([\\#28498](https://github.com/facebook/react/pull/28498) by @jackpope)  \r\n* Remove `react-test-renderer/shallow` export ([\\#25475](https://github.com/facebook/react/pull/25475), [\\#28497](https://github.com/facebook/react/pull/28497) by @sebmarkbage and @jackpope)\r\n\r\n### React Reconciler\r\n\r\n* Enable suspending commits without blocking render ([\\#26398](https://github.com/facebook/react/pull/26398), [\\#26427](https://github.com/facebook/react/pull/26427) by @acdlite)  \r\n* Remove `prepareUpdate` ([\\#26583](https://github.com/facebook/react/pull/26583), [\\#27409](http://github.com/facebook/react/pull/27409) by @sebmarkbage and @sophiebits)\r\n\r\n### React-Is\r\n\r\n* Enable tree shaking ([\\#27701](https://github.com/facebook/react/pull/27701) by @markerikson)  \r\n* Remove `isConcurrentMode` and `isAsyncMode` methods ([\\#28224](https://github.com/facebook/react/pull/28224) by @gaearon)\r\n\r\n### useSyncExternalStore\r\n\r\n* Remove React internals access ([\\#29868](https://github.com/facebook/react/pull/29868) by @phryneas)  \r\n* Fix stale selectors keeping previous store references ([\\#25969](https://github.com/facebook/react/pull/25968) by @jellevoost)\r\n"
    },
    "commits": [
      {
        "sha": "2011074ab8fc6182a2ad0af2766409c1e15f7fc4",
        "commit": {
          "message": "Bump json5 from 2.2.1 to 2.2.3 in /compiler (#31185)\n\nBumps [json5](https://github.com/json5/json5) from 2.2.1 to 2.2.3.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/json5/json5/releases\">json5's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>v2.2.3</h2>\r\n<ul>\r\n<li>Fix: json5@2.2.3 is now the 'latest' release according to npm\r\ninstead of v1.0.2. (<a\r\nhref=\"https://redirect.github.com/json5/json5/issues/299\">#299</a>)</li>\r\n</ul>\r\n<h2>v2.2.2</h2>\r\n<ul>\r\n<li>Fix: Properties with the name <code>__proto__</code> are added to\r\nobjects and arrays.\r\n(<a href=\"https://redirect.github.com/json5/json5/issues/199\">#199</a>)\r\nThis also fixes a prototype pollution vulnerability reported by\r\nJonathan Gregson! (<a\r\nhref=\"https://redirect.github.com/json5/json5/issues/295\">#295</a>).</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/json5/json5/blob/main/CHANGELOG.md\">json5's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h3>v2.2.3 [<a\r\nhref=\"https://github.com/json5/json5/tree/v2.2.3\">code</a>, <a\r\nhref=\"https://github.com/json5/json5/compare/v2.2.2...v2.2.3\">diff</a>]</h3>\r\n<ul>\r\n<li>Fix: json5@2.2.3 is now the 'latest' release according to npm\r\ninstead of\r\nv1.0.2. (<a\r\nhref=\"https://redirect.github.com/json5/json5/issues/299\">#299</a>)</li>\r\n</ul>\r\n<h3>v2.2.2 [<a\r\nhref=\"https://github.com/json5/json5/tree/v2.2.2\">code</a>, <a\r\nhref=\"https://github.com/json5/json5/compare/v2.2.1...v2.2.2\">diff</a>]</h3>\r\n<ul>\r\n<li>Fix: Properties with the name <code>__proto__</code> are added to\r\nobjects and arrays.\r\n(<a href=\"https://redirect.github.com/json5/json5/issues/199\">#199</a>)\r\nThis also fixes a prototype pollution vulnerability reported by\r\nJonathan Gregson! (<a\r\nhref=\"https://redirect.github.com/json5/json5/issues/295\">#295</a>).</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/c3a75242772a5026a49c4017a16d9b3543b62776\"><code>c3a7524</code></a>\r\n2.2.3</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/94fd06d82eeed225fa172f6fb2ca27375cbd2e39\"><code>94fd06d</code></a>\r\ndocs: update CHANGELOG for v2.2.3</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/3b8cebf0c474a8b20c78bd75c89cca0c4dce84ce\"><code>3b8cebf</code></a>\r\ndocs(security): use GitHub security advisories</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/f0fd9e194dde282caff114a110f4fac635f3a62c\"><code>f0fd9e1</code></a>\r\ndocs: publish a security policy</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/6a91a05fffeda16ff6b3b5008b6b340d42d31ec0\"><code>6a91a05</code></a>\r\ndocs(template): bug -&gt; bug report</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/14f8cb186e8abdfaccf6527171da7b1224374650\"><code>14f8cb1</code></a>\r\n2.2.2</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/10cc7ca9169b59c5e0f5afc03dbd870cd06bcc46\"><code>10cc7ca</code></a>\r\ndocs: update CHANGELOG for v2.2.2</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8\"><code>7774c10</code></a>\r\nfix: add <strong>proto</strong> to objects and arrays</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/edde30abd8b22facf2c06c72586b9f6edf12700d\"><code>edde30a</code></a>\r\nReadme: slight tweak to intro</li>\r\n<li><a\r\nhref=\"https://github.com/json5/json5/commit/97286f8bd542c89dcee096bc05dd28ed2dfc1e16\"><code>97286f8</code></a>\r\nImprove example in readme</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/json5/json5/compare/v2.2.1...v2.2.3\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=json5&package-manager=npm_and_yarn&previous-version=2.2.1&new-version=2.2.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        }
      },
      {
        "sha": "9c525ea44aef36b614c8dac2f351ebec0917606c",
        "commit": {
          "message": "Bump micromatch from 4.0.5 to 4.0.8 in /compiler (#31186)\n\nBumps [micromatch](https://github.com/micromatch/micromatch) from 4.0.5\r\nto 4.0.8.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/micromatch/micromatch/releases\">micromatch's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>4.0.8</h2>\r\n<p>Ultimate release that fixes both CVE-2024-4067 and CVE-2024-4068. We\r\nconsider the issues low-priority, so even if you see automated scanners\r\nsaying otherwise, don't be scared.</p>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/micromatch/micromatch/blob/master/CHANGELOG.md\">micromatch's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h2>[4.0.8] - 2024-08-22</h2>\r\n<ul>\r\n<li>backported CVE-2024-4067 fix (from v4.0.6) over to 4.x branch</li>\r\n</ul>\r\n<h2>[4.0.7] - 2024-05-22</h2>\r\n<ul>\r\n<li>this is basically v4.0.5, with some README updates</li>\r\n<li><strong>it is vulnerable to CVE-2024-4067</strong></li>\r\n<li>Updated braces to v3.0.3 to avoid CVE-2024-4068</li>\r\n<li>does NOT break API compatibility</li>\r\n</ul>\r\n<h2>[4.0.6] - 2024-05-21</h2>\r\n<ul>\r\n<li>Added <code>hasBraces</code> to check if a pattern contains\r\nbraces.</li>\r\n<li>Fixes CVE-2024-4067</li>\r\n<li><strong>BREAKS API COMPATIBILITY</strong></li>\r\n<li>Should be labeled as a major release, but it's not.</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/8bd704ec0d9894693d35da425d827819916be920\"><code>8bd704e</code></a>\r\n4.0.8</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/a0e68416a44da10f3e4e30845ab95af4fd286d5a\"><code>a0e6841</code></a>\r\nrun verb to generate README documentation</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/4ec288484f6e8cccf597ad3d43529c31d0f7a02a\"><code>4ec2884</code></a>\r\nMerge branch 'v4' into hauserkristof-feature/v4.0.8</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/03aa8052171e878897eee5d7bb2ae0ae83ec2ade\"><code>03aa805</code></a>\r\nMerge pull request <a\r\nhref=\"https://redirect.github.com/micromatch/micromatch/issues/266\">#266</a>\r\nfrom hauserkristof/feature/v4.0.8</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/814f5f70efcd100ca9d29198867812a3d6ab91a8\"><code>814f5f7</code></a>\r\nlint</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/67fcce6a1077c2faf5ad0c5f998fa70202cc5dae\"><code>67fcce6</code></a>\r\nfix: CHANGELOG about braces &amp; CVE-2024-4068, v4.0.5</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/113f2e3fa7cb30b429eda7c4c38475a8e8ba1b30\"><code>113f2e3</code></a>\r\nfix: CVE numbers in CHANGELOG</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/d9dbd9a266686f44afb38da26fe016f96d1ec04f\"><code>d9dbd9a</code></a>\r\nfeat: updated CHANGELOG</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/2ab13157f416679f54e3a32b1425e184bd16749e\"><code>2ab1315</code></a>\r\nfix: use actions/setup-node@v4</li>\r\n<li><a\r\nhref=\"https://github.com/micromatch/micromatch/commit/1406ea38f3e24b29f4d4f46908d5cffcb3e6c4ce\"><code>1406ea3</code></a>\r\nfeat: rework test to work on macos with node 10,12 and 14</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/micromatch/micromatch/compare/4.0.5...4.0.8\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=micromatch&package-manager=npm_and_yarn&previous-version=4.0.5&new-version=4.0.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        }
      },
      {
        "sha": "6cf5bd90135823d249fb5270896f238d04ec296c",
        "commit": {
          "message": "[compiler] Allow refs to be lazily initialized during render\n\nSummary:\nThe official guidance for useRef notes an exception to the rule that refs cannot be accessed during render: to avoid recreating the ref's contents, you can test that the ref is uninitialized and then initialize it using an if statement:\n\n```\nif (ref.current == null) {\n  ref.current = SomeExpensiveOperation()\n}\n```\n\nThe compiler didn't recognize this exception, however, leading to code that obeyed all the official guidance for refs being rejected by the compiler. This PR fixes that, by extending the ref validation machinery with an awareness of guard operations that allow lazy initialization. We now understand `== null` and similar operations, when applied to a ref and consumed by an if terminal, as marking the consequent of the if as a block in which the ref can be safely written to. In order to do so we need to create a notion of ref ids, which link different usages of the same ref via both the ref and the ref value.\n\nghstack-source-id: d2729274f351e1eb0268f28f629fa4c2568ebc4d\nPull Request resolved: https://github.com/facebook/react/pull/31188"
        }
      },
      {
        "sha": "147374d71a73f3f63ff6532dc081d1175f783352",
        "commit": {
          "message": "[compiler] Kill markReactiveIdentifier and friends\n\nSummary:\nWith the previous PR we no longer need to mark identifiers as reactive in contexts where we don't have places. We already deleted most uses of markReactiveId; the last case was to track identifiers through loadlocals etc -- but we already use a disjoint alias map that accounts for loadlocals when setting reactivity.\n\nghstack-source-id: 69ce0a78b0729da3fe9d08177bf7d827af5325fb\nPull Request resolved: https://github.com/facebook/react/pull/31178"
        }
      },
      {
        "sha": "cd22717c274061fd7dc13cd6eaff10e6a3946508",
        "commit": {
          "message": "[Flight] Also don't cut off type and key (#31209)"
        }
      },
      {
        "sha": "75dd053b5e83e8ae20e9f771bca7b95dba4ff881",
        "commit": {
          "message": "[string-refs] make disableStringRefs a dynamic www flag (#31175)"
        }
      },
      {
        "sha": "b60286b8349e79f025103b9d106458ed667d9914",
        "commit": {
          "message": "[compiler] Use consistent version hash for npm (#31177)\n\nModifies our release script to use the same version hash (the hashed\r\n`compiler` directory) for all compiler packages to keep them consistent."
        }
      },
      {
        "sha": "cbcc1d2027c1d77abdf934b7f5e645882ffa4195",
        "commit": {
          "message": "[ci] Consistent cache names (#31239)\n\nMakes cache names more descriptive and consistent for CI, so it's easier\r\nto tell which cache is used for what purpose.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31239).\r\n* #31240\r\n* __->__ #31239"
        }
      },
      {
        "sha": "6cf8518505b198c58c950976174b1642760d48ee",
        "commit": {
          "message": "[ci] Specify limited concurrency for PR jobs (#31240)\n\nThere was a concurrency setting we hadn't enabled on jobs that are\r\nprimarily triggered for PRs. This meant that every update to the PR\r\nwould trigger new CI jobs without canceling any ones already in flight,\r\nwhich can greatly slow down CI due to the number of jobs that need to\r\nrun.\r\n\r\nThis PR adds concurrency [based on the workflow name and PR number or\r\nhead\r\nref.](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs)\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31240).\r\n* __->__ #31240\r\n* #31239"
        }
      },
      {
        "sha": "13411e4589f3d999727c5322781e2dd7bef3b256",
        "commit": {
          "message": "[Re-land] Make prerendering always non-blocking: Add missing feature flag checks (#31238)\n\nThis is a partial re-land of\r\nhttps://github.com/facebook/react/pull/31056. We saw breakages surface\r\nafter the original land and had to revert. Now that they've been fixed,\r\nlet's try this again. This time we'll split up the commits to give us\r\nmore control of testing and rollout internally.\r\n\r\nOriginal PR: https://github.com/facebook/react/pull/31056\r\nOriginal Commit:\r\nhttps://github.com/facebook/react/pull/31056/commits/2a9fb445d98b60a97f3642cec2ff22469727e0c7\r\nRevert PR: https://github.com/facebook/react/pull/31080\r\n\r\nCommit description:\r\n```\r\nNeglected to wrap some places in the enableSiblingPrerendering flag.\r\n```\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>"
        }
      },
      {
        "sha": "ec2bf022450107a77cc2850ec96b9173fc6f40eb",
        "commit": {
          "message": "fix[react-devtools]: fixed timeline profiler tests (#31261)\n\nFixes tests against React 18 after\r\nhttps://github.com/facebook/react/pull/31154:\r\n- Set `supportsTimeline` to true for `Store`.\r\n- Execute `store.profilerStore.startProfiling` after `legacyRender`\r\nimport, because this is where `react-dom` is imported and renderer is\r\nregistered. We don't yet propagate `isProfiling` flag to newly\r\nregistered renderers, when profiling already started see:\r\n\r\nhttps://github.com/facebook/react/blob/d5bba18b5d81f234657586865248c5b6849599cd/packages/react-devtools-shared/src/hook.js#L203-L204"
        }
      },
      {
        "sha": "9806a4b0d4e659863f3f04d32da50f545c7199a8",
        "commit": {
          "message": "[DevTools] Fix React Compiler badging (#31196)\n\nIn #31140 we switched over the uMC polyfill to use memo instead of state\r\nsince memo would FastRefresh properly. However this busted devtools'\r\nbadging of compiled components; this PR fixes it.\r\n\r\nTODO: tests\r\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>\r\n\r\n---------\r\n\r\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>"
        }
      },
      {
        "sha": "c7c68ef842639f8535942b6247ef758221d289fb",
        "commit": {
          "message": "React DevTools 6.0.0 -> 6.0.1 (#31263)\n\nChanges in this release:\r\n\r\n* Fix React Compiler badging ([poteto](https://github.com/poteto) in\r\n[#31196](https://github.com/facebook/react/pull/31196))\r\n* fix[react-devtools]: fixed timeline profiler tests\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31261](https://github.com/facebook/react/pull/31261))\r\n* fix[react-devtools]: record timeline data only when supported\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31154](https://github.com/facebook/react/pull/31154))\r\n* refactor[react-devtools]: flatten reload and profile config\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31132](https://github.com/facebook/react/pull/31132))\r\n* fix[react-devtools]: remove all listeners when Agent is shutdown\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31151](https://github.com/facebook/react/pull/31151))\r\n* fix[react-devtools]: removed redundant startProfiling call\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31131](https://github.com/facebook/react/pull/31131))\r\n* refactor[react-devtools/fiber/renderer]: optimize durations resolution\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31118](https://github.com/facebook/react/pull/31118))\r\n* fix[react-devtools]: update profiling status before receiving response\r\nfrom backend ([hoxyq](https://github.com/hoxyq) in\r\n[#31117](https://github.com/facebook/react/pull/31117))\r\n* fix[react-devtools]: wrap key string in preformatted text html element\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31153](https://github.com/facebook/react/pull/31153))\r\n* chore[react-devtools]: drop legacy context tests\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31059](https://github.com/facebook/react/pull/31059))\r\n* chore[react-devtools]: add legacy mode error message to the ignore\r\nlist for tests ([hoxyq](https://github.com/hoxyq) in\r\n[#31060](https://github.com/facebook/react/pull/31060))\r\n* fix[react-devtools]: request hook initialization inside http server\r\nresponse ([hoxyq](https://github.com/hoxyq) in\r\n[#31102](https://github.com/facebook/react/pull/31102))\r\n* [Flight] Serialize Server Components Props in DEV\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#31105](https://github.com/facebook/react/pull/31105))\r\n* Add: reload to profile for Fusebox\r\n([EdmondChuiHW](https://github.com/EdmondChuiHW) in\r\n[#31021](https://github.com/facebook/react/pull/31021))\r\n* refactor: allow custom impl of backend realod-to-profile support check\r\n([EdmondChuiHW](https://github.com/EdmondChuiHW) in\r\n[#31048](https://github.com/facebook/react/pull/31048))\r\n* fix: use public instance in Fiber renderer and expose it from\r\ngetInspectorDataForViewAtPoint ([hoxyq](https://github.com/hoxyq) in\r\n[#31068](https://github.com/facebook/react/pull/31068))"
        }
      },
      {
        "sha": "838258144652ab2ef0cbe54d03e9bdd454348d48",
        "commit": {
          "message": "[ESLint] Add test for rejected `useId` in async Components (#31208)"
        }
      },
      {
        "sha": "6c4bbc783286bf6eebd9927cb52e8fec5ad4dd74",
        "commit": {
          "message": "[Re-land] Make prerendering always non-blocking (#31268)\n\nFollows https://github.com/facebook/react/pull/31238\r\n\r\n___\r\n\r\nThis is a partial re-land of\r\nhttps://github.com/facebook/react/pull/31056. We saw breakages surface\r\nafter the original land and had to revert. Now that they've been fixed,\r\nlet's try this again. This time we'll split up the commits to give us\r\nmore control of testing and rollout internally.\r\n\r\nOriginal PR: https://github.com/facebook/react/pull/31056\r\nOriginal Commit:\r\nhttps://github.com/facebook/react/pull/31056/commits/4c71025d8d1bd46344ad793e7ed3049d24f7395a\r\nRevert PR: https://github.com/facebook/react/pull/31080\r\n\r\nCommit description:\r\n\r\n> When a synchronous update suspends, and we prerender the siblings, the\r\nprerendering should be non-blocking so that we can immediately restart\r\nonce the data arrives.\r\n>\r\n> This happens automatically when there's a Suspense boundary, because\r\nwe immediately commit the boundary and then proceed to a Retry render,\r\nwhich are always concurrent. When there's not a Suspense boundary, there\r\nis no Retry, so we need to take care to switch from the synchronous work\r\nloop to the concurrent one, to enable time slicing.\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>"
        }
      },
      {
        "sha": "be94b108264e30873d4b679771e07ce14491e413",
        "commit": {
          "message": "[Flight] Enable sync stack traces for errors and console replay (#31270)\n\nThis was gated behind `enableOwnerStacks` since they share some code\r\npaths but it's really part of `enableServerComponentLogs`.\r\n\r\nThis just includes the server-side regular stack on Error/replayed logs\r\nbut doesn't use console.createTask and doesn't include owner stacks."
        }
      },
      {
        "sha": "77b637d61200eef4dca4cbe4258da358d6337c7b",
        "commit": {
          "message": "Add Bridge types for Fusebox (#31274)\n\nNew types used by Fusebox\r\nhttps://github.com/facebookexperimental/rn-chrome-devtools-frontend/pull/117"
        }
      },
      {
        "sha": "a3d9ea05bf01f3c3d7aedc2d938c581ad11fd14a",
        "commit": {
          "message": "Delete `__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` from React Native Renderer (#31276)\n\n## Summary\r\n\r\nThe React Native Renderer exports a\r\n`__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` property with a\r\nsingle method that has no remaining call sites:\r\n`computeComponentStackForErrorReporting`\r\n\r\nThis PR cleans up this unused export.\r\n\r\n## How did you test this change?\r\n\r\n```\r\n$ yarn\r\n$ yarn flow fabric\r\n$ yarn test\r\n```"
        }
      },
      {
        "sha": "3ed64f8232d0709f93f096c6fb9f7a16865b0ff5",
        "commit": {
          "message": "[ez] Update references to 'forget' in react-compiler-runtime (#31277)\n\nUpdates the runtime to reference React Compiler instead of Forget."
        }
      },
      {
        "sha": "bf7e210cb5672685bfe992a3b253880f5a3d47f5",
        "commit": {
          "message": "tests[react-devtools]: added tests for Compiler integration (#31241)\n\nAdds tests for Compiler integration.\r\n\r\nThis includes:\r\n- Tests against Compiler from source.\r\n- Versioned (18.2 - <19) tests against Compiler from npm.\r\n\r\nFor tests against React 18.2, I had to download `react-compiler-runtime`\r\nfrom npm and put it to `react/compiler-runtime.js`."
        }
      },
      {
        "sha": "c91b3b090ad406fcd103483de0abb6adf44b6f48",
        "commit": {
          "message": "JSX Outlining (#30956)\n\nCurrently, the react compiler can not compile within callbacks which can\r\npotentially cause over rendering. Consider this example:\r\n```jsx\r\nfunction Component(countries, onDelete) {\r\n  const name = useFoo();\r\n  return countries.map(() => {\r\n    return (\r\n      <Foo>\r\n        <Bar name={name}/>\r\n        <Baz onclick={onDelete} />\r\n      </Foo>\r\n    );\r\n  });\r\n}\r\n```\r\n\r\nIn this case, there's no memoization of the nested jsx elements. But\r\ninstead if we were to manually refactor the nested jsx into separate\r\ncomponent like this:\r\n```jsx\r\nfunction Component(countries, onDelete) {\r\n  const name = useFoo();\r\n  return countries.map(() => {\r\n    return <Temp name={name} onDelete={onDelete} />;\r\n  });\r\n}\r\n\r\nfunction Temp({ name, onDelete }) {\r\n  return (\r\n    <Foo>\r\n      <Bar name={name} />\r\n      <Baz onclick={onDelete} />\r\n    </Foo>\r\n  );\r\n}\r\n\r\n```\r\n\r\nThe compiler can now optimise both these components:\r\n```jsx\r\nfunction Component(countries, onDelete) {\r\n  const $ = _c(4);\r\n  const name = useFoo();\r\n  let t0;\r\n  if ($[0] !== name || $[1] !== onDelete || $[2] !== countries) {\r\n    t0 = countries.map(() => <Temp name={name} onDelete={onDelete} />);\r\n    $[0] = name;\r\n    $[1] = onDelete;\r\n    $[2] = countries;\r\n    $[3] = t0;\r\n  } else {\r\n    t0 = $[3];\r\n  }\r\n  return t0;\r\n}\r\n\r\nfunction Temp(t0) {\r\n  const $ = _c(7);\r\n  const { name, onDelete } = t0;\r\n  let t1;\r\n  if ($[0] !== name) {\r\n    t1 = <Bar name={name} />;\r\n    $[0] = name;\r\n    $[1] = t1;\r\n  } else {\r\n    t1 = $[1];\r\n  }\r\n  let t2;\r\n  if ($[2] !== onDelete) {\r\n    t2 = <Baz onclick={onDelete} />;\r\n    $[2] = onDelete;\r\n    $[3] = t2;\r\n  } else {\r\n    t2 = $[3];\r\n  }\r\n  let t3;\r\n  if ($[4] !== t1 || $[5] !== t2) {\r\n    t3 = (\r\n      <Foo>\r\n        {t1}\r\n        {t2}\r\n      </Foo>\r\n    );\r\n    $[4] = t1;\r\n    $[5] = t2;\r\n    $[6] = t3;\r\n  } else {\r\n    t3 = $[6];\r\n  }\r\n  return t3;\r\n}\r\n```\r\n\r\nNow, when `countries` is updated by adding one single value, only the\r\nnewly added value is re-rendered and not the entire list. Rather than\r\nhaving to do this manually, this PR teaches the react compiler to do\r\nthis transformation.\r\n\r\nThis PR adds a new pass (`OutlineJsx`) to capture nested jsx statements\r\nand outline them in a separate component. This newly outlined component\r\ncan then by memoized by the compiler, giving us more fine grained\r\nrendering."
        }
      },
      {
        "sha": "9c60cbe3d1b95d531ddcd64e0a6730db640c934e",
        "commit": {
          "message": "[compiler] Clean up publish script (#31278)\n\nFew small tweaks to make it easier to run adhoc publishes\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31278).\r\n* #31283\r\n* __->__ #31278"
        }
      },
      {
        "sha": "25cac220d6b6576e50ec52cf87801ad036fa7bc9",
        "commit": {
          "message": "[ci] Allow passing various params to compiler publish script (#31283)\n\nAllow passing in a few more inputs when manually publishing."
        }
      },
      {
        "sha": "1ce58ddd672ea67631bc52e85be32962b24df6ae",
        "commit": {
          "message": "[ci] Don't auto push to latest tag (#31284)\n\nBy default let's stop pushing to the latest tag now that we have a\r\nnon-experimental release."
        }
      },
      {
        "sha": "b8ae38f88b70f8a0ea96421a4355266aafefee7f",
        "commit": {
          "message": "Audit try/finally around console patching (#31286)\n\nOtherwise if something errors they can be left patched.\r\n\r\n[Review without\r\nwhitespace](https://github.com/facebook/react/pull/31286/files?w=1)"
        }
      },
      {
        "sha": "35b63ca90db4d5abe3bba6e5a47466d2c7b5a836",
        "commit": {
          "message": "[ci:compiler] Only add latest tag to non-experimental (#31288)\n\nIt turns out npm sets the latest tag by default so simply removing it\r\ndidn't change the previous behavior.\r\n\r\nThe `latest` tag is typically used for stable release versions, and\r\nother tags for unstable versions such as prereleases. Since the compiler\r\nis still in prerelease, let's set the latest tag only for\r\nnon-experimental releases to help signal which version is the safest to\r\ntry out.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31288).\r\n* #31289\r\n* __->__ #31288"
        }
      },
      {
        "sha": "d57217544aa2e98ff6370b8bf5f6aafb253fa642",
        "commit": {
          "message": "[fixture] Update compiler to use latest package (#31289)\n\nPins the compiler to the latest version in our fixture app."
        }
      },
      {
        "sha": "ee6ca23b248a7bdcd973101bda86723ed3c46390",
        "commit": {
          "message": "[playground] Upgrade to Next 15 (#31291)\n\nThis was previously blocked because the playground was a part of the\r\ncompiler's yarn workspace and there was some funky hoisting going on.\r\nNow that we are decoupled we can upgrade to Next 15, which hopefully\r\nshould improve build times.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31291).\r\n* #31293\r\n* #31292\r\n* __->__ #31291"
        }
      },
      {
        "sha": "61383303d38d8b0c23b700e8c0a7d3b6fd51847e",
        "commit": {
          "message": "[playground] Remove unnecessary fs package (#31292)\n\nSeems like this was accidentally added.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31292).\r\n* #31293\r\n* __->__ #31292\r\n* #31291"
        }
      },
      {
        "sha": "915be0ef783fa1891f2627e58b2ae2a22d44b4c3",
        "commit": {
          "message": "[playground] Upgrade various packages (#31293)\n\nJust some housekeeping"
        }
      },
      {
        "sha": "cdde15efe189e8bebe227b7555e7cc95ad74deab",
        "commit": {
          "message": "[compiler] InlineJSXTransform transforms jsx inside function expressions (#31282)\n\nInlineJSXTransform wasn't traversing into function expressions or object\r\nmethods, so any JSX inside such functions wouldn't have gotten inlined.\r\nThis PR updates to traverse nested functions to transform all JSX within\r\na hook or component.\r\n\r\nNote that this still doesn't transform JSX outside of components or\r\nhooks, ie in standalone render helpers."
        }
      },
      {
        "sha": "9deb36748d699bd33f9041db5559c451c54e77a9",
        "commit": {
          "message": "[ci] Publish compiler weekly prereleases (#31294)\n\nAdds a new weekly job for the compiler"
        }
      },
      {
        "sha": "54c0edc019b97d8c08b8c2ccb552da4e5ea8a8cd",
        "commit": {
          "message": "[ci] Don't use branch name for concurrency (#31296)\n\nI happened to notice some jobs on main get canceled if another PR landed\r\nbefore the prior commit on main had finished running CI. This is not\r\ngreat for difftrain because the commit artifacts job relies on the CI\r\njobs on main finishing before it triggers. This would lead to commits\r\nbeing skipped on DiffTrain which is not great for provenance since we\r\nwant it to be a 1:1 sync.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31296).\r\n* #31297\r\n* __->__ #31296"
        }
      },
      {
        "sha": "1839e1437f652819682f2c7970687ac19e551534",
        "commit": {
          "message": "[ez] Update compiler issue template (#31297)\n\nAdd a field to specify which version of React Compiler is being used.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31297).\r\n* __->__ #31297\r\n* #31296"
        }
      },
      {
        "sha": "39a7730b1311fb78642c36686820d8d1c79e58e4",
        "commit": {
          "message": "Rename SSRManifest to ServerConsumerManifest (#31299)\n\nThis config is more generally applicable to all server-side Flight\r\nClients and not just SSR."
        }
      },
      {
        "sha": "22b2b1a05a86f599d2eea9d0419ac57db510e134",
        "commit": {
          "message": "[Flight] Add serverModuleMap option for mapping ServerReferences (#31300)\n\nStacked on #31299.\r\n\r\nWe already have an option for resolving Client References to other\r\nClient References when consuming an RSC payload on the server.\r\n\r\nThis lets you resolve Server References on the consuming side when the\r\nenvironment where you're consuming the RSC payload also has access to\r\nthose Server References. Basically they becomes like Client References\r\nfor this consumer but for another consumer they wouldn't be."
        }
      },
      {
        "sha": "d49123f73f12564223c890bfa36be537de2c571d",
        "commit": {
          "message": "Expose prerender() for SSG in stable (#31298)\n\nWhen we added `renderToReadableStream` we added the `allReady` helper to\r\nmake it easier to do SSG rendering but it's kind of awkward to wire up\r\nthat way. Since we're also discouraging `renderToString` in React 19 the\r\ncliff is kind of awkward. ([As noted by\r\nDocusaurus.](https://github.com/facebook/react/pull/24752#issuecomment-2178309299))\r\n\r\nThe idea of the `react-dom/static` `prerender` API was that this would\r\nbe the replacement for SSG rendering. Awkwardly this entry point\r\nactually already exists in stable but it has only `undefined` exports.\r\n\r\nSince then we've also added other useful heuristics into the `prerender`\r\nbranch that makes this really the favored and easiest to use API for the\r\nprerender (SSG/ISR) use case.\r\n\r\n`prerender` is also used for Partial Prerendering but that part is still\r\nexperimental.\r\n\r\nHowever, we can expose only the `prerender` API on `react-dom/static`\r\nwithout it returning the `postponeState`. Instead the stream is on\r\n`prelude`. The naming is a bit awkward if you don't consider resuming\r\nbut it's the same thing.\r\n\r\nIt's really just `renderToReadable` stream with automatic `allReady` and\r\nbetter heuristics for prerendering."
        }
      },
      {
        "sha": "c1e1358b2dc9848c20be43bfde248ffb90966da3",
        "commit": {
          "message": "[Flight] Align turbopack option name with webpack name (#31301)\n\nThis was renamed in #31300."
        }
      },
      {
        "sha": "251b666dedde430b7767e1745e71155db8ec585d",
        "commit": {
          "message": "[Flight] Handle bound arguments for loaded server references (#31302)\n\nFollow up to #31300.\r\n\r\nI forgot to pass the bound arguments to the loaded function."
        }
      },
      {
        "sha": "f11bd3439cfd0e95c490a58059562b781c34c3bb",
        "commit": {
          "message": "Fix types (#31303)"
        }
      },
      {
        "sha": "65a56d0e99261481c721334a3ec4561d173594cd",
        "commit": {
          "message": "Fix timing issue with fake promise resolving sync (#31304)"
        }
      },
      {
        "sha": "69d4b800a6c31561bd928eef4a4592fdb38471cb",
        "commit": {
          "message": "[Flight] Support Async Modules in Server References (#31313)\n\nThis is required to support for example top level await in a \"use\r\nserver\" module or dependency of a \"use server\"."
        }
      },
      {
        "sha": "45804af18d589fd2c181f3b020f07661c46b73ea",
        "commit": {
          "message": "[flow] Eliminate usage of more than 1-arg `React.AbstractComponent` in React codebase (#31314)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nIn order to adopt react 19's ref-as-prop model, Flow needs to eliminate\r\nall the places where they are treated differently.\r\n`React.AbstractComponent` is the worst example of this, and we need to\r\neliminate it.\r\n\r\nThis PR eliminates them from the react repo, and only keeps the one that\r\nhas 1 argument of props.\r\n\r\n## How did you test this change?\r\n\r\nyarn flow"
        }
      },
      {
        "sha": "ae90522bc6ea80d87f22e845024dc82e2c05e3d5",
        "commit": {
          "message": "chore: remove unsued deps from React Compiler Babel plugin (#31315)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nSince the Babel plugin is bundled into a single file (except for\r\n`@babel/types`\r\nhttps://github.com/facebook/react/blob/45804af18d589fd2c181f3b020f07661c46b73ea/compiler/packages/babel-plugin-react-compiler/rollup.config.js#L18)\r\nwe can move these deps to `devDependencies`.\r\n\r\nMain motivation is e.g. not installing ancient version of\r\n`pretty-format` (asked in https://github.com/facebook/react/issues/29062\r\nwithout getting a reason, but if consumers can just skip the deps\r\nentirely that's even better).\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nI tested by installing the plugin into an empty project, deleting\r\neverything in `node_modules` _except_ for `babel-plugin-react-compiler`\r\nand doing `require('babel-plugin-react-compiler')`. It still worked\r\nfine, so it should work in other cases as well 😀\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->"
        }
      },
      {
        "sha": "9daabc0bf97805be23f6131be4d84d063a3ff446",
        "commit": {
          "message": "`react-hooks/rules-of-hooks`: Add support for `do/while` loops (#28714)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nCurrently, `react-hooks/rules-of-hooks` does not support `do/while`\r\nloops - I've also reported this in\r\nhttps://github.com/facebook/react/issues/28713.\r\n\r\nThis PR takes a stab at adding support for `do/while` by following the\r\nsame logic we already have for detecting `while` loops.\r\n\r\nAfter this PR, any hooks called inside a `do/while` loop will be\r\nconsidered invalid.\r\n\r\nWe're also adding some unit tests to confirm that the behavior is\r\nworking as expected.\r\n\r\nFixes #28713.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI've added unit tests that cover the case and verified that they pass by\r\nrunning:\r\n\r\n```\r\nyarn test packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js --watch\r\n```\r\n\r\nI've also verified that the rest of the tests continue to pass by\r\nrunning:\r\n\r\n```\r\nyarn test\r\n```\r\n\r\nand\r\n\r\n```\r\nyarn test --prod\r\n```"
        }
      },
      {
        "sha": "b4cbdc5a7c18672807e119692f99f1cf751242fd",
        "commit": {
          "message": "remove terser from react-compiler-runtime build (#31326)\n\n## Summary\r\n\r\nThis fixes a minor nit I have about the `react-compiler-runtime` package\r\nin that the published code is minified. I assume most consumers will\r\nminify their own bundles so there's no real advantage to minifying it as\r\npart of the build.\r\n\r\nFor my purposes it makes it more difficult to read the code, use\r\n`patch-package` (if needed), or diff two versions without referencing\r\nthe source code on github or mapping it back to original source using\r\nthe source maps.\r\n\r\n## How did you test this change?\r\n\r\nI ran the build locally and looked at the result but did not run the\r\ncode. It's a lot more readable except for the commonjs\r\ncompatibility-related stuff that Rollup inserts."
        }
      },
      {
        "sha": "2dc5bebd46d5254f9a02fd58d408acb33c288639",
        "commit": {
          "message": "Fix error handling in `resolveClientReference` (#31332)\n\nWhen a React Server Consumer Manifest does not include an entry for a\r\nclient reference ID, we must not try to look up the export name (or\r\n`'*'`) for the client reference. Otherwise this will fail with\r\n`TypeError: Cannot read properties of undefined (reading '...')` instead\r\nof the custom error we intended to throw."
        }
      },
      {
        "sha": "b3e0a11e8f0689b38a9beec032c0a51cf381e998",
        "commit": {
          "message": "[Flight] Allow <anonymous> stack frames to be serialized if opt-in (#31329)\n\nNormally we filter out stack frames with missing `filename` because they\r\ncan be noisy and not ignore listed. However, it's up to the\r\nfilterStackFrame function to determine whether to do it. This lets us\r\nmatch `<anonymous>` stack frames in V8 parsing (they don't have line\r\nnumbers)."
        }
      },
      {
        "sha": "28668d39bea855c3bda481d018d8f3f0dfad9066",
        "commit": {
          "message": "[playground] Upgrade to Next 15 stable (#31333)"
        }
      },
      {
        "sha": "1631855f4303cc8585205307a56c69e3b7248bb4",
        "commit": {
          "message": "[Flight] encodeURI filenames parsed from stack traces (#31340)\n\nWhen parsing stacks from third parties they may include invalid url\r\ncharacters. So we need to encode them. Since these are expected to be\r\nurls though we use just encodeURI instead of encodeURIComponent."
        }
      },
      {
        "sha": "d19ba8ecdd04639630d0ddcf6ed4ce316482a58d",
        "commit": {
          "message": "[react-compiler-runtime] Support React 17 peer dependency (#31336)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nThe recent blog post and\r\n[documentation](https://react.dev/learn/react-compiler#using-react-compiler-with-react-17-or-18)\r\nsay that `react-compiler-runtime` supports React 17, yet it currently\r\nrequires React 18 or 19 as a peer dependency, making it unusable for\r\ninstalling on a project still using React 17.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nManually installing the package on a React 17 codebase.\r\n\r\n---------\r\n\r\nCo-authored-by: lauren <poteto@users.noreply.github.com>"
        }
      },
      {
        "sha": "cae764ce81b1bd6c418e9e23651794b6b09208e8",
        "commit": {
          "message": "Revert \"[Re-land] Make prerendering always non-blocking (#31268)\" (#31355)\n\nThis reverts commit 6c4bbc783286bf6eebd9927cb52e8fec5ad4dd74.\r\n\r\nIt looked like the bug we found on the original land was related to\r\nbroken product code. But through landing #31268 we found additional bugs\r\ninternally. Since disabling the feature flag does not fix the bugs, we\r\nhave to revert again to unblock the sync. We can continue to debug with\r\nour internal build."
        }
      },
      {
        "sha": "fe04dbcbc4185d7c9d7afebbe18589d2b681a88c",
        "commit": {
          "message": "[compiler] Fix to ref access check to ban ref?.current\n\nghstack-source-id: ea417a468eac2607ce8d1dddcb2e9581e1c4db27\nPull Request resolved: https://github.com/facebook/react/pull/31360"
        }
      },
      {
        "sha": "aded0ef831e100a5ee9d9e674cb0482326279118",
        "commit": {
          "message": "[compiler] Handle member expr as computed property (#31344)\n\nThis PR loosens the restriction on the types of computed properties we\r\ncan handle.\r\n\r\nPreviously, we would disallow anything that is not an identifier because\r\nnon-identifiers could be mutating. But member expressions are not\r\nmutating so we can treat them similar to identifiers."
        }
      },
      {
        "sha": "02c0e824e462c7f81ba79d95cfc41c89c6d81b95",
        "commit": {
          "message": "[compiler][ez] Remove unused param (#31376)"
        }
      },
      {
        "sha": "0bc30748730063e561d87a24a4617526fdd38349",
        "commit": {
          "message": "Capture the source and not just the stack on first seen error (#31367)\n\nOtherwise we can't capture the owner stack at the right location when\r\nthere's a rethrow."
        }
      },
      {
        "sha": "3928cb00db94e31afd3efa6850f0e8bec53aefc1",
        "commit": {
          "message": "[compiler] Ref validation repro for ImportSpecifier with renamed local (#31383)\n\nThis was originally reported in\r\nhttps://github.com/reactwg/react-compiler/discussions/27.\r\n\r\nAdding a failing repro to capture this case.\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31383).\r\n* #31385\r\n* #31384\r\n* __->__ #31383"
        }
      },
      {
        "sha": "4abe4b582106f2012f4eb9624a10f77d167cc848",
        "commit": {
          "message": "[compiler] Check if local identifier is a hook when resolving globals (#31384)\n\nWhen resolving import specifiers from the react namespace (`import\r\n{imported as local} from 'react'`), we were previously only checking if\r\nthe `imported` identifier was a hook if we didn't already have its\r\ndefinition in the global registry. We also need to check if `local` is a\r\nhook in the case of aliasing since there may be hook-like APIs in react\r\nthat don't start with `use` (eg they are experimental or unstable).\r\n\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31384).\r\n* #31385\r\n* __->__ #31384\r\n* #31383"
        }
      },
      {
        "sha": "603e6108f39c6663ec703eed34a89ff1bf0cb70c",
        "commit": {
          "message": "[compiler] Update react deps to experimental instead of beta (#31385)\n\nSome tests rely on experimental APIs so let's just use\r\nreact@experimental instead of beta"
        }
      },
      {
        "sha": "ea3ac586693014e882655728fc8396ecb1d6cf6e",
        "commit": {
          "message": "Fix Ref Lifecycles in Hidden Subtrees (#31379)\n\n## Summary\r\n\r\nWe're seeing certain situations in React Native development where ref\r\ncallbacks in `<Activity mode=\"hidden\">` are sometimes invoked exactly\r\nonce with `null` without ever being called with a \"current\" value.\r\n\r\nThis violates the contract for refs because refs are expected to always\r\nattach before detach (and to always eventually detach after attach).\r\nThis is *particularly* bad for refs that return cleanup functions,\r\nbecause refs that return cleanup functions expect to never be invoked\r\nwith `null`. This bug causes such refs to be invoked with `null`\r\n(because since `safelyAttachRef` was never called, `safelyDetachRef`\r\nthinks the ref does not return a cleanup function and invokes it with\r\n`null`).\r\n\r\nThis fix makes use of `offscreenSubtreeWasHidden` in\r\n`commitDeletionEffectsOnFiber`, similar to how\r\nhttps://github.com/facebook/react/commit/ec52a5698e2dfea7050a0b015f0b79abfb2d81b7\r\ndid this for `commitDeletionEffectsOnFiber`.\r\n\r\n## How did you test this change?\r\n\r\nWe were able to isolate the repro steps to isolate the React Native\r\nexperimental changes. However, the repro steps depend on Fast Refresh.\r\n\r\n```\r\nfunction callbackRef(current) {\r\n  // Called once with `current` as null, upon triggering Fast Refresh.\r\n}\r\n\r\n<Activity mode=\"hidden\">\r\n  <View ref={callbackRef} />;\r\n</Activity>\r\n```\r\n\r\nIdeally, we would have a unit test that verifies this behavior without\r\nFast Refresh. (We have evidence that this bug occurs without Fast\r\nRefresh in real product implementations. However, we have not\r\nsuccessfully deduced the root cause, yet.)\r\n\r\nThis PR currently includes a unit test that reproduces the Fast Refresh\r\nscenario, which is also demonstrated in this CodeSandbox:\r\nhttps://codesandbox.io/p/sandbox/hungry-darkness-33wxy7\r\n\r\nVerified unit tests pass:\r\n\r\n```\r\n$ yarn\r\n$ yarn test\r\n# Run with `-r=www-classic` for `enableScopeAPI` tests.\r\n$ yarn test -r=www-classic\r\n```\r\n\r\nVerified on the internal React Native development branch that the bug no\r\nlonger repros.\r\n\r\n---------\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>"
        }
      },
      {
        "sha": "b7e21579220042c0a60179e2f40f121684e637eb",
        "commit": {
          "message": "[Flight] Handle errors during JSON stringify of console values (#31391)\n\nWhen we serialize debug info we should never error even though we don't\r\ncurrently support everything being serialized. Since it's non-essential\r\ndev information.\r\n\r\nWe already handle errors in the replacer but not when errors happen in\r\nthe JSON algorithm itself - such as cyclic errors.\r\n\r\nWe should ideally support cyclic objects but regardless we should\r\ngracefully handle the errors."
        }
      },
      {
        "sha": "16409d0560863dac41880bd308dea6efee46087a",
        "commit": {
          "message": "temporarily disable lazy context propagation (#31403)\n\ndisables lazy context propagation in oss to help determine if it is\r\ncausing bugs in startTransition. Will reenable after cutting a canary\r\nrelease with this flag disabled"
        }
      },
      {
        "sha": "7c8e5e7ab8bb63de911637892392c5efd8ce1d0f",
        "commit": {
          "message": "Reenable lazy context propagation (#31405)\n\nReverts facebook/react#31403 to reenable lazy context propagation\r\n\r\nThe disabling was to produce a build that could help track down whether\r\nthis flag is causing a possibly related bug in transitions but we don't\r\nintend to disable it just fix forward once we figure out what the\r\nproblem is"
        }
      },
      {
        "sha": "4d577fd216735384a262cbacdcbc5cda18626497",
        "commit": {
          "message": "More Unit Tests for Refs in Hidden Subtrees (#31404)\n\n## Summary\r\n\r\nWhile fixing ref lifecycles in hidden subtrees in\r\nhttps://github.com/facebook/react/pull/31379, @rickhanlonii noticed that\r\nwe could also add more unit tests for other types of tags to prevent\r\nfuture regressions during code refactors.\r\n\r\nThis PR adds more unit tests in the same vein as those added in\r\nhttps://github.com/facebook/react/pull/31379.\r\n\r\n## How did you test this change?\r\n\r\nVerified unit tests pass:\r\n\r\n```\r\n$ yarn\r\n$ yarn test ReactFreshIntegration-test.js\r\n```"
        }
      },
      {
        "sha": "543eb0932155fcf8481c457ed98200006ad57cf5",
        "commit": {
          "message": "[compiler] Wrap inline jsx transform codegen in conditional (#31267)\n\nJSX inlining is a prod-only optimization. We want to enforce this while\r\nmaintaining the same compiler output in DEV and PROD.\r\n\r\nHere we add a conditional to the transform that only replaces JSX with\r\nobject literals outside of DEV. Then a later build step can handle DCE\r\nbased on the value of `__DEV__`"
        }
      },
      {
        "sha": "07aa494432e97f63fca9faf2fad6f76fead31063",
        "commit": {
          "message": "Remove enableRefAsProp feature flag (#30346)\n\nThe flag is fully rolled out."
        }
      },
      {
        "sha": "33c7bd9ae3b4f998a477fe0ea8ebdf2f2ee8a144",
        "commit": {
          "message": "Remove trim_trailing_whitespace from editorconfig (#31413)\n\nThis setting breaks `toMatchInlineSnapshot` by removing whitespace in\r\nsnapshots."
        }
      },
      {
        "sha": "b81e6dd2dade4c2d43d44ce7c9bfa4e3053fc949",
        "commit": {
          "message": "[cleanup] Remove compiler runtime-compat fixture library (#31430)\n\nThere's no real reason to keep this around anymore now that the compiler\r\nbeta is released and we have validated that react-compiler-runtime is\r\n[usable by\r\nlibraries](https://www.npmjs.com/package/react-compiler-runtime?activeTab=dependents).\r\n\r\nLet's clean this up for now."
        }
      },
      {
        "sha": "156eab2f7b34fe78ef26a1752f95bfdc2092819d",
        "commit": {
          "message": "Fork the \"empty\" prepareStackTrace case for Server builds (#31427)\n\nWe don't actually want the source mapped version of `.stack` from errors\r\nbecause that would cause us to not be able to associate it with a source\r\nmap in the UIs that need it. The strategy in browsers is more correct\r\nwhere the display is responsible for source maps.\r\n\r\nThat's why we disable any custom `prepareStackTrace` like the ones added\r\nby `source-map`. We reset it to `undefined`.\r\n\r\nHowever, when running node with `--enable-source-maps` the default for\r\n`prepareStackTrace` which is a V8 feature (but may exist elsewhere too\r\nlike Bun) is a source mapped version of the stack. In those environments\r\nwe need to reset it to a default implementation that doesn't apply\r\nsource maps.\r\n\r\nWe already did this in Flight using the `ReactFlightStackConfigV8.js`\r\nconfig. However, we need this more generally in the\r\n`shared/ReactComponentStackFrame` implementation.\r\n\r\nWe could always set it to the default implementation instead of\r\n`undefined` but that's unnecessary code in browser builds and it might\r\nlead to slightly different results. For safety and code size, this PR\r\ndoes it with a fork instead.\r\n\r\nAll builds specific to `node` or `edge` (or `markup` which is a server\r\nfeature) gets the default implementation where as everything else (e.g.\r\nbrowsers) get `undefined` since it's expected that this is not source\r\nmapped. We don't have to do anything about the equivalent in React\r\nDevTools since React DevTools doesn't run on the server."
        }
      },
      {
        "sha": "dd1a021bad0908d3ad7ba4314ca9a39173d7758f",
        "commit": {
          "message": "[compiler][ez] Patch hoistability for ObjectMethods (#31197)\n\nExtends #31066 to ObjectMethods (somehow missed this before).\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31197).\r\n* #31204\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31346\r\n* #31199\r\n* #31431\r\n* #31345\r\n* __->__ #31197"
        }
      },
      {
        "sha": "e7e269b7265ec94929a53f4d402037261c87cf44",
        "commit": {
          "message": "[compiler] bugfix for hoistable deps for nested functions (#31345)\n\n`PropertyPathRegistry` is responsible for uniqueing identifier and\r\nproperty paths. This is necessary for the hoistability CFG merging logic\r\nwhich takes unions and intersections of these nodes to determine a basic\r\nblock's hoistable reads, as a function of its neighbors. We also depend\r\non this to merge optional chained and non-optional chained property\r\npaths\r\n\r\nThis fixes a small bug in #31066 in which we create a new registry for\r\nnested functions. Now, we use the same registry for a component / hook\r\nand all its inner functions\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31345).\r\n* #31204\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31346\r\n* #31199\r\n* #31431\r\n* __->__ #31345\r\n* #31197"
        }
      },
      {
        "sha": "527bcaa83d9d31e848ca1bea1a5b8532ab361527",
        "commit": {
          "message": "[compiler] patch: rewrite scope dep/decl in inlineJsxTransform (#31431)\n\nThis bugfix is needed to land #31199 PropagateScopeDepsHIR infers scope\r\ndeclarations for the `inline-jsx-transform` test fixture (the non-hir\r\nversion does not).\r\n\r\nThese declarations must get the rewritten phi identifiers\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31431).\r\n* #31204\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31346\r\n* #31199\r\n* __->__ #31431\r\n* #31345\r\n* #31197"
        }
      },
      {
        "sha": "6c0f37f94b020279fb5ada70facc008fccb7172e",
        "commit": {
          "message": "[bundles] stop building legacy Paper renderer (#31429)"
        }
      },
      {
        "sha": "f8f6e1a21a1cac64cf6faf666367d641b2d8b171",
        "commit": {
          "message": "[bundles] update GitHub actions for commit build branch (#31432)\n\nThis is a followup to\r\nhttps://github.com/facebook/react/commit/6c0f37f94b020279fb5ada70facc008fccb7172e\r\nto unblock the job."
        }
      },
      {
        "sha": "bddb7c9b5c248c77fb52743cd319945d782bb7aa",
        "commit": {
          "message": "[compiler] Add fixture for objectexpr computed key bug (#31348)\n\nWe were bailing out on complex computed-key syntax (prior to #31344) as\r\nwe assumed that this caused bugs (due to inferring computed key rvalues\r\nto have `freeze` effects).\r\n\r\nThis fixture shows that this bailout is unrelated to the underlying bug"
        }
      },
      {
        "sha": "5ca2bc6d631dde8c221fa482cb8729a67115c7f9",
        "commit": {
          "message": "[compiler][ez] Fixture repro for function hoisting bug (#31349)\n\nRepro for bug reported by @alexmckenley"
        }
      },
      {
        "sha": "33195602ea125af38f9460f0bb2ccab8713e5f10",
        "commit": {
          "message": "[compiler][ez] tsconfig: treat all snap fixtures as modules (#31350)\n\nQol improvement. Currently, typescript lints treat test fixtures without\r\nan export as a 'global script' (see\r\n[docs](https://www.typescriptlang.org/docs/handbook/2/modules.html#how-javascript-modules-are-defined)).\r\nThis gives confusing lints for duplicate declarations (in the global\r\nscope)"
        }
      },
      {
        "sha": "792fa065ca7a46ce4a583e8f6f35eec8bd813d43",
        "commit": {
          "message": "[compiler][ez] Clean up pragma parsing for tests + playground (#31347)\n\nMove environment config parsing for `inlineJsxTransform`,\r\n`lowerContextAccess`, and some dev-only options out of snap (test\r\nfixture). These should now be available for playground via\r\n`@inlineJsxTransform` and `lowerContextAccess`.\r\n\r\nOther small change:\r\nChanged zod fields from `nullish()` -> `nullable().default(null)`.\r\n[`nullish`](https://zod.dev/?id=nullish) fields accept `null |\r\nundefined` and default to `undefined`. We don't distinguish between null\r\nand undefined for any of these options, so let's only accept null +\r\ndefault to null. This also makes EnvironmentConfig in the playground\r\nmore accurate. Previously, some fields just didn't show up as\r\n`prettyFormat({field: undefined})` does not print `field`."
        }
      },
      {
        "sha": "f2f002c7c19e273f3f31289d6f288c3248f10183",
        "commit": {
          "message": "[compiler][be] Stabilize compiler output: sort deps and decls by name (#31362)\n\nAll dependencies and declarations of a reactive scope can be reordered\r\nto scope start/end. i.e. generated code does not depend on conditional\r\nshort-circuiting logic as dependencies are inferred to have no side\r\neffects.\r\n\r\nSorting these by name helps us get higher signal compilation snapshot\r\ndiffs when upgrading the compiler and testing PRs"
        }
      },
      {
        "sha": "fd018af617cf9f8be607f45fc53d6d8167d29eb4",
        "commit": {
          "message": "[compiler] Delete propagateScopeDeps (non-hir) (#31199)\n\n`enablePropagateScopeDepsHIR` is now used extensively in Meta. This has\r\nbeen tested for over two weeks in our e2e tests and production.\r\n\r\nThe rest of this stack deletes `LoweredFunction.dependencies`, which the\r\nnon-hir version of `PropagateScopeDeps` depends on. To avoid a more\r\nforked HIR (non-hir with dependencies and hir with no dependencies),\r\nlet's go ahead and clean up the non-hir version of\r\nPropagateScopeDepsHIR.\r\n\r\nNote that all fixture changes in this PR were previously reviewed when\r\nthey were copied to `propagate-scope-deps-hir-fork`. Will clean up /\r\nmerge these duplicate fixtures in a later PR\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31199).\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* #31346\r\n* __->__ #31199"
        }
      },
      {
        "sha": "c3570b158d087eb4e3ee5748c4bd9360045c8a26",
        "commit": {
          "message": "[compiler] Collect temporaries and optional chains from inner functions (#31346)\n\nRecursively collect identifier / property loads and optional chains from\r\ninner functions. This PR is in preparation for #31200\r\n\r\nPreviously, we only did this in `collectHoistablePropertyLoads` to\r\nunderstand hoistable property loads from inner functions.\r\n1. collectTemporariesSidemap\r\n2. collectOptionalChainSidemap\r\n3. collectHoistablePropertyLoads\r\n- ^ this recursively calls `collectTemporariesSidemap`,\r\n`collectOptionalChainSidemap`, and `collectOptionalChainSidemap` on\r\ninner functions\r\n4. collectDependencies\r\n\r\nNow, we have\r\n1. collectTemporariesSidemap\r\n- recursively record identifiers in inner functions. Note that we track\r\nall temporaries in the same map as `IdentifierIds` are currently unique\r\nacross functions\r\n2. collectOptionalChainSidemap\r\n    - recursively records optional chain sidemaps in inner functions\r\n3. collectHoistablePropertyLoads\r\n    - (unchanged, except to remove recursive collection of temporaries)\r\n4. collectDependencies\r\n- unchanged: to be modified to recursively collect dependencies in next\r\nPR\r\n\r\n'\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31346).\r\n* #31202\r\n* #31203\r\n* #31201\r\n* #31200\r\n* __->__ #31346\r\n* #31199"
        }
      },
      {
        "sha": "3dc1e4820ec985baa6668a4fa799760c4b99f5d9",
        "commit": {
          "message": "Followup: remove dead test code from #30346 (#31415)\n\nI missed that this was a constant false check when making the broader\r\ncleanup changes in https://github.com/facebook/react/pull/30346"
        }
      },
      {
        "sha": "d1f04722d617600cc6cd96dcebc1c2ef7affc904",
        "commit": {
          "message": "[string-refs] remove enableLogStringRefsProd flag (#31414)\n\nWe no longer need this production logging."
        }
      },
      {
        "sha": "314968561b547957c76c9d7be3620e38f87770d4",
        "commit": {
          "message": "Back out \"[bundles] stop building legacy Paper renderer (#31429)\" (#31437)\n\nBacks out the 2 related commits:\r\n-\r\nhttps://github.com/facebook/react/commit/f8f6e1a21a1cac64cf6faf666367d641b2d8b171\r\n-\r\nhttps://github.com/facebook/react/commit/6c0f37f94b020279fb5ada70facc008fccb7172e\r\n\r\nSince I only realized when syncing that we need the version of `react`\r\nand the legacy renderer to match.\r\n\r\nWhile I investigate if there's anything we can do to work around that\r\nwhile preserving the legacy renderer, this unblocks the sync."
        }
      },
      {
        "sha": "66855b96378daedb1405e83f2365e0d90966ea0e",
        "commit": {
          "message": "Remove unused lastFullyObservedContext (#31435)"
        }
      },
      {
        "sha": "a7b83e7ceb3e0390e4ad4f9b417f21cb5a0ef17f",
        "commit": {
          "message": "[www] set disableStringRefs to true (#31438)"
        }
      },
      {
        "sha": "2df8f6188537514a538741064ae83682c2bef7c1",
        "commit": {
          "message": "[compiler] Store original and new prop names (#31440)\n\nPreviously, we'd directly store the original attributes from the jsx\r\nexpressions. But this isn't enough as we want to rename duplicate\r\nattributes.\r\n\r\nThis PR refactors the prop collection logic to store both the original\r\nand new names for jsx attributes in the newly outlined jsx expression.\r\n\r\nFor now, both the new and old names are the same. In the future, they\r\nwill be different when we add support for outlining expressions with\r\nduplicate attribute names."
        }
      },
      {
        "sha": "09197bb786344d2ede1286e7f3ec4e21b18a58f2",
        "commit": {
          "message": "[compiler] Outline jsx with duplicate attributes (#31441)\n\nPreviously, we would skip outlining jsx expressions that had duplicate\r\njsx attributes as we would not rename them causing incorrect\r\ncompilation.\r\n\r\nIn this PR, we add outlining support for duplicate jsx attributes by\r\nrenaming them."
        }
      },
      {
        "sha": "a88b9e5f6882a121417b2e8434d4c7ec30a60c52",
        "commit": {
          "message": "[compiler] Outline JSX with non-jsx children (#31442)\n\nPreviously, we bailed out on outlining jsx that had children that were\r\nnot part of the outlined jsx.\r\n\r\nNow, we add support for children by treating as attributes."
        }
      },
      {
        "sha": "e1378902bbb322aa1fe1953780f4b2b5f80d26b1",
        "commit": {
          "message": "[string-refs] cleanup string ref code (#31443)"
        }
      },
      {
        "sha": "682a103cde99a3091850d1c27de8846b5d14e803",
        "commit": {
          "message": "[www] set disableLegacyMode to true (#31439)"
        }
      },
      {
        "sha": "5c56b873efb300b4d1afc4ba6f16acf17e4e5800",
        "commit": {
          "message": "Update React Native shims to use export syntax (#31426)\n\n## Summary\r\n\r\nI'm working to get the main `react-native` package parsable by modern\r\nFlow tooling (both `flow-bundler`, `flow-api-translator`), and one\r\nblocker is legacy `module.exports` syntax. This diff updates files which\r\nare [synced to\r\n`react-native`](https://github.com/facebook/react-native/tree/main/packages/react-native/Libraries/Renderer/shims)\r\nfrom this repo.\r\n\r\n## How did you test this change?\r\n\r\nFiles were pasted into `react-native-github` under fbsource, where Flow\r\nvalidates ✅."
        }
      },
      {
        "sha": "989af12f72080c17db03ead91d99b6394a215564",
        "commit": {
          "message": "Make prerendering always non-blocking with fix (#31452)\n\nWe've previously failed to land this change due to some internal apps\r\nseeing infinite render loops due to external store state updates during\r\nrender. It turns out that since the `renderWasConcurrent` var was moved\r\ninto the do block, the sync render triggered from the external store\r\ncheck was stuck with a `RootSuspended` `exitStatus`. So this is not\r\nunique to sibling prerendering but more generally related to how we\r\nhandle update to a sync external store during render.\r\n\r\nWe've tested this build against local repros which now render without\r\ncrashes. We will try to add a unit test to cover the scenario as well.\r\n\r\n---------\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>"
        }
      },
      {
        "sha": "ff595de29af107255fd957ca809d3074c16bcf12",
        "commit": {
          "message": "[Flight] Add initial readme to react-server package (#31464)\n\nThis readme documents React Server Components from `react-server`\r\npackage enough to get an implementer started. It's not comprehensive but\r\nit's a beginning point and crucially adds documentation for the\r\n`prerender` API for Flight."
        }
      },
      {
        "sha": "6e29479bffc188719e797801a9bf7859256b2ea0",
        "commit": {
          "message": "[devtools] allow non-coercible objects in formatConsoleArgumentsToSingleString (#31444)\n\n## Summary\r\n\r\nWe have been getting unhandled `TypeError: Cannot convert object to\r\nprimitive value` errors in development that only occur when using\r\ndevtools. I tracked it down to `console.error()` calls coming from\r\nApollo Client where one of the arguments is an object without a\r\nprototype (created with `Object.create(null)`). This causes\r\n`formatConsoleArgumentsToSingleString()` in React's devtools to error as\r\nthe function does not defend against `String()` throwing an error.\r\n\r\nMy attempted fix is to introduce a `safeToString` function (naming\r\nsuggestions appreciated) which expects `String()` to throw on certain\r\nobject and in that case falls back to returning `[object Object]`, which\r\nis what `String({})` would return.\r\n\r\n## How did you test this change?\r\n\r\nAdded a new unit test."
        }
      },
      {
        "sha": "ed15d5007ca7ee4d61294c741ce3e858d3c1d461",
        "commit": {
          "message": "update flight readme wording (#31466)"
        }
      },
      {
        "sha": "b836de613d66ff36574af95cb93ad15fd743d1f4",
        "commit": {
          "message": "Fix continuation bug (#31434)\n\n## Overview\r\n\r\nIn `scheduleTaskForRootDuringMicrotask` we clear `root.callbackNode` if\r\nthe work loop is [suspended waiting on\r\ndata](https://github.com/facebook/react/blob/ac3ca097aeecae8fe3ec7f9b286307a923676518/packages/react-reconciler/src/ReactFiberRootScheduler.js#L338).\r\n\r\nBut we don't null check `root.callbackNode` before returning a\r\ncontinuation in `performWorkOnRootViaSchedulerTask` where\r\n`scheduleTaskForRootDuringMicrotask` is synchronously called, causing an\r\ninfinite loop when the only thing in the queue is something suspended\r\nwaiting on data.\r\n\r\nThis essentially restores the behavior from here:\r\nhttps://github.com/facebook/react/pull/26328/files#diff-72ff2175ae3569037f0b16802a41b0cda2b2d66bb97f2bda78ed8445ed487b58L1168\r\n\r\nFound by investigating the failures for\r\nhttps://github.com/facebook/react/pull/31417\r\n\r\n## TODO\r\n- add a test\r\n\r\n---------\r\n\r\nCo-authored-by: Joe Savona <joesavona@fb.com>"
        }
      },
      {
        "sha": "2ec26bc4323673d1f2035191d3aaf0a18b20d488",
        "commit": {
          "message": "[compiler] Repro for mutable range edge case (#31479)\n\nSee test fixtures"
        }
      },
      {
        "sha": "d9b3841ca64f292e3450edcd0a87eca05ac4c5f9",
        "commit": {
          "message": "Revert \"Performance tracks are sorted by start time\" hack (#31518)\n\nThis reverts commit d3bf32a95806b6d583ef041b8d83781cd686cfd8 which was\r\npart of #30983\r\n\r\nWhen you have very deep trees this trick can cause the top levels to\r\nskew way too much from the real numbers. Creating unbalanced trees.\r\n\r\nThe bug should have been fixed in Chrome Canary now so that entries\r\nadded later are sorted to go first which should've addressed this issue."
        }
      },
      {
        "sha": "3770c11011c78d227c7013468787e0c34ae91dc8",
        "commit": {
          "message": "[compiler] repro for reactive ref.current accesses (#31519)\n\nSee test fixture\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31519).\r\n* #31521\r\n* __->__ #31519"
        }
      },
      {
        "sha": "7ac8e612118a1285ac6aa0bb333d910b9f23a7ad",
        "commit": {
          "message": "Only log component level profiling for components that actually performed work (#31522)\n\nThis provides less context but skips a lot of noise.\r\n\r\nPreviously we were including parent components to provide context about\r\nwhat is rendering but this turns out to be:\r\n\r\n1) Very expensive due to the overhead of `performance.measure()` while\r\nprofiling.\r\n2) Unactionable noise in the profile that hurt more than it added in\r\nreal apps with large trees.\r\n\r\nThis approach instead just add performance.measure calls for each\r\ncomponent that was marked as PerformedWork (which was used for this\r\npurpose by React Profiler) or had any Effects.\r\n\r\nNot everything gets marked with PerformedWork though. E.g. DOM nodes do\r\nnot but they can have significant render times since creating them takes\r\ntime. We might consider including them if a self-time threshold is met.\r\n\r\nBecause there is little to no context about the component anymore it\r\nbecomes really essential to get a feature from Chrome DevTools that can\r\nlink to something with more context like React DevTools."
        }
      },
      {
        "sha": "380f5d675d2269f090d15c3f92e10de66e12516c",
        "commit": {
          "message": "Fix sizebot (#31535)\n\nOur CI workflows generally cache `**/node_modules` (note the glob, it\r\ncaches all transitive node_module directories) to speed up startup for\r\nnew jobs that don't change any dependencies. However it seems like one\r\nof our caches got into a weird state (not sure how it happened) where\r\nthe `build` directory (used in various other scripts as the directory\r\nfor compiled React packages) would contain a `node_modules` directory as\r\nwell. This made sizebot size change messages very big since it would try\r\nto compare every single file in `build/node_modules`.\r\n\r\nThe fix is to ensure we always clean the `build` directory before doing\r\nanything with it. We can also delete that one problematic cache but this\r\nPR is a little more resilient to other weird behavior with that\r\ndirectory."
        }
      },
      {
        "sha": "988e2176702fca9b25113d9a8a3e7e3f484e16f2",
        "commit": {
          "message": "Turn on enableSiblingPrerendering in canary (#31541)\n\nIn preparation for the next RC, I set this feature flag to true\r\neverywhere. I did not delete the feature flag yet, in case there are yet\r\nmore bugs to be discovered.\r\n\r\nI also didn't remove the dynamic feature flag from the Meta builds; I'll\r\nlet the Meta folks handle that."
        }
      },
      {
        "sha": "7aa5dda3b3e4c2baa905a59b922ae7ec14734b24",
        "commit": {
          "message": "Bump RC version to 19.0.0-rc.1 (#31542)"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "eslint-plugin-react-hooks@5.0.0",
      "body": "This release only contains `eslint-plugin-react-hooks`. Notably, new violations and support for ESLint v9 were added.\r\n\r\n## `eslint-plugin-react-hooks`\r\n\r\n* **New Violations:** Component names now need to start with an uppercase letter instead of a non-lowercase letter. This means `_Button` or `_component` are no longer valid. ([@kassens](https://github.com/kassens)) in [#25162](https://github.com/facebook/react/pull/25162)\r\n    For example, in\r\n    ```tsx\r\n    function _Component() {\r\n      useState()\r\n      ^^^^^^^^ A React Hook \"useState\" is called in function \"_Component\" which is neither a Component nor a custom React Hook function.\r\n    }\r\n    ```\r\n    `_Component` should be renamed to `Component`.\r\n    \r\n\r\n- Add support for ESLint v9. ([@eps1lon](https://github.com/eps1lon) in [#28773](https://github.com/facebook/react/pull/28773))\r\n- Consider dispatch from `useActionState` stable. ([@eps1lon](https://github.com/eps1lon) in [#29665](https://github.com/facebook/react/pull/29665))\r\n- Accept `as` expression in callback. ([@StyleShit](https://github.com/StyleShit) in [#28202](https://github.com/facebook/react/pull/28202))\r\n- Accept `as` expressions in deps array. ([@StyleShit](https://github.com/StyleShit) in [#28189](https://github.com/facebook/react/pull/28189))\r\n- Treat `React.use()` the same as `use()`. ([@kassens](https://github.com/kassens) in [#27769](https://github.com/facebook/react/pull/27769))\r\n- Move `use()` lint to non-experimental. ([@kassens](https://github.com/kassens) in [#27768](https://github.com/facebook/react/pull/27768))\r\n- Support Flow `as` expressions. ([@cpojer](https://github.com/cpojer) in [#27590](https://github.com/facebook/react/pull/27590))\r\n- Allow `useEffect(fn, undefined)`. ([@kassens](https://github.com/kassens) in [#27525](https://github.com/facebook/react/pull/27525))\r\n- Disallow hooks in async functions. ([@acdlite](https://github.com/acdlite) in [#27045](https://github.com/facebook/react/pull/27045))\r\n- Rename experimental `useEvent` to `useEffectEvent`. ([@sebmarkbage](https://github.com/sebmarkbage) in [#25881](https://github.com/facebook/react/pull/25881))\r\n- Lint for presence of `useEvent` functions in dependency lists. ([@poteto](https://github.com/poteto) in [#25512](https://github.com/facebook/react/pull/25512))\r\n- Check `useEvent` references instead. ([@poteto](https://github.com/poteto) in [#25319](https://github.com/facebook/react/pull/25319))\r\n- Update `RulesOfHooks` with `useEvent` rules. ([@poteto](https://github.com/poteto) in [#25285](https://github.com/facebook/react/pull/25285))"
    },
    "commits": [
      {
        "sha": "591adfa40d900e9af6d9250f1ae58d72366e7957",
        "commit": {
          "message": "[Flight] Rename Chunk constructor to ReactPromise (#30747)\n\nWhen printing these in DevTools they show up as the name of the\r\nconstructor so then you pass a Promise to the client it logs as \"Chunk\"\r\nwhich is confusing.\r\n\r\nIdeally we'd probably just name this Promise but 1) there's a slight\r\ndifference in the .then method atm 2) it's a bit tricky to name a\r\nvariable and get it from the global in the same scope. Closure compiler\r\ndoesn't let us just name a function because it removes it and just uses\r\nthe variable name."
        }
      },
      {
        "sha": "52c9c43735d0d5ebb9cd5e2a47c174cb5a5a1713",
        "commit": {
          "message": "[Flight] Emit Infinite Promise as a Halted Row (#30746)\n\nStacked on #30731.\r\n\r\nWhen logging a Promise we emit it as an infinite promise instead of\r\nblocking the replay on it.\r\n\r\nThis models that as a halted row instead. No need for this special case.\r\n\r\nI unflag the receiving side since now it's used to replace a feature\r\nthat's already unflagged so it's used."
        }
      },
      {
        "sha": "0fa9476b9b9b7e284fb6ebe7e1c46a6a6ae85f27",
        "commit": {
          "message": "[Flight] Revert Emit Infinite Promise as a Halted Row (#30746) (#30748)\n\nThis reverts commit 52c9c43735d0d5ebb9cd5e2a47c174cb5a5a1713.\r\n\r\nJust kidding. We realized we probably don't want to do the halted row\r\nthing after all."
        }
      },
      {
        "sha": "a960b92cb93e7d006e5e8de850f9b8b51f655c90",
        "commit": {
          "message": "[Flight] model halting as never delivered chunks (#30740)\n\nstacked on: #30731\r\n\r\nWe've refined the model of halting a prerender. Now when you abort\r\nduring a prerender we simply omit the rows that would complete the\r\nflight render. This is analagous to prerendering in Fizz where you must\r\nresume the prerender to actually result in errors propagating in the\r\npostponed holes. We don't have a resume yet for flight and it's not\r\nentirely clear how that will work however the key insight here is that\r\ndeciding whether the never resolving rows are an error or not should\r\nreally be done on the consuming side rather than in the producer.\r\n\r\nThis PR also reintroduces the logs for the abort error/postpone when\r\nprerendering which will give you some indication that something wasn't\r\nfinished when the prerender was aborted."
        }
      },
      {
        "sha": "5997072f691024e0e5afd78c002c0871b1cbd6a6",
        "commit": {
          "message": "[flow] Remove CI_MAX_WORKERS option\n\nNoticed this from #30707. This was vestigial from from circleci and now\nthat we're on GH actions I think we should be able to remove this option\naltogether.\n\nghstack-source-id: 78e8b0243b1e1484ffaad820987ae3679a7374bf\nPull Request resolved: https://github.com/facebook/react/pull/30753"
        }
      },
      {
        "sha": "2505bf9b3400c6a00381e86d30b495935f5339df",
        "commit": {
          "message": "[Fizz] track postpones when aborting boundaries with a postpone (#30751)\n\nWhen aborting with a postpone value boundaries are put into client\r\nrendered mode even during prerenders. This doesn't follow the postpoen\r\nsemantics of the rest of fizz where during a prerender a postpone is\r\ntracked and it will leave holes in tracked postpone state that can be\r\nresumed. This change updates this behavior to match the postpones\r\nsemantics between aborts and imperative postpones."
        }
      },
      {
        "sha": "92d26c8e93a88ca41338d3509b4324ad19a89c1e",
        "commit": {
          "message": " [Flight] When halting omit any reference rather than refer to a shared missing chunk (#30750)\n\nWhen aborting a prerender we should leave references unfulfilled, not\r\nshare a common unfullfilled reference. functionally today this doesn't\r\nmatter because we don't have resuming but the semantic is that the row\r\nwas not available when the abort happened and in a resume the row should\r\nfill in. But by pointing each task to a common unfulfilled chunk we lose\r\nthe ability for these references to resolves to distinct values on\r\nresume."
        }
      },
      {
        "sha": "4c2dfb3126f87fc270ad8a07d6180744d25cc585",
        "commit": {
          "message": "Ensure `react-dom/client` is built in Codesandbox preview builds (#30757)"
        }
      },
      {
        "sha": "85180b8cf84274795986c8f2c8473f8816db8b7b",
        "commit": {
          "message": "[Fizz][Static] when aborting a prerender halt unfinished boundaries instead of erroring (#30732)\n\nWhen we introduced prerendering for flight we modeled an abort of a\r\nflight prerender as having unfinished rows. This is similar to how\r\npostpone was already implemented when you postponed from \"within\" a\r\nprerender using React.unstable_postpone. However when aborting with a\r\npostponed instance every boundary would be eagerly marked for client\r\nrendering which is more akin to prerendering and then resuming with an\r\naborted signal.\r\n\r\nThe insight with the flight work was that it's not so much the postpone\r\nthat describes the intended semantics but the abort combined with a\r\nprerender. So like in flight when you abort a prerender and enableHalt\r\nis enabled boundaries and the shell won't error for any reason. Fizz\r\nwill still call onPostpone and onError according to the abort reason but\r\nthe consuemr of the prerender should expect to resume it before trying\r\nto use it."
        }
      },
      {
        "sha": "e831c232787400474673051d63df4aaf6c01bdeb",
        "commit": {
          "message": "Test infra: Support gate('enableFeatureFlag') (#30760)\n\nShortcut for the common case where only a single flag is checked. Same\r\nas `gate(flags => flags.enableFeatureFlag)`.\r\n\r\nNormally I don't care about these types of conveniences but I'm about to\r\nadd a lot more inline flag checks these all over our tests and it gets\r\nnoisy. This helps a bit."
        }
      },
      {
        "sha": "dc32c7f35ed6699e302dc7dbae17804555c669c6",
        "commit": {
          "message": "[Flight] use microtask for scheduling during prerenders (#30768)\n\nIn https://github.com/facebook/react/pull/29491 I updated the work\r\nscheduler for Flight to use microtasks to perform work when something\r\npings. This is useful but it does have some downsides in terms of our\r\nability to do task prioritization. Additionally the initial work is not\r\ninstantiated using a microtask which is inconsistent with how pings\r\nwork.\r\n\r\nIn this change I update the scheduling logic to use microtasks\r\nconsistently for prerenders and use regular tasks for renders both for\r\nthe initial work and pings."
        }
      },
      {
        "sha": "dd9117e3134f24d1aa39e405a95ab54188a017dd",
        "commit": {
          "message": "[Flight] Source Map Actions in Reference Node Loader Transforms (#30755)\n\nFollow up to #30741.\r\n\r\nThis is just for the reference Webpack implementation.\r\n\r\nIf there is a source map associated with a Node ESM loader, we generate\r\nnew source map entries for every `registerServerReference` call.\r\n\r\nTo avoid messing too much with it, this doesn't rewrite the original\r\nmappings. It just reads them while finding each of the exports in the\r\noriginal mappings. We need to read all since whatever we append at the\r\nend is relative. Then we just generate new appended entries at the end.\r\n\r\nFor the location I picked the location of the local name identifier.\r\nSince that's the name of the function and that gives us a source map\r\nname index. It means it jumps to the name rather than the beginning of\r\nthe function declaration. It could be made more clever like finding a\r\nlocal function definition if it is reexported. We could also point to\r\nthe line/column of the function declaration rather than the identifier\r\nbut point to the name index of the identifier name.\r\n\r\nNow jumping to definition works in the fixture.\r\n\r\n<img width=\"574\" alt=\"Screenshot 2024-08-20 at 2 49 07 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/7710f0e6-2cee-4aad-8d4c-ae985f8289eb\">\r\n\r\nUnfortunately this technique doesn't seem to work in Firefox nor Safari.\r\nThey don't apply the source map for jumping to the definition."
        }
      },
      {
        "sha": "1228a28398bbf7b4d15cd148496853342e63c041",
        "commit": {
          "message": "Remove turbopack unbundled/register/loader (#30756)\n\nThe unbundled form is just a way to show case a prototype for how an\r\nunbundled version of RSC can work. It's not really intended for every\r\nbundler combination to provide such a configuration.\r\n\r\nThere's no configuration of Turbopack that supports this mode atm and\r\npossibly never will be since it's more of an integrated server/client\r\nexperience.\r\n\r\nThis removes the unbundled form and node register/loaders from the\r\nturbopack build."
        }
      },
      {
        "sha": "ab24f643d0809ee09a7499862fef135fb09a0225",
        "commit": {
          "message": "[Fizz] use microtasks rather than tasks when scheduling work while prerendering (#30770)\n\nSimilar to https://github.com/facebook/react/pull/30768 we want to\r\nschedule work during prerendering in microtasks both for the root task\r\nand pings. We continue to schedule flushes as Tasks to allow as much\r\nwork to be batched up as possible."
        }
      },
      {
        "sha": "1d989965a6aac11d71ecf28030796f5475a86642",
        "commit": {
          "message": "[ez] Add noformat etc headers into some files\n\nThese are only needed internally so I'm opting to just do it in the\ncommit artifacts job instead of amending the build config.\n\nghstack-source-id: 6a5382b0287d679f4515d79b140ab8248ce90c6b\nPull Request resolved: https://github.com/facebook/react/pull/30775"
        }
      },
      {
        "sha": "985747f81033833dca22f30b0c04704dd4bd3714",
        "commit": {
          "message": "[DevTools] Support REACT_LEGACY_ELEMENT_TYPE for formatting JSX (#30779)\n\nDevTools shouldn't use react-is since that's versioned to one version of\r\nReact. We don't need to since we use all the symbols from\r\nshared/ReactSymbols anyway and have a fork of typeOf that can cover\r\nboth.\r\n\r\nNow JSX of old React versions show up with proper JSX formatting when\r\ninspecting."
        }
      },
      {
        "sha": "eb3ad065a10e542eb501bcb7dba7f9617e8c363e",
        "commit": {
          "message": "Feature flag: enableSiblingPrerendering (#30761)\n\nAdds a new feature flag for an upcoming experiment.\r\n\r\nNo implementation yet."
        }
      },
      {
        "sha": "f7bb717e9e9f876c6a466a5f6d31004c7f7590c5",
        "commit": {
          "message": "[compiler] Repro for missing memoization due to inferred mutation\n\nThis fixture bails out on ValidatePreserveExistingMemo but would ideally memoize since the original memoization is safe. It's trivial to make it pass by commenting out the commented line (`LogEvent.log(() => object)`). I would expect the compiler to infer this as possible mutation of `logData`, since `object` captures a reference to `logData`. But somehow `logData` is getting memoized successfully, but we still infer the callback, `setCurrentIndex`, as having a mutable range that extends to the `setCurrentIndex()` call after the useCallback.\n\nghstack-source-id: 4f82e345102f82f6da74de3f9014af263d016762\nPull Request resolved: https://github.com/facebook/react/pull/30764"
        }
      },
      {
        "sha": "0ef00b3e17447ae94dc5701a5ad410c137680d86",
        "commit": {
          "message": "[compiler] Transitively freezing functions marks values as frozen, not effects\n\nThe fixture from the previous PR was getting inconsistent behavior because of the following:\n1. Create an object in a useMemo\n2. Create a callback in a useCallback, where the callback captures the object from (1) into a local object, then passes that local object into a logging method. We have to assume the logging method could modify the local object, and transitively, the object from (1).\n3. Call the callback during render.\n4. Pass the callback to JSX.\n\nWe correctly infer that the object from (1) is captured and modified in (2). However, in (4) we transitively freeze the callback. When transitively freezing functions we were previously doing two things: updating our internal abstract model of the program values to reflect the values as being frozen *and* also updating function operands to change their effects to freeze.\n\nAs the case above demonstrates, that can clobber over information about real potential mutability. The potential fix here is to only walk our abstract value model to mark values as frozen, but _not_ override operand effects. Conceptually, this is a forward data flow propagation — but walking backward to update effects is pushing information backwards in the algorithm. An alternative would be to mark that data was propagated backwards, and trigger another loop over the CFG to propagate information forward again given the updated effects. But the fix in this PR is more correct.\n\nghstack-source-id: c05e716f37827cb5515a059a1f0e8e8ff94b91df\nPull Request resolved: https://github.com/facebook/react/pull/30766"
        }
      },
      {
        "sha": "689c6bd3fd138ec6c21c54e741da168bdd0c0616",
        "commit": {
          "message": "[compiler][wip] Environment option for resolving imported module types\n\nAdds a new Environment config option which allows specifying a function that is called to resolve types of imported modules. The function is passed the name of the imported module (the RHS of the import stmt) and can return a TypeConfig, which is a recursive type of the following form:\n\n* Object of valid identifier keys (or \"*\" for wildcard) and values that are TypeConfigs\n* Function with various properties, whose return type is a TypeConfig\n* or a reference to a builtin type using one of a small list (currently Ref, Array, MixedReadonly, Primitive)\n\nRather than have to eagerly supply all known types (most of which may not be used) when creating the config, this function can do so lazily. During InferTypes we call `getGlobalDeclaration()` to resolve global types. Originally this was just for known react modules, but if the new config option is passed we also call it to see if it can resolve a type. For `import {name} from 'module'` syntax, we first resolve the module type and then call `getPropertyType(moduleType, 'name')` to attempt to retrieve the property of the module (the module would obviously have to be typed as an object type for this to have a chance of yielding a result). If the module type is returned as null, or the property doesn't exist, we fall through to the original checking of whether the name was hook-like.\n\nTODO:\n* testing\n* cache the results of modules so we don't have to re-parse/install their types on each LoadGlobal of the same module\n* decide what to do if the module types are invalid. probably better to fatal rather than bail out, since this would indicate an invalid configuration.\n\nghstack-source-id: bfdbf67e3dd0cbfd511bed0bd6ba92266cf99ab8\nPull Request resolved: https://github.com/facebook/react/pull/30771"
        }
      },
      {
        "sha": "8a20fc3b19b600a3b8666203f1877230c62becf9",
        "commit": {
          "message": "[compiler] Repro of missing memoization due to capturing w/o mutation\n\nIf you have a function expression which _captures_ a mutable value (but does not mutate it), and that function is invoked during render, we infer the invocation as a mutation of the captured value. But in some circumstances we can prove that the captured value cannot have been mutated, and could in theory avoid inferring a mutation.\n\nghstack-source-id: 47664e48ce8c51a6edf4d714d1acd1ec4781df80\nPull Request resolved: https://github.com/facebook/react/pull/30783"
        }
      },
      {
        "sha": "217a0efcd90ef04556e0256e0eff9313bdbbcaca",
        "commit": {
          "message": "[compiler] Add returnIdentifier to function expressions\n\nThis gives us a place to store type information, used in follow-up PRs.\n\nghstack-source-id: ee0bfa253f63c30ccaac083b9f1f72b76617f19c\nPull Request resolved: https://github.com/facebook/react/pull/30784"
        }
      },
      {
        "sha": "8410c8b959b8e20adc5577cb7211702cfba0f78f",
        "commit": {
          "message": "[compiler] Infer return types of function expressions\n\nUses the returnIdentifier added in the previous PR to provide a stable identifier for which we can infer a return type for functions, then wires up the equations in InferTypes to infer the type.\n\nghstack-source-id: 22c0a9ea096daa5f72821fca2a5ff5b199f65c8b\nPull Request resolved: https://github.com/facebook/react/pull/30785"
        }
      },
      {
        "sha": "98b57408216c80ec75723773524466657b4956b6",
        "commit": {
          "message": "[compiler] Rename HIRFunction.returnType\n\nRename this field so we can use it for the actual return type.\n\nghstack-source-id: 118d7dcfbbcc40911bf6d13f14e70053e436738d\nPull Request resolved: https://github.com/facebook/react/pull/30789"
        }
      },
      {
        "sha": "7a3fcc9898d57a723613814bd19ec1d60805e5c8",
        "commit": {
          "message": "[compiler] Flatten returnIdentifier to just returnType\n\nWe don't a full Identifier object for the return type, we can just store the type.\n\nghstack-source-id: 4594d64ce3900ced3e461945697926489898318e\nPull Request resolved: https://github.com/facebook/react/pull/30790"
        }
      },
      {
        "sha": "e483df4658473ca9c917a42be4869d445be00807",
        "commit": {
          "message": "[Flight ESM] Wire up Source Maps in the flight-esm fixture (#30758)\n\nSame as #29708 but for the flight-esm fixture."
        }
      },
      {
        "sha": "97e2ce6a003db070d1d14ca25ac4b30e1df4a8ce",
        "commit": {
          "message": "[Flight] Enable Server Action Source Maps in flight-esm Fixture (#30763)\n\nStacked on #30758 and #30755.\r\n\r\nThis is copy paste from #30755 into the ESM package. We use the\r\n`webpack-sources` package for the source map utility but it's not\r\nactually dependent on Webpack itself. Could probably inline it in the\r\nbuild."
        }
      },
      {
        "sha": "36c04348d7c6179bac4e7f27af823a67289432f9",
        "commit": {
          "message": "[DevTools] Make Functions Clickable to Jump to Definition (#30769)\n\nCurrently you can jump to definition of a function by right clicking\r\nthrough the context menu. However, it's pretty difficult to discover.\r\nThis makes the functions clickable to jump to definition - like links.\r\n\r\nThis uses the same styling as we do for links (which are btw only\r\nclickable if they're not editable). Including cursor: pointer.\r\n\r\nI added a background on hover which follows the same pattern as the\r\nowners list.\r\n\r\nI also dropped the ƒ prefix when displaying functions. This is a cute\r\nshort cut and there's precedence in how Chrome prints functions in the\r\nconsole *if* the function's toString would've had a function prefix like\r\nif it was a function declaration or expression. It does not do this for\r\narrow functions or object methods.\r\n\r\nElsewhere in the JS ecosystem this isn't really used anywhere. It\r\ninvites more questions than it answers.\r\n\r\nThe parenthesis and curlies are enough. There's no ambiguity here since\r\nstrings have quotations. It looks better with just its object method\r\nform. Keeping it simple seems best. To my eyes this flows better because\r\nI'm used to looking at function syntax but not weird \"f\"s.\r\n\r\nBefore:\r\n\r\n<img width=\"433\" alt=\"Screenshot 2024-08-20 at 11 55 09 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/9dd50da6-598f-4291-9e24-1cdc7200dc9e\">\r\n\r\n\r\nAfter:\r\n<img width=\"388\" alt=\"Screenshot 2024-08-20 at 11 46 01 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/dd988e14-412e-4deb-8c8c-26a54be8331f\">\r\n\r\n\r\nAfter (Hover):\r\n<img width=\"389\" alt=\"Screenshot 2024-08-20 at 11 46 31 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/6fb4ebed-5dc1-448a-8e4d-b6d4f3903329\">"
        }
      },
      {
        "sha": "eb7570bc1631243af8df21c8a87173cc12f2d880",
        "commit": {
          "message": "[Flight] Preserve location of bound server actions (#30778)\n\nFollow up to #30741.\r\n\r\nWe need to keep the location of the action when it's bound so we can\r\nstill jump to it."
        }
      },
      {
        "sha": "b57d282369b3b3232d8fed537f5aaf0156430d63",
        "commit": {
          "message": "Revert \"[compiler][eslint] remove compilationMode override; report bailouts on first line\"\n\nThis reverts commit b34b750729bcbcfd80f72f82f46da5bc3e72158f.\n\nThis hack doesn't play well internally so I'm reverting this for now\n(but keeping the compilationMode override). I'll audit the locations we\nreport later and try to make them more accurate so we won't need this\nworkaround.\n\nghstack-source-id: b6be29c11d5e2eae3004ee74cba1b080894c963a\nPull Request resolved: https://github.com/facebook/react/pull/30792"
        }
      },
      {
        "sha": "ee7f6757c446c4e79ecc7e2bc22b8c9b712834b7",
        "commit": {
          "message": "Fix: Synchronous popstate transitions (#30759)\n\nThis is a refactor of the fix in #27505.\r\n\r\nWhen a transition update is scheduled by a popstate event, (i.e. a back/\r\nforward navigation) we attempt to render it synchronously even though\r\nit's a transition, since it's likely the previous page's data is cached.\r\n\r\nIn #27505, I changed the implementation so that it only \"upgrades\" the\r\npriority of the transition for a single attempt. If the attempt\r\nsuspends, say because the data is not cached after all, from then on it\r\nshould be treated as a normal transition.\r\n\r\nBut it turns out #27505 did not work as intended, because it relied on\r\nmarking the root with pending synchronous work (root.pendingLanes),\r\nwhich was never cleared until the popstate update completed.\r\n\r\nThe test scenarios I wrote accidentally worked for a different reason\r\nrelated to suspending the work loop, which I'm currently in the middle\r\nof refactoring."
        }
      },
      {
        "sha": "039c5c08fa291ee2ac65e2470c98d1701494d5b3",
        "commit": {
          "message": "[compiler] Repros for missing memoization due to lack of phi type inference\n\nThis is a complex case: we not only need phi type inference but also need to be able infer the union of `MixedReadonly | Array`.\n\nghstack-source-id: 935088910dd8c210b3253cf8ff1f4b935f5081b7\nPull Request resolved: https://github.com/facebook/react/pull/30793"
        }
      },
      {
        "sha": "37c6ea849c1445deb8d6704487b6295f7970a470",
        "commit": {
          "message": "[compiler] Typedefs for Array.prototype.flatMap\n\nghstack-source-id: af4c7ac2fd26f6ff332a1af0055c80b70838efee\nPull Request resolved: https://github.com/facebook/react/pull/30794"
        }
      },
      {
        "sha": "c9c170b63b086964272ea2632551b1f108c6fd56",
        "commit": {
          "message": "[compiler] Remove phi type, infer phi.id.type\n\nghstack-source-id: 0c26bb224c6d5431898e683891df9b1a5c2e5b63\nPull Request resolved: https://github.com/facebook/react/pull/30795"
        }
      },
      {
        "sha": "4f546740788ae95ced0338a9cbafc50124b47194",
        "commit": {
          "message": "[compiler] Infer phi types, extend mutable ranges to account for Store effects\n\nRedo of an earlier (pre-OSS) PR to infer types of phi nodes. There are a few pieces to this:\n\n1. Update InferTypes to infer the type of `phi.id.type`, not the unused `phi.type`.\n2. Update the algorithm to verify that all the phi types are actually equal, not just have the same kind.\n3. Handle circular types by removing the cycle.\n\nHowever, that reveals another issue: InferMutableRanges currently infers the results of `Store` effects _after_ its fixpoint loop. That was fine when a Store could never occur on a phi (since they wouldn't have a type to get a function signature from). Now though, we can have Store effects occur on phis, and we need to ensure that this correctly updates the mutable range of the phi operands - recursively. See new test that fails without the fixpoint loop.\n\nghstack-source-id: 2e1b02844d3a814dce094b7e3812df799e54343f\nPull Request resolved: https://github.com/facebook/react/pull/30796"
        }
      },
      {
        "sha": "1b7478246d05b030a2ae7a8bb07aea8c7df7ef27",
        "commit": {
          "message": "[compiler] Special-case phi inference for mixed readonly type\n\nThis allows us to handle common operations such as `useFragment(...).edges.nodes ?? []` where we have a `Phi(MixedReadonly, Array)`. The underlying pattern remains general-purpose and not Relay-specific, and any API that returns transitively \"mixed\" data (primitives, arrays, plain objects) can benefit from the same type refinement.\n\nghstack-source-id: 51283108942002a14d032613a9d0b8b665ee3a94\nPull Request resolved: https://github.com/facebook/react/pull/30797"
        }
      },
      {
        "sha": "f65ac7bd4aac61db1ec25af5b03b72d03779a890",
        "commit": {
          "message": "[DevTools] Make function inspection instant (#30786)\n\nI noticed that there is a delay due to the inspection being split into\r\none part that gets the attribute and another eval that does the\r\ninspection. This is a bit hacky and uses temporary global names that are\r\nleaky. The timeout was presumably to ensure that the first step had\r\nfully propagated but it's slow. As we've learned, it can be throttled,\r\nand it isn't a guarantee either way.\r\n\r\nInstead, we can just consolidate these into a single operation that\r\nby-passes the bridge and goes straight to the renderer interface from\r\nthe eval.\r\n\r\nI did the same for the viewElementSource helper even though that's not\r\ncurrently in use since #28471 but I think we probably should return to\r\nthat technique when it's available since it's more reliable than the\r\nthrow - at least in Chrome. I'm not sure about the status of React\r\nNative here. In Firefox, inspecting a function with source maps doesn't\r\nseem to work. It doesn't jump to original code."
        }
      },
      {
        "sha": "dcae56f8b72f625d8affe5729ca9991b31a492ac",
        "commit": {
          "message": "[ez] Remove trailing space from babel-refresh header\n\nghstack-source-id: d78c53462b3be7b93733cdd0a7def96d7112087e\nPull Request resolved: https://github.com/facebook/react/pull/30806"
        }
      },
      {
        "sha": "e44685e4f196f9e19c3729ab2b3772a40428ac1e",
        "commit": {
          "message": "[DevTools] Use Owner Stacks to Implement View Source of a Server Component (#30798)\n\nWe don't have the source location of Server Components on the client\r\nbecause we don't want to eagerly do the throw trick for all Server\r\nComponents just in case. Unfortunately Node.js doesn't expose V8's API\r\nto get a source location of a function.\r\n\r\nWe do have the owner stacks of the JSX that created it though and at\r\nsome point we'll also show that location in DevTools.\r\n\r\nHowever, the realization is that if a Server Component is the owner of\r\nany child. The owner stack of that child will have the owner component's\r\nsource location as its bottom stack frame.\r\n\r\nThe technique I'm implementing here is to track whenever a child mounts\r\nwe already have its owner. We track the first discovered owned child's\r\nstack on the owner. Then when we ask for a Source location of the owner\r\ndo we parse that stack and extract the location of the bottom frame.\r\nThis doesn't give us a location necessarily in the top of the function\r\nbut somewhere in the function.\r\n\r\nIn this case the first owned child is the Container:\r\n\r\n<img width=\"1107\" alt=\"Screenshot 2024-08-22 at 10 24 42 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/95f32850-24a5-4151-8ce6-b7b89db68aee\">\r\n<img width=\"648\" alt=\"Screenshot 2024-08-22 at 10 24 20 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/4bcba033-866f-4684-9beb-de09d189deff\">\r\n\r\nWe can even use this technique for Fibers too. Currently I use this as a\r\nfallback in case the error technique didn't work. This covers a case\r\nwhere nothing errors but you still render a child. This case is actually\r\nquite common:\r\n\r\n```\r\nfunction Foo() {\r\n  return <Bar />;\r\n}\r\n```\r\n\r\nHowever, for Fibers we could really just use the `inspect(function)`\r\ntechnique which works for all cases. At least in Chrome.\r\n\r\nUnfortunately, this technique doesn't work if a Component doesn't create\r\nany new JSX but just renders its children. It also currently doesn't\r\nwork if the child is filtered since I only look up the owner if an\r\ninstance is not filtered. This means that the container in the fixture\r\ncan't view source by default since the host component is filtered:\r\n\r\n```\r\nexport default function Container({children}) {\r\n  return <div>{children}</div>;\r\n}\r\n```\r\n\r\n<img width=\"1107\" alt=\"Screenshot 2024-08-22 at 10 24 35 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/c3f8f9c5-5add-4d35-9290-3a5079e82adc\">"
        }
      },
      {
        "sha": "246d7bfeb0c90ecccd9531929b60a79d628a4c78",
        "commit": {
          "message": "Enable suspenseCallback on React Native (#29210)\n\n## Summary\r\n\r\nsuspenseCallback feature has proved to be useful for FB Web. Let's look\r\nat enabling the feature for the React Native build.\r\n\r\n\r\n## How did you test this change?\r\n\r\nWill sync the react changes with a React Native build and will verify\r\nthat performance logging is correctly notified of suspense promises\r\nduring the suspense callback."
        }
      },
      {
        "sha": "1a8f92a8699e79966e65841fcb9110bba4c3df7f",
        "commit": {
          "message": "[DevTools] Track Tree Base Duration of Virtual Instances (#30817)\n\nThese don't have their own time since they don't take up any time to\r\nrender but they show up in the tree for context. However they never\r\nrender themselves. Their base tree time is the base time of their\r\nchildren. This way they take up the same space as their combined\r\nchildren in the Profiler tree. (Instead of leaving a blank line which\r\nthey did before this PR.)\r\n\r\nThe frontend doesn't track the difference between a virtual instance and\r\na Fiber that didn't render this update. This might be a bit confusing as\r\nto why it didn't render. I add the word \"client\" to make it a bit\r\nclearer and works for both. We should probably have different verbiage\r\nhere based on it is a Server Component or something else.\r\n\r\n<img width=\"1103\" alt=\"Screenshot 2024-08-26 at 5 00 47 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/87b811d4-7024-466a-845d-542493ed3ca2\">\r\n\r\nI also took the opportunity to remove idToTreeBaseDurationMap and\r\nidToRootMap maps. Cloning the Map isn't really all that super fast\r\nanyway and it means we have to maintain the map continuously as we\r\nrender. Instead, we can track it on the instances and then walk the\r\ninstances to create a snapshot when starting to profile. This isn't as\r\nfast but really fast too and requires less bookkeeping while rendering\r\ninstead which is more sensitive than that one snapshot in the beginning."
        }
      },
      {
        "sha": "9690b9ad749c30eab1900c99e7c25a7ed7e1d9b7",
        "commit": {
          "message": "[DevTools] Remove findCurrentFiberUsingSlowPathByFiberInstance (#30818)\n\nWe always track the last committed Fiber on `FiberInstance.data`.\r\n\r\n\r\nhttps://github.com/facebook/react/blob/dcae56f8b72f625d8affe5729ca9991b31a492ac/packages/react-devtools-shared/src/backend/fiber/renderer.js#L3068\r\n\r\nSo we can now remove this complex slow path to get the current fiber."
        }
      },
      {
        "sha": "f90a6bcc4c988f7524ce2be675b3257a530a51e9",
        "commit": {
          "message": "[DevTools] Reconcile Fibers Against Previous Children Instances (#30822)\n\nThis loops over the remainingReconcilingChildren to find existing\r\nFiberInstances that match the updated Fiber. This is the same thing we\r\nalready do for virtual instances. This avoids the need for a\r\n`fiberToFiberInstanceMap`.\r\n\r\nThis loop is fast but there is a downside when the children set is very\r\nlarge and gets reordered with keys since we might have to loop over the\r\nset multiple times to get to the instances in the bottom. If that\r\nbecomes a problem we can optimize it the same way ReactChildFiber does\r\nwhich is to create a temporary Map only when the children don't line up\r\nproperly. That way everything except the first pass can use the Map but\r\nthere's no need to create it eagerly.\r\n\r\nNow that we have the loop we don't need the previousSibling field so we\r\ncan save some memory there."
        }
      },
      {
        "sha": "96aca5f4f3d7fbe0c13350f90031d8ec4c060ccb",
        "commit": {
          "message": "Spawn new task if we hit stack overflow (#30419)\n\nIf we see the \"Maximum call stack size exceeded\" error we know we've hit\r\nstack overflow. We can recover from this by spawning a new task and\r\ntrying again. Effectively a zero-cost trampoline in the normal case. The\r\nnew task will have a clean stack. If you have a lot of siblings at the\r\nsame depth that hits the limit you can end up hitting this once for each\r\nsibling but within that new sibling you're unlikely to hit this again.\r\nSo it's not too expensive.\r\n\r\nIf it errors again in the retryTask pass, the other error handling takes\r\nover which causes this to be able to still not infinitely stall. E.g.\r\nwhen the component itself throws an error like this.\r\n\r\nIt's still better to increase the stack limit for performance if you\r\nhave a really deep tree but it doesn't really hurt to be able to recover\r\nsince it's zero cost when it doesn't happen.\r\n\r\nWe could do the same thing for Flight. Those trees don't tend to be as\r\ndeep but could happen."
        }
      },
      {
        "sha": "f2841c2a490b4b776b98568871b69693fedf985c",
        "commit": {
          "message": "[compiler] Fixture to demonstrate issue with returning object containing ref\n\nSummary:\nWe currently can return a ref from a hook but not an object containing a ref.\n\nghstack-source-id: 8b1de4991eb2731b7f758e685ba62d9f07d584b2\nPull Request resolved: https://github.com/facebook/react/pull/30820"
        }
      },
      {
        "sha": "7771d3a7972cc2483c45fde51b7ec2d926cba097",
        "commit": {
          "message": "[compiler] Track refs through object expressions and property lookups\n\nSummary:\nThis addresses the issue of the compiler being overly restrictive about refs escaping into object expressions. Rather than erroring whenever a ref flows into an object, we will now treat the object itself as a ref, and apply the same escape rules to it. Whenever we look up a property from a ref value, we now don't know whether that value is itself a ref or a ref value, so we assume it's both.\n\nThe same logic applies to ref-accessing functions--if such a function is stored in an object, we'll propagate that property to the object itself and any properties looked up from it.\n\nghstack-source-id: 5c6fcb895d4a1658ce9dddec286aad3a57a4c9f1\nPull Request resolved: https://github.com/facebook/react/pull/30821"
        }
      },
      {
        "sha": "5e51d767d179fda586f28e1118fb9ec5c200e35e",
        "commit": {
          "message": "[compiler] Stop reusing ScopeDep type in AnalyzeFunctions\n\nAnalyzeFunctions was reusing the `ReactiveScopeDependency` type since it happened to have a convenient shape, but we need to change this type to represent optionality. We now use a locally defined type instead.\n\nghstack-source-id: e305c6ede4bcbdffce606336c572cdc6dc1556c3\nPull Request resolved: https://github.com/facebook/react/pull/30811"
        }
      },
      {
        "sha": "4759161ed8d8f77bad654b6c23a063c8ad8d4864",
        "commit": {
          "message": "[compiler] Wrap ReactiveScopeDep path tokens in object\n\nPreviously the path of a ReactiveScopeDependency was `Array<string>`. We need to track whether each property access is optional or not, so as a first step we change this to `Array<{property: string}>`, making space for an additional property in a subsequent PR.\n\nghstack-source-id: c5d38d72f6b9d084a5df69ad23178794468f5f8b\nPull Request resolved: https://github.com/facebook/react/pull/30812"
        }
      },
      {
        "sha": "a718da0b23c3f72ba6fb8e1bd087aca85f2b0b4a",
        "commit": {
          "message": "[compiler] Add DependencyPath optional property\n\nAdds an `optional: boolean` property to each token in a DependencyPath, currently always set to false. Also updates the equality and printing logic for paths to account for this field.\n\nSubsequent PRs will update our logic to determine which manual dependencies were optional, then we can start inferring optional deps as well.\n\nghstack-source-id: 66c2da2cfab5e5ba6c2ac5e20adae5e4f615ad29\nPull Request resolved: https://github.com/facebook/react/pull/30813"
        }
      },
      {
        "sha": "925c20a20674254391b7752aa216ec417c8f52a3",
        "commit": {
          "message": "[compiler] Add fallthrough to branch terminal\n\nBranch terminals didn't have a fallthrough because they correspond to an outer terminal (optional, logical, etc) that has the \"real\" fallthrough. But understanding how branch terminals correspond to these outer terminals requires knowing the branch fallthrough. For example, `foo?.bar?.baz` creates terminals along the lines of:\n\n```\nbb0:\n  optional fallthrough=bb4\nbb1:\n  optional fallthrough=bb3\nbb2:\n  ...\n  branch ... (fallthrough=bb3)\n\n...\n\nbb3:\n  ...\n  branch ... (fallthrough=bb4)\n\n...\n\nbb4:\n  ...\n```\n\nWithout a fallthrough on `branch` terminals, it's unclear that the optional from bb0 has its branch node in bb3. With the fallthroughs, we can see look for a branch with the same fallthrough as the outer optional terminal to match them up.\n\nghstack-source-id: d48c6232899864716eef71798a278b487d30eafc\nPull Request resolved: https://github.com/facebook/react/pull/30814"
        }
      },
      {
        "sha": "9180a37fba0c9ad642bfc6e1c2839f88f66485ab",
        "commit": {
          "message": "[compiler] Allow inferred non-optional paths when manual deps were optional\n\nIf the inferred deps are more precise (non-optional) than the manual deps (optional) it should pass validation.\n\nThe other direction also seems like it would be fine - inferring optional deps when the original was non-optional - but for now let's keep the \"at least as precise\" rule.\n\nghstack-source-id: 9f7a99ee5f7caa2c2d96f70f360e4320bac3de2d\nPull Request resolved: https://github.com/facebook/react/pull/30816"
        }
      },
      {
        "sha": "7475d568da137b661ce23edc24446871d58c67ef",
        "commit": {
          "message": "[wip][compiler] Infer optional dependencies\n\nUpdates PropagateScopeDeps and DeriveMinimalDeps to understand optional dependency paths (`a?.b`). There a few key pieces to this:\n\nIn PropagateScopeDeps we jump through some hoops to work around the awkward structure of nested OptionalExpressions. This is much easier in HIR form, but I managed to get this pretty close and i think it will be landable with further cleanup. A good chunk of this is avoiding prematurely registering a value as a dependency - there are a bunch of indirections in the ReactiveFunction structure:\n\n```\nt0 = OptionalExpression\n  SequenceExpression\n    t0 = Sequence\n      ...\n    LoadLocal t0\n```\n\nWhere if at any point we call `visitOperand()` we'll prematurely register a dependency instead of declareProperty(). The other bit is that optionals can be optional=false for nested member expressions where not all the parts are actually optional (`foo.bar?.bar.call()`). And of course, parts of an optional chain can still be conditional even when optional=true (for example the `x` in `foo.bar?.[x]?.baz`). Not all of this is tested yet so there are likely bugs still.\n\nThe other bit is DeriveMinimalDeps, which is thankfully easier. We add OptionalAccess and OptionalDep and update the merge and reducing logic for these cases. There is probably still more to update though, for things like merging subtrees. There are a lot of ternaries that assume a result can be exactly one of two states (conditional/unconditional, dependency/access) and these assumptions don't hold anymore. I'd like to refactor to dependency/access separate from conditional/optional/unconditional. Also, the reducing logic isn't quite right: once a child is optional we keep inferring all the parents as optional too, losing some precision. I need to adjust the reducing logic to let children decide whether their path token is optional or not.\n\nghstack-source-id: 207842ac64560cf0f93ec96eb9ae1f17c62493ac\nPull Request resolved: https://github.com/facebook/react/pull/30819"
        }
      },
      {
        "sha": "99a4b26e18a71a2ed5af5ec11f4b9bace3882f7e",
        "commit": {
          "message": "[compiler] Handle optional where innermost property access is non-optional\n\nHandles an additional case as part of testing combinations of the same path being accessed in different places with different segments as optional/unconditional.\n\nghstack-source-id: ace777fcbb98fa8f41b977d0aec8418f3f58fb7b\nPull Request resolved: https://github.com/facebook/react/pull/30836"
        }
      },
      {
        "sha": "3a45ba241c028cd0af7bf17bb4c6487d0095a10f",
        "commit": {
          "message": "[compiler] Enable optional dependencies by default\n\nPer title. This gives us much more granular memoization when the source used optional member expressions. Note that we only infer optional deps when the source used optionals: we don't (yet) infer optional dependencies from conditionals.\n\nghstack-source-id: 104d0b712d09498239e926e306c4623d546463b1\nPull Request resolved: https://github.com/facebook/react/pull/30838"
        }
      },
      {
        "sha": "fc0df475c4417670272b819bad92590b310bcdaa",
        "commit": {
          "message": "[compiler] Inferred deps must match exact optionality of manual deps\n\nTo prevent any difference in behavior, we check that the optionality of the inferred deps exactly matches the optionality of the manual dependencies. This required a fix, I was incorrectly inferring optionality of manual deps (they're only optional if OptionalTerminal.optional is true) - for nested cases of mixed optional/non-optional.\n\nghstack-source-id: afd49e89cc3194eb3c317ca7434d3fa948896bff\nPull Request resolved: https://github.com/facebook/react/pull/30840"
        }
      },
      {
        "sha": "537c74e16a394df16a4b368caa09ea5755f78dfb",
        "commit": {
          "message": "feat[react-devtools]: support Manifest v3 for Firefox extension (#30824)\n\nFirefox [finally supports\r\n`ExecutionWorld.MAIN`](https://bugzilla.mozilla.org/show_bug.cgi?id=1736575)\r\nin content scripts, which means we can migrate the browser extension to\r\nManifest V3.\r\n\r\nThis PR also removes a bunch of no longer required explicit branching\r\nfor Firefox case, when we are using Manifest V3-only APIs.\r\n\r\nWe are also removing XMLHttpRequest injection, which is no longer needed\r\nand restricted in Manifest V3. The new standardized approach (same as in\r\nChromium) doesn't violate CSP rules, which means that extension can\r\nfinally be used for apps running in production mode."
        }
      },
      {
        "sha": "795b3207ce5ea25c80749e367c61e5f56ac09856",
        "commit": {
          "message": "fix[react-devtools/extensions]: fixed tabs API calls and displaying restricted access popup (#30825)\n\nStacked on https://github.com/facebook/react/pull/30824. See [this\r\ncommit](https://github.com/facebook/react/pull/30825/commits/c9830d64749cf8fd592ea30a1cd65842cf83f6df).\r\n\r\nTurns out we should be listing `tabs` in our permissions, if we want to\r\nbe able to receive tab url, once its updated.\r\nThis also fixes `chrome.tabs.onCreated` event subscription, because [it\r\nshould receive only tab\r\nobject](https://developer.chrome.com/docs/extensions/reference/api/tabs#event-onCreated),\r\nand not 3 arguments, as expected in the previous implementation."
        }
      },
      {
        "sha": "233d63c497d3a5f669a1bae1ee1d3f389e12a42a",
        "commit": {
          "message": "chore[react-devtools/extensions]: remove unused storage permission (#30826)\n\nStacked on https://github.com/facebook/react/pull/30825. See [this\r\ncommit](https://github.com/facebook/react/pull/30826/commits/b2130701cf6b25d7a96c1e92b44f41affa56bb35).\r\n\r\nWe are not using `storage` anywhere yet, but will be soon. This\r\npermission is not needed."
        }
      },
      {
        "sha": "a19a8ab44f53f189745015a6d2e6bf8955f98170",
        "commit": {
          "message": "chore[react-devtools/hook]: remove unused native values (#30827)\n\nStacked on https://github.com/facebook/react/pull/30826. See [this\r\ncommit](https://github.com/facebook/react/pull/30827/commits/ec0e48ed7a47dbbdafb5e2530ccba1f2e5b17bad).\r\n\r\nThis is unused."
        }
      },
      {
        "sha": "18bf7bf5002450ce7daa281e8be1c3216bd871ed",
        "commit": {
          "message": "[DevTools] Remove displayName from inspected data (#30841)\n\nThis just clarifies that this is actually unused in the front end. We\r\nuse the name from the original instance as the canonical name."
        }
      },
      {
        "sha": "e33a7233a76e1164bd1a9c4b8115abb575b48c50",
        "commit": {
          "message": "[DevTools] Track virtual instances on the tracked path for selections (#30802)\n\nThis appends a (filtered) virtual instance path at the end of the fiber\r\npath. If a virtual instance is selected inside the fiber.\r\n\r\nThe main part of the path is still just the fiber path since that's the\r\nsemantically stateful part. Then we just tack on a few virtual path\r\nframes at the end if we're currently selecting a specific Server\r\nComponent within the nearest Fiber.\r\n\r\nI also took the opportunity to fix a bug which caused selections inside\r\nSuspense boundaries to not be tracked."
        }
      },
      {
        "sha": "61739a8a0fd23adf18336d96f9c307a1cd897354",
        "commit": {
          "message": "[DevTools] Filter Server Components (#30839)\n\nSupport filtering Virtual Instances with existing filters.\r\n\r\nServer Components are considered \"Functions\".\r\n\r\nIn a follow up I'll a new filter for \"Environment\" which will let you\r\nfilter by Client vs Server (and more)."
        }
      },
      {
        "sha": "071dd00366b3accb649e3f5978454e993e0b11aa",
        "commit": {
          "message": "[compiler] Errors in earlier functions dont stop subsequent compilation\n\nErrors in an earlier component/hook shouldn't stop later components from compiling.\n\nghstack-source-id: 6e04a5bb2e2045303cbddad6d6d4bd38d5f7990b\nPull Request resolved: https://github.com/facebook/react/pull/30844"
        }
      },
      {
        "sha": "394e75d9a9af26dc00074f2b8c2978d8c2dfbbb9",
        "commit": {
          "message": "[DevTools] Increase max payload for websocket in standalone app (#30848)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\nWhen debugging applications that are experiencing runaway re-rendering,\r\nit is helpful to profile them in the React Developer Tools.\r\nUnfortunately there is a size limit on the captured profile which can\r\nmake them impossible to inspect or save. The limitations I have found\r\nare in `postMessage` for the Chrome extension and in the `ws` websocket\r\nserver for the standalone app.\r\n\r\nProfiling an app that produces a large profile artifact will simply show\r\nthat no profiling data was captured and output an error in the console,\r\nhere shown for the standalone app:\r\n\r\n```text\r\nstandalone.js:92 [React DevTools] Error with websocket connection i {target: H, type: 'error', message: 'Max payload size exceeded', error: RangeError: Max payload size exceeded\r\n    at e.exports.haveLength (/Users/rune/.npm/_npx/8ea6ac5c50…}error: RangeError: Max payload size exceeded\r\n```\r\n\r\nThis change simply increases the max payload of the websocket server in\r\nthe standalone app so that larger profiles may be captured and\r\ninspected.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nI verified that I could capture and inspect profiling data that\r\npreviously exceeded the default limitation for a particular app"
        }
      },
      {
        "sha": "8308d2f1fe90ec0b5a5cde147b97c6e78581710a",
        "commit": {
          "message": "fix[react-devtools/ReactDebugHooks]: support unstable prefixes in hooks and useContextWithBailout (#30837)\n\nRelated - https://github.com/facebook/react/pull/30407.\r\n\r\nThis is experimental-only and FB-only hook. Without these changes,\r\ninspecting an element that is using this hook will throw an error,\r\nbecause this hook is missing in Dispatcher implementation from React\r\nDevTools, which overrides the original one to build the hook tree.\r\n\r\n![Screenshot 2024-08-28 at 18 42\r\n55](https://github.com/user-attachments/assets/e3bccb92-74fb-4e4a-8181-03d13f8512c0)\r\n\r\nOne nice thing from it is that in case of any potential regressions\r\nrelated to this experiment, we can quickly triage which implementation\r\nof `useContext` is used by inspecting an element in React DevTools.\r\n\r\nIdeally, I should've added some component that is using this hook to\r\n`react-devtools-shell`, so it can be manually tested, but I can't do it\r\nwithout rewriting the infra for it. This is because this hook is only\r\navailable from fb-www builds, and not experimental."
        }
      },
      {
        "sha": "e56f4ae38d118168e0561f1b86ecbdef592138e4",
        "commit": {
          "message": "[DevTools] Support secondary environment name when it changes (#30842)\n\nWe currently support the Environment Name change within a Component.\r\n#29867\r\n\r\nIf this happens, we give it two HoCs. The problem with this is that we\r\nonly show one followed by `+1` in the list.\r\n\r\nBefore:\r\n<img width=\"529\" alt=\"Screenshot 2024-08-28 at 6 50 31 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/c080be72-c254-4d4d-89b6-d1b7f9a9ada8\">\r\n\r\nAfter:\r\n<img width=\"1101\" alt=\"Screenshot 2024-08-28 at 7 16 21 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/04718674-164b-4255-9cf6-dec9198f12b7\">\r\n\r\nI could potentially instead badge this case as `A/B` in a single badge."
        }
      },
      {
        "sha": "4f604941569d2e8947ce1460a0b2997e835f37b9",
        "commit": {
          "message": "[Flight] Ship DEV-only enableServerComponentLogs flag in Stable/Canary (#30847)\n\nTo recap. This only affects DEV and RSC. It patches console on the\r\nserver in DEV (similar to how React DevTools already does and what we\r\ndid for the double logging). Then replays those logs with a `[Server]`\r\nbadge on the client so you don't need a server terminal open.\r\n\r\nThis has been on for over 6 months now in our experimental channel and\r\nwe've had a lot of coverage in Next.js due to various experimental flags\r\nlike taint and ppr.\r\n\r\nIt's non-invasive in that even if something throws we just serialize\r\nthat as an unknown value.\r\n\r\nThe main feedback we've gotten was:\r\n\r\n- The serialization depth wasn't deep enough which I addressed in #30294\r\nand haven't really had any issues since. This could still be an issue or\r\nthe inverse that you serialize too many logs that are also too deep.\r\nThis is not so much an issue with intentional logging and things like\r\naccidental errors don't typically have unbounded arguments (e.g. React\r\nerrors are always string arguments). The ideal would be some way to\r\nretain objects and then load them on-demand but that needs more\r\nplumbing. Which can be later.\r\n- The other was that double logging on the server is annoying if the\r\nsame terminal does both the RSC render and SSR render which was\r\naddressed in #30207. It is now off by default in node/edge-builds of the\r\nclient, on by default in browser builds. With the `replayConsole` option\r\nto either opt-in or out.\r\n\r\nWe've reached a good spot now I think.\r\n\r\nThese are better with `enableOwnerStacks` but that's a separate track\r\nand not needed.\r\n\r\nThe only thing to document here, other than maybe that we're doing it,\r\nis the `replayConsole` option but that's part of the RSC renderers that\r\nthemselves are not documented so nowhere to document it."
        }
      },
      {
        "sha": "04ec50efa941a7f07e8231a87e72d6d851948b8c",
        "commit": {
          "message": "[DevTools] Add Filtering of Environment Names (#30850)\n\nStacked on #30842.\r\n\r\nThis adds a filter to be able to exclude Components from a certain\r\nenvironment. Default to Client or Server.\r\n\r\nThe available options are computed into a dropdown based on the names\r\nthat are currently used on the page (or an option that were previously\r\nused). In addition to the hardcoded \"Client\". Meaning that if you have\r\nServer Components on the page you see \"Server\" or \"Client\" as possible\r\noptions but it can be anything if there are multiple RSC environments on\r\nthe page.\r\n\r\n\"Client\" in this case means Function and Class Components in Fiber -\r\nexcluding built-ins.\r\n\r\nIf a Server Component has two environments (primary and secondary) then\r\nboth have to be filtered to exclude it.\r\n\r\nWe don't show the option at all if there are no Server Components used\r\nin the page to avoid confusing existing users that are just using Client\r\nComponents and wouldn't know the difference between Server vs Client.\r\n\r\n<img width=\"815\" alt=\"Screenshot 2024-08-30 at 12 56 42 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/e06b225a-e85d-4cdc-8707-d4630fede19e\">"
        }
      },
      {
        "sha": "e0a07e9738b2ec2ea5cf4872406b465d677bfe2c",
        "commit": {
          "message": "[DevTools] Support VirtualInstances in findAllCurrentHostInstances (#30853)\n\nThis lets us highlight Server Components.\r\n\r\nHowever, there is a problem with this because if the actual nearest\r\nFiber is filtered, there's no FiberInstance and so we might skip past it\r\nand maybe never find a child while walking the whole tree. This is very\r\ncommon in the case where you have just Server Components and Host\r\nComponents which are filtered by default.\r\n\r\nNote how the DOM nodes that are just plain host instances without client\r\ncomponent wrappers are not highlighted here:\r\n\r\n<img width=\"1102\" alt=\"Screenshot 2024-08-30 at 4 33 55 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/c9a7b91e-5faf-4c60-99a8-1195539ff8b5\">\r\n\r\nFixing that needs a separate refactor though and related to several\r\nother features that already have a similar issue without\r\nVirtualInstances like Suspense/Error Boundaries (triggering\r\nsuspense/error on a filtered Suspense/ErrorBoundary doesn't work\r\ncorrectly). So this first PR just adds the feature for the common case\r\nwhere there's at least some Fibers."
        }
      },
      {
        "sha": "8d68da3f7396064614f34b84881fe8833b6039ac",
        "commit": {
          "message": "[Fiber] Stash ThenableState on the Dependencies Object for Use By DevTools (#30866)\n\nThis lets us track what a Component might suspend on from DevTools. We\r\ncould already collect this by replaying a component's Hooks but that\r\nwould be expensive to collect from a whole tree.\r\n\r\nThe thenables themselves might contain useful information but mainly\r\nwe'd want access to the `_debugInfo` on the thenables which might\r\ncontain additional information from the server.\r\n\r\n\r\nhttps://github.com/facebook/react/blob/19bd26beb689e554fceb0b929dc5199be8cba594/packages/shared/ReactTypes.js#L114\r\n\r\nIn a follow up we should really do something similar in Flight to\r\ntransfer `use()` on the debugInfo of that Server Component."
        }
      },
      {
        "sha": "d1afcb43fd506297109c32ff462f6f659f9110ae",
        "commit": {
          "message": "[DevTools] Track all public HostInstances in a Map (#30831)\n\nThis lets us get from a HostInstance to the nearest DevToolsInstance\r\nwithout relying on `findFiberByHostInstance` and\r\n`fiberToDevToolsInstanceMap`. We already did the equivalent of this for\r\nResources in HostHoistables.\r\n\r\nOne issue before was that we'd ideally get away from the\r\n`fiberToDevToolsInstanceMap` map in general since we should ideally not\r\ntreat Fibers as stateful but they could be replaced by something else\r\nstateful in principle.\r\n\r\nThis PR also addresses Virtual Instances. Now you can select a DOM node\r\nand have it select a Virtual Instance if that's the nearest parent since\r\nthe parent doesn't have to be a Fiber anymore.\r\n\r\nHowever, the other reason for this change is that I'd like to get rid of\r\nthe need for the `findFiberByHostInstance` from being injected. A\r\nrenderer should not need to store a reference back from its instance to\r\na Fiber. Without the Synthetic Event system this wouldn't be needed by\r\nthe renderer so we should be able to remove it. We also don't really\r\nneed it since we have all the information by just walking the commit to\r\ncollect the nodes if we just maintain our own Map.\r\n\r\nThere's one subtle nuance that the different renderers do. Typically a\r\nHostInstance is the same thing as a PublicInstance in React but\r\ntechnically in Fabric they're not the same. So we need to translate\r\nbetween PublicInstance and HostInstance. I just hardcoded the Fabric\r\nimplementation of this since it's the only known one that does this but\r\ncould feature detect other ones too if necessary. On one hand it's more\r\nresilient to refactors to not rely on injected helpers and on hand it\r\ndoesn't follow changes to things like this.\r\n\r\nFor the conflict resolution I added in #30494 I had to make that\r\nspecific to DOM so we can move the DOM traversal to the backend instead\r\nof the injected helper."
        }
      },
      {
        "sha": "8b4c54c00f5c047a72a4cecc2689196786c3e5ff",
        "commit": {
          "message": "Temporarily disable suspending during work loop (#30762)\n\n### Based on\r\n\r\n- #30761 \r\n- #30759 \r\n\r\n---\r\n\r\n`use` has an optimization where in some cases it can suspend the work\r\nloop during the render phase until the data has resolved, rather than\r\nunwind the stack and lose context. However, the current implementation\r\nis not compatible with sibling prerendering. So I've temporarily\r\ndisabled it until the sibling prerendering has been refactored. We will\r\nadd it back in a later step."
        }
      },
      {
        "sha": "e10e8681824e56c10fdb14e0359d878bcd748937",
        "commit": {
          "message": "Schedule prerender after something suspends (#30800)\n\nAdds the concept of a \"prerender\". These special renders are spawned\r\nwhenever something suspends (and we're not already prerendering).\r\n\r\nThe purpose is to move speculative rendering work into a separate phase\r\nthat does not block the UI from updating. For example, during a\r\ntransition, if something suspends, we should not speculatively prerender\r\nsiblings that will be replaced by a fallback in the UI until *after* the\r\nfallback has been shown to the user."
        }
      },
      {
        "sha": "0123d7c19f2d2b05d612e9bd912b3614024b2aab",
        "commit": {
          "message": "[DevTools] Track root instances in a root Map (#30875)\n\nThe FiberRoot is a stateful node that can be tracked this way.\r\n\r\nThis is another step that will let us remove the\r\n`fiberToFiberInstanceMap`."
        }
      },
      {
        "sha": "f820f5a8b6c8b106ba3756f3e60a5a4017eb5080",
        "commit": {
          "message": "[compiler] Type inference for tagged template literals\n\nAt Meta we have a pattern of using tagged template literals for features that are compiled away:\n\n```\n// Relay:\ngraphql`...graphql text...`\n```\n\nIn many cases these tags produce a primitive value, and we can get even more optimal output if we can tell the compiler about these types. The new moduleTypeProvider gives us the ability to declare such types, this PR extends the compiler to use this type information for TaggedTemplateExpression values.\n\nghstack-source-id: 3cd6511b7f4e708bcb86f3f3fde5773bc51c7197\nPull Request resolved: https://github.com/facebook/react/pull/30869"
        }
      },
      {
        "sha": "01ae2ddaa94386b2250230004f1051218ada2de1",
        "commit": {
          "message": "[DevTools] Include some Filtered Fiber Instances (#30865)\n\nWhen we filter Fiber Instances where have no way to recover our position\r\nin the Fiber tree. The extreme form of this is if you filter out all the\r\nFibers and keep only Server Components.\r\n\r\nThis affects operations that are performed against fibers such as\r\ncollecting Host Instances for highlighting or emulating\r\nsuspending/erroring.\r\n\r\nConceptually we don't need to add this into the DevToolsInstance tree\r\nbecause we only need to get to some Fibers from a VirtualInstance. A\r\nVirtual Instance can contain more than one conceptual child Fiber. It\r\nwould be easier if we didn't include them in the tree on one hand\r\nbecause we could just traverse the tree and assume it looks like the one\r\non the frontend. But it's also tricky to manage the lifetime. So I went\r\nwith a special FilteredFiberInstance node in the tree.\r\n\r\nCurrently I only add it if its parent would've been a VirtualInstance\r\nsince we don't need it in any other cases. If the parent was another\r\nFiberInstance it already has a Fiber.\r\n\r\nThere might be need for always tracking all Instances whether they're\r\nfiltered or not or just moving filtering to the frontend but for now I'm\r\nkeeping the general architecture as is."
        }
      },
      {
        "sha": "4c58fce7777f2760f4a93091ca4fca0e3fc2f48c",
        "commit": {
          "message": "[DevTools] Avoid getFiberIDUnsafe in debug() Helper (#30878)\n\nAvoids looking up id from fiber and instead pass the instance to the\r\ndebug() helper."
        }
      },
      {
        "sha": "d72e477814209d79173a1b69da3172d891786fec",
        "commit": {
          "message": "[compiler runtime] repro: infinite render with useMemoCache + render phase updates (#30849)\n\nRepro for an infinite render bug we found when testing internally. See\r\nequivalent codesandbox repro\r\n[here](https://codesandbox.io/p/sandbox/epic-euclid-mr7lm3).\r\n\r\nWhen render phase updates cause a re-render, useMemoCache arrays for the\r\nfiber are\r\n[cleared](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L819)\r\nand [recreated on every\r\nretry](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L1223)\r\nwhile hook state is preserved.\r\n\r\nThis pattern (queuing re-renders on the current fiber during render) is\r\nperfectly valid. I believe this is a bug as React compiler currently\r\nreplaces `useMemo`s with `useMemoCache` calls and inlined instructions,\r\ntaking care to preserve existing memoization dependencies. This should\r\nbe the identity transform, but runtime implementation differences mean\r\nthat uncompiled code behaves as expected (no infinite render) while\r\ncompiled code fails to render."
        }
      },
      {
        "sha": "a06cd9e1d141f598a68377495f4c0fe9ee44e569",
        "commit": {
          "message": "[DevTools] Refactor Forcing Fallback / Error of Suspense / Error Boundaries (#30870)\n\nFirst, this basically reverts\r\nhttps://github.com/facebook/react/pull/30517/commits/1f3892ef8cc181218587ddc6accd994890c92ef5\r\nto use a Map/Set to track what is forced to suspend/error again instead\r\nof flags on the Instance. The difference is that now the key in the\r\nFiber itself instead of the ID. Critically this avoids the\r\nfiberToFiberInstance map to look up whether or not a Fiber should be\r\nforced to suspend when asked by the renderer.\r\n\r\nThis also allows us to force suspend/error on filtered instances. It's a\r\nbit unclear what should happen when you try to Suspend or Error a child\r\nbut its parent boundary is filtered. It was also inconsistent between\r\nSuspense and Error due to how they were implemented.\r\n\r\nI think conceptually you're trying to simulate what would happen if that\r\nComponent errored or suspended so it would be misleading if we triggered\r\na different boundary than would happen in real life. So I think we\r\nshould trigger the nearest unfiltered Fiber, not the nearest Instance.\r\nThe consequence of this however is that if this instance was filtered,\r\nthere's no way to undo it without refreshing or removing the filter.\r\nThis is an edge case though since it's unusual you'd filter these in the\r\nfirst place.\r\n\r\nIt used to be that Suspense walked the store in the frontend and Error\r\nwalked the Fibers in the backend. They also did this somewhat eagerly.\r\nThis simplifies and unifies the model by passing the id of what you\r\nclicked in the frontend and then we walk the Fiber tree from there in\r\nthe backend to lazily find the boundary. However I also eagerly walk the\r\ntree at first to find whether we have any Suspense or Error boundary\r\nparents at all so we can hide the buttons if not.\r\n\r\nThis also implements it to work with VirtualInstances using #30865. I\r\nfind the nearest Fiber Instance downwards filtered or otherwise. Then\r\nfrom its parent we find the nearest Error or Suspense boundary. That's\r\nbecause VirtualInstance will always have their inner Fiber as an\r\nInstance but they might not have their parent since it might be\r\nfiltered. Which would potentially cause us to skip over a filtered\r\nparent Suspense boundary."
        }
      },
      {
        "sha": "fe03c56d1e51379a18676b04cf185e76f04cd457",
        "commit": {
          "message": "[Fiber] Extract Functions that Call User Space and Host Configs in Commit to Separate Modules (#30881)\n\nThis is mostly just moves and same code extracted into utility\r\nfunctions.\r\n\r\nThis is to help clarify what needs to be wrapped in try/catch and\r\nrunWithFiberInDEV. I'll do the runWithFiberInDEV changes in a follow up.\r\n\r\nThis leaves ReactCommitWork mostly to do matching on the tag and the\r\nrecursive loops."
        }
      },
      {
        "sha": "a03254bc60b06c535c37e43c53b1fd40757b2ef4",
        "commit": {
          "message": "[Fiber] Move runWithFiberInDEV from CommitWork to CommitEffects (#30882)\n\nStacked on #30881.\r\n\r\nMove `runWithFiberInDEV` from the recursive part of the commit phase and\r\ninstead wrap each call into user space. These should really map 1:1 with\r\nwhere we're using `try/catch` since that's where we're calling into user\r\nspace.\r\n\r\nThe goal of this is to avoid the extra stack frames added by\r\n`enableOwnerStacks` in the recursive parts to avoid stack overflow. This\r\nway we only have a couple of extra at the end of the stack instead of a\r\ncouple of extra at every depth of the tree."
        }
      },
      {
        "sha": "43264a61d06e0f653beb7882aaad1005e0797855",
        "commit": {
          "message": "[compiler][cleanup] Remove unused enableReactiveScopesInHIR flag\n\nReactive scopes in HIR has been stable for over 3 months now and is the future direction of react compiler, removing this flag to reduce implementation forks.\n\nghstack-source-id: 65cdf63cf76029fa22d40fd85aba0ac976dcfc08\nPull Request resolved: https://github.com/facebook/react/pull/30891"
        }
      },
      {
        "sha": "7b98a168fdebb57b3a0b965cb0b5efa16c9cf9e0",
        "commit": {
          "message": "[compiler][cleanup] Delete now-unused reactive scope fork\n\nFollowup to #30891\n\nghstack-source-id: 6b42055b5d28da39d99a235bcd86a82eb7c270f4\nPull Request resolved: https://github.com/facebook/react/pull/30892"
        }
      },
      {
        "sha": "bd788b4180e4ad201100b9defb849cb8f1483f9c",
        "commit": {
          "message": "[compiler] Add enablePropagateDepsInHIR flag\n\nAdding new feature flag in preparation for #30894\n\nghstack-source-id: 59278028cf178d6b2c28732ded751e9c838183d2\nPull Request resolved: https://github.com/facebook/react/pull/30893"
        }
      },
      {
        "sha": "727b3615287074ddaa28069bfbd2dfee8cf73575",
        "commit": {
          "message": "Fix useMemoCache with setState in render\n\nFixes the bug that @alexmckenley and @mofeiZ found where setState-in-render can reset useMemoCache and cause an infinite loop. The bug was that renderWithHooksAgain() was not resetting hook state when rerendering (so useMemo values were preserved) but was resetting the updateQueue. This meant that the entire memo cache was cleared on a setState-in-render.\n\nThe fix here is to call a new helper function to clear the update queue. It nulls out other properties, but for memoCache it just sets the index back to zero.\n\nghstack-source-id: fc0947ce219334117075df6a4e33b39975af2bc4\nPull Request resolved: https://github.com/facebook/react/pull/30889"
        }
      },
      {
        "sha": "d76a5651f46619fde486b4119953a8f9dd240612",
        "commit": {
          "message": "[DevTools] Handle reordered contexts in Profiler (#30887)\n\nWhile looking at the Context tracking implementation for other reasons I\r\nnoticed this bug.\r\n\r\nOriginally it wasn't allowed to have conditional `useContext(context)`\r\n(although we did because it's technically possible). With `use(context)`\r\nit is officially allowed to be conditional as long as it is within a\r\nHook/Component and not within a try/catch.\r\n\r\nThis means that this loop comparing previous and next contexts need to\r\nconsider that the Context objects might not line up and so it's possibly\r\ncomparing apples to oranges. We already bailed if one was longer than\r\nthe other.\r\n\r\nIf the order of contexts changes later in the component that means\r\nsomething else must have already changed earlier so the reason for the\r\nrerender isn't the context so we can just return false in that case."
        }
      },
      {
        "sha": "baf47462d631a1f87063676d36a33b4a3f6ed80b",
        "commit": {
          "message": "[DevTools] Remove use of .alternate in root and recordProfilingDurations (#30895)\n\nIdeally we shouldn't use the `.alternate` to access previous state\r\nbecause ideally Fibers shouldn't have alternates.\r\n\r\nThe only case it's ok to use it is when it is used to identity the\r\nstateful part of a component's identity. In a non-alternate Fiber model\r\nthere would instead be another object that represents instance but in\r\nthe current model it's modeled by the pair.\r\n\r\nIt's not ok is to get the previous state of the tree since that would\r\nnot live on the stateful part.\r\n\r\nWe don't generally need this though because we have the previous state\r\non instance.data before updating it, or passed from above."
        }
      },
      {
        "sha": "629239824116436521eaf00ddf02aa3b263de6de",
        "commit": {
          "message": "[DevTools] Simplify Context Change Tracking in Profiler (#30896)\n\nWhen Context change tracking was added to support modern Context it\r\nrelied on the \"memoizedValue\" to read the current value. This only works\r\nin React 18+ when it was added to support Lazy Context Propagation.\r\nHowever, the backend stored the old value the same way it used to work\r\nfor legacy Context in a global map. This was unnecessary since we *also*\r\nhave the old value on the previous Fiber.\r\n\r\nThis removes all the costly tracking of previous values for every Fiber\r\nthat uses Contexts slowing down profiling. Instead, we just compare the\r\nContexts from\r\n\r\nThe downside is that this no longer supports detecting changes due to\r\nlegacy Context because it doesn't have a similar \"previous\" value.\r\nHowever, legacy Context has long been deprecated and is completely\r\nremoved in 19. So I don't think it's worth supporting since you have to\r\nbe on an old version *and* actually use legacy Context *and* trying to\r\nprofile something that updates it. Which btw, updating legacy contexts\r\nonly worked at all from 16 something when we made updates work. So it\r\nwas unusual even in the slight gap where you could and before you had\r\nmigrated to modern Context introduced in 16.3."
        }
      },
      {
        "sha": "99cba2b041cd13d7ade48a5c97b473e8a188df35",
        "commit": {
          "message": "[DevTools] Build Updater List from the Commit instead of Map (#30897)\n\nStacked on #30896.\r\n\r\nThe problem with the `getUpdatersList` function is that it iterates over\r\nFibers and then looks up each of those Fibers in the\r\nfiberToFiberInstanceMap which we ideally could get rid of.\r\n\r\nHowever, every time an updater comes into play for a commit it must mean\r\nthat something below the updater itself updated and so the updater will\r\nalso be cloned which means we'll pass it on the way down when traversing\r\nthe tree in the commit.\r\n\r\nWhen we do this traversal, we can just look if the Fiber is in the\r\nupdater set and if so add it to the updater list as we go."
        }
      },
      {
        "sha": "a8fc4b1ef8149a0f2b55942683bf96409e3f313f",
        "commit": {
          "message": "[compiler][playground] Fix displayed naming of outlined functions\n\nghstack-source-id: 20c8e9eeba1620b061e41119dfb1a0e15c36645e\nPull Request resolved: https://github.com/facebook/react/pull/30907"
        }
      },
      {
        "sha": "984ea11d147b1bc7a5e63f576af47629937c58ee",
        "commit": {
          "message": "[DevTools] Separate RDT Fusebox into single-panel entry points (#30708)\n\n## Summary\r\n\r\nSeparate function entry points for `react-devtools-fusebox` into\r\n`initializeComponents` and `initializeProfiler`. The motivation behind\r\nthis change is to separate these tabs into top-level Chrome DevTools\r\npanels (aligned with web) in React Native.\r\n\r\n## How did you test this change?\r\n\r\n- Build `react-devtools-fusebox` and load into local\r\n[rn-chrome-devtools-frontend](https://github.com/facebookexperimental/rn-chrome-devtools-frontend)\r\nproject with updated call sites.\r\n\r\n<img width=\"1933\" alt=\"image\"\r\nsrc=\"https://github.com/user-attachments/assets/202d32a1-b8da-4936-b0e1-04875a30f256\">\r\n\r\n<img width=\"1949\" alt=\"image\"\r\nsrc=\"https://github.com/user-attachments/assets/39dbe154-989c-4f76-b103-aa19f07a3b9c\">\r\n\r\n✅ Tabs can be separately initialised in individual Chrome DevTools\r\npanels"
        }
      },
      {
        "sha": "e210d08180a63f42079b91acaa7f6af15eef6d32",
        "commit": {
          "message": "[flow] Upgrade Flow to 0.245.2 (#30919)\n\n## Summary\r\n\r\nThis PR bumps Flow all the way to the latest 0.245.2. \r\n\r\nMost of the suppressions comes from Flow v0.239.0's change to include\r\nundefined in the return of `Array.pop`.\r\n\r\nI also enabled `react.custom_jsx_typing=true` and added custom jsx\r\ntyping to match the old behavior that `React.createElement` is\r\neffectively any typed. This is necessary since various builtin\r\ncomponents like `React.Fragment` is actually symbol in the React repo\r\ninstead of `React.AbstractComponent<...>`. It can be made more accurate\r\nby customizing the `React$CustomJSXFactory` type, but I will leave it to\r\nthe React team to decide.\r\n\r\n## How did you test this change?\r\n\r\n`yarn flow` for all the renderers"
        }
      },
      {
        "sha": "e07235b980df30c0ec865500a3e747dd67ce80db",
        "commit": {
          "message": "[DevTools] Refactor Error / Warning Count Tracking (#30899)\n\nWe can simplify this tracking by not having a separate pending set of\r\nlogs and the logs tracked per instance and instead we just track the\r\nlogs per Fiber. This avoids the need to move it back into the pending\r\nset after unmounts in case a Fiber is reparented.\r\n\r\nThe main motivation for this is to unify with an upcoming tracking of\r\nlogs for Server Components. For those it doesn't make sense to move them\r\ninto a per instance set and because the same Server Component - and its\r\nlogs - may appear more than once. So no particular instance should steal\r\nit.\r\n\r\nThe second part of this change is that instead of looking up the\r\ninstance from fiber, which requires the fiberToFiberInstanceMap, we\r\ninstead look up if a component has any new logs when we traverse it in\r\nthe commit phase. After all for a component to have had a log it must\r\nhave updated. This is a similar technique to #30897. This technique also\r\nworks for Server Components without having to maintain a one to many\r\nrelationship from ComponentInfo to VirtualInstance. So it unifies them.\r\n\r\nNormally this look up would be fast since the `fiberToComponentsLogs`\r\nset would be empty and so doesn't add any significant weight to the\r\ncommit phase. If there's a ton of logs on many different components then\r\nit's not great since it would slow down the commit phase but that's not\r\nwhat we expect to see so in typical usage, this is better.\r\n\r\nThere is an unfortunate consequence though which is that\r\n`console.warn/error` in passive effects (i.e. `useEffect`) wouldn't be\r\npicked up because currently we traverse the logs in\r\n`handleCommitFiberRoot` which is too early. If we moved that to\r\n`handlePostCommitFiberRoot` this wouldn't be a problem. In the meantime,\r\nI just detect this and do a brute force flush by walking all mounted\r\ninstances if there's a `console.warn/error` inside a passive effect.\r\n\r\nIf we ever add \"owners\" to event handlers that are triggered outside the\r\nrender/commit phases (like `<div onClick={...}>`) and we want to\r\nassociate error/warnings in those, we'd need a different technique to\r\nensure those get flushed in time."
        }
      },
      {
        "sha": "3cac8cd5a981cc0320955788fd3545578c2ac311",
        "commit": {
          "message": "[DevTools] Add Flight Renderer (#30906)\n\nThis represents a virtual renderer that connects to the Flight Client.\r\nIt's virtual in the sense that the actual rendering has already happened\r\non the server. The Flight Client parses the result. Most of the result\r\nthen end up in objects that render into another renderer and that's how\r\nwe see most Server Components in DevTools. As part of the client's tree.\r\n\r\nHowever, some things are side-effects that don't really connect to any\r\nparticular client renderer. For example preloads() and logs. For those\r\nwe need to treat the Flight Client as if it was its own renderer just\r\nlike a Fiber renderer or even legacy renderer. We really could support\r\nFizz and Flight Server as DevTools targets too for example to connect it\r\nto the backend but there's just not much demand for that.\r\n\r\nThis will initially only be used to track the owners of replayed console\r\nlogs but could be expanded to more. For example to send controls to\r\nstart profiling on the server. It could also be expanded to build an RSC\r\npayload inspector that is automatically connected."
        }
      },
      {
        "sha": "2283d7204cfc200aa78b674d086a481c9a983007",
        "commit": {
          "message": "[Flight] Inject Client Into DevTools (#30910)\n\nStacked on #30906.\r\n\r\nInjects the Flight Client into the DevTools hook if it `supportsFlight`.\r\nThis only injects in DEV. We could inject it in prod too but so far the\r\nonly feature this exposes is only available in DEV anyway. I also only\r\ncall `injectIntoDevTools` in the browser builds since we don't really\r\nsupport DevTools on the server anyway.\r\n\r\nThe main purpose of this for now is so that DevTools can track the\r\nServer Component owner of replayed logs. This lets us add owner stacks\r\nwhere `console.createTask` is not natively supported (like Firefox). It\r\nalso lets us associate the log with the Server Component in the\r\nComponent tree #30905."
        }
      },
      {
        "sha": "f4b3a1fea2485c414985d341d6445660da471a98",
        "commit": {
          "message": "[DevTools] Delete fiberToFiberInstanceMap (#30900)\n\nStacked on #30899.\r\n\r\nAfter the rest of the stack this is now unused so we can save time and\r\nmemory avoiding to maintain it. 🎉"
        }
      },
      {
        "sha": "fa3cf509a9a1fcfa33dac6a2936391e06bb06316",
        "commit": {
          "message": "[DevTools] Add Map for Server Component Logs (#30905)\n\nStacked on #30899.\r\n\r\nThis adds another map to store Server Components logs. When they're\r\nreplayed with an owner we can associate them with a DevToolsInstance.\r\nThe replaying should happen before they can mount in Fiber so they'll\r\nalways have all logs when they mount. There can be more than one\r\nInstance associated with any particular ReactComponentInfo. It can also\r\nbe unmounted and restored later.\r\n\r\nOne thing that's interesting about these is that when a Server Component\r\ntree refreshes a new set of ReactComponentInfo will update through the\r\ntree and the VirtualInstances will update with new instances. This means\r\nthat the old errors/warnings are no longer associated with the\r\nVirtualInstance. I.e. it's not continually appended like updates do for\r\nFiber backed instances. On the client we dedupe errors/warnings for the\r\nlife time of the page. On the server that doesn't work well because it\r\nwould mean that when you refresh the page, you miss out on warnings so\r\nwe dedupe them per request instead. If we just appended on refresh it\r\nwould keep adding them.\r\n\r\nIf ever add a deduping mechanism that spans longer than a request, we\r\nmight need to do more of a merge when these updates.\r\n\r\nNothing actually adds logs to this map yet. That will need an\r\nintegration with Flight in a follow up."
        }
      },
      {
        "sha": "0dbacf204168cedaf1b430084b5fc3820f1c6dfa",
        "commit": {
          "message": "[DevTools] Improve Layering Between Console and Renderer (#30925)\n\nThe console instrumentation should not know about things like Fibers.\r\nOnly the renderer bindings should know about that stuff. We can improve\r\nthe layering by just moving all that stuff behind a `getComponentStack`\r\nhelper that gets injected by the renderer.\r\n\r\nThis sets us up for the Flight renderer #30906 to have its own\r\nimplementation of this function."
        }
      },
      {
        "sha": "49825c0ffc091f974e57bf6ed17c8d2eff5d5942",
        "commit": {
          "message": "[Flight] Add react-stack-bottom-frame to console replaying (#30926)\n\nAny time we're creating a stack trace we should have a\r\nreact-stack-bottom-frame so we know what to filter out.\r\n\r\nThis is the same thing we already do for createFakeJSXCallStackInDEV but\r\nwe should do that when replaying logs too."
        }
      },
      {
        "sha": "6066b8e8e6f07721f4e092920d3e98787122f0fb",
        "commit": {
          "message": "[Flight] Reset currentOwnerInDEV (#30929)\n\nMissed this bit."
        }
      },
      {
        "sha": "d160aa0fbb1bd2d00ea8c771c551c9cb5b47f1e9",
        "commit": {
          "message": "[DevTools] Use Unicode Atom Symbol instead of Atom Emoji (#30832)\n\nThis reverts #19603.\r\n\r\nBefore:\r\n<img width=\"724\" alt=\"Screenshot 2024-08-28 at 12 07 29 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/0613088f-c013-4f1c-92c3-fbdae8c1f109\">\r\n\r\nAfter:\r\n<img width=\"771\" alt=\"Screenshot 2024-08-28 at 12 08 13 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/eef21bee-d11f-4f0a-9147-053a163f720f\">\r\n\r\nConsensus seems to be that while the purple on is a bit clearer and\r\neasier to read. The purple is not on brand so it doesn't look like\r\nReact. It looks ugly. It's distracting (too eye catching). Taking away\r\nattention from other tabs in an unfair way.\r\n\r\nIt also gets worse with more tabs added. We plan on both adding another\r\ntab and panes inside other tabs (elements/sources) soon. Each needs to\r\nbe marked somehow as part of React but spelling it out is too long.\r\nPutting inside a second tab means two clicks and takes away real-estate\r\nfrom our extension and doesn't solve the problem with extension panes in\r\nother tabs. We also plan on adding multiple different tracks to the\r\nPerformance tab which also needs a name other than just React and\r\nspelling out React as a prefix is too long. The Emoji is too\r\ndistracting. So it seems best to uniformly apply the symbol - albeit it\r\nmight just look like a dot to many.\r\n\r\nDark mode looks close to on brand:\r\n\r\n<img width=\"1089\" alt=\"Screenshot 2024-08-28 at 12 32 50 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/7175a540-4241-4c26-9e4d-4d367873af57\">"
        }
      },
      {
        "sha": "63cefa2957bbf8c599643d8252f6b8221b399349",
        "commit": {
          "message": "[DevTools] Implement getComponentStack and onErrorOrWarning for replayed Flight logs (#30930)\n\nThis adds owner stacks to replayed Server Component logs in environments\r\nthat don't support native console.createTask.\r\n\r\n<img width=\"521\" alt=\"Screenshot 2024-09-09 at 8 55 21 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/261cfaee-ea65-4044-abf0-c41abf358fea\">\r\n\r\nIt also tracks the logs in the global componentInfoToComponentLogsMap\r\nwhich lets us associate those logs with Server Components when they\r\nlater commit into the fiber tree.\r\n\r\n<img width=\"1280\" alt=\"Screenshot 2024-09-09 at 9 31 16 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/436312a6-f9f4-4add-8129-0fb9b9eb18ee\">\r\n\r\nI tried to create unit tests for this since it's now wired up\r\nend-to-end. Unfortunately, the complicated testing set up for Flight\r\nrequires a complex set of resetting modules which are incompatible with\r\nthe complicated test setup in getVersionedRenderImplementation for\r\nDevTools tests."
        }
      },
      {
        "sha": "3dfd5d9efb8fb56c4f602915c0e38a84b0e956db",
        "commit": {
          "message": "refactor[RendererInterface]: expose onErrorOrWarning and getComponentStack (#30931)\n\nMake `onErrorOrWarning` and `getComponentStack` part of\r\n`rendererInterface`. By doing this, they will be available from the\r\nglobal hook `rendererInterfaces` Map. This makes them available to be\r\nused by Hook, which soon will be the only one who is doing console\r\npatching.\r\n\r\nThis is also a pre-requisite for removing `registerRenderer`:\r\n\r\nhttps://github.com/facebook/react/blob/d160aa0fbb1bd2d00ea8c771c551c9cb5b47f1e9/packages/react-devtools-shared/src/backend/console.js#L113-L121"
        }
      },
      {
        "sha": "d724ba96ff452570afed321c3a672f2a5f4bfe96",
        "commit": {
          "message": "[compiler] Validate type configs for hooks/non-hooks\n\nAlternative to #30868. The goal is to ensure that the types coming out of moduleTypeProvider are valid wrt to hook typing. If something is named like a hook, then it must be typed as a hook (or don't type it).\n\nghstack-source-id: 3e8b5a0a7010d0c484bbb417fb258e76bf4e32bc\nPull Request resolved: https://github.com/facebook/react/pull/30888"
        }
      },
      {
        "sha": "66cf2cfc8a8c4b09d2b783fd7302ae6b24150935",
        "commit": {
          "message": "Prerender during same pass if blocked anyway (#30879)\n\nIf something suspends in the shell — i.e. we won't replace the suspended\r\ncontent with a fallback — we might as well prerender the siblings during\r\nthe current render pass, instead of spawning a separate prerender pass.\r\n\r\nThis is implemented by setting the \"is prerendering\" flag to true\r\nwhenever we suspend in the shell. But only if we haven't already skipped\r\nover some siblings, because if so, then we need to schedule a separate\r\nprerender pass regardless."
        }
      },
      {
        "sha": "a5a7f1063e6f190c64c779b2aa54d28fb7b92cfb",
        "commit": {
          "message": "[Fiber] Don't call performance.now() twice in a row (#30936)"
        }
      },
      {
        "sha": "bac33d1f82d9094b45d6f662dd7fa895abab8bce",
        "commit": {
          "message": "[Flight] Unwrap lazy before reading the value (#30938)\n\nThis is important if the lazy is at the root of the chunk. I don't have\r\na unit test for it but @gnoff has a repro.\r\n\r\nIt also shouldn't unwrap the last value since that's the one we're\r\nreferencing.\r\n\r\nThis was already done correctly by @unstubbable in waitForReference so\r\nthis just aligns with that."
        }
      },
      {
        "sha": "344bc8128bc8f135e3fe6bb3449580d216ec7639",
        "commit": {
          "message": "refactor[Agent/Store]: Store to send messages only after Agent is initialized (#30945)\n\nBoth for browser extension, and for React Native (as part of\r\n`react-devtools-core`) `Store` is initialized before the Backend (and\r\n`Agent` as a part of it):\r\n\r\nhttps://github.com/facebook/react/blob/bac33d1f82d9094b45d6f662dd7fa895abab8bce/packages/react-devtools-extensions/src/main/index.js#L111-L113\r\n\r\nAny messages that we send from `Store`'s constructor are ignored,\r\nbecause there is nothing on the other end yet. With these changes,\r\n`Agent` will send `backendInitialized` message to `Store`, after which\r\n`getBackendVersion` and other events will be sent.\r\n\r\nNote that `isBackendStorageAPISupported` and `isSynchronousXHRSupported`\r\nare still sent from `Agent`'s constructor, because we don't explicitly\r\nask for it from `Store`, but these are used.\r\n\r\nThis the pre-requisite for fetching settings and unsupported renderers\r\nreliably from the Frontend."
        }
      },
      {
        "sha": "1bb056363c02fa9d188cc1122595d1587aa59d86",
        "commit": {
          "message": "[Fizz] Use RequestInstance constructor for resuming (#30947)\n\nWe added enough fields to need a constructor instead of inline object in\r\nV8.\r\n\r\nWe didn't update the resumeRequest path though so it wasn't using the\r\nconstructor and had a different hidden class."
        }
      },
      {
        "sha": "d6cb4e771341ff82489c00f4907990cb8a75696b",
        "commit": {
          "message": "Start prerendering Suspense retries immediately (#30934)\n\nWhen a component suspends and is replaced by a fallback, we should start\r\nprerendering the fallback immediately, even before any new data is\r\nreceived. During the retry, we can enter prerender mode directly if\r\nwe're sure that no new data was received since we last attempted to\r\nrender the boundary.\r\n\r\nTo do this, when completing the fallback, we leave behind a pending\r\nretry lane on the Suspense boundary. Previously we only did this once a\r\npromise resolved, but by assigning a lane during the complete phase, we\r\nwill know that there's speculative work to be done.\r\n\r\nThen, upon committing the fallback, we mark the retry lane as suspended\r\n— but only if nothing was pinged or updated in the meantime. That allows\r\nus to immediately enter prerender mode (i.e. render without skipping any\r\nsiblings) when performing the retry."
        }
      },
      {
        "sha": "bb6b86ed596399ddd8bf642404a9e68ae430a6ea",
        "commit": {
          "message": "refactor[react-devtools]: initialize renderer interface early (#30946)\n\nThe current state is that `rendererInterface`, which contains all the\r\nbackend logic, like generating component stack or attaching errors to\r\nfibers, or traversing the Fiber tree, ..., is only mounted after the\r\nFrontend is created.\r\n\r\nFor browser extension, this means that we don't patch console or track\r\nerrors and warnings before Chrome DevTools is opened.\r\n\r\nWith these changes, `rendererInterface` is created right after\r\n`renderer` is injected from React via global hook object (e. g.\r\n`__REACT_DEVTOOLS_GLOBAL_HOOK__.inject(...)`.\r\n\r\nBecause of the current implementation, in case of multiple Reacts on the\r\npage, all of them will patch the console independently. This will be\r\nfixed in one of the next PRs, where I am moving console patching to the\r\nglobal Hook.\r\n\r\nThis change of course makes `hook.js` script bigger, but I think it is a\r\nreasonable trade-off for better DevX. We later can add more heuristics\r\nto optimize the performance (if necessary) of `rendererInterface` for\r\ncases when Frontend was connected late and Backend is attempting to\r\nflush out too many recorded operations.\r\n\r\nThis essentially reverts https://github.com/facebook/react/pull/26563."
        }
      },
      {
        "sha": "473522093d3dd95582729d01cd5c0d15dcc9cd3b",
        "commit": {
          "message": "[Fizz] Add resumeAndPrerender to Static Rendering (#30950)\n\nThis is only in the same experimental exports as `resume`. Useful with\r\nPostpone/Halt.\r\n\r\nWe already have `prerender()` to create a partial tree with postponed\r\nstate. We also have `resume()` to dynamically resume such a tree.\r\n\r\nThis lets you do a new prerender by resuming an already existing\r\npostponed state. Basically creating a chain of preludes. The next\r\nprelude would include the scripts to patch up the document.\r\n\r\nThis mostly just works since both prerender and resume are already\r\nimplemented using the same code so we just enable both at the root. I'm\r\nsure we'll find some edge cases since this wasn't considered when it was\r\nfirst written but so far I've only found an unrelated existing bug with\r\n`keyPath` fixed here."
        }
      },
      {
        "sha": "94e652d505cc2a3ed77de06c0f8e5f4909761d97",
        "commit": {
          "message": "disable `enableSiblingPrerendering` in experimental channel (#30952)\n\nDisables `enableSiblingPrerendering` in the experimental builds until\r\nthe feature is tested at Meta first."
        }
      },
      {
        "sha": "89b445709d9f34bee261bacd6c68584c3ccb067b",
        "commit": {
          "message": "Enable lazy context propagation (#30935)\n\nLast I heard this was great so not sure there are any more blockers to\r\njust include it in 19?"
        }
      },
      {
        "sha": "dff50825c6ca4c04c79fd7fe2d2d345ea5e29f87",
        "commit": {
          "message": "[Flight] Track owner/stack where the Flight Client reads as the root (#30933)\n\nThis means that the owner of a Component rendered on the remote server\r\nbecomes the Component on this server.\r\n\r\nIdeally we'd support this for the Client side too. In particular Fiber\r\nbut currently ReactComponentInfo's owner is typed as only supporting\r\nother ReactComponentInfo and it's a bigger lift to support that."
        }
      },
      {
        "sha": "f6dcce5199a3b9480a47d9feda8e00d8d9a0905d",
        "commit": {
          "message": "[compiler][ez] Add entrypoints to ssa fixtures\n\nAdds evaluator support for a few compiler test fixtures\n\nghstack-source-id: 202654992a9876cea59885b54a338c908e369ddb\nPull Request resolved: https://github.com/facebook/react/pull/30948"
        }
      },
      {
        "sha": "5ac4034e14a72c0edf602585c10fd2725fb376c5",
        "commit": {
          "message": "[compiler] Fork fixtures for enablePropagateDepsInHIR\n\n- flip `enablePropagateDepsInHIR` to off by default\n- fork fixtures which produce compilation differences in #30894 to separate directory `propagate-scope-deps-hir-fork`, to be cleaned up when we remove this flag\n\nghstack-source-id: 7d5b8dc29788a65c272c846af9877b09fbf2cd60\nPull Request resolved: https://github.com/facebook/react/pull/30949"
        }
      },
      {
        "sha": "206df66e70652e85711c3177ce1a0459609a7771",
        "commit": {
          "message": "[compiler][rewrite] PropagateScopeDeps hir rewrite\n\nResubmission of #30079 -- core logic unchanged, but needed to rebase past #30573\n\n### Quick background\n#### Temporaries\n\nThe compiler currently treats temporaries and named variables (e.g. `x`) differently in this pass.\n- named variables may be reassigned (in fact, since we're running after LeaveSSA, a single named identifier's IdentifierId may map to multiple `Identifier` instances -- each with its own scope and mutable range)\n- temporaries are replaced with their represented expressions during codegen. This is correct (mostly correct, see #29878) as we're careful to always lower the correct evaluation semantics. However, since we rewrite reactive scopes entirely (to if/else blocks), we need to track temporaries that a scope produces in `ReactiveScope.declarations` and later promote them to named variables.\nIn the same example, $4, $5, and $6 need to be promoted: $2 ->`t0`,  $5 ->`t1`, and $6 ->`t2`.\n```js\n[1] $2 = LoadGlobal(global) foo\n[2] $3 = LoadLocal bar$1\nscope 0:\n  [3] $4 = Call $2(<unknown> $3)\nscope 1:\n  [4] $5 = Object {  }\nscope 2:\n  [5] $6 = Object { a: $4, b: $5 }\n[6] $8 = StoreLocal Const x$7 = $6\n```\n\n#### Dependencies\n`ReactiveScope.dependencies` records the set of (read-only) values that a reactive scope is dependent on. This is currently limited to just variables (named variables from source and promoted temporaries) and property-loads.\nAll dependencies we record need to be hoistable -- i.e. reordered to just before the ReactiveScope begins. Not all PropertyLoads are hoistable.\n\nIn this example, we should not evaluate `obj.a.b` without before creating x and checking `objIsNull`.\n```js\n// reduce-reactive-deps/no-uncond.js\nfunction useFoo({ obj, objIsNull }) {\n  const x = [];\n  if (isFalse(objIsNull)) {\n    x.push(obj.a.b);\n  }\n  return x;\n}\n```\n\nWhile other memoization strategies with different constraints exist, the current compiler requires that `ReactiveScope.dependencies` be re-orderable to the beginning of the reactive scope. But.. `PropertyLoad`s from null values will throw `TypeError`. This means that evaluating hoisted dependencies should throw if and only if the source program throws. (It is also a bug if source throws and compiler output does not throw. See https://github.com/facebook/react-forget/pull/2709)\n\n---\n### Rough high level overview\n1. Pass 1\nWalk over instructions to gather every temporary used outside of its defining scope (same as ReactiveFunction version). These determine the sidemaps we produce, as temporaries used outside of their declaring scopes get promoted to named variables later (and are not considered hoistable rvals).\n2. Pass 2 (collectTemporariesSidemap)\nWalk over instructions to generate a sidemap of temporary identifier -> named variable and property path (e.g. `$3 -> {obj: props, path: [\"a\", \"b\"]}`)\n2. Pass 2 (collectHoistablePropertyLoads)\n  a. Build a sidemap of block -> accessed variables and properties (e.g. `bb0 -> [ {obj: props, path: [\"a\", \"b\"]} ]`)\n  b. Propagate \"non-nullness\" i.e. variables and properties for which we can safely evaluate `PropertyLoad`.\n  A basic block can unconditionally read from identifier X if any of the following applies:\n    - the block itself reads from identifier X\n    - all predecessors of the block read from identifier X\n    - all successors of the block read from identifier X\n4. Pass 3: (collectDependencies)\nWalks over instructions again to record dependencies and declarations, using the previously produced sidemaps. We do not record any control-flow here\n5. Merge every scope's recorded dependencies with the set of hoistable PropertyLoads\n\nTested by syncing internally and (1) checking compilation output differences ([internal link](https://www.internalfb.com/intern/everpaste/?handle=GPCfUBt_HCoy_S4EAJDVFJyJJMR0bsIXAAAB)), running internally e2e tests ([internal link](https://fburl.com/sandcastle/cs5mlkxq))\n\n---\n### Followups:\n1. Rewrite function expression deps\nThis change produces much more optimal output as the compiler now uses the function CFG to understand which variables / paths are assumed to be non-null. However, it may exacerbate [this function-expr hoisting bug](https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-hoisting-functionexpr.tsx). A short term fix here is to simply call some form of `collectNonNullObjects` on every function expression to find hoistable variable / paths. In the longer term, we should refactor out `FunctionExpression.deps`.\n\n2. Enable optional paths\n(a) don't count optional load temporaries as dependencies (e.g. `collectOptionalLoadRValues(...)`).\n(b) record optional paths in both collectHoistablePropertyLoads and dependency collection\n\nghstack-source-id: 2507f6ea751dce09ad1dccd353ae6fc7cf411582\nPull Request resolved: https://github.com/facebook/react/pull/30894"
        }
      },
      {
        "sha": "94e4acaa1477e65cac02ba86058cde0afe4c8f1f",
        "commit": {
          "message": "[Fiber] Set profiler values to doubles (#30942)\n\nAt some point this trick was added to initialize the value first to NaN\r\nand then replace them with zeros and negative ones.\r\n\r\nThis is to address the issue noted in\r\nhttps://github.com/facebook/react/issues/14365 where these hidden\r\nclasses can be initialized to SMIs at first and then deopt when we\r\nrealize they're actually doubles.\r\n\r\nHowever, this fix has been long broken and has deopted the profiling\r\nbuild for years because closure compiler optimizes out the first write.\r\n\r\nI'm not sure because I haven't A/B-tested this in the JIT yet but I\r\nthink we can use negative zero and -1.1 as the initial values instead\r\nsince they're not simple integers. Negative zero `===` zero (but not\r\nObject.is) so is the same as far as our code is concerned. The negative\r\nvalue is just `< 0` comparisons."
        }
      },
      {
        "sha": "633a0fe536febefa02698db124b7265a3fde55e1",
        "commit": {
          "message": "[compiler] Factor out function effects from reference effects\n\nSummary:\nThis PR performs a major refactor of InferReferenceEffects to separate out the work on marking places with Effects from inferring FunctionEffects. The behavior should be identical after this change (see [internal sync](https://www.internalfb.com/intern/everpaste/?handle=GN74VxscnUaztTYDAL8q0CRWBIxibsIXAAAB)) but the FunctionEffect logic should be easier to work with.\n\nThese analyses are unfortunately still deeply linked--the FunctionEffect analysis needs to reason about the \"current\" value kind for each point in the program, while the InferReferenceEffects algorithm performs global updates on the state of the program (e.g. freezing). In the future, it might be possible to make these entirely separate passes if we store the ValueKind directly on places.\n\nFor the most part, the logic of reference effects and function effects can be cleanly separated: for each instruction and terminal, we visit its places and infer their effects, and then we visit its places and infer any function effects that they cause. The biggest wrinkle here is that when a transitive function freeze operation occurs, it has to happen *after* inferring the function effects on the place, because otherwise we may convert a value from Context to Frozen, which will cause the ContextualMutation function effect to be converted to a ReactMutation effect too early. This can be observed in a case like this:\n\n```\nexport default component C() {\n  foo(() => {\n    const p = {};\n    return () => {\n      p['a'] = 1\n    };\n  });\n}\n```\nHere when the outer function returns the inner function, it freezes the inner function which transitively freezes `p`. But before that freeze happens, we need to replay the ContextualMutation on the inner function to determine that the value is mutable in the outer context. If we froze `p` first, we would instead convert the ContextualMutation to a ReactMutation and error.\n\nTo handle this, InferReferenceEffects now delays the exection of the freezeValue action until after it's called the helper functions that generate function effects. So the order of operations on a given place is now\n\nset effect --> generate function effects --> transitively freeze dependencies, if applicable\n\nghstack-source-id: 21cb50c14054e7e7a307acb595ef30b54c2f2a52\nPull Request resolved: https://github.com/facebook/react/pull/30920"
        }
      },
      {
        "sha": "d3d4d3a46b014ab0f6edc443c19fcdba09105f20",
        "commit": {
          "message": "Call cleanup of insertion effects when hidden (#30954)\n\nInsertion effects do not unmount when a subtree is removed while\r\noffscreen.\r\n\r\nCurrent behavior for an insertion effect is if the component goes\r\n\r\n- *visible -> removed:* calls insertion effect cleanup\r\n- *visible -> offscreen -> removed:* insertion effect cleanup is never\r\ncalled\r\n\r\nThis makes it so we always call insertion effect cleanup when removing\r\nthe component.\r\n\r\nLikely also fixes https://github.com/facebook/react/issues/26670\r\n\r\n---------\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@fb.com>"
        }
      },
      {
        "sha": "d9c4920e8b3fff3d3da24d14adf7ac884aee55b2",
        "commit": {
          "message": "fix: restore selection should consider the window of the container (#30951)\n\n## Summary\r\n\r\n\r\nFixes #30864 \r\n\r\nBefore this PR the active elemen was always taken from the global\r\n`window`. This is incorrect if the renderer is in one window rendering\r\ninto a container element in another window. The changes in this PR adds\r\nanother code branch to use a `defaultView` of the container element if\r\nit exists so that `restoreSelection` after a commit will actually\r\nrestore to the correct window.\r\n\r\n## How did you test this change?\r\n\r\nI patched these changes to the repro repo in the linked issue #39864\r\nhttps://github.com/ling1726/react-child-window-focus-repro/blob/master/patches/react-dom%2B18.3.1.patch.\r\n\r\nI followed the same repro steps in the linked issue and and could not\r\nrepro the reported problem. Attaching screen recordings below:\r\n\r\nBefore\r\n![focus\r\nrepro](https://github.com/user-attachments/assets/81c4b4f9-08b5-4356-8251-49b909771f3f)\r\n\r\nAfter\r\n\r\n![after](https://github.com/user-attachments/assets/84883032-5558-4650-9b9a-bd4d5fd9cb13)"
        }
      },
      {
        "sha": "5deb78223a269a6cb1706da8ec6aad8c007cab03",
        "commit": {
          "message": "[Flight] Respect `async` flag in client manifest (#30959)\n\nIn #26624, the ability to mark a client reference module as `async` in\r\nthe React client manifest was removed because it was not utilized by\r\nWebpack, neither in `ReactFlightWebpackPlugin` nor in Next.js. However,\r\nsome bundlers and frameworks are sophisticated enough to properly handle\r\nand identify async ESM modules (e.g., client component modules with\r\ntop-level `await`), most notably Turbopack in Next.js. Therefore, we\r\nneed to consider the `async` flag in the client manifest when resolving\r\nthe client reference metadata on the server. The SSR manifest cannot\r\noverride this flag, meaning that if a module is async, it must remain\r\nasync in all client environments.\r\n\r\nx-ref: https://github.com/vercel/next.js/pull/70022"
        }
      },
      {
        "sha": "6774caa37973e3e26d60f100971e5e785fd12235",
        "commit": {
          "message": "[Flight] properly track pendingChunks when changing environment names (#30958)\n\nWhen the environment name changes for a chunk we issue a new debug chunk\r\nwhich updates the environment name. This chunk was not beign included in\r\nthe pendingChunks count so the count was off when flushing"
        }
      },
      {
        "sha": "3d95c43b8967d4dda1ec9a22f0d9ea4999fee8b8",
        "commit": {
          "message": "[Fiber] Profiler - Use two separate functions instead of branch by flag (#30957)\n\nNit: I don't trust flags in hot code. While it can take somewhat longer\r\nto compile two functions and JIT them. After that they don't need to\r\ncheck branches. Also makes it clearer the purpose."
        }
      },
      {
        "sha": "b75cc078c5fda0d57135523a7a2f4e8d1536472f",
        "commit": {
          "message": "Fix nodeName to UPPERCASE in insertStylesheetIntoRoot (#28255)\n\n## Summary\r\n\r\n<!--\r\nExplain the **motivation** for making this change. What existing problem\r\ndoes the pull request solve?\r\n-->\r\n\r\n<img width=\"518\" alt=\"image\"\r\nsrc=\"https://github.com/facebook/react/assets/18693190/6d12df76-7dae-403b-b486-4940992abe8d\">\r\n\r\nThe condition `node.nodeName === 'link'` is always `false`, because\r\n`node.nodeName` is Uppercase in specification. And the condition\r\n`node.nodeName === 'LINK'` is unnecessary, because Fizz hoists tags when\r\nit's `media` attribute is `\"not all\"`, whether it is a `link` or a\r\n`style` (line 36):\r\n\r\n\r\nhttps://github.com/facebook/react/blob/18cbcbf783377c5a22277a63ae41af54504502e0/packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetExternalRuntime.js#L30-L44\r\n\r\n\r\nhttps://github.com/facebook/react/blob/18cbcbf783377c5a22277a63ae41af54504502e0/packages/react-dom-bindings/src/server/fizz-instruction-set/ReactDOMFizzInstructionSetInlineSource.js#L30-L44"
        }
      },
      {
        "sha": "fc5ef50da8e975a569622d477f1fed54cb8b193d",
        "commit": {
          "message": "[Flight] Start initial work immediately (#30961)\n\nIn a past update we made render and prerender have different work\r\nscheduling behavior because these methods are meant to be used in\r\ndiffereent environments with different performance tradeoffs in mind.\r\nFor instance to prioritize streaming we want to allow as much IO to\r\ncomplete before triggering a round of work because we want to flush as\r\nfew intermediate UI states. With Prerendering there will never be any\r\nintermediate UI states so we can more aggressively render tasks as they\r\ncomplete.\r\n\r\nOne thing we've found is that even during render we should ideally kick\r\noff work immediately. This update normalizes the intitial work for\r\nrender and prerender to start in a microtask. Choosing microtask over\r\nsync is somewhat arbitrary but there really isn't a reason to make them\r\ndifferent between render/prerender so for now we'll unify them and keep\r\nit as a microtask for now.\r\n\r\nThis change also updates pinging behavior. If the request is still in\r\nthe initial task that spawned it then pings will schedule on the\r\nmicrotask queue. This allows immediately available async APIs to resolve\r\nright away. The concern with doing this for normal pings is that it\r\nmight crowd out IO events but since this is the initial task there would\r\nbe IO to already be scheduled."
        }
      },
      {
        "sha": "8cf64620c7dd4ec7e72aa16ee2d5f15eb3420b92",
        "commit": {
          "message": "fix[rdt/fiber/renderer.js]: getCurrentFiber can be injected as null (#30968)\n\nIn production artifacts for `18.x.x` `getCurrentFiber` can actually be\r\ninjected as `null`. Updated `getComponentStack` and `onErrorOrWarning`\r\nimplementations to support this.\r\n\r\n![Screenshot 2024-09-16 at 10 52\r\n00](https://github.com/user-attachments/assets/a0c773aa-ebbf-4fd5-95c4-cac3cc0c203f)"
        }
      },
      {
        "sha": "0eab377a96099f0121009c8968c49d13d4e00bd1",
        "commit": {
          "message": "Add enableComponentPerformanceTrack Flag (#30960)\n\nThis flag will be used to gate a new timeline profiler that's integrate\r\nwith the Performance Tab and the new performance.measure extensions in\r\nChrome.\r\n\r\nIt replaces the existing DevTools feature so this disables\r\nenableSchedulingProfiler when it is enabled since they can interplay in\r\nweird ways potentially.\r\n\r\nThis means that experimental React now disable scheduling profiler and\r\nenables this new approach."
        }
      },
      {
        "sha": "ee1a403a3019dd8bffb12174d269d8c85bfab8a1",
        "commit": {
          "message": "[Fiber] Move Profiler onPostCommit processing of passive effect durations to plain passive effect (#30966)\n\nWe used to queue a separate third passive phase to invoke onPostCommit\r\nbut this is unnecessary. We can just treat it as a plain passive effect.\r\nThis means it is interleaved with other passive effects but we only need\r\nto know the duration of the things below us which is already done at\r\nthis point.\r\n\r\nI also extracted the user space call to onPostCommit into\r\nReactCommitEffects. Same as onCommit. It's now covered by\r\nrunWithFiberInDEV and catches."
        }
      },
      {
        "sha": "f2df5694f2be141954f22618fd3ad035203241a3",
        "commit": {
          "message": "[Fiber] Log Component Renders to Custom Performance Track (#30967)\n\nStacked on #30960 and #30966. Behind the enableComponentPerformanceTrack\r\nflag.\r\n\r\nThis is the first step of performance logging. This logs the start and\r\nend time of a component render in the passive effect phase. We use the\r\ndata we're already tracking on components when the Profiler component or\r\nDevTools is active in the Profiling or Dev builds. By backdating this\r\nafter committing we avoid adding more overhead in the hot path. By only\r\nlogging things that actually committed, we avoid the costly unwinding of\r\nan interrupted render which was hard to maintain in earlier versions.\r\n\r\nWe already have the start time but we don't have the end time. That's\r\nbecause `actualStartTime + actualDuration` isn't enough since\r\n`actualDuration` counts the actual CPU time excluding yields and\r\nsuspending in the render.\r\n\r\nInstead, we infer the end time to be the start time of the next sibling\r\nor the complete time of the whole root if there are no more siblings. We\r\nneed to pass this down the passive effect tree. This will mean that any\r\noverhead and yields are attributed to this component's span. In a follow\r\nup, we'll need to start logging these yields to make it clear that this\r\nis not part of the component's self-time.\r\n\r\nIn follow ups, I'll do the same for commit phases. We'll also need to\r\nlog more information about the phases in the top track. We'll also need\r\nto filter out more components from the trees that we don't need to\r\nhighlight like the internal Offscreen components. It also needs polish\r\non colors etc.\r\n\r\nCurrently, I place the components into separate tracks depending on\r\nwhich lane currently committed. That way you can see what was blocking\r\nTransitions or Suspense etc. One problem that I've hit with the new\r\nperformance.measure extensions is that these tracks show up in the order\r\nthey're used which is not the order of priority that we use. Even when\r\nyou add fake markers they have to actually be within the performance run\r\nsince otherwise the calls are noops so it's not enough to do that once.\r\n\r\nHowever, I think this visualization is actually not good because these\r\ntrees end up so large that you can't see any other lanes once you expand\r\none. Therefore, I think in a follow up I'll actually instead switch to a\r\nmodel where Components is a single track regardless of lane since we\r\ndon't currently have overlap anyway. Then the description about what is\r\nactually rendering can be separate lanes.\r\n\r\n<img width=\"1512\" alt=\"Screenshot 2024-09-15 at 10 55 55 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/5ca3fa74-97ce-40c7-97f7-80c1dd7d6470\">\r\n\r\n<img width=\"1512\" alt=\"Screenshot 2024-09-15 at 10 56 27 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/557ad65b-4190-465f-843c-0bc6cbb9326d\">"
        }
      },
      {
        "sha": "9f4e4611ead28d34f7f598c9bd12424cf68f5781",
        "commit": {
          "message": "fix: add Error prefix to Error objects names (#30969)\n\nThis fixes printing Error objects in Chrome DevTools.\r\n\r\nI've observed that Chrome DevTools is not source mapping and linkifying\r\nURLs, when was running this on larger apps. Chrome DevTools talks to V8\r\nvia Chrome DevTools protocol, every object has a corresponding\r\n[`RemoteObject`](https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#type-RemoteObject).\r\n\r\nWhen Chrome DevTools sees that Error object is printed in the console,\r\nit will try to prettify it. `description` field of the corresponding\r\n`RemoteObject` for the `Error` JavaScript object is a combination of\r\n`Error` `name`, `message`, `stack` fields. This is not just a raw\r\n`stack` field, so our prefix for this field just doesn't work. [V8 is\r\nactually filtering out first line of the `stack` field, it only keeps\r\nthe stack frames as a string, and then this gets prefixed by `name` and\r\n`message` fields, if they are\r\navailable](https://source.chromium.org/chromium/chromium/src/+/main:v8/src/inspector/value-mirror.cc;l=252-311;drc=bdc48d1b1312cc40c00282efb1c9c5f41dcdca9a?fbclid=IwZXh0bgNhZW0CMTEAAR1tMm5YC4jqowObad1qXFT98X4RO76CMkCGNSxZ8rVsg6k2RrdvkVFL0i4_aem_e2fRrqotKdkYIeWlJnk0RA).\r\nAs an illustration, this:\r\n```\r\nconst fakeError = new Error('');\r\nfakeError.name = 'Stack';\r\nfakeError.stack = 'Error Stack:' + stack;\r\n```\r\n\r\nwill be formatted by `V8` as this `RemoteObject`:\r\n```\r\n{\r\n  ...\r\n  description: 'Stack: ...',\r\n  ...\r\n}\r\n```\r\n\r\nNotice that there is no `Error` prefix, that was previously added.\r\nBecause of this, [Chrome DevTools won't even try to symbolicate the\r\nstack](https://github.com/ChromeDevTools/devtools-frontend/blob/ee4729d2ccdf5c6715ee40e6697f5464829e3f9a/front_end/panels/console/ErrorStackParser.ts#L33-L35),\r\nbecause it doesn't have such prefix."
        }
      },
      {
        "sha": "26855e4680dedb21f2c73a069ed691822a242db1",
        "commit": {
          "message": "[react-native] Fix misleading crash when view config is not found (#30970)\n\n## Summary\r\n\r\nWhen a view config can not be found, it currently errors with\r\n`TypeError: Cannot read property 'bubblingEventTypes' of null`. Instead\r\ninvariant at the correct location and prevent further processing of the\r\nnull viewConfig to improve the error logged.\r\n\r\n## How did you test this change?\r\n\r\nBuild and run RN playground app referencing an invalid native view\r\nthrough `requireNativeComponent`."
        }
      },
      {
        "sha": "c8a7cab13f9d496d4b178ba5e95b030ca854aa20",
        "commit": {
          "message": "[compiler] Fix issue where second argument of all functions was considered to be a ref\n\nghstack-source-id: 1817f3b816ab5ec013a3b1a6c8a8373a30e0b3a0\nPull Request resolved: https://github.com/facebook/react/pull/30912"
        }
      },
      {
        "sha": "1e68a0a3aed9975d2e302ccf1dff0861bf2be706",
        "commit": {
          "message": "[compiler] Improve handling of refs\n\nSummary:\nThis change expands our handling of refs to build an understanding of nested refs within objects and functions that may return refs. It builds a special-purpose type system within the ref analysis that gives a very lightweight structural type to objects and array expressions (merging the types of all their members), and then propagating those types throughout the analysis (e.g., if `ref` has type `Ref`, then `{ x: ref }` and `[ref]` have type `Structural(value=Ref)` and `{x: ref}.anything` and `[ref][anything]` have type `Ref`).\n\nThis allows us to support structures that contain refs, and functions that operate over them, being created and passed around during rendering without at runtime accessing a ref value.\n\nThe analysis here uses a fixpoint to allow types to be fully propagated through the system, and we defend against diverging by widening the type of a variable if it could grow infinitely: so, in something like\n```\nlet x = ref;\nwhile (condition) {\n  x = [x]\n}\n```\nwe end up giving `x` the type `Structural(value=Ref)`.\n\nghstack-source-id: afb0b0cb014ffcf21ef4d0ede6511330fd975ec3\nPull Request resolved: https://github.com/facebook/react/pull/30902"
        }
      },
      {
        "sha": "e78c9362c014dccaed5ff193106e44d7d072dc32",
        "commit": {
          "message": "[compiler] Allow all hooks to take callbacks which access refs, but ban hooks from taking direct ref value arguments\n\nSummary:\nThis brings the behavior of ref mutation within hook callbacks into alignment with the behavior of global mutations--that is, we allow all hooks to take callbacks that may mutate a ref. This is potentially unsafe if the hook eagerly calls its callback, but the alternative is excessively limiting (and inconsistent with other enforcement).\n\nThis also bans *directly* passing a ref.current value to a hook, which was previously allowed.\n\nghstack-source-id: e66ce7123ecf4a905adab957970d0ee5d41245e0\nPull Request resolved: https://github.com/facebook/react/pull/30917"
        }
      },
      {
        "sha": "d7167c35059bc6a0ad84eb34e65b3b66328d5dd8",
        "commit": {
          "message": "[compiler] Implement support for hoisted and recursive functions\n\nSummary:\nIntroduces a new binding kind for functions that allows them to be hoisted. Also has the result of causing all nested function declarations to be outputted as function declarations, not as let bindings.\n\nghstack-source-id: fa40d4909fb3d30c23691e36510ebb3c3cc41053\nPull Request resolved: https://github.com/facebook/react/pull/30922"
        }
      },
      {
        "sha": "8152e5cd27721e792f395c0b62c8a7769a54777a",
        "commit": {
          "message": "Remove execution context check from shouldProfile (#30971)\n\nI don't know why this is here since all these callsites are within the\r\nCommitWork/CommitEffects helpers.\r\n\r\nThis should help with inlining."
        }
      },
      {
        "sha": "a99d8e8d97055127a8ad7b01835d2660154689ed",
        "commit": {
          "message": "[compiler][eslint] Report bailout diagnostics with correct column # (#30977)\n\nCompiler bailout diagnostics should now highlight only the first line of\r\nthe source location span.\r\n\r\n(Resubmission of #30423 which was reverted due to invalid column\r\nnumber.)"
        }
      },
      {
        "sha": "7b56a542987890f618eeda4e4906fbf1f1df2213",
        "commit": {
          "message": "[compiler][playground] create playground API in pipeline, and allow spaces in pass names\n\nSummary:\n1. Minor refactor to provide a stable API for calling the compiler from the playground\n2. Allows spaces in pass names without breaking the appearance of the playground by replacing spaces with &nbsp; in pass tabs\n\nghstack-source-id: 12a43ad86c16c0e21f3e6b4086d531cdefd893eb\nPull Request resolved: https://github.com/facebook/react/pull/30988"
        }
      },
      {
        "sha": "4549be0f846e7df5a4eaabf06369d93bd120271e",
        "commit": {
          "message": "[Fiber] Optimize enableProfilerCommitHooks by Collecting Elapsed Effect Duration in Module Scope (#30981)\n\nStacked on #30979.\r\n\r\nThe problem with the previous approach is that it recursively walked the\r\ntree up to propagate the resulting time from recording a layout effect.\r\n\r\nInstead, we keep a running count of the effect duration on the module\r\nscope. Then we reset it when entering a nested Profiler and then we add\r\nits elapsed count when we exit the Profiler.\r\n\r\nThis also fixes a bug where we weren't previously including unmount\r\ntimes for some detached trees since they couldn't bubble up to find the\r\nprofiler."
        }
      },
      {
        "sha": "15da9174518f18f82869767ebe2a21be2fc8bd90",
        "commit": {
          "message": "Don't read currentTransition back from internals (#30991)\n\nThis code is weird. It reads back the transition that it just set from\r\nthe shared internals. It's almost like it expects it to be a getter or\r\nsomething.\r\n\r\nThis avoids that and makes it consistent with what ReactFiberHooks\r\nalready does."
        }
      },
      {
        "sha": "e1c20902c39d1dfe2649185622f2f21b526e2be2",
        "commit": {
          "message": "[Fiber] Log Component Effects to Performance Track (#30983)\n\nStacked on #30981. Same as #30967 but for effects.\r\n\r\nThis logs a tree of components using `performance.measure()`.\r\n\r\nIn addition to the previous render phase this logs one tree for each\r\ncommit phase:\r\n\r\n- Mutation Phase\r\n- Layout Effect\r\n- Passive Unmounts\r\n- Passive Mounts\r\n\r\nI currently skip the Before Mutation phase since the snapshots are so\r\nunusual it's not worth creating trees for those.\r\n\r\nThe mechanism is that I reuse the timings we track for\r\n`enableProfilerCommitHooks`. I track first and last effect timestamp\r\nwithin each component subtree. Then on the way up do we log the entry.\r\nThis means that we don't include overhead to find our way down to a\r\ncomponent and that we don't need to add any additional overhead by\r\nreading timestamps.\r\n\r\nTo ensure that the entries get ordered correctly we need to ensure that\r\nthe start time of each parent is slightly before the inner one."
        }
      },
      {
        "sha": "8dfbd16fce9077ab4e5fe85a7b86fa7c97a5ae04",
        "commit": {
          "message": "[Fiber] Color Performance Track Entries by Self Time (#30984)\n\nStacked on #30983.\r\n\r\nThis colors each component entry by its self time from light to dark\r\ndepending on how long it took. If it took longer than a cut off we color\r\nit red (the error color).\r\n\r\n<img width=\"435\" alt=\"Screenshot 2024-09-16 at 11 48 15 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/5d0bda83-6205-40e9-bec1-b81db2d48b2d\">"
        }
      },
      {
        "sha": "5dcb009760160c085496e943f76090d98528f971",
        "commit": {
          "message": "[compiler] Add JSX inlining optimization (#30867)\n\nThis adds an `InlineJsxTransform` optimization pass, toggled by the\r\n`enableInlineJsxTransform` flag. When enabled, JSX will be transformed\r\ninto React Element object literals, preventing runtime overhead during\r\nelement creation.\r\n\r\nTODO:\r\n- [ ] Add conditionals to make transform PROD-only\r\n- [ ] Make the React element symbol configurable so this works with\r\nruntimes that support `react.element` or `react.transitional.element`\r\n- [ ] Look into additional optimization to pass props spread through\r\ndirectly if none of the properties are mutated"
        }
      },
      {
        "sha": "5e83d9ab3b3f88853591dff43cd70ee4e5c90c5d",
        "commit": {
          "message": "feat[react-devtools]: add settings to global hook object (#30564)\n\nRight now we are patching console 2 times: when hook is installed\r\n(before page is loaded) and when backend is connected. Because of this,\r\neven if user had `appendComponentStack` setting enabled, all emitted\r\nerror and warning logs are not going to have component stacks appended.\r\nThey also won't have component stacks appended retroactively when user\r\nopens browser DevTools (this is when frontend is initialized and\r\nconnects to backend).\r\n\r\nThis behavior adds potential race conditions with LogBox in React\r\nNative, and also unpredictable to the user, because in order to get\r\ncomponent stacks logged you have to open browser DevTools, but by the\r\ntime you do it, error or warning log was already emitted.\r\n\r\nTo solve this, we are going to only patch console in the hook object,\r\nbecause it is guaranteed to load even before React. Settings are going\r\nto be synchronized with the hook via Bridge, and React DevTools Backend\r\nHost (React Native or browser extension shell) will be responsible for\r\npersisting these settings across the session, this is going to be\r\nimplemented in a separate PR."
        }
      },
      {
        "sha": "b521ef8a2aaff61154e59f6d0d3791ee4dbe6395",
        "commit": {
          "message": "refactor[react-devtools]: remove browserTheme from ConsolePatchSettings (#30566)\n\nStacked on https://github.com/facebook/react/pull/30564.\r\n\r\nWe are no longer using browser theme in our console patching, this was\r\nremoved in unification of console patching for strict mode, we started\r\nusing ansi escape symbols and forking based on browser theme is no\r\nlonger required - https://github.com/facebook/react/pull/29869\r\n\r\nThe real browser theme initialization for frontend is happening at the\r\nother place and is not affected:\r\n\r\nhttps://github.com/facebook/react/blob/40be968257a7a10a267210670103f20dd0429ef3/packages/react-devtools-shared/src/devtools/views/Settings/SettingsContext.js#L117-L120"
        }
      },
      {
        "sha": "3cac0875dcd60b8db099d8fa671c5ad1f8f0ef23",
        "commit": {
          "message": "refactor[react-devtools]: move console patching to global hook (#30596)\n\nStacked on https://github.com/facebook/react/pull/30566 and whats under\r\nit. See [this\r\ncommit](https://github.com/facebook/react/pull/30596/commits/374fd737e4b0b7028afb765838db7c0e22def865).\r\n\r\nIt is mostly copying code from one place to another and updating tests.\r\nWith these changes, for every console method that we patch, there is\r\ngoing to be a single applied patch:\r\n- For `error`, `warn`, and `trace` we are patching when hook is\r\ninstalled. This guarantees that component stacks are going to be\r\nappended even if browser DevTools are not opened. We pay some price for\r\nit, though: if user has browser DevTools closed and if at this point\r\nsome warning or error is emitted (logged), the next time user opens\r\nbrowser DevTools, they are going to see `hook.js` as the source frame.\r\nUnfortunately, ignore listing from source maps is not applied\r\nretroactively, and I don't know if its a bug or just a design\r\nlimitations. Once browser DevTools are opened, source maps will be\r\nloaded and ignore listing will be applied for all emitted logs in the\r\nfuture.\r\n- For `log`, `info`, `group`, `groupCollapsed` we are only patching when\r\nReact notifies React DevTools about running in StrictMode. We unpatch\r\nthe methods right after it."
        }
      },
      {
        "sha": "fce46066571e7bf3ab6ce5bfe5fd3a615e098421",
        "commit": {
          "message": "chore[react-devtools]: extract some utils into separate modules to unify implementations (#30597)\n\nStacked on https://github.com/facebook/react/pull/30596. See [this\r\ncommit](https://github.com/facebook/react/pull/30597/commits/4ba5e784bbfdcd69021e2d84c75ffe26fcb698f4).\r\n\r\nMoving `formatWithStyles` and `formatConsoleArguments` to its own\r\nmodules, so that we can finally have a single implementation for these\r\nand stop inlining them in RDT global hook object."
        }
      },
      {
        "sha": "e33acfd67f0003272a9aec7a0725d19a429f2460",
        "commit": {
          "message": "refactor[react-devtools]: propagate settings from global hook object to frontend (#30610)\n\nStacked on https://github.com/facebook/react/pull/30597 and whats under\r\nit. See [this\r\ncommit](https://github.com/facebook/react/pull/30610/commits/59b4efa72377bf62f5ec8c0e32e56902cf73fbd7).\r\n\r\nWith this change, the initial values for console patching settings are\r\npropagated from hook (which is the source of truth now, because of\r\nhttps://github.com/facebook/react/pull/30596) to the UI. Instead of\r\nreading from `localStorage` the frontend is now requesting it from the\r\nhook. This happens when settings modal is rendered, and wrapped in a\r\ntransition. Also, this is happening even if settings modal is not opened\r\nyet, so we have enough time to fetch this data without displaying loader\r\nor similar UI."
        }
      },
      {
        "sha": "f37c7bc6539b4da38f7080b5486eb00bdb2c3237",
        "commit": {
          "message": "feat[react-devtools/extension]: use chrome.storage to persist settings across sessions (#30636)\n\nStacked on https://github.com/facebook/react/pull/30610 and whats under\r\nit. See [last\r\ncommit](https://github.com/facebook/react/pull/30636/commits/248ddba18608e1bb5ef14c823085a7ff9d7a54a3).\r\n\r\nNow, we are using\r\n[`chrome.storage`](https://developer.chrome.com/docs/extensions/reference/api/storage)\r\nto persist settings for the browser extension across different sessions.\r\nOnce settings are updated from the UI, the `Store` will emit\r\n`settingsUpdated` event, and we are going to persist them via\r\n`chrome.storage.local.set` in `main/index.js`.\r\n\r\nWhen hook is being injected, we are going to pass a `Promise`, which is\r\ngoing to be resolved after the settings are read from the storage via\r\n`chrome.storage.local.get` in `hookSettingsInjector.js`."
        }
      },
      {
        "sha": "f2c57a31e9953b3889c56f68e129e67afca15d0e",
        "commit": {
          "message": "chore: remove settings manager from react-devtools-core (#30986)\n\nStacked on https://github.com/facebook/react/pull/30636. See [this\r\ncommit](https://github.com/facebook/react/pull/30986/commits/20cec76c44f77e74b3a85225fecab5a431cd986f).\r\n\r\nThis has been only used for React Native and will be replaced by another\r\napproach (initialization via `installHook` call) in the next PR."
        }
      },
      {
        "sha": "09d82835993b16cd5dc8350c03627f9573354a25",
        "commit": {
          "message": "[ez] Rewrite optional chaining and nullish coalescing syntax (#30982)\n\nRewrite `containerInfo?.ownerDocument?.defaultView ?? window` to instead\r\nuse a ternary.\r\n\r\nThis changes the compilation output (see [bundle changes from\r\n#30951](https://github.com/facebook/react/commit/d65fb06955e9f32e6a40d1c7177d77893dff95b9)).\r\n```js\r\n// compilation of containerInfo?.ownerDocument?.defaultView ?? window\r\nvar $jscomp$optchain$tmpm1756096108$1, $jscomp$nullish$tmp0;\r\ncontainerInfo =\r\n  null !=\r\n  ($jscomp$nullish$tmp0 =\r\n    null == containerInfo\r\n      ? void 0\r\n      : null ==\r\n          ($jscomp$optchain$tmpm1756096108$1 = containerInfo.ownerDocument)\r\n        ? void 0\r\n        : $jscomp$optchain$tmpm1756096108$1.defaultView)\r\n    ? $jscomp$nullish$tmp0\r\n    : window;\r\n\r\n// compilation of ternary expression\r\ncontainerInfo =\r\n  null != containerInfo &&\r\n  null != containerInfo.ownerDocument &&\r\n  null != containerInfo.ownerDocument.defaultView\r\n    ? containerInfo.ownerDocument.defaultView\r\n    : window;\r\n```\r\n\r\nThis also reduces the number of no-op bundle syncs for Meta. Note that\r\nClosure compiler's `jscomp$optchain$tmp<HASH>` identifiers change when\r\nwe rebuild (likely due to version number changes). See\r\n[workflow](https://github.com/facebook/react/actions/runs/10891164281/job/30221518374)\r\nfor a PR that was synced despite making no changes to the runtime."
        }
      },
      {
        "sha": "e72127a4ec6f91288e9008711215068823100599",
        "commit": {
          "message": "Build `react-dom` in `builds/facebook-fbsource` (#30711)\n\n## Summary\r\n\r\nBuilds `react-dom` for React Native so that it also populates the\r\n`builds/facebook-fbsource` branch.\r\n\r\n**NOTE:** For Meta employees, D61354219 is the internal integration.\r\n\r\n## How did you test this change?\r\n\r\n```\r\n$ yarn build\r\n…\r\n$ ls build/facebook-react-native/react-dom/cjs\r\nReactDOM-dev.js       ReactDOM-prod.js      ReactDOM-profiling.js\r\n```"
        }
      },
      {
        "sha": "a86afe8e560f452a9df5ceb4893d9423e5840800",
        "commit": {
          "message": "feat: expose installHook with settings argument from react-devtools-core/backend (#30987)\n\nStacked on https://github.com/facebook/react/pull/30986. \r\n\r\nPreviously, we would call `installHook` at a top level of the JavaScript\r\nmodule. Because of this, having `require` statement for\r\n`react-devtools-core` package was enough to initialize the React\r\nDevTools global hook on the `window`.\r\n\r\nNow, the Hook can actually receive an argument - initial user settings\r\nfor console patching. We expose this as a function `initialize`, which\r\ncan be used by third parties (including React Native) to provide the\r\npersisted settings.\r\n\r\nThe README was also updated to reflect the changes."
        }
      },
      {
        "sha": "d5e955d3c0c1fa2494de0ab33be9cd90c65aff1e",
        "commit": {
          "message": "[compiler] Pass through unmodified props spread when inlining jsx (#30995)\n\nIf JSX receives a props spread without additional attributes (besides\r\n`ref` and `key`), we can pass the spread object as a property directly\r\nto avoid the extra object copy.\r\n\r\n```\r\n<Test {...propsToSpread} />\r\n// {props: propsToSpread}\r\n<Test {...propsToSpread} a=\"z\" />\r\n// {props: {...propsToSpread, a: \"z\"}}\r\n```"
        }
      },
      {
        "sha": "632f88df11329c9ad66781ddd75b27df6f8effb9",
        "commit": {
          "message": "[compiler] Allow ReactElement symbol to be configured when inlining jsx (#30996)\n\nBased on https://github.com/facebook/react/pull/30995 ([rendered\r\ndiff](https://github.com/jackpope/react/compare/inline-jsx-2...jackpope:react:inline-jsx-3?expand=1))\r\n\r\n____\r\n\r\nSome apps still use `react.element` symbols. Not only do we want to test\r\nthere but we also want to be able to upgrade those sites to\r\n`react.transitional.element` without blocking on the compiler (we can\r\nchange the symbol feature flag and compiler config at the same time).\r\n\r\nThe compiler runtime uses `react.transitional.element`, so the snap\r\nfixture will fail if we change the default here. However I confirmed\r\nthat commenting out the fixture entrypoint and running snap with\r\n`react.element` will update the fixture symbols as expected."
        }
      },
      {
        "sha": "c21ce4a39667c4094208bc35dc86fc9f49fceec6",
        "commit": {
          "message": "feat: display message if user ended up opening hook script (#31000)\n\nIn https://github.com/facebook/react/pull/30596 we've moved console\r\npatching to the global hook. Generally speaking, the patching happens\r\neven before React is loaded on the page.\r\n\r\nIf browser DevTools were opened after when `console.error` or\r\n`console.warn` were called, the source script will be `hook.js`, because\r\nof the patching.\r\n\r\n![devtools-opened-after-the-message](https://github.com/user-attachments/assets/3d3dbc16-96b8-4234-b061-57b21b60cf2e)\r\n\r\nThis is because ignore listing is not applied retroactively by Chrome\r\nDevTools.\r\nIf you had it open before console calls, Hook script would be correctly\r\nfiltered out from the stack:\r\n\r\n![devtools-opened-before-the-message](https://github.com/user-attachments/assets/3e99cb22-97b0-4b49-9a76-f7bc948e6452)\r\n\r\nI had hopes that the fix for\r\nhttps://issues.chromium.org/issues/345248263 will also apply ignore\r\nlisting retroactively, but looks like we need to open a separate feature\r\nrequest for the Chrome DevTools team.\r\n\r\nWith these changes, if user attempts to open `hook.js` script, they are\r\ngoing to see this message:\r\n![Screenshot 2024-09-19 at 11 30\r\n59](https://github.com/user-attachments/assets/5850b74c-329f-4fbe-a3dd-33f9ac717ee9)"
        }
      },
      {
        "sha": "e740d4b14b27b4c7a21f67d20a4526a57d6729a7",
        "commit": {
          "message": "chore: remove using local storage for persisting console settings on the frontend (#31002)\n\nAfter https://github.com/facebook/react/pull/30636 and\r\nhttps://github.com/facebook/react/pull/30986 we no longer store settings\r\non the Frontend side via `localStorage`.\r\n\r\nThis PR removes all occurrences of it from\r\n`react-devtools-core/standalone` and `react-devtools-inline`."
        }
      },
      {
        "sha": "babde5d1826365bfb794abdb7de4bd21f7b02356",
        "commit": {
          "message": "[lint] Add no-optional-chaining (#31003)\n\n## Overview\r\n\r\nAdds a lint rule to prevent optional chaining to catch issues like\r\nhttps://github.com/facebook/react/pull/30982 until we support optional\r\nchaining without a bundle impact."
        }
      },
      {
        "sha": "e4953922a99b5477c3bcf98cdaa2b13ac0a81f0d",
        "commit": {
          "message": "Update react-native/react-dom build directory (#31006)\n\nCommit artifact actions are breaking after\r\nhttps://github.com/facebook/react/pull/30711\r\n\r\nSee:\r\nhttps://github.com/facebook/react/actions/runs/10930658977/job/30344033974\r\n\r\n> mv: cannot stat 'build/facebook-react-native/react/dom/': No such file\r\nor directory\r\n\r\nAfter build, the new artifacts are in `/react-dom/cjs`, not\r\n`/react/dom/`\r\n```\r\n$> yarn build\r\n$> ls build/facebook-react-native/react/\r\n# ... no dom\r\n$> ls build/facebook-react-native/react-dom/cjs\r\n```"
        }
      },
      {
        "sha": "ae75d5a3f5cf14a5031ee251376b1adf88c32813",
        "commit": {
          "message": "[Fizz] Include componentStack at the root when aborting (#31011)\n\nWhen aborting we currently don't produce a componentStack when aborting\r\nthe shell. This is likely just an oversight and this change updates this\r\nbehavior to be consistent with what we do when there is a boundary"
        }
      },
      {
        "sha": "d4688dfaafe51a4cb6e3c51fc2330662cb4e2296",
        "commit": {
          "message": "[Fiber] Track Event Time, startTransition Time and setState Time (#31008)\n\nThis tracks the current window.event.timeStamp the first time we\r\nsetState or call startTransition. For either the blocking track or\r\ntransition track. We can use this to show how long we were blocked by\r\nother events or overhead from when the user interacted until we got\r\ncalled into React.\r\n\r\nThen we track the time we start awaiting a Promise returned from\r\nstartTransition. We can use this track how long we waited on an Action\r\nto complete before setState was called.\r\n\r\nThen finally we track when setState was called so we can track how long\r\nwe were blocked by other word before we could actually start rendering.\r\nFor a Transition this might be blocked by Blocking React render work.\r\n\r\nWe only log these once a subsequent render actually happened. If no\r\nrender was actually scheduled, then we don't log these. E.g. if an\r\nisomorphic Action doesn't call startTransition there's no render so we\r\ndon't log it.\r\n\r\nWe only log the first event/update/transition even if multiple are\r\nbatched into it later. If multiple Actions are entangled they're all\r\ntreated as one until an update happens. If no update happens and all\r\nentangled actions finish, we clear the transition so that the next time\r\na new sequence starts we can log it.\r\n\r\nWe also clamp these (start the track later) if they were scheduled\r\nwithin a render/commit. Since we share a single track we don't want to\r\ncreate overlapping tracks.\r\n\r\nThe purpose of this is not to show every event/action that happens but\r\nto show a prelude to how long we were blocked before a render started.\r\nSo you can follow the first event to commit.\r\n\r\n<img width=\"674\" alt=\"Screenshot 2024-09-20 at 1 59 58 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/151ba9e8-6b3c-4fa1-9f8d-e3602745eeb7\">\r\n\r\nI still need to add the rendering/suspended phases to the timeline which\r\nwhy this screenshot has a gap.\r\n\r\n<img width=\"993\" alt=\"Screenshot 2024-09-20 at 12 50 27 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/155b6675-b78a-4a22-a32b-212c15051074\">\r\n\r\nIn this case it's a Form Action which started a render into the form\r\nwhich then suspended on the action. The action then caused a refresh,\r\nwhich interrupts with its own update that's blocked before rendering.\r\nSuspended roots like this is interesting because we could in theory\r\nstart working on a different root in the meantime which makes this\r\ntimeline less linear."
        }
      },
      {
        "sha": "5d19e1c8d1a6c0b5cd7532d43b707191eaf105b7",
        "commit": {
          "message": "Fix: profiling crashes #30661 #28838 (#31024)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nProfiling fails sometimes because `onProfilingStatus` is called\r\nrepeatedly on some occasions, e.g. multiple calls to\r\n`getProfilingStatus`.\r\n\r\nSubsequent calls should be a no-op if the profiling status hasn't\r\nchanged.\r\n\r\nReported via #30661 #28838.\r\n\r\n> [!TIP]\r\n> Hide whitespace changes on this PR\r\n\r\n<img width=\"328\" alt=\"screenshot showing the UI controls for hiding\r\nwhitespace changes on GitHub\"\r\nsrc=\"https://github.com/user-attachments/assets/036385cf-2610-4e69-a717-17c05d7ef047\">\r\n\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\nTested as part of Fusebox implementation of reload-to-profile.\r\n\r\nhttps://github.com/facebook/react/pull/31021?#discussion_r1770589753"
        }
      },
      {
        "sha": "4e9540e3c2a8f9ae56318b967939c99b3a815190",
        "commit": {
          "message": "[Fiber] Log the Render/Commit phases and the gaps in between (#31016)\n\nA slight behavior change here too is that I now mark the start of the\r\ncommit phase before the BeforeMutationEffect phase. This affects\r\n`<Profiler>` too.\r\n\r\nThe named sequences are as follows:\r\n\r\nRender -> Suspended or Throttled -> Commit -> Waiting for Paint ->\r\nRemaining Effects\r\n\r\nThe Suspended phase is only logged if we delay the Commit due to CSS /\r\nimages.\r\n\r\nThe Throttled phase is only logged if we delay the commit due to the\r\nSuspense throttling timer.\r\n\r\n<img width=\"1246\" alt=\"Screenshot 2024-09-20 at 9 14 23 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/8d01f444-bb85-472b-9b42-6157d92c81b4\">\r\n\r\nI don't yet log render phases that don't complete. I think I also need\r\nto special case renders that or don't commit after being suspended."
        }
      },
      {
        "sha": "79bcf6eb23cd781bedbfccfe8d1507d18fd2c623",
        "commit": {
          "message": "Fix missing trailing / in commit artifacts workflow\n\nThe trailing / was being omitted, so instead of moving the cjs\ndirectory itself, it would move only its contents instead. This broke\nsome internal path assumptions.\n\nAdditionally, updates the step to create the react-dom directory prior\nto moving.\n\nghstack-source-id: b6eedb0c88cd3aa3a786a3d3d280ede5ee81a063\nPull Request resolved: https://github.com/facebook/react/pull/31026"
        }
      },
      {
        "sha": "5b19dc0f06e92d3ed0aa93be3c5bbe2298da5df6",
        "commit": {
          "message": "Allow forcing a build in artifacts workflow dispatch\n\nSometimes it is useful to bypass the revision check when we need to make\nchanges to the runtime_commit_artifacts script. The `force` input can be\npassed via the GitHub UI for manual runs of the workflow.\n\nghstack-source-id: cf9e32c01a565d86980277115f41e3e116adf376\nPull Request resolved: https://github.com/facebook/react/pull/31027"
        }
      },
      {
        "sha": "4708fb92c24bbc769acbc075de6105590fd29edc",
        "commit": {
          "message": "Fix runtime_commit_artifacts workflow\n\nI messed up the yml syntax and also realized that our script doesn't\ncurrently handle renames or deletes, so I fixed that\n\nghstack-source-id: 7d481a951abaabd1a2985c8959d8acb7103ed12e\nPull Request resolved: https://github.com/facebook/react/pull/31028"
        }
      },
      {
        "sha": "04bd67a4906d387ecdb8cbc798144dec2db811a5",
        "commit": {
          "message": "Resolve references to deduped owner objects (#30549)\n\nThis is a follow-up from #30528 to not only handle props (the critical\r\nchange), but also the owner ~and stack~ of a referenced element.\r\n\r\n~Handling stacks here is rather academic because the Flight Server\r\ncurrently does not deduplicate owner stacks. And if they are really\r\nidentical, we should probably just dedupe the whole element.~ EDIT:\r\nRemoved from the PR.\r\n\r\nHandling owner objects on the other hand is an actual requirement as\r\nreported in https://github.com/vercel/next.js/issues/69545. This problem\r\nonly affects the stable release channel, as the absence of owner stacks\r\nallows for the specific kind of shared owner deduping as demonstrated in\r\nthe unit test."
        }
      },
      {
        "sha": "fc4a33eaa9c935ac860ab6043b95d55540068571",
        "commit": {
          "message": "fix: consider alternate as a key for componentLogsEntry when inspecting raw fiber instance (#31009)\n\nRelated - https://github.com/facebook/react/pull/30899.\r\n\r\nLooks like this was missed. We actually do this when we record errors\r\nand warnings before sending them via Bridge:\r\n\r\nhttps://github.com/facebook/react/blob/e4953922a99b5477c3bcf98cdaa2b13ac0a81f0d/packages/react-devtools-shared/src/backend/fiber/renderer.js#L2169-L2173\r\n\r\nSo, what is happening in the end, errors or warnings are displayed in\r\nthe Tree, but when user clicks on the component, nothing is shown,\r\nbecause `fiberToComponentLogsMap` has only `alternate` as a key."
        }
      },
      {
        "sha": "a15bbe14751287cb7ac124ff88f694d0883f3ac6",
        "commit": {
          "message": "refactor: data source for errors and warnings tracking is now in Store (#31010)\n\nStacked on https://github.com/facebook/react/pull/31009.\r\n\r\n1. Instead of keeping `showInlineWarningsAndErrors` in `Settings`\r\ncontext (which was removed in\r\nhttps://github.com/facebook/react/pull/30610), `Store` will now have a\r\nboolean flag, which controls if the UI should be displaying information\r\nabout errors and warnings.\r\n2. The errors and warnings counters in the Tree view are now counting\r\nonly unique errors. This makes more sense, because it is part of the\r\nElements Tree view, so ideally it should be showing number of components\r\nwith errors and number of components of warnings. Consider this example:\r\n2.1. Warning for element `A` was emitted once and warning for element\r\n`B` was emitted twice.\r\n2.2. With previous implementation, we would show `3 ⚠️`, because in\r\ntotal there were 3 warnings in total. If user tries to iterate through\r\nthese, it will only take 2 steps to do the full cycle, because there are\r\nonly 2 elements with warnings (with one having same warning, which was\r\nemitted twice).\r\n2.3 With current implementation, we would show `2 ⚠️`. Inspecting the\r\nelement with doubled warning will still show the warning counter (2)\r\nbefore the warning message.\r\n\r\nWith these changes, the feature correctly works.\r\nhttps://fburl.com/a7fw92m4"
        }
      },
      {
        "sha": "d2e9b9b4dc22639e2c51fb34e9388b9971ee3e27",
        "commit": {
          "message": "React DevTools 5.3.1 -> 6.0.0 (#31058)\n\nFull list of changes:\r\n* refactor: data source for errors and warnings tracking is now in Store\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31010](https://github.com/facebook/react/pull/31010))\r\n* fix: consider alternate as a key for componentLogsEntry when\r\ninspecting raw fiber instance ([hoxyq](https://github.com/hoxyq) in\r\n[#31009](https://github.com/facebook/react/pull/31009))\r\n* Fix: profiling crashes #30661 #28838\r\n([EdmondChuiHW](https://github.com/EdmondChuiHW) in\r\n[#31024](https://github.com/facebook/react/pull/31024))\r\n* chore: remove using local storage for persisting console settings on\r\nthe frontend ([hoxyq](https://github.com/hoxyq) in\r\n[#31002](https://github.com/facebook/react/pull/31002))\r\n* feat: display message if user ended up opening hook script\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#31000](https://github.com/facebook/react/pull/31000))\r\n* feat: expose installHook with settings argument from\r\nreact-devtools-core/backend ([hoxyq](https://github.com/hoxyq) in\r\n[#30987](https://github.com/facebook/react/pull/30987))\r\n* chore: remove settings manager from react-devtools-core\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30986](https://github.com/facebook/react/pull/30986))\r\n* feat[react-devtools/extension]: use chrome.storage to persist settings\r\nacross sessions ([hoxyq](https://github.com/hoxyq) in\r\n[#30636](https://github.com/facebook/react/pull/30636))\r\n* refactor[react-devtools]: propagate settings from global hook object\r\nto frontend ([hoxyq](https://github.com/hoxyq) in\r\n[#30610](https://github.com/facebook/react/pull/30610))\r\n* chore[react-devtools]: extract some utils into separate modules to\r\nunify implementations ([hoxyq](https://github.com/hoxyq) in\r\n[#30597](https://github.com/facebook/react/pull/30597))\r\n* refactor[react-devtools]: move console patching to global hook\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30596](https://github.com/facebook/react/pull/30596))\r\n* refactor[react-devtools]: remove browserTheme from\r\nConsolePatchSettings ([hoxyq](https://github.com/hoxyq) in\r\n[#30566](https://github.com/facebook/react/pull/30566))\r\n* feat[react-devtools]: add settings to global hook object\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30564](https://github.com/facebook/react/pull/30564))\r\n* fix: add Error prefix to Error objects names\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30969](https://github.com/facebook/react/pull/30969))\r\n* Add enableComponentPerformanceTrack Flag\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30960](https://github.com/facebook/react/pull/30960))\r\n* fix[rdt/fiber/renderer.js]: getCurrentFiber can be injected as null\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30968](https://github.com/facebook/react/pull/30968))\r\n* disable `enableSiblingPrerendering` in experimental channel\r\n([gnoff](https://github.com/gnoff) in\r\n[#30952](https://github.com/facebook/react/pull/30952))\r\n* refactor[react-devtools]: initialize renderer interface early\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30946](https://github.com/facebook/react/pull/30946))\r\n* Start prerendering Suspense retries immediately\r\n([acdlite](https://github.com/acdlite) in\r\n[#30934](https://github.com/facebook/react/pull/30934))\r\n* refactor[Agent/Store]: Store to send messages only after Agent is\r\ninitialized ([hoxyq](https://github.com/hoxyq) in\r\n[#30945](https://github.com/facebook/react/pull/30945))\r\n* refactor[RendererInterface]: expose onErrorOrWarning and\r\ngetComponentStack ([hoxyq](https://github.com/hoxyq) in\r\n[#30931](https://github.com/facebook/react/pull/30931))\r\n* Implement getComponentStack and onErrorOrWarning for replayed Flight\r\nlogs ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30930](https://github.com/facebook/react/pull/30930))\r\n* Use Unicode Atom Symbol instead of Atom Emoji\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30832](https://github.com/facebook/react/pull/30832))\r\n* Improve Layering Between Console and Renderer\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30925](https://github.com/facebook/react/pull/30925))\r\n* Add Map for Server Component Logs\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30905](https://github.com/facebook/react/pull/30905))\r\n* Delete fiberToFiberInstanceMap\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30900](https://github.com/facebook/react/pull/30900))\r\n* Add Flight Renderer ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30906](https://github.com/facebook/react/pull/30906))\r\n* Refactor Error / Warning Count Tracking\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30899](https://github.com/facebook/react/pull/30899))\r\n* [flow] Upgrade Flow to 0.245.2\r\n([SamChou19815](https://github.com/SamChou19815) in\r\n[#30919](https://github.com/facebook/react/pull/30919))\r\n* Separate RDT Fusebox into single-panel entry points\r\n([huntie](https://github.com/huntie) in\r\n[#30708](https://github.com/facebook/react/pull/30708))\r\n* Build Updater List from the Commit instead of Map\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30897](https://github.com/facebook/react/pull/30897))\r\n* Simplify Context Change Tracking in Profiler\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30896](https://github.com/facebook/react/pull/30896))\r\n* Remove use of .alternate in root and recordProfilingDurations\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30895](https://github.com/facebook/react/pull/30895))\r\n* Handle reordered contexts in Profiler\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30887](https://github.com/facebook/react/pull/30887))\r\n* Refactor Forcing Fallback / Error of Suspense / Error Boundaries\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30870](https://github.com/facebook/react/pull/30870))\r\n* Avoid getFiberIDUnsafe in debug() Helper\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30878](https://github.com/facebook/react/pull/30878))\r\n* Include some Filtered Fiber Instances\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30865](https://github.com/facebook/react/pull/30865))\r\n* Track root instances in a root Map\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30875](https://github.com/facebook/react/pull/30875))\r\n* Track all public HostInstances in a Map\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30831](https://github.com/facebook/react/pull/30831))\r\n* Support VirtualInstances in findAllCurrentHostInstances\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30853](https://github.com/facebook/react/pull/30853))\r\n* Add Filtering of Environment Names\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30850](https://github.com/facebook/react/pull/30850))\r\n* Support secondary environment name when it changes\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30842](https://github.com/facebook/react/pull/30842))\r\n* Increase max payload for websocket in standalone app\r\n([runeb](https://github.com/runeb) in\r\n[#30848](https://github.com/facebook/react/pull/30848))\r\n* Filter Server Components\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30839](https://github.com/facebook/react/pull/30839))\r\n* Track virtual instances on the tracked path for selections\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30802](https://github.com/facebook/react/pull/30802))\r\n* Remove displayName from inspected data\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30841](https://github.com/facebook/react/pull/30841))\r\n* chore[react-devtools/hook]: remove unused native values\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30827](https://github.com/facebook/react/pull/30827))\r\n* chore[react-devtools/extensions]: remove unused storage permission\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30826](https://github.com/facebook/react/pull/30826))\r\n* fix[react-devtools/extensions]: fixed tabs API calls and displaying\r\nrestricted access popup ([hoxyq](https://github.com/hoxyq) in\r\n[#30825](https://github.com/facebook/react/pull/30825))\r\n* feat[react-devtools]: support Manifest v3 for Firefox extension\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30824](https://github.com/facebook/react/pull/30824))\r\n* Reconcile Fibers Against Previous Children Instances\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30822](https://github.com/facebook/react/pull/30822))\r\n* Remove findCurrentFiberUsingSlowPathByFiberInstance\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30818](https://github.com/facebook/react/pull/30818))\r\n* Track Tree Base Duration of Virtual Instances\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30817](https://github.com/facebook/react/pull/30817))\r\n* Use Owner Stacks to Implement View Source of a Server Component\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30798](https://github.com/facebook/react/pull/30798))\r\n* Make function inspection instant\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30786](https://github.com/facebook/react/pull/30786))\r\n* Make Functions Clickable to Jump to Definition\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30769](https://github.com/facebook/react/pull/30769))\r\n* Support REACT_LEGACY_ELEMENT_TYPE for formatting JSX\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30779](https://github.com/facebook/react/pull/30779))\r\n* Find owners from the parent path that matches the Fiber or\r\nReactComponentInfo ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30717](https://github.com/facebook/react/pull/30717))\r\n* [Flight/DevTools] Pass the Server Component's \"key\" as Part of the\r\nReactComponentInfo ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30703](https://github.com/facebook/react/pull/30703))\r\n* Hide props section if it is null\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30696](https://github.com/facebook/react/pull/30696))\r\n* Support Server Components in Tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30684](https://github.com/facebook/react/pull/30684))\r\n* fix[react-devtools/InspectedElement]: fixed border stylings when some\r\nof the panels are not rendered ([hoxyq](https://github.com/hoxyq) in\r\n[#30676](https://github.com/facebook/react/pull/30676))\r\n* Compute new reordered child set from the instance tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30668](https://github.com/facebook/react/pull/30668))\r\n* Unmount instance by walking the instance tree instead of the fiber\r\ntree ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30665](https://github.com/facebook/react/pull/30665))\r\n* Further Refactoring of Unmounts\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30658](https://github.com/facebook/react/pull/30658))\r\n* Remove lodash.throttle ([sebmarkbage](https://github.com/sebmarkbage)\r\nin [#30657](https://github.com/facebook/react/pull/30657))\r\n* Unmount by walking previous nodes no longer in the new tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30644](https://github.com/facebook/react/pull/30644))\r\n* Build up DevTools Instance Shadow Tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30625](https://github.com/facebook/react/pull/30625))\r\n* chore[packages/react-devtools]: remove unused index.js\r\n([hoxyq](https://github.com/hoxyq) in\r\n[#30579](https://github.com/facebook/react/pull/30579))\r\n* Track DOM nodes to Fiber map for HostHoistable Resources\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30590](https://github.com/facebook/react/pull/30590))\r\n* Rename mountFiberRecursively/updateFiberRecursively\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30586](https://github.com/facebook/react/pull/30586))\r\n* Allow Highlighting/Inspect HostSingletons/Hoistables and Resources\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30584](https://github.com/facebook/react/pull/30584))\r\n* chore[react-devtools]: add global for native and use it to fork\r\nbackend implementation ([hoxyq](https://github.com/hoxyq) in\r\n[#30533](https://github.com/facebook/react/pull/30533))\r\n* Enable pointEvents while scrolling\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30560](https://github.com/facebook/react/pull/30560))\r\n* Make Element Inspection Feel Snappy\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30555](https://github.com/facebook/react/pull/30555))\r\n* Track the parent DevToolsInstance while mounting a tree\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30542](https://github.com/facebook/react/pull/30542))\r\n* Add DevToolsInstance to Store Stateful Information\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30517](https://github.com/facebook/react/pull/30517))\r\n* Implement \"best renderer\" by taking the inner most matched node\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30494](https://github.com/facebook/react/pull/30494))\r\n* Rename NativeElement to HostInstance in the Bridge\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30491](https://github.com/facebook/react/pull/30491))\r\n* Rename Fiber to Element in the Bridge Protocol and RendererInterface\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30490](https://github.com/facebook/react/pull/30490))\r\n* Stop filtering owner stacks\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30438](https://github.com/facebook/react/pull/30438))\r\n* [Fiber] Call life-cycles with a react-stack-bottom-frame stack frame\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30429](https://github.com/facebook/react/pull/30429))\r\n* [Flight] Prefix owner stacks added to the console.log with the current\r\nstack ([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30427](https://github.com/facebook/react/pull/30427))\r\n* [BE] switch to hermes parser for prettier\r\n([kassens](https://github.com/kassens) in\r\n[#30421](https://github.com/facebook/react/pull/30421))\r\n* Implement Owner Stacks ([sebmarkbage](https://github.com/sebmarkbage)\r\nin [#30417](https://github.com/facebook/react/pull/30417))\r\n* [BE] upgrade prettier to 3.3.3 ([kassens](https://github.com/kassens)\r\nin [#30420](https://github.com/facebook/react/pull/30420))\r\n* [ci] Add yarn_test_build job to gh actions\r\n* [Fizz] Refactor Component Stack Nodes\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30298](https://github.com/facebook/react/pull/30298))\r\n* Print component stacks as error objects to get source mapping\r\n([sebmarkbage](https://github.com/sebmarkbage) in\r\n[#30289](https://github.com/facebook/react/pull/30289))\r\n* Upgrade flow to 0.235.0 ([kassens](https://github.com/kassens) in\r\n[#30118](https://github.com/facebook/react/pull/30118))\r\n* fix: path handling in react devtools\r\n([Jack-Works](https://github.com/Jack-Works) in\r\n[#29199](https://github.com/facebook/react/pull/29199))"
        }
      },
      {
        "sha": "f9ebd85a196948be17efdd6774b4d0464b3b1f53",
        "commit": {
          "message": "Increase nested update limit to 100 (#31061)\n\nWe're seeing the limit hit in some tests after enabling sibling\r\nprerendering. Let's bump the limit so we can run more tests and gather\r\nmore signal on the changes. When we understand the scope of the problem\r\nwe can determine whether we need to change how the updates are counted\r\nin prerenders and/or fix specific areas of product code."
        }
      },
      {
        "sha": "3c7667a694face1827356a7c90ee6f86a9c0baa0",
        "commit": {
          "message": "Unify perform{Sync,Concurrent}WorkOnRoot implementation (#31029)\n\nOver time the behavior of these two paths has converged to be\r\nessentially the same. So this merges them back into one function. This\r\nshould save some code size and also make it harder for the behavior to\r\naccidentally diverge. (For the same reason, rolling out this change\r\nmight expose some areas where we had already accidentally diverged.)"
        }
      },
      {
        "sha": "0f1856c49febe96923e469f98c0b123130ea015c",
        "commit": {
          "message": "Make prerendering always non-blocking (#31056)\n\nWhen a synchronous update suspends, and we prerender the siblings, the\r\nprerendering should be non-blocking so that we can immediately restart\r\nonce the data arrives.\r\n\r\nThis happens automatically when there's a Suspense boundary, because we\r\nimmediately commit the boundary and then proceed to a Retry render,\r\nwhich are always concurrent. When there's not a Suspense boundary, there\r\nis no Retry, so we need to take care to switch from the synchronous work\r\nloop to the concurrent one, to enable time slicing."
        }
      },
      {
        "sha": "778e1ed2e5ec22d4bac48e14167d3b4a6b28e8b8",
        "commit": {
          "message": "[Fiber] Fix missing render times when we cancel a pending commit (#31065)"
        }
      },
      {
        "sha": "d66fa02a303fc53d901bdb0d7bbdaec3e6774b19",
        "commit": {
          "message": "fix: use public instance in Fiber renderer and expose it from getInspectorDataForViewAtPoint (#31068)\n\nReact DevTools no longer operates with just Fibers, it now builds its\r\nown Shadow Tree, which represents the tree on the Host (Fabric on\r\nNative, DOM on Web).\r\n\r\nWe have to keep track of public instances for a select-to-inspect\r\nfeature. We've recently changed this logic in\r\nhttps://github.com/facebook/react/pull/30831, and looks like we've been\r\nincorrectly getting a public instance for Fabric case.\r\n\r\nNot only this, turns out that all `getInspectorData...` APIs are\r\nreturning Fibers, and not public instances. I have to expose it, so that\r\nReact DevTools can correctly identify the element, which was selected.\r\n\r\nChanges for React Native are in\r\n[D63421463](https://www.internalfb.com/diff/D63421463)"
        }
      },
      {
        "sha": "f8024b0686c87634b233262e8a05e4a37a292e87",
        "commit": {
          "message": "refactor: allow custom impl of backend realod-to-profile support check (#31048)\n\n<!--\r\n  Thanks for submitting a pull request!\r\nWe appreciate you spending the time to work on these changes. Please\r\nprovide enough information so that others can review your pull request.\r\nThe three fields below are mandatory.\r\n\r\nBefore submitting a pull request, please make sure the following is\r\ndone:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create\r\nyour branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch\r\nTestName` is helpful in development.\r\n5. Run `yarn test --prod` to test in the production environment. It\r\nsupports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn test --debug --watch TestName`,\r\nopen `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with\r\n[prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only\r\ncheck changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\nLearn more about contributing:\r\nhttps://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nIn preparation to support reload-to-profile in Fusebox (#31021), we need\r\na way to check capability of different backends, e.g. web vs React\r\nNative.\r\n\r\n## How did you test this change?\r\n\r\n<!--\r\nDemonstrate the code is solid. Example: The exact commands you ran and\r\ntheir output, screenshots / videos if the pull request changes the user\r\ninterface.\r\nHow exactly did you verify that your PR solves the issue you wanted to\r\nsolve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n\r\n* Default, e.g. existing web impl = no-op\r\n* Custom impl: is called"
        }
      },
      {
        "sha": "9927ab238bde0a2dcadc881e56d6a87208e93e45",
        "commit": {
          "message": "Bump rollup from 4.13.2 to 4.22.4 in /compiler (#31039)\n\nBumps [rollup](https://github.com/rollup/rollup) from 4.13.2 to 4.22.4.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/rollup/rollup/releases\">rollup's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>v4.22.4</h2>\r\n<h2>4.22.4</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS\r\nbundles when run in a browser context (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5671\">#5671</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5670\">#5670</a>:\r\nrefactor: Use object.prototype to check for reserved properties (<a\r\nhref=\"https://github.com/YuHyeonWook\"><code>@​YuHyeonWook</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5671\">#5671</a>:\r\nFix DOM Clobbering CVE (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v4.22.3</h2>\r\n<h2>4.22.3</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Ensure that mutations in modules without side effects are observed\r\nwhile properly handling transitive dependencies (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5669\">#5669</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5669\">#5669</a>:\r\nEnsure impure dependencies of pure modules are added (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v4.22.2</h2>\r\n<h2>4.22.2</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert fix for side effect free modules until other issues are\r\ninvestigated (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5667\">#5667</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5667\">#5667</a>:\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5658\">#5658</a>\r\nand re-apply <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n(<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v4.22.1</h2>\r\n<h2>4.22.1</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n&quot;stable chunk hashes&quot; while issues are being investigated</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/rollup/rollup/blob/master/CHANGELOG.md\">rollup's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h2>4.22.4</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS\r\nbundles when run in a browser context (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5671\">#5671</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5670\">#5670</a>:\r\nrefactor: Use object.prototype to check for reserved properties (<a\r\nhref=\"https://github.com/YuHyeonWook\"><code>@​YuHyeonWook</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5671\">#5671</a>:\r\nFix DOM Clobbering CVE (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.3</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Ensure that mutations in modules without side effects are observed\r\nwhile properly handling transitive dependencies (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5669\">#5669</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5669\">#5669</a>:\r\nEnsure impure dependencies of pure modules are added (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.2</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert fix for side effect free modules until other issues are\r\ninvestigated (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5667\">#5667</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5667\">#5667</a>:\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5658\">#5658</a>\r\nand re-apply <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n(<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.1</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n&quot;stable chunk hashes&quot; while issues are being investigated</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5663\">#5663</a>:\r\nchore(deps): update dependency inquirer to v11 (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot], <a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5664\">#5664</a>:\r\nchore(deps): lock file maintenance minor/patch updates (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot])</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5665\">#5665</a>:\r\nfix: type in CI file (<a\r\nhref=\"https://github.com/YuHyeonWook\"><code>@​YuHyeonWook</code></a>)</li>\r\n</ul>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/79c0aba353ca84c0e22c3cfe9eee433ba83f3670\"><code>79c0aba</code></a>\r\n4.22.4</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/e2552c9e955e0a61f70f508200ee9f752f85a541\"><code>e2552c9</code></a>\r\nFix DOM Clobbering CVE (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5671\">#5671</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/10ab90ea612f80de21c6c433c2d792eaf7b45f1c\"><code>10ab90e</code></a>\r\nrefactor: Use object.prototype to check for reserved properties (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5670\">#5670</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/e1cba8e84a0c01dd16580ba7a2536a988dfb4e18\"><code>e1cba8e</code></a>\r\n4.22.3</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/59cec3e86748369ce887f8fdb4ef7351335ab281\"><code>59cec3e</code></a>\r\nEnsure impure dependencies of pure modules are added (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5669\">#5669</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/b86ffd776cfa906573d36c3f019316d02445d9ef\"><code>b86ffd7</code></a>\r\n4.22.2</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/d5ff63de9e317283f059bde06320bca11cf90488\"><code>d5ff63d</code></a>\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5658\">#5658</a>\r\nand re-apply <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n(<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5667\">#5667</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/0a821d931894f7f6f4ee33285b6f0925e10c8348\"><code>0a821d9</code></a>\r\nCreate SECURITY.md</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/76e962daca5b7352bf199c28fa0a10ad4745c5e7\"><code>76e962d</code></a>\r\n4.22.1</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/68c23da8824e05e84460a9a5bf18c4e91912a52a\"><code>68c23da</code></a>\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a></li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/rollup/rollup/compare/v4.13.2...v4.22.4\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=4.13.2&new-version=4.22.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        }
      },
      {
        "sha": "d0772d586650baa5cf5c676ab1092a075ffdf831",
        "commit": {
          "message": "Bump axios from 1.7.1 to 1.7.4 in /compiler (#30694)\n\nBumps [axios](https://github.com/axios/axios) from 1.7.1 to 1.7.4.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/axios/axios/releases\">axios's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>Release v1.7.4</h2>\r\n<h2>Release notes:</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>sec:</strong> CVE-2024-39338 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6543\">#6543</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a\">6b6b605</a>)</li>\r\n<li><strong>sec:</strong> disregard protocol-relative URL to remediate\r\nSSRF (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/07a661a2a6b9092c4aa640dcc7f724ec5e65bdda\">07a661a</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/levpachmanov\"\r\ntitle=\"+47/-11 ([#6543](https://github.com/axios/axios/issues/6543)\r\n)\">Lev Pachmanov</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/hainenber\"\r\ntitle=\"+49/-4 ([#6539](https://github.com/axios/axios/issues/6539) )\">Đỗ\r\nTrọng Hải</a></li>\r\n</ul>\r\n<h2>Release v1.7.3</h2>\r\n<h2>Release notes:</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>adapter:</strong> fix progress event emitting; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6518\">#6518</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/e3c76fc9bdd03aa4d98afaf211df943e2031453f\">e3c76fc</a>)</li>\r\n<li><strong>fetch:</strong> fix withCredentials request config (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6505\">#6505</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/85d4d0ea0aae91082f04e303dec46510d1b4e787\">85d4d0e</a>)</li>\r\n<li><strong>xhr:</strong> return original config on errors from XHR\r\nadapter (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6515\">#6515</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/8966ee7ea62ecbd6cfb39a905939bcdab5cf6388\">8966ee7</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a\r\nhref=\"https://github.com/DigitalBrainJS\" title=\"+211/-159\r\n([#6518](https://github.com/axios/axios/issues/6518)\r\n[#6519](https://github.com/axios/axios/issues/6519) )\">Dmitriy\r\nMozgovoy</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/ValeraS\"\r\ntitle=\"+3/-3 ([#6515](https://github.com/axios/axios/issues/6515)\r\n)\">Valerii Sidorenko</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/prianyu\"\r\ntitle=\"+2/-2 ([#6505](https://github.com/axios/axios/issues/6505)\r\n)\">prianYu</a></li>\r\n</ul>\r\n<h2>Release v1.7.2</h2>\r\n<h2>Release notes:</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>fetch:</strong> enhance fetch API detection; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6413\">#6413</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/4f79aef81b7c4644328365bfc33acf0a9ef595bc\">4f79aef</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a\r\nhref=\"https://github.com/DigitalBrainJS\" title=\"+3/-3\r\n([#6413](https://github.com/axios/axios/issues/6413) )\">Dmitriy\r\nMozgovoy</a></li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/axios/axios/blob/v1.x/CHANGELOG.md\">axios's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h2><a\r\nhref=\"https://github.com/axios/axios/compare/v1.7.3...v1.7.4\">1.7.4</a>\r\n(2024-08-13)</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>sec:</strong> CVE-2024-39338 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6543\">#6543</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a\">6b6b605</a>)</li>\r\n<li><strong>sec:</strong> disregard protocol-relative URL to remediate\r\nSSRF (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/07a661a2a6b9092c4aa640dcc7f724ec5e65bdda\">07a661a</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/levpachmanov\"\r\ntitle=\"+47/-11 ([#6543](https://github.com/axios/axios/issues/6543)\r\n)\">Lev Pachmanov</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/hainenber\"\r\ntitle=\"+49/-4 ([#6539](https://github.com/axios/axios/issues/6539) )\">Đỗ\r\nTrọng Hải</a></li>\r\n</ul>\r\n<h2><a\r\nhref=\"https://github.com/axios/axios/compare/v1.7.2...v1.7.3\">1.7.3</a>\r\n(2024-08-01)</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>adapter:</strong> fix progress event emitting; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6518\">#6518</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/e3c76fc9bdd03aa4d98afaf211df943e2031453f\">e3c76fc</a>)</li>\r\n<li><strong>fetch:</strong> fix withCredentials request config (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6505\">#6505</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/85d4d0ea0aae91082f04e303dec46510d1b4e787\">85d4d0e</a>)</li>\r\n<li><strong>xhr:</strong> return original config on errors from XHR\r\nadapter (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6515\">#6515</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/8966ee7ea62ecbd6cfb39a905939bcdab5cf6388\">8966ee7</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a\r\nhref=\"https://github.com/DigitalBrainJS\" title=\"+211/-159\r\n([#6518](https://github.com/axios/axios/issues/6518)\r\n[#6519](https://github.com/axios/axios/issues/6519) )\">Dmitriy\r\nMozgovoy</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/ValeraS\"\r\ntitle=\"+3/-3 ([#6515](https://github.com/axios/axios/issues/6515)\r\n)\">Valerii Sidorenko</a></li>\r\n<li><!-- raw HTML omitted --> <a href=\"https://github.com/prianyu\"\r\ntitle=\"+2/-2 ([#6505](https://github.com/axios/axios/issues/6505)\r\n)\">prianYu</a></li>\r\n</ul>\r\n<h2><a\r\nhref=\"https://github.com/axios/axios/compare/v1.7.1...v1.7.2\">1.7.2</a>\r\n(2024-05-21)</h2>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li><strong>fetch:</strong> enhance fetch API detection; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6413\">#6413</a>)\r\n(<a\r\nhref=\"https://github.com/axios/axios/commit/4f79aef81b7c4644328365bfc33acf0a9ef595bc\">4f79aef</a>)</li>\r\n</ul>\r\n<h3>Contributors to this release</h3>\r\n<ul>\r\n<li><!-- raw HTML omitted --> <a\r\nhref=\"https://github.com/DigitalBrainJS\" title=\"+3/-3\r\n([#6413](https://github.com/axios/axios/issues/6413) )\">Dmitriy\r\nMozgovoy</a></li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/abd24a7367726616e60dfc04cb394b4be37cf597\"><code>abd24a7</code></a>\r\nchore(release): v1.7.4 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6544\">#6544</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a\"><code>6b6b605</code></a>\r\nfix(sec): CVE-2024-39338 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)\r\n(<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6543\">#6543</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/07a661a2a6b9092c4aa640dcc7f724ec5e65bdda\"><code>07a661a</code></a>\r\nfix(sec): disregard protocol-relative URL to remediate SSRF (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6539\">#6539</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/c6cce43cd94489f655f4488c5a50ecaf781c94f2\"><code>c6cce43</code></a>\r\nchore(release): v1.7.3 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6521\">#6521</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/e3c76fc9bdd03aa4d98afaf211df943e2031453f\"><code>e3c76fc</code></a>\r\nfix(adapter): fix progress event emitting; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6518\">#6518</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/85d4d0ea0aae91082f04e303dec46510d1b4e787\"><code>85d4d0e</code></a>\r\nfix(fetch): fix withCredentials request config (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6505\">#6505</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/92cd8ed94362f929d3d0ed85ca84296c0ac8fd6d\"><code>92cd8ed</code></a>\r\nchore(github): update ISSUE_TEMPLATE.md (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6519\">#6519</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/8966ee7ea62ecbd6cfb39a905939bcdab5cf6388\"><code>8966ee7</code></a>\r\nfix(xhr): return original config on errors from XHR adapter (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6515\">#6515</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/0e4f9fa29077ebee4499facea6be1492b42e8a26\"><code>0e4f9fa</code></a>\r\nchore(release): v1.7.2 (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6414\">#6414</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/axios/axios/commit/4f79aef81b7c4644328365bfc33acf0a9ef595bc\"><code>4f79aef</code></a>\r\nfix(fetch): enhance fetch API detection; (<a\r\nhref=\"https://redirect.github.com/axios/axios/issues/6413\">#6413</a>)</li>\r\n<li>See full diff in <a\r\nhref=\"https://github.com/axios/axios/compare/v1.7.1...v1.7.4\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=axios&package-manager=npm_and_yarn&previous-version=1.7.1&new-version=1.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\n> **Note**\r\n> Automatic rebases have been disabled on this pull request as it has\r\nbeen open for over 30 days.\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        }
      },
      {
        "sha": "f04b8fc88e83c3cbe670bf6ec46d27cfcb3f52e9",
        "commit": {
          "message": "Bump ws from 6.2.2 to 6.2.3 in /scripts/release (#30463)\n\nBumps [ws](https://github.com/websockets/ws) from 6.2.2 to 6.2.3.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/websockets/ws/releases\">ws's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>6.2.3</h2>\r\n<h1>Bug fixes</h1>\r\n<ul>\r\n<li>Backported e55e5106 to the 6.x release line (eeb76d31).</li>\r\n</ul>\r\n</blockquote>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/websockets/ws/commit/d87f3b6d3a00513af9bbb74f45ba9183af4e5f43\"><code>d87f3b6</code></a>\r\n[dist] 6.2.3</li>\r\n<li><a\r\nhref=\"https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63\"><code>eeb76d3</code></a>\r\n[security] Fix crash when the Upgrade header cannot be read (<a\r\nhref=\"https://redirect.github.com/websockets/ws/issues/2231\">#2231</a>)</li>\r\n<li>See full diff in <a\r\nhref=\"https://github.com/websockets/ws/compare/6.2.2...6.2.3\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ws&package-manager=npm_and_yarn&previous-version=6.2.2&new-version=6.2.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\n> **Note**\r\n> Automatic rebases have been disabled on this pull request as it has\r\nbeen open for over 30 days.\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        }
      },
      {
        "sha": "f7aff7f15c451dc78eb967c726be4f612bcaf966",
        "commit": {
          "message": "Bump express from 4.18.2 to 4.21.0 (#30980)\n\nBumps [express](https://github.com/expressjs/express) from 4.18.2 to\r\n4.21.0.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/expressjs/express/releases\">express's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>4.21.0</h2>\r\n<h2>What's Changed</h2>\r\n<ul>\r\n<li>Deprecate <code>&quot;back&quot;</code> magic string in redirects by\r\n<a href=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5935\">expressjs/express#5935</a></li>\r\n<li>finalhandler@1.3.1 by <a\r\nhref=\"https://github.com/wesleytodd\"><code>@​wesleytodd</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5954\">expressjs/express#5954</a></li>\r\n<li>fix(deps): serve-static@1.16.2 by <a\r\nhref=\"https://github.com/wesleytodd\"><code>@​wesleytodd</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5951\">expressjs/express#5951</a></li>\r\n<li>Upgraded dependency qs to 6.13.0 to match qs in body-parser by <a\r\nhref=\"https://github.com/agadzinski93\"><code>@​agadzinski93</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5946\">expressjs/express#5946</a></li>\r\n</ul>\r\n<h2>New Contributors</h2>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/agadzinski93\"><code>@​agadzinski93</code></a>\r\nmade their first contribution in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5946\">expressjs/express#5946</a></li>\r\n</ul>\r\n<p><strong>Full Changelog</strong>: <a\r\nhref=\"https://github.com/expressjs/express/compare/4.20.0...4.21.0\">https://github.com/expressjs/express/compare/4.20.0...4.21.0</a></p>\r\n<h2>4.20.0</h2>\r\n<h2>What's Changed</h2>\r\n<h3>Important</h3>\r\n<ul>\r\n<li>IMPORTANT: The default <code>depth</code> level for parsing\r\nURL-encoded data is now <code>32</code> (previously was\r\n<code>Infinity</code>)</li>\r\n<li>Remove link renderization in html while using\r\n<code>res.redirect</code></li>\r\n</ul>\r\n<h3>Other Changes</h3>\r\n<ul>\r\n<li>4.19.2 Staging by <a\r\nhref=\"https://github.com/wesleytodd\"><code>@​wesleytodd</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5561\">expressjs/express#5561</a></li>\r\n<li>remove duplicate location test for data uri by <a\r\nhref=\"https://github.com/wesleytodd\"><code>@​wesleytodd</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5562\">expressjs/express#5562</a></li>\r\n<li>feat: document beta releases expectations by <a\r\nhref=\"https://github.com/marco-ippolito\"><code>@​marco-ippolito</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5565\">expressjs/express#5565</a></li>\r\n<li>Cut down on duplicated CI runs by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5564\">expressjs/express#5564</a></li>\r\n<li>Add a Threat Model by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5526\">expressjs/express#5526</a></li>\r\n<li>Assign captain of encodeurl by <a\r\nhref=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5579\">expressjs/express#5579</a></li>\r\n<li>Nominate jonchurch as repo captain for <code>http-errors</code>,\r\n<code>expressjs.com</code>, <code>morgan</code>, <code>cors</code>,\r\n<code>body-parser</code> by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5587\">expressjs/express#5587</a></li>\r\n<li>docs: update Security.md by <a\r\nhref=\"https://github.com/inigomarquinez\"><code>@​inigomarquinez</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5590\">expressjs/express#5590</a></li>\r\n<li>docs: update triage nomination policy by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5600\">expressjs/express#5600</a></li>\r\n<li>Add CodeQL (SAST) by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5433\">expressjs/express#5433</a></li>\r\n<li>docs: add UlisesGascon as triage initiative captain by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5605\">expressjs/express#5605</a></li>\r\n<li>deps: encodeurl@~2.0.0 by <a\r\nhref=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5569\">expressjs/express#5569</a></li>\r\n<li>skip QUERY method test by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5628\">expressjs/express#5628</a></li>\r\n<li>ignore ETAG query test on 21 and 22, reuse skip util by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5639\">expressjs/express#5639</a></li>\r\n<li>add support Node.js@22 in the CI by <a\r\nhref=\"https://github.com/mertcanaltin\"><code>@​mertcanaltin</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5627\">expressjs/express#5627</a></li>\r\n<li>doc: add table of contents, tc/triager lists to readme by <a\r\nhref=\"https://github.com/mertcanaltin\"><code>@​mertcanaltin</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5619\">expressjs/express#5619</a></li>\r\n<li>List and sort all projects, add captains by <a\r\nhref=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5653\">expressjs/express#5653</a></li>\r\n<li>docs: add <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nas captain for cookie-parser by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5666\">expressjs/express#5666</a></li>\r\n<li>✨ bring back query tests for node 21 by <a\r\nhref=\"https://github.com/ctcpip\"><code>@​ctcpip</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5690\">expressjs/express#5690</a></li>\r\n<li>[v4] Deprecate <code>res.clearCookie</code> accepting\r\n<code>options.maxAge</code> and <code>options.expires</code> by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5672\">expressjs/express#5672</a></li>\r\n<li>skip QUERY tests for Node 21 only, still not supported by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5695\">expressjs/express#5695</a></li>\r\n<li>📝 update people, add ctcpip to TC by <a\r\nhref=\"https://github.com/ctcpip\"><code>@​ctcpip</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5683\">expressjs/express#5683</a></li>\r\n<li>remove minor version pinning from ci by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5722\">expressjs/express#5722</a></li>\r\n<li>Fix link variable use in attribution section of CODE OF CONDUCT by\r\n<a href=\"https://github.com/IamLizu\"><code>@​IamLizu</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5762\">expressjs/express#5762</a></li>\r\n<li>Replace Appveyor windows testing with GHA by <a\r\nhref=\"https://github.com/jonchurch\"><code>@​jonchurch</code></a> in <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5599\">expressjs/express#5599</a></li>\r\n<li>Add OSSF Scorecard badge by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5436\">expressjs/express#5436</a></li>\r\n<li>update scorecard link by <a\r\nhref=\"https://github.com/bjohansebas\"><code>@​bjohansebas</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5814\">expressjs/express#5814</a></li>\r\n<li>Nominate <a\r\nhref=\"https://github.com/IamLizu\"><code>@​IamLizu</code></a> to the\r\ntriage team by <a\r\nhref=\"https://github.com/UlisesGascon\"><code>@​UlisesGascon</code></a>\r\nin <a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5836\">expressjs/express#5836</a></li>\r\n<li>deps: path-to-regexp@0.1.8 by <a\r\nhref=\"https://github.com/blakeembrey\"><code>@​blakeembrey</code></a> in\r\n<a\r\nhref=\"https://redirect.github.com/expressjs/express/pull/5603\">expressjs/express#5603</a></li>\r\n</ul>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/expressjs/express/blob/4.21.0/History.md\">express's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h1>4.21.0 / 2024-09-11</h1>\r\n<ul>\r\n<li>Deprecate <code>res.location(&quot;back&quot;)</code> and\r\n<code>res.redirect(&quot;back&quot;)</code> magic string</li>\r\n<li>deps: serve-static@1.16.2\r\n<ul>\r\n<li>includes send@0.19.0</li>\r\n</ul>\r\n</li>\r\n<li>deps: finalhandler@1.3.1</li>\r\n<li>deps: qs@6.13.0</li>\r\n</ul>\r\n<h1>4.20.0 / 2024-09-10</h1>\r\n<ul>\r\n<li>deps: serve-static@0.16.0\r\n<ul>\r\n<li>Remove link renderization in html while redirecting</li>\r\n</ul>\r\n</li>\r\n<li>deps: send@0.19.0\r\n<ul>\r\n<li>Remove link renderization in html while redirecting</li>\r\n</ul>\r\n</li>\r\n<li>deps: body-parser@0.6.0\r\n<ul>\r\n<li>add <code>depth</code> option to customize the depth level in the\r\nparser</li>\r\n<li>IMPORTANT: The default <code>depth</code> level for parsing\r\nURL-encoded data is now <code>32</code> (previously was\r\n<code>Infinity</code>)</li>\r\n</ul>\r\n</li>\r\n<li>Remove link renderization in html while using\r\n<code>res.redirect</code></li>\r\n<li>deps: path-to-regexp@0.1.10\r\n<ul>\r\n<li>Adds support for named matching groups in the routes using a\r\nregex</li>\r\n<li>Adds backtracking protection to parameters without regexes\r\ndefined</li>\r\n</ul>\r\n</li>\r\n<li>deps: encodeurl@~2.0.0\r\n<ul>\r\n<li>Removes encoding of <code>\\</code>, <code>|</code>, and\r\n<code>^</code> to align better with URL spec</li>\r\n</ul>\r\n</li>\r\n<li>Deprecate passing <code>options.maxAge</code> and\r\n<code>options.expires</code> to <code>res.clearCookie</code>\r\n<ul>\r\n<li>Will be ignored in v5, clearCookie will set a cookie with an expires\r\nin the past to instruct clients to delete the cookie</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h1>4.19.2 / 2024-03-25</h1>\r\n<ul>\r\n<li>Improved fix for open redirect allow list bypass</li>\r\n</ul>\r\n<h1>4.19.1 / 2024-03-20</h1>\r\n<ul>\r\n<li>Allow passing non-strings to res.location with new encoding handling\r\nchecks</li>\r\n</ul>\r\n<h1>4.19.0 / 2024-03-20</h1>\r\n<ul>\r\n<li>Prevent open redirect allow list bypass due to encodeurl</li>\r\n<li>deps: cookie@0.6.0</li>\r\n</ul>\r\n<h1>4.18.3 / 2024-02-29</h1>\r\n<ul>\r\n<li>Fix routing requests without method</li>\r\n<li>deps: body-parser@1.20.2\r\n<ul>\r\n<li>Fix strict json error message on Node.js 19+</li>\r\n<li>deps: content-type@~1.0.5</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/7e562c6d8daddff4604f8efaaf9db2cf98c6dcff\"><code>7e562c6</code></a>\r\n4.21.0</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/1bcde96bc87c4704df9a704271d1167064ab56bb\"><code>1bcde96</code></a>\r\nfix(deps): qs@6.13.0 (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5946\">#5946</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/7d364775688be98aaa973302e066d0da9f438997\"><code>7d36477</code></a>\r\nfix(deps): serve-static@1.16.2 (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5951\">#5951</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/40d2d8f2c882712a0f2e4603c38d166c79676b2b\"><code>40d2d8f</code></a>\r\nfix(deps): finalhandler@1.3.1</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/77ada906dba57fd6e308f0d750e01653dbeaddfc\"><code>77ada90</code></a>\r\nDeprecate <code>&quot;back&quot;</code> magic string in redirects (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5935\">#5935</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/21df421ebc7a5249bb31101da666bbf22adc3f18\"><code>21df421</code></a>\r\n4.20.0</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/4c9ddc1c47bf579e55c2fe837d76a952e9fd8959\"><code>4c9ddc1</code></a>\r\nfeat: upgrade to serve-static@0.16.0</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/9ebe5d500d22cbb2b8aaa73446866b084c747971\"><code>9ebe5d5</code></a>\r\nfeat: upgrade to send@0.19.0 (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5928\">#5928</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/ec4a01b6b8814d7b007f36a3023f4dbafdbc3d09\"><code>ec4a01b</code></a>\r\nfeat: upgrade to body-parser@1.20.3 (<a\r\nhref=\"https://redirect.github.com/expressjs/express/issues/5926\">#5926</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553\"><code>54271f6</code></a>\r\nfix: don't render redirect values in anchor href</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/expressjs/express/compare/4.18.2...4.21.0\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<details>\r\n<summary>Maintainer changes</summary>\r\n<p>This version was pushed to npm by <a\r\nhref=\"https://www.npmjs.com/~wesleytodd\">wesleytodd</a>, a new releaser\r\nfor express since your current version.</p>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=express&package-manager=npm_and_yarn&previous-version=4.18.2&new-version=4.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        }
      },
      {
        "sha": "db320ea4d910d360ccb83850ccdbc464a77fc1c5",
        "commit": {
          "message": "Bump rollup from 3.20.0 to 3.29.5 (#31072)\n\nBumps [rollup](https://github.com/rollup/rollup) from 3.20.0 to 3.29.5.\r\n<details>\r\n<summary>Release notes</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/rollup/rollup/releases\">rollup's\r\nreleases</a>.</em></p>\r\n<blockquote>\r\n<h2>v3.29.4</h2>\r\n<h2>3.29.4</h2>\r\n<p><em>2023-09-28</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix static analysis when an exported function uses callbacks (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5158\">#5158</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5158\">#5158</a>:\r\nDeoptimize all parameters when losing track of a function (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v3.29.3</h2>\r\n<h2>3.29.3</h2>\r\n<p><em>2023-09-24</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix a bug where code was wrongly tree-shaken after mutating function\r\nparameters (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5153\">#5153</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5145\">#5145</a>:\r\ndocs: improve the docs repl appearance in the light mode (<a\r\nhref=\"https://github.com/TrickyPi\"><code>@​TrickyPi</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5148\">#5148</a>:\r\nchore(deps): update dependency\r\n<code>@​vue/eslint-config-typescript</code> to v12 (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot])</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5149\">#5149</a>:\r\nchore(deps): lock file maintenance minor/patch updates (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot])</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5153\">#5153</a>:\r\nFully deoptimize first level path when deoptimizing nested parameter\r\npaths (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>v3.29.2</h2>\r\n<h2>3.29.2</h2>\r\n<p><em>2023-09-15</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Export <code>TreeshakingPreset</code> type (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5131\">#5131</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5131\">#5131</a>:\r\nfix: exports <code>TreeshakingPreset</code> (<a\r\nhref=\"https://github.com/moltar\"><code>@​moltar</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5134\">#5134</a>:\r\ndocs: steps to enable symlinks on windows (<a\r\nhref=\"https://github.com/thebanjomatic\"><code>@​thebanjomatic</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5137\">#5137</a>:\r\nchore(deps): lock file maintenance minor/patch updates (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot])</li>\r\n</ul>\r\n<h2>v3.29.1</h2>\r\n<h2>3.29.1</h2>\r\n<p><em>2023-09-10</em></p>\r\n<h3>Bug Fixes</h3>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Changelog</summary>\r\n<p><em>Sourced from <a\r\nhref=\"https://github.com/rollup/rollup/blob/master/CHANGELOG.md\">rollup's\r\nchangelog</a>.</em></p>\r\n<blockquote>\r\n<h1>rollup changelog</h1>\r\n<h2>4.22.4</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Fix a vulnerability in generated code that affects IIFE, UMD and CJS\r\nbundles when run in a browser context (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5671\">#5671</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5670\">#5670</a>:\r\nrefactor: Use object.prototype to check for reserved properties (<a\r\nhref=\"https://github.com/YuHyeonWook\"><code>@​YuHyeonWook</code></a>)</li>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5671\">#5671</a>:\r\nFix DOM Clobbering CVE (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.3</h2>\r\n<p><em>2024-09-21</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Ensure that mutations in modules without side effects are observed\r\nwhile properly handling transitive dependencies (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5669\">#5669</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5669\">#5669</a>:\r\nEnsure impure dependencies of pure modules are added (<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.2</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert fix for side effect free modules until other issues are\r\ninvestigated (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5667\">#5667</a>)</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5667\">#5667</a>:\r\nPartially revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5658\">#5658</a>\r\nand re-apply <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n(<a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<h2>4.22.1</h2>\r\n<p><em>2024-09-20</em></p>\r\n<h3>Bug Fixes</h3>\r\n<ul>\r\n<li>Revert <a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5644\">#5644</a>\r\n&quot;stable chunk hashes&quot; while issues are being investigated</li>\r\n</ul>\r\n<h3>Pull Requests</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://redirect.github.com/rollup/rollup/pull/5663\">#5663</a>:\r\nchore(deps): update dependency inquirer to v11 (<a\r\nhref=\"https://github.com/renovate\"><code>@​renovate</code></a>[bot], <a\r\nhref=\"https://github.com/lukastaegert\"><code>@​lukastaegert</code></a>)</li>\r\n</ul>\r\n<!-- raw HTML omitted -->\r\n</blockquote>\r\n<p>... (truncated)</p>\r\n</details>\r\n<details>\r\n<summary>Commits</summary>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/dfd233d3a9feb18aa69b49b6c1da0248a4f1c6e3\"><code>dfd233d</code></a>\r\n3.29.5</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4\"><code>2ef77c0</code></a>\r\nFix DOM Clobbering CVE</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/a6448b99f725d457e35821b73a865b5c4d4c6a61\"><code>a6448b9</code></a>\r\n3.29.4</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/4e92d60fa90cead39481e3703d26e5d812f43bd1\"><code>4e92d60</code></a>\r\nDeoptimize all parameters when losing track of a function (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5158\">#5158</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/801ffd1a9bebe550b6a0ce665bdca1ead06313de\"><code>801ffd1</code></a>\r\n3.29.3</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/353e4628284b1ef4d8a8b47d895881e5ce6546f4\"><code>353e462</code></a>\r\nFully deoptimize first level path when deoptimizing nested parameter\r\npaths (#...</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/a1a89e77fbe06a23229486194970f0813593e9df\"><code>a1a89e7</code></a>\r\nchore(deps): update dependency\r\n<code>@​vue/eslint-config-typescript</code> to v12 (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5148\">#5148</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/cc14f7070af8c02ac2d477bda043f3203955291d\"><code>cc14f70</code></a>\r\nchore(deps): lock file maintenance minor/patch updates (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5149\">#5149</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/1e8355b2b68811da24e1d96dea32176b403dc377\"><code>1e8355b</code></a>\r\ndocs: improve the docs repl appearance in the light mode (<a\r\nhref=\"https://redirect.github.com/rollup/rollup/issues/5145\">#5145</a>)</li>\r\n<li><a\r\nhref=\"https://github.com/rollup/rollup/commit/5950fc8a6bf6c9f8ef1c7ae05bb8c43d5c313212\"><code>5950fc8</code></a>\r\nAdapt branches in REPL workflow</li>\r\n<li>Additional commits viewable in <a\r\nhref=\"https://github.com/rollup/rollup/compare/v3.20.0...v3.29.5\">compare\r\nview</a></li>\r\n</ul>\r\n</details>\r\n<br />\r\n\r\n\r\n[![Dependabot compatibility\r\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rollup&package-manager=npm_and_yarn&previous-version=3.20.0&new-version=3.29.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\r\n\r\nDependabot will resolve any conflicts with this PR as long as you don't\r\nalter it yourself. You can also trigger a rebase manually by commenting\r\n`@dependabot rebase`.\r\n\r\n[//]: # (dependabot-automerge-start)\r\n[//]: # (dependabot-automerge-end)\r\n\r\n---\r\n\r\n<details>\r\n<summary>Dependabot commands and options</summary>\r\n<br />\r\n\r\nYou can trigger Dependabot actions by commenting on this PR:\r\n- `@dependabot rebase` will rebase this PR\r\n- `@dependabot recreate` will recreate this PR, overwriting any edits\r\nthat have been made to it\r\n- `@dependabot merge` will merge this PR after your CI passes on it\r\n- `@dependabot squash and merge` will squash and merge this PR after\r\nyour CI passes on it\r\n- `@dependabot cancel merge` will cancel a previously requested merge\r\nand block automerging\r\n- `@dependabot reopen` will reopen this PR if it is closed\r\n- `@dependabot close` will close this PR and stop Dependabot recreating\r\nit. You can achieve the same result by closing it manually\r\n- `@dependabot show <dependency name> ignore conditions` will show all\r\nof the ignore conditions of the specified dependency\r\n- `@dependabot ignore this major version` will close this PR and stop\r\nDependabot creating any more for this major version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this minor version` will close this PR and stop\r\nDependabot creating any more for this minor version (unless you reopen\r\nthe PR or upgrade to it yourself)\r\n- `@dependabot ignore this dependency` will close this PR and stop\r\nDependabot creating any more for this dependency (unless you reopen the\r\nPR or upgrade to it yourself)\r\nYou can disable automated security fix PRs for this repo from the\r\n[Security Alerts\r\npage](https://github.com/facebook/react/network/alerts).\r\n\r\n</details>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
        }
      },
      {
        "sha": "64be7b4dccb7b19404b94afdfab955e1c73796df",
        "commit": {
          "message": "[ci] Fix missing values during manual workflow dispatch\n\nIt seems like the github.event.workflow_run payload is only populated\nfor non manual runs of the workflow, so this would crash the manual\ndispatch\n\nTest plan: https://github.com/facebook/react/actions/runs/11017512571\ncompletes\n\nghstack-source-id: fce02b17f85ac4762de0561764785882e767c872\nPull Request resolved: https://github.com/facebook/react/pull/31045"
        }
      },
      {
        "sha": "c900ee0cce3be7703f5abd944611bfe932d5a530",
        "commit": {
          "message": "[ez] Make commit sha clickable for fbsource\n\nghstack-source-id: 1307b9a83a8613c08f11be5397ab45719df00992\nPull Request resolved: https://github.com/facebook/react/pull/31046"
        }
      },
      {
        "sha": "b7f74f39d8979307354f0d5c8a5daa8456ea4f2f",
        "commit": {
          "message": "[ez] Update deprecated action\n\nghstack-source-id: 991b314fd610bcbca68df52149866b2c6d8e6799\nPull Request resolved: https://github.com/facebook/react/pull/31047"
        }
      },
      {
        "sha": "0e9ccde185d0556f8d672689d937b5423476beff",
        "commit": {
          "message": "[dependabot] Remove stale directories from config\n\nghstack-source-id: 570399bc77529bf9fb005149cfd20ba59405b2bc\nPull Request resolved: https://github.com/facebook/react/pull/31073"
        }
      },
      {
        "sha": "b90e440231d3c18a3d9ebbd6a74555e82a16f666",
        "commit": {
          "message": "[dependabot] Ignore all fixture directories\n\nSeems like we can specify a wildcard dependency name to ignore all\ndependencies from being updated. As I understand it dependabot will\nstill run monthly but no PRs will be generated.\n\nghstack-source-id: 64b76bd532663cdc4db10ba6299e791b5908d5b1\nPull Request resolved: https://github.com/facebook/react/pull/31074"
        }
      },
      {
        "sha": "b091ef7e0be078de64721e72b8dc8d7bc33dad29",
        "commit": {
          "message": "fix: update release scripts for react devtools (#31069)\n\nThis has been broken since the migration to GitHub actions.\r\n\r\nPreviously, we've been using `buildId` as an identifier from CircleCI.\r\nI've decided to use a commit hash as an identifier, because I don't know\r\nif there is a better option, and\r\n`scripts/release/download_build_artifacts.js` allows us to download them\r\nfor a specific commit."
        }
      },
      {
        "sha": "204a551eae466ab74ba23870f61dc2b5c71d5ab2",
        "commit": {
          "message": "Add: reload to profile for Fusebox (#31021)\n\n## Summary\r\n\r\nAdd reload to profile for Fusebox \r\n\r\nStacked on #31048. See\r\nhttps://github.com/facebook/react/pull/31021/commits/6be1977112596581f7ce4cfade572f43320ab06f\r\n\r\n## How did you test this change?\r\n\r\nTest E2E in [D63233256](https://www.internalfb.com/diff/D63233256)"
        }
      },
      {
        "sha": "60b1420f18e9473230f23f88fdc7b89fea3dbbfd",
        "commit": {
          "message": "Turn on lazy context propagation for RN and RTR (#31076)\n\nFollowing https://github.com/facebook/react/pull/30935 let's turn this\r\non across the board so we can clean up experiments in RN."
        }
      },
      {
        "sha": "76aee6f39d94caa04c11be92d75d12cb9ee56494",
        "commit": {
          "message": "Revert \"Make prerendering always non-blocking\" (#31080)\n\nReverts facebook/react#31056"
        }
      },
      {
        "sha": "67fee58b1f72754cc77488c40c44e786572ef954",
        "commit": {
          "message": "[Fizz] Start initial work immediately (#31079)\n\nIn a recent update we make Flight start working immediately rather than\r\nwaitin for a new task. This commit updates fizz to have similar\r\nmechanics. We start the render in the currently running task but we do\r\nso in a microtask to avoid reentrancy. This aligns Fizz with Flight.\r\n\r\nref: https://github.com/facebook/react/pull/30961"
        }
      },
      {
        "sha": "d34da5cdb9266ba7928f78107c87383ae211f0f9",
        "commit": {
          "message": "[ci] Fix incorrect sha / commit messages in manual Meta builds\n\nghstack-source-id: 0790b32d293f7b528e458cb4b8718d8c2c422dab\nPull Request resolved: https://github.com/facebook/react/pull/31083"
        }
      },
      {
        "sha": "3edc000d7717027a1ce23611070a56358040a554",
        "commit": {
          "message": "[compiler] Fix broken tests\n\nghstack-source-id: 000a37ae1f819eef676dcd52410d5231cd2d50fe\nPull Request resolved: https://github.com/facebook/react/pull/31078"
        }
      },
      {
        "sha": "db240980a3aeae65f148b1edf5a1187a2331307e",
        "commit": {
          "message": "[playground] Decouple playground from compiler\n\nCurrently the playground is setup as a linked workspace for the\ncompiler which complicates our yarn workspace setup and means that snap\ncan sometimes pull in a different version of react than was otherwise\nspecified.\n\nThere's no real reason to have these workspaces combined so let's split\nthem up.\n\nghstack-source-id: 56ab064b2fc45366f5d96d37c5d4c5dc26590234\nPull Request resolved: https://github.com/facebook/react/pull/31081"
        }
      },
      {
        "sha": "2d16326d9a3f45260aa80bcae78745ab2f199138",
        "commit": {
          "message": "fix[scripts/devtools/publish-release]: parse version list instead of handling 404 (#31087)\n\nDiscovered yesterday while was publishing a new release.\r\n\r\nNPM `10.x.x` changed the text for 404 errors, so this check was failing.\r\nInstead of handling 404 as a signal, I think its better to just parse\r\nthe whole list of versions and check if the new one is already there."
        }
      },
      {
        "sha": "943e45e910d1a125f2be431c2b66f22a035ea0c9",
        "commit": {
          "message": "[compiler][test fixtures] Fork more fixtures for hir-rewrite\n\nFollowup from #30894 , not sure how these got missed. Note that this PR just copies the fixtures without adding `@enablePropagateDepsInHIR`. #31032 follows and actually enables the HIR-version of propagateScopeDeps to run. I split this out into two PRs to make snapshot differences easier to review, but also happy to merge\n\nFixtures found from locally setting snap test runner to default to `enablePropagateDepsInHIR: 'enabled_baseline'` and forking fixtures files with different output.\n\nghstack-source-id: 7d7cf41aa923d83ad49f89079171b0411923ce6b\nPull Request resolved: https://github.com/facebook/react/pull/31030"
        }
      },
      {
        "sha": "1a779207a7b85314e16d410b185d427702f22ebc",
        "commit": {
          "message": "[compiler][test fixtures] Add enablePropagateDepsInHIR to forked tests\n\nAnnotates fixtures added in #31030 with `@enablePropagateDepsInHIR` to fork behavior (and commit snapshot differences)\nghstack-source-id: e423e8c42db62f1bb87562b770761be09fc8ffc6\nPull Request resolved: https://github.com/facebook/react/pull/31031"
        }
      },
      {
        "sha": "8c89fa76430b3d9fbecd6d535c93171d22f0377f",
        "commit": {
          "message": "[compiler][hir-rewrite] Infer non-null props, destructure source\n\nFollowup from #30894.\nThis adds a new flagged mode `enablePropagateScopeDepsInHIR: \"enabled_with_optimizations\"`, under which we infer more hoistable loads:\n- it's always safe to evaluate loads from `props` (i.e. first parameter of a `component`)\n- destructuring sources are safe to evaluate loads from (e.g. given `{x} = obj`, we infer that it's safe to evaluate obj.y)\n- computed load sources are safe to evaluate loads from (e.g. given `arr[0]`, we can infer that it's safe to evaluate arr.length)\n\nghstack-source-id: 32f3bb72e9f85922825579bd785d636f4ccf724d\nPull Request resolved: https://github.com/facebook/react/pull/31033"
        }
      },
      {
        "sha": "58a3ca3b47f6a51cea48ea95ded26c9887baca38",
        "commit": {
          "message": "[compiler][hir-rewrite] Cleanup Identifier -> IdentifierId\n\nSince removing ExitSSA, Identifier and IdentifierId should mean the same thing\n\nghstack-source-id: 076cacbe8360e716b0555088043502823f9ee72e\nPull Request resolved: https://github.com/facebook/react/pull/31034"
        }
      },
      {
        "sha": "5d12e9e10b9957bc131ec77e013e1a76e4f32eb6",
        "commit": {
          "message": "[compiler] repro for dep merging edge case (non-hir)\n\nFound when writing #31037, summary copied from comments:\n\nThis is an extreme edge case and not code we'd expect any reasonable developer to write. In most cases e.g. `(a?.b != null ? a.b : DEFAULT)`, we do want to take a dependency on `a?.b`.\n\nI found this trying to come up with edge cases that break the current dependency + CFG merging logic. I think it makes sense to error on the side of correctness. After all, we still take `a` as a dependency if users write `a != null ? a.b : DEFAULT`, and the same fix (understanding the `<hoistable> != null` test expression) works for both. Can be convinced otherwise though!\n\nghstack-source-id: cc06afda59f7681e228495f5e35a596c20f875f5\nPull Request resolved: https://github.com/facebook/react/pull/31035"
        }
      },
      {
        "sha": "2cbea245cca4044f02c4c231a7f86c8062074579",
        "commit": {
          "message": "[compiler][fixtures] Patch error-handling edge case in snap evaluator\n\nFix edge case in which we incorrectly returned a cached exception instead of trying to rerender with new props.\nghstack-source-id: 843fb85df4a2ae7a88f296104fb16b5f9a34c76e\nPull Request resolved: https://github.com/facebook/react/pull/31082"
        }
      },
      {
        "sha": "c67e241c1656dea4ece22a4ee5c25b6b36d0ca75",
        "commit": {
          "message": "[compiler] Renames and no-op refactor for next PR\n\nRename for clarity:\n- `CollectHoistablePropertyLoads:Tree` -> `CollectHoistablePropertyLoads:PropertyPathRegistry`\n    - `getPropertyLoadNode` -> `getOrCreateProperty`\n    - `getOrCreateRoot` -> `getOrCreateIdentifier`\n- `PropertyLoadNode` -> `PropertyPathNode`\n\nRefactor to CFG joining logic for `CollectHoistablePropertyLoads`. We now write to the same set of inferredNonNullObjects when traversing from entry and exit blocks. This is more correct, as non-nulls inferred from a forward traversal should be included when computing the backward traversal (and vice versa). This fix is needed by an edge case in #31036\n\nAdded invariant into fixed-point iteration to terminate (instead of infinite looping).\n\nghstack-source-id: 1e8eb2d566b649ede93de9a9c13dad09b96416a5\nPull Request resolved: https://github.com/facebook/react/pull/31036"
        }
      },
      {
        "sha": "326832a56d41b4462919f9efe69916712ca87a95",
        "commit": {
          "message": "[Flight] Serialize Error Values (#31104)\n\nThe idea is that the RSC protocol is a superset of Structured Clone.\r\n#25687 One exception that we left out was serializing Error objects as\r\nvalues. We serialize \"throws\" or \"rejections\" as Error (regardless of\r\ntheir type) but not Error values.\r\n\r\nThis fixes that by serializing `Error` objects. We don't include digest\r\nin this case since we don't call `onError` and it's not really expected\r\nthat you'd log it on the server with some way to look it up.\r\n\r\nIn general this is not super useful outside throws. Especially since we\r\nhide their values in prod. However, there is one case where it is quite\r\nuseful. When you replay console logs in DEV you might often log an Error\r\nobject within the scope of a Server Component. E.g. the default RSC\r\nerror handling just console.error and error object.\r\n\r\nBefore this would just be an empty object due to our lax console log\r\nserialization:\r\n<img width=\"1355\" alt=\"Screenshot 2024-09-30 at 2 24 03 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/694b3fd3-f95f-4863-9321-bcea3f5c5db4\">\r\nAfter:\r\n<img width=\"1348\" alt=\"Screenshot 2024-09-30 at 2 36 48 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/834b129d-220d-43a2-a2f4-2eb06921747d\">\r\n\r\nTODO for a follow up: Flight Reply direction. This direction doesn't\r\nactually serialize thrown errors because they always reject the\r\nserialization."
        }
      },
      {
        "sha": "654e387d7eac113ddbf85f8a9029d1af7117679e",
        "commit": {
          "message": "[Flight] Serialize Server Components Props in DEV (#31105)\n\nThis allows us to show props in React DevTools when inspecting a Server\r\nComponent.\r\n\r\nI currently drastically limit the object depth that's serialized since\r\nthis is very implicit and you can have heavy objects on the server.\r\n\r\nWe previously was using the general outlineModel to outline\r\nReactComponentInfo but we weren't consistently using it everywhere which\r\ncould cause some bugs with the parsing when it got deduped on the\r\nclient. It also lead to the weird feature detect of `isReactComponent`.\r\nIt also meant that this serialization was using the plain serialization\r\ninstead of `renderConsoleValue` which means we couldn't safely serialize\r\narbitrary debug info that isn't serializable there.\r\n\r\nSo the main change here is to call `outlineComponentInfo` and have that\r\nalways write every \"Server Component\" instance as outlined and in a way\r\nthat lets its props be serialized using `renderConsoleValue`.\r\n\r\n<img width=\"1150\" alt=\"Screenshot 2024-10-01 at 1 25 05 AM\"\r\nsrc=\"https://github.com/user-attachments/assets/f6e7811d-51a3-46b9-bbe0-1b8276849ed4\">"
        }
      },
      {
        "sha": "40357fe63071950b0bba304657a003755aec4e30",
        "commit": {
          "message": "fix[react-devtools]: request hook initialization inside http server response (#31102)\n\nFixes https://github.com/facebook/react/issues/31100.\r\n\r\nThere are 2 things:\r\n1. In https://github.com/facebook/react/pull/30987, we've introduced a\r\nbreaking change: importing `react-devtools-core` is no longer enough for\r\ninstalling React DevTools global Hook. You need to call `initialize`, in\r\nwhich you may provide initial settings. I am not adding settings here,\r\nbecause it is not implemented, and there are no plans for supporting\r\nthis.\r\n2. Calling `installHook` is not necessary inside `standalone.js`,\r\nbecause this script is running inside Electron wrapper (which is just a\r\nUI, not the app that we are debugging). We will loose the ability to use\r\nReact DevTools on this React application, but I guess thats fine."
        }
      },
      {
        "sha": "9ea5ffa9cba4869474a1d5d53e7d6c135be6adf7",
        "commit": {
          "message": "chore[react-devtools]: add legacy mode error message to the ignore list for tests (#31060)\n\nWithout this, the console gets spammy whenever we run React DevTools\r\ntests against React 18.x, where this deprecation message was added."
        }
      },
      {
        "sha": "6e612587ecfca0ea2e331300635d497d54437930",
        "commit": {
          "message": "chore[react-devtools]: drop legacy context tests (#31059)\n\nWe've dropped the support for detecting changes in legacy Contexts in\r\nhttps://github.com/facebook/react/pull/30896."
        }
      },
      {
        "sha": "d8c90fa48d3addefe4b805ec56a3c65e4ee39127",
        "commit": {
          "message": "Disable infinite render loop detection (#31088)\n\nWe're seeing issues with this feature internally including bugs with\r\nsibling prerendering and errors that are difficult for developers to\r\naction on. We'll turn off the feature for the time being until we can\r\nimprove the stability and ergonomics.\r\n\r\nThis PR does two things:\r\n- Turn off `enableInfiniteLoopDetection` everywhere while leaving it as\r\na variant on www so we can do further experimentation.\r\n- Revert https://github.com/facebook/react/pull/31061 which was a\r\ntemporary change for debugging. This brings the feature back to\r\nbaseline."
        }
      },
      {
        "sha": "99c056abb0dac0e1a15b2c85b620b72c625e065b",
        "commit": {
          "message": "[Flight] Allow aborting encodeReply (#31106)\n\nAllow aborting encoding arguments to a Server Action if a Promise\r\ndoesn't resolve. That way at least part of the arguments can be used on\r\nthe receiving side. This leaves it unresolved in the stream rather than\r\nencoding an error.\r\n\r\nThis should error on the receiving side when the stream closes but it\r\ndoesn't right now in the Edge/Browser versions because closing happens\r\nimmediately before we've had a chance to call `.then()` so the Chunks\r\nare still in pending state. This is an existing bug also in\r\nFlightClient."
        }
      },
      {
        "sha": "459fd418cfbd1f2f1be58efd8c89a0e0ecfb6d44",
        "commit": {
          "message": "Define `HostInstance` type for React Native (#31101)\n\n## Summary\r\n\r\nCreates a new `HostInstance` type for React Native, to more accurately\r\ncapture the intent most developers have when using the `NativeMethods`\r\ntype or `React.ElementRef<HostComponent<T>>`.\r\n\r\nSince `React.ElementRef<HostComponent<T>>` is typed as\r\n`React.AbstractComponent<T, NativeMethods>`, that means\r\n`React.ElementRef<HostComponent<T>>` is equivalent to `NativeMethods`\r\nwhich is equivalent to `HostInstance`.\r\n\r\n\r\n## How did you test this change?\r\n\r\n```\r\n$ yarn\r\n$ yarn flow fabric\r\n```"
        }
      },
      {
        "sha": "0751fac747452af8c0494900b4afa7c56ee7b32c",
        "commit": {
          "message": "[compiler] Optional chaining for dependencies (HIR rewrite)\n\nAdds HIR version of `PropagateScopeDeps` to handle optional chaining.\n\nInternally, this improves memoization on ~4% of compiled files (internal links: [1](https://www.internalfb.com/intern/paste/P1610406497/))\n\nSummarizing the changes in this PR.\n1. `CollectOptionalChainDependencies` recursively traverses optional blocks down to the base. From the base, we build up a set of `baseIdentifier.propertyA?.propertyB` mappings.\nThe tricky bit here is that optional blocks sometimes reference other optional blocks that are *not* part of the same chain e.g. a(c?.d)?.d. See code + comments in `traverseOptionalBlock` for how we avoid concatenating unrelated blocks.\n\n2. Adding optional chains into non-null object calculation.\n(Note that marking `a?.b` as 'non-null' means that `a?.b.c` is safe to evaluate, *not* `(a?.b).c`. Happy to rename this / reword comments accordingly if there's a better term)\nThis pass is split into two stages. (1) collecting non-null objects by block and (2) propagating non-null objects across blocks. The only significant change here was to (2). We add an extra reduce step `X=Reduce(Union(X, Intersect(X_neighbors)))` to merge optional and non-optional nodes (e.g. nonNulls=`{a, a?.b}` reduces to `{a, a.b}`)\n\n3. Adding optional chains into dependency calculation.\nThis was the trickiest. We need to take the \"maximal\" property chain as a dependency. Prior to this PR, we avoided taking subpaths e.g. `a.b` of `a.b.c` as dependencies by only visiting non-PropertyLoad/LoadLocal instructions. This effectively only recorded the property-path at site-of-use.\n\n    Unfortunately, this *quite* doesn't work for optional chains for a few reasons:\n    - We would need to skip relevant `StoreLocal`/`Branch terminal` instructions (but only those within optional blocks that have been successfully read).\n    - Given an optional chain, either (1) only a subpath or (2) the entire path can be represented as a PropertyLoad. We cannot directly add the last hoistable optional-block as a dependency as MethodCalls are an edge case e.g. given a?.b.c(), we should depend on `a?.b`, not `a?.b.c`\n      This means that we add its dependency at either the innermost unhoistable optional-block or when encountering it within its phi-join.\n\n4. Handle optional chains in DeriveMinimalDependenciesHIR.\nThis was also a bit tricky to formulate. Ideally, we would avoid a 2^3 case join (cond | uncond cfg, optional | not optional load, access | dependency). This PR attempts to simplify by building two trees\n    1. First add each hoistable path into a tree containing `Optional | NonOptional` nodes.\n    2. Then add each dependency into another tree containing `Optional | NonOptional`, `Access | Dependency` nodes, truncating the dependency at the earliest non-hoistable node (i.e. non-matching pair when walking the hoistable tree)\n\nghstack-source-id: a2170f26280dfbf65a4893d8a658f863a0fd0c88\nPull Request resolved: https://github.com/facebook/react/pull/31037"
        }
      },
      {
        "sha": "edacbde73f50cc9dc00819d61275cd43f12665c1",
        "commit": {
          "message": "[compiler][hir-rewrite] Check mutability of base identifier when hoisting (#31032)\n\nStack from [ghstack](https://github.com/ezyang/ghstack) (oldest at\r\nbottom):\r\n* #31066\r\n* __->__ #31032\r\n\r\nPrior to this PR, we check whether the property load source (e.g. the\r\nevaluation of `<base>` in `<base>.property`) is mutable + scoped to\r\ndetermine whether the property load itself is eligible for hoisting.\r\nThis changes to check the base identifier of the load.\r\n- This is needed for the next PR #31066. We want to evaluate whether the\r\nbase identifier is mutable within the context of the *outermost\r\nfunction*. This is because all LoadLocals and PropertyLoads within a\r\nnested function declaration have mutable-ranges within the context of\r\nthe function, but the base identifier is a context variable.\r\n- A side effect is that we no longer infer loads from props / other\r\nfunction arguments as mutable in edge cases (e.g. props escaping out of\r\ntry-blocks or being assigned to context variables)"
        }
      },
      {
        "sha": "1460d67c5b9a0d4498b4d22e1a5a6c0ccac85fdd",
        "commit": {
          "message": "[compiler][hir] Only hoist always-accessed PropertyLoads from function decls (#31066)\n\nStack from [ghstack](https://github.com/ezyang/ghstack) (oldest at\r\nbottom):\r\n* __->__ #31066\r\n* #31032\r\n\r\nPrior to this PR, we consider all of a nested function's accessed paths\r\nas 'hoistable' (to the basic block in which the function was defined).\r\nNow, we traverse nested functions and find all paths hoistable to their\r\n*entry block*.\r\n\r\nNote that this only replaces the *hoisting* part of function\r\ndeclarations, not dependencies. This realistically only affects optional\r\nchains within functions, which always get truncated to its inner\r\nnon-optional path (see\r\n[todo-infer-function-uncond-optionals-hoisted.tsx](https://github.com/facebook/react/blob/576f3c0aa898cb99da1b7bf15317756e25c13708/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/propagate-scope-deps-hir-fork/reduce-reactive-deps/todo-infer-function-uncond-optionals-hoisted.tsx))\r\n\r\nSee newly added test fixtures for details\r\n\r\nUpdate: Note that toggling `enableTreatFunctionDepsAsConditional` makes\r\na non-trivial impact on granularity of inferred deps (i.e. we find that\r\nfunction declarations uniquely identify some paths as hoistable).\r\nSnapshot comparison of internal code shows ~2.5% of files get worse\r\ndependencies ([internal\r\nlink](https://www.internalfb.com/phabricator/paste/view/P1625792186))"
        }
      },
      {
        "sha": "91c42a14c7a698fe6baeab770d3c2548fcdf32b4",
        "commit": {
          "message": "[rcr][ez] Clean up unused $read from rcr (#31136)"
        }
      },
      {
        "sha": "68d59d43d5640f7e44b46bfa7ee758de063767b4",
        "commit": {
          "message": "[compiler][ez] Fix reanimated custom type defs for imports (#31137)\n\nWhen we added support for Reanimated, we didn't distinguish between true\r\nglobals (i.e. identifiers with no static resolutions), module types, and\r\nimports #29188. For the past 3-4 months, Reanimated imports were not\r\nbeing matched to the correct hook / function shape we match globals and\r\nmodule imports against two different registries.\r\n\r\nThis PR fixes our support for Reanimated library functions imported\r\nunder `react-native-reanimated`. See test fixtures for details"
        }
      },
      {
        "sha": "b78a7f2f35e554a8647c3262d7f392e68d06febc",
        "commit": {
          "message": "[rcr] Re-export useMemoCache in top level React namespace (#31139)\n\nIn order to support using the compiler on versions of React prior to 19,\r\nwe need the ability to statically import `c` (aka useMemoCache) or\r\nfallback to a polyfill supplied by `react-compiler-runtime` (note: this\r\nis a separate npm package, not to be confused with\r\n`react/compiler-runtime`, which is currently a part of react).\r\n\r\nTo do this we first need to re-export `useMemoCache` under the top level\r\nReact namespace again, which is additive and thus non-breaking. Doing so\r\nallows `react-compiler-runtime` to statically either re-export\r\n`React.__COMPILER_RUNTIME.c` or supply a polyfill, without the need for\r\na dynamic import which is finicky to support due to returning a promise.\r\n\r\nIn later PRs I will remove `react/compiler-runtime` and update the\r\ncompiler to emit imports to `react-compiler-runtime` instead."
        }
      },
      {
        "sha": "d2367f17d9cac8f0325660455beff60a82b618d4",
        "commit": {
          "message": "[rcr] Reexport React.__COMPILER_RUNTIME.c or fallback to polyfill (#31140)\n\nThis PR updates the standalone `react-compiler-runtime` package to\r\neither re-export `React.__COMPILER_RUNTIME.c` or to use a userspace\r\npolyfill."
        }
      },
      {
        "sha": "0e43aa7f7ad5aa88a566cfc50504006d411cc841",
        "commit": {
          "message": "[snap] Remove unnecessary React.c override (#31141)"
        }
      },
      {
        "sha": "68d5288359c86f7761f099cde1c5c0d22f46757d",
        "commit": {
          "message": "[snap] Add react-compiler-runtime as a dependency (#31142)\n\nWe need `react-compiler-runtime` to use the same version of React as\r\nsnap"
        }
      },
      {
        "sha": "8dd4cda3808d83f2565c25f367fb8f16e7a2fc73",
        "commit": {
          "message": "[rcr] Add target flag to compiler (#31143)"
        }
      },
      {
        "sha": "3fd3364107ba1fa0e8edf86ee9cb9562a9be3929",
        "commit": {
          "message": "[rcr] Update default runtimeModule to react-compiler-runtime (#31144)\n\nUpdates the compiler to always import from `react-compiler-runtime` by\r\ndefault. The runtime then decides whether to use the official or\r\nuserspace implementation of useMemoCache."
        }
      },
      {
        "sha": "23cd3aca283817b8c359e806e9c7bc6b26fcd27c",
        "commit": {
          "message": "[rcr] Remove runtimeModule compiler option (#31145)\n\nNow that the compiler always injects `react-compiler-runtime`, this\r\noption is unnecessary."
        }
      },
      {
        "sha": "f74f6cd945675158eb40402041305e7af4ce731c",
        "commit": {
          "message": "[rcr] Publish react-compiler-runtime to npm (#31146)\n\nUpdates our publishing scripts to also publish react-compiler-runtime."
        }
      },
      {
        "sha": "ed966dac4a025fd37580e8197e5b271044ffbd9f",
        "commit": {
          "message": "[compiler] Fix busted postinstall script (#31147)"
        }
      },
      {
        "sha": "bf0c054649f0573c184499bd571f08150152c086",
        "commit": {
          "message": "fix[react-devtools]: wrap key string in preformatted text html element (#31153)\n\nFixes https://github.com/facebook/react/issues/28984."
        }
      },
      {
        "sha": "dbf80c8d7a823041d83baff8b0dca8892ce27411",
        "commit": {
          "message": "fix[react-devtools]: update profiling status before receiving response from backend (#31117)\n\nWe can't wait for a response from Backend, because it might take some\r\ntime to actually finish profiling.\r\n\r\nWe should keep a flag on the frontend side, so user can quickly see the\r\nfeedback in the UI."
        }
      },
      {
        "sha": "389a2deebc2dc41deb268f4b543709989d688d69",
        "commit": {
          "message": "refactor[react-devtools/fiber/renderer]: optimize durations resolution (#31118)\n\nStacked on https://github.com/facebook/react/pull/31117. \r\n\r\nNo need for sending long float numbers and to have resolution less than\r\na microsecond, we end up formatting it on a Frontend side:\r\n\r\nhttps://github.com/facebook/react/blob/6c7b41da3de12be2d95c60181b3fe896f824f13a/packages/react-devtools-shared/src/devtools/views/Profiler/utils.js#L359-L360"
        }
      },
      {
        "sha": "4a86ec5a66d0dd375f8433d380f71ade3e67d5d0",
        "commit": {
          "message": "fix[react-devtools]: removed redundant startProfiling call (#31131)\n\nStacked on https://github.com/facebook/react/pull/31118. See last\r\ncommit.\r\n\r\nWe don't need to call `startProfiling()` here, because we delegate this\r\nto the Renderer itself:\r\n\r\nhttps://github.com/facebook/react/blob/830e823cd2c6ee675636d31320b10350e8ade9ae/packages/react-devtools-shared/src/backend/fiber/renderer.js#L5227-L5232\r\n\r\nSince this is de-facto the constructor of Renderer, this will be called\r\nearlier.\r\n\r\nValidated via testing the reload-to-profile for Chrome browser\r\nextension."
        }
      },
      {
        "sha": "1d8d12005fc9d856c4c936b269adb4f52bf82e47",
        "commit": {
          "message": "fix[react-devtools]: remove all listeners when Agent is shutdown (#31151)\n\nBased on https://github.com/facebook/react/pull/31049, credits to\r\n@EdmondChuiHW.\r\n\r\nWhat is happening here:\r\n1. Once Agent is destroyed, unsubscribe own listeners and bridge\r\nlisteners.\r\n2. [Browser extension only] Once Agent is destroyed, unsubscribe\r\nlisteners from BackendManager.\r\n3. [Browser extension only] I've discovered that `backendManager.js`\r\ncontent script can get injected multiple times by the browser. When\r\nFrontend is initializing, it will create Store first, and then execute a\r\ncontent script for bootstraping backend manager. If Frontend was\r\ndestroyed somewhere between these 2 steps, Backend won't be notified,\r\nbecause it is not initialized yet, so it will not unsubscribe listeners\r\ncorrectly. We might end up duplicating listeners, and the next time\r\nFrontend is launched, it will report an issues \"Cannot add / remove node\r\n...\", because same operations are emitted twice.\r\n\r\nTo reproduce 3 you can do the following:\r\n1. Click reload-to-profile\r\n2. Right after when both app and Chrome DevTools panel are reloaded,\r\nclose Chrome DevTools.\r\n3. Open Chrome DevTools again, open Profiler panel and observe \"Cannot\r\nadd / remove node ...\" error in the UI."
        }
      },
      {
        "sha": "bfe91fbecf183f85fc1c4f909e12a6833a247319",
        "commit": {
          "message": "refactor[react-devtools]: flatten reload and profile config (#31132)\n\nStacked on https://github.com/facebook/react/pull/31131. See last\r\ncommit.\r\n\r\nThis is a clean-up and a pre-requisite for next changes:\r\n1. `ReloadAndProfileConfig` is now split into boolean value and settings\r\nobject. This is mainly because I will add one more setting soon, and\r\nalso because settings might be persisted for a longer time than the flag\r\nwhich signals if the Backend was reloaded for profiling. Ideally, this\r\nsettings should probably be moved to the global Hook object, same as we\r\ndid for console patching.\r\n2. Host is now responsible for reseting the cached values, Backend will\r\nexecute provided `onReloadAndProfileFlagsReset` callback."
        }
      },
      {
        "sha": "d5bba18b5d81f234657586865248c5b6849599cd",
        "commit": {
          "message": "fix[react-devtools]: record timeline data only when supported (#31154)\n\nStacked on https://github.com/facebook/react/pull/31132. See last\r\ncommit.\r\n\r\nThere are 2 issues:\r\n1. We've been recording timeline events, even if Timeline Profiler was\r\nnot supported by the Host. We've been doing this for React Native, for\r\nexample, which would significantly regress perf of recording a profiling\r\nsession, but we were not even using this data.\r\n2. Currently, we are generating component stack for every state update\r\nevent. This is extremely expensive, and we should not be doing this.\r\n\r\nWe can't currently fix the second one, because we would still need to\r\ngenerate all these stacks, and this would still take quite a lot of\r\ntime. As of right now, we can't generate a component stack lazily\r\nwithout relying on the fact that reference to the Fiber is not stale.\r\nWith `enableOwnerStacks` we could populate component stacks in some\r\ncollection, which would be cached at the Backend, and then returned only\r\nonce Frontend asks for it. This approach also eliminates the need for\r\nkeeping a reference to a Fiber."
        }
      },
      {
        "sha": "de43d560a8622fa44ba4162424437125564e906e",
        "commit": {
          "message": "[cleanup] remove flag enableAddPropertiesFastPath (#31062)\n\nThe experiment was tested internally and rolled out, replacing the flag\r\nwith `true`."
        }
      },
      {
        "sha": "f5b8d9378b36e7e2bb9b908752e6a9d250a44c84",
        "commit": {
          "message": "[Flight] Serialize top-level Date (#31163)\n\nrenderModelDesctructive can sometimes be called direclty on Date values.\r\nWhen this happens we don't first call toJSON on the Date value so we\r\nneed to explicitly handle the case where where the rendered value is a\r\nDate instance as well. This change updates renderModelDesctructive to\r\naccount for sometimes receiving Date instances directly."
        }
      },
      {
        "sha": "131ae818a1b4b2599d9748384e0346aaaad1fdbf",
        "commit": {
          "message": "[compiler][ez] Include phi identifier in AssertValidMutableRanges\n\nSummary:\nLooks like we accidentally skipped validating this identifier.\n\nghstack-source-id: 05964331a812d18430b27dd90c3d5fe9dd8d65d8\nPull Request resolved: https://github.com/facebook/react/pull/31170"
        }
      },
      {
        "sha": "566b0b0f14356f6e1a13722cac005c2f94f4c3f9",
        "commit": {
          "message": "[Flight] Don't limit objects that are children of special types (#31160)\n\nWe can't make a special getter to mark the boundary of deep\r\nserialization (which can be used for lazy loading in the future) when\r\nthe parent object is a special object that we parse with\r\ngetOutlinedModel. Such as Map/Set and JSX.\r\n\r\nThis marks the objects that are direct children of those as not possible\r\nto limit.\r\n\r\nI don't love this solution since ideally it would maybe be more local to\r\nthe serialization of a specific object.\r\n\r\nIt also means that very deep trees of only Map/Set never get cut off.\r\nMaybe we should instead override the `get()` and enumeration methods on\r\nthese instead somehow.\r\n\r\nIt's important to have it be a getter though because that's the\r\nmechanism that lets us lazy-load more depth in the future."
        }
      },
      {
        "sha": "38af456a494acb34931c71e31efbccdb53e11174",
        "commit": {
          "message": "[Flight] don't emit chunks for rejected thenables after abort (#31169)\n\nWhen aborting we emit chunks for each pending task. However there was a\r\nbug where a thenable could also reject before we could flush and we end\r\nup with an extra chunk throwing off the pendingChunks bookeeping. When a\r\ntask is retried we skip it if is is not in PENDING status because we\r\nunderstand it was completed some other way. We need to replciate this\r\nfor the reject pathway on serialized thenables since aborting if\r\neffectively completing all pending tasks and not something we need to\r\ncontinue to do once the thenable rejects later."
        }
      },
      {
        "sha": "0f1127b552790e6dc0b65650680237ba4c94d977",
        "commit": {
          "message": "[prettier] Ignore compiler/target (#31168)\n\nAdd missing directory to prettierignore.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31168).\r\n* #31167\r\n* #31166\r\n* #31165\r\n* #31164\r\n* #31148\r\n* __->__ #31168"
        }
      },
      {
        "sha": "b781c9f564d05c7ceaf5d8af2e26966601c0a669",
        "commit": {
          "message": "[compiler] Scaffold fixture library (#31148)\n\nScaffolds an empty library to test backwards compatibility with the\r\ncompiler enabled.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31148).\r\n* #31167\r\n* #31166\r\n* #31165\r\n* #31164\r\n* __->__ #31148\r\n* #31168"
        }
      },
      {
        "sha": "16ac71a650d8ec9f24cd0bd6ebbe9c6d2edf9cb8",
        "commit": {
          "message": "Fix prepare-prerelease script (#31159)"
        }
      },
      {
        "sha": "2ef407937b724a3af5b8ca4d082ecee5005d731b",
        "commit": {
          "message": "[compiler] Scaffold fixture apps (#31164)\n\nScaffold empty apps to consume the fixture lib.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31164).\r\n* #31167\r\n* #31166\r\n* #31165\r\n* __->__ #31164\r\n* #31148\r\n* #31168"
        }
      },
      {
        "sha": "eb0e265cd9dbf3ebcabac52664beefdf64389ad0",
        "commit": {
          "message": "[compiler] Compile lib (#31165)\n\nAdd and compile a simple hook with rollup and babel.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31165).\r\n* #31167\r\n* #31166\r\n* __->__ #31165"
        }
      },
      {
        "sha": "0a1fdeee9ed6d93e2731ce7cc3957a75ce6a6da7",
        "commit": {
          "message": "[compiler] Consume compiled lib in react 18 app (#31166)\n\n`yarn dev` doesn't work quite correctly because of an outdated\r\nassumption in vite-plugin-react, I have a [PR\r\nopen](https://github.com/vitejs/vite-plugin-react/pull/374) to address.\r\n\r\nHowever `yarn build` and `yarn preview` does work as expected.\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31166).\r\n* #31167\r\n* __->__ #31166\r\n* #31165"
        }
      },
      {
        "sha": "77f438931f3da3bfe3dff91825737f06f2637f79",
        "commit": {
          "message": "[compiler] Consume compiled lib in react 19 app (#31167)\n\nit works\r\n---\r\n[//]: # (BEGIN SAPLING FOOTER)\r\nStack created with [Sapling](https://sapling-scm.com). Best reviewed\r\nwith [ReviewStack](https://reviewstack.dev/facebook/react/pull/31167).\r\n* __->__ #31167\r\n* #31166\r\n* #31165"
        }
      },
      {
        "sha": "fbfe37ee4010d36dad795d9144bb88fbeb8e1419",
        "commit": {
          "message": "[compiler] Test fixture: non-reactive phi creates 'dangling ref' scope (#31103)"
        }
      },
      {
        "sha": "70fb1363912a35fc59c1bf648b963c3a0b719b97",
        "commit": {
          "message": "Fix limit without owner stacks (#31179)\n\nMove out of gate."
        }
      },
      {
        "sha": "7b7fac073d1473df839a1caf8d0444c32bf4de49",
        "commit": {
          "message": "[compiler] Represent phis with places rather than identifiers\n\nSummary:\nThe fact that phis are identifiers rather than places is unfortunate in a few cases. In some later analyses, we might wish to know whether a phi is reactive, but we don't have an easy way to do that currently.\n\nMost of the changes here is just replacing phi.id with phi.place.identifier and such. Interesting bits are EnterSSA (several functions now take places rather than identifiers, and InferReactivePlaces now needs to mark places as reactive explicitly.\n\nghstack-source-id: 5f4fb396cd86b421008c37832a5735ac40f8806e\nPull Request resolved: https://github.com/facebook/react/pull/31171"
        }
      },
      {
        "sha": "5636fad840942cfea80301d91e931a50c6370d19",
        "commit": {
          "message": "[string-refs] log string ref from prod (#31161)\n\nIf passed as a feature flag, this calls the configured function when a\r\nstring ref is used even from prod code to find the last usages."
        }
      },
      {
        "sha": "09111202d617477b63507b41e8b6c3101b4afd87",
        "commit": {
          "message": "eslint-plugin-react-hooks: Release 5.0.0 (#31176)\n\nCo-authored-by: lauren <poteto@users.noreply.github.com>"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v18.3.1",
      "body": "- Export `act` from `react` [f1338f](https://github.com/facebook/react/commit/f1338f8080abd1386454a10bbf93d67bfe37ce85)"
    },
    "commits": [
      {
        "sha": "d6c42f7b1134c4f033296ce4d47a7803aa0929df",
        "commit": {
          "message": "Bump to 18.3.1"
        }
      },
      {
        "sha": "f1338f8080abd1386454a10bbf93d67bfe37ce85",
        "commit": {
          "message": "Export `React.act` from 18.3"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v18.3.0",
      "body": "This release is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.\r\n\r\nRead the [React 19 Upgrade Guide](https://react.dev/blog/2024/04/25/react-19-upgrade-guide) for more info.\r\n\r\n### React\r\n\r\n- Allow writing to `this.refs` to support string ref codemod [909071](https://github.com/facebook/react/commit/9090712fd3ca4e1099e1f92e67933c2cb4f32552)\r\n- Warn for deprecated `findDOMNode` outside StrictMode [c3b283](https://github.com/facebook/react/commit/c3b283964108b0e8dbcf1f9eb2e7e67815e39dfb)\r\n- Warn for deprecated `test-utils` methods [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)\r\n- Warn for deprecated Legacy Context outside StrictMode [415ee0](https://github.com/facebook/react/commit/415ee0e6ea0fe3e288e65868df2e3241143d5f7f)\r\n- Warn for deprecated string refs outside StrictMode [#25383](https://github.com/facebook/react/pull/25383)\r\n- Warn for deprecated `defaultProps` for function components [#25699](https://github.com/facebook/react/pull/25699)\r\n- Warn when spreading `key` [#25697](https://github.com/facebook/react/pull/25697)\r\n- Warn when using `act` from `test-utils` [d4ea75](https://github.com/facebook/react/commit/d4ea75dc4258095593b6ac764289f42bddeb835c)\r\n\r\n### React DOM\r\n- Warn for deprecated `unmountComponentAtNode` [8a015b](https://github.com/facebook/react/commit/8a015b68cc060079878e426610e64e86fb328f8d)\r\n- Warn for deprecated `renderToStaticNodeStream` [#28874](https://github.com/facebook/react/pull/28874)\r\n"
    },
    "commits": [
      {
        "sha": "2cfb4741fdf2f9e3a843930d95ee6965fab44b8f",
        "commit": {
          "message": "Bump version from 18.2 to 18.3\n\nWe're going to use this branch to release a minor 18.3 release based off\nthe published 18.2 release revision. This will include some additional\nwarnings to assist in upgrading to React 19, but no behavior changes\ncompared to 18.2.\n\nI bumped the React version to 18.3 and all the other packages by a patch\nrevision (since we're not going to update anything in those)."
        }
      },
      {
        "sha": "c2a246e956a164c7a92a3807c973bf9b56f85a6b",
        "commit": {
          "message": "Turn on string ref deprecation warning for everybody (not codemoddable) (#25383)\n\n## Summary\r\n \r\nAlternate to https://github.com/facebook/react/pull/25334 without any\r\nprod runtime changes i.e. the proposed codemod in\r\nhttps://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#deprecate-string-refs-and-remove-production-mode-_owner-field\r\nwould not work.\r\n\r\n## How did you test this change?\r\n\r\n- [x] CI\r\n- [x] `yarn test` with and without `warnAboutStringRefs`"
        }
      },
      {
        "sha": "73bfaa16e1487d6c4a83ca960a6f0365af2ab440",
        "commit": {
          "message": "Turn on key spread warning in jsx-runtime for everyone (#25697)\n\nThis improves the error message a bit and ensures that we recommend\r\nputting the key first, not last, which ensures that the faster\r\n`jsx-runtime` is used.\r\n\r\nThis only affects the modern \"automatic\" JSX transform."
        }
      },
      {
        "sha": "589423270e8d69fce914f12f7dc7bb61bb7b81de",
        "commit": {
          "message": "Enable warning for defaultProps on function components for everyone (#25699)\n\nThis also fixes a gap where were weren't warning on memo components."
        }
      },
      {
        "sha": "415ee0e6ea0fe3e288e65868df2e3241143d5f7f",
        "commit": {
          "message": "Backport legacy context deprecation warning\n\nThis backports a deprecation warning for legacy context, even when\nStrict Mode is not enabled.\n\nI didn't bother to update all the tests because the tests are in such\na different state than what's on `main`, and on `main` we already\nupdated the tests accordingly. So instead I silenced the warnings in\nour test config, like we've done for other warnings in the past."
        }
      },
      {
        "sha": "7548c019ce44e41301555aac645fbdfcf180e9b9",
        "commit": {
          "message": "Deprecate `renderToStaticNodeStream` (#28872) (#28874)\n\nThis commit adds warnings indicating that `renderToStaticNodeStream`\r\nwill be removed in an upcoming React release. This API has been legacy,\r\nis not widely used (renderToStaticMarkup is more common) and has\r\nsemantically eqiuvalent implementations with renderToReadableStream and\r\nrenderToPipeableStream.\r\n\r\nlanded in main in #28872 \r\nchanged the warning to match renderToNodeStream"
        }
      },
      {
        "sha": "9090712fd3ca4e1099e1f92e67933c2cb4f32552",
        "commit": {
          "message": "Support writing to this.refs from userspace\n\nPreviously, the `refs` property of a class component instance was\nread-only by user code — only React could write to it, and until/unless\na string ref was used, it pointed to a shared empty object that was\nfrozen in dev to prevent userspace mutations.\n\nBecause string refs are deprecated, we want users to be able to codemod\nall their string refs to callback refs. The safest way to do this is to\noutput a callback ref that assigns to `this.refs`.\n\nSo to support this, we need to make `this.refs` writable by userspace."
        }
      },
      {
        "sha": "d4ea75dc4258095593b6ac764289f42bddeb835c",
        "commit": {
          "message": "ReactDOMTestUtils deprecation warnings\n\nAdds a deprecation warning to ReactDOMTestUtils.renderIntoDocument,\nwhich is removed in version 19.\n\nAlso backports the deprecation warning for ReactDOMTestUtils.act."
        }
      },
      {
        "sha": "c3b283964108b0e8dbcf1f9eb2e7e67815e39dfb",
        "commit": {
          "message": "Add deprecation warning for findDOMNode\n\nThis is removed in version 19. We already warned inside of Strict Mode\nbut this adds the warning everywhere."
        }
      },
      {
        "sha": "8a015b68cc060079878e426610e64e86fb328f8d",
        "commit": {
          "message": "Add deprecation warning for unmountComponentAtNode\n\nThis should have been deprecated in 18.0 alongside the other legacy\nDOM APIs like render()."
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v18.2.0",
      "body": "### React DOM\r\n\r\n* Provide a component stack as a second argument to `onRecoverableError`. ([@gnoff](https://github.com/gnoff) in [#24591](https://github.com/facebook/react/pull/24591))\r\n* Fix hydrating into `document` causing a blank page on mismatch. ([@gnoff](https://github.com/gnoff) in [#24523](https://github.com/facebook/react/pull/24523))\r\n* Fix false positive hydration errors with Suspense. ([@gnoff](https://github.com/gnoff) in [#24480](https://github.com/facebook/react/pull/24480) and  [@acdlite](https://github.com/acdlite) in [#24532](https://github.com/facebook/react/pull/24532))\r\n* Fix ignored `setState` in Safari when adding an iframe. ([@gaearon](https://github.com/gaearon) in [#24459](https://github.com/facebook/react/pull/24459))\r\n\r\n### React DOM Server\r\n\r\n* Pass information about server errors to the client. ([@salazarm](https://github.com/salazarm) and [@gnoff](https://github.com/gnoff) in [#24551](https://github.com/facebook/react/pull/24551) and [#24591](https://github.com/facebook/react/pull/24591))\r\n* Allow to provide a reason when aborting the HTML stream. ([@gnoff](https://github.com/gnoff) in [#24680](https://github.com/facebook/react/pull/24680))\r\n* Eliminate extraneous text separators in the HTML where possible. ([@gnoff](https://github.com/gnoff) in [#24630](https://github.com/facebook/react/pull/24630))\r\n* Disallow complex children inside `<title>` elements to match the browser constraints. ([@gnoff](https://github.com/gnoff) in [#24679](https://github.com/facebook/react/pull/24679))\r\n* Fix buffering in some worker environments by explicitly setting `highWaterMark` to `0`. ([@jplhomer](https://github.com/jplhomer) in [#24641](https://github.com/facebook/react/pull/24641))\r\n\r\n### Server Components (Experimental)\r\n\r\n* Add support for `useId()` inside Server Components. ([@gnoff](https://github.com/gnoff)) in [#24172](https://github.com/facebook/react/pull/24172)"
    },
    "commits": [
      {
        "sha": "72b7462fe73ea2f7bc296bc58670baf9677ce8b2",
        "commit": {
          "message": "Bump local package.json versions for 18.1 release (#24447)"
        }
      },
      {
        "sha": "2633a6efc45ed6b4f9b73fa795fcc494dbc22ca9",
        "commit": {
          "message": "Bump `@next` versions (#24448)\n\n18.2 will be the next release"
        }
      },
      {
        "sha": "9c25728d10dac574761359f359e34ca1010a8b11",
        "commit": {
          "message": "Changelog for 18.1 (#24411)\n\n* 1810-changelog\r\n\r\n* Update CHANGELOG.md\r\n\r\nCo-authored-by: Strek <ssharishkumar@gmail.com>\r\n\r\n* Update CHANGELOG.md\r\n\r\nCo-authored-by: Strek <ssharishkumar@gmail.com>"
        }
      },
      {
        "sha": "d78460490be08435ee50025ea792ec4d5a5a999e",
        "commit": {
          "message": "Add date to changelog"
        }
      },
      {
        "sha": "53b95e5511c7cb5364de374a99da728cf256dc4b",
        "commit": {
          "message": "Fill in date in changelog for 18.1 (#24449)"
        }
      },
      {
        "sha": "9f80a48ad464c9240ea7f9d3f37251559cf7fe7e",
        "commit": {
          "message": "Add missing item to the changelog"
        }
      },
      {
        "sha": "340060cccd21b47f364646c894a3406b0f0341ba",
        "commit": {
          "message": "Add @Andarist to changelog credits"
        }
      },
      {
        "sha": "ce13860281f833de8a3296b7a3dad9caced102e9",
        "commit": {
          "message": "Remove enablePersistentOffscreenHostContainer flag (#24460)\n\nThis was a Fabric-related experiment that we ended up not shipping."
        }
      },
      {
        "sha": "6c36aee9443d4b30d13137dbb1660f73522aa3c9",
        "commit": {
          "message": "Fixed wrong method call for LRU cache (#24477)"
        }
      },
      {
        "sha": "99eef9e2df7b6aade461a1a958eb3838239e72c4",
        "commit": {
          "message": "Hide children of Offscreen after destroy effects (#24446)"
        }
      },
      {
        "sha": "b4eb0ad71fb365cb760a5b9ab1a1e2dd6193fac7",
        "commit": {
          "message": "Do not replay erroring beginWork with invokeGuardedCallback when suspended or previously errored (#24480)\n\nWhen hydrating a suspense boundary an error or a suspending fiber can often lead to a cascade of hydration errors. While in many cases these errors are simply discarded (e.g. when teh root does not commit and we fall back to client rendering) the use of invokeGuardedCallback can lead to many of these errors appearing as uncaught in the browser console. This change avoids error replaying using invokeGuardedCallback when we are hydrating a suspense boundary and have either already suspended or we have one previous error which was replayed."
        }
      },
      {
        "sha": "a10a9a6b5b891dd3ce238bf39a6147bb0f3a1d2a",
        "commit": {
          "message": "Add test for hiding children after layout destroy (#24483)"
        }
      },
      {
        "sha": "6cbf0f7fac772c3fd18706d73af00f3fd06a55b5",
        "commit": {
          "message": "Fork ReactSymbols (#24484)\n\n* Fork ReactSymbols\r\n\r\n* Fix tests\r\n\r\n* Update jest config"
        }
      },
      {
        "sha": "c7e494b55320768863b821be96896b28f0a280ef",
        "commit": {
          "message": "[React DevTools] Fix regex for formateWithStyles function (#24486)\n\nThe previous regex to detect string substitutions is not quite right, this PR fixes it by:\r\n\r\nCheck to make sure we are starting either at the beginning of the line or we match a character that's not % to make sure we capture all the % in a row.\r\nMake sure there are an odd number of % (the first X pairs are escaped % characters. The odd % followed by a letter is the string substitution)"
        }
      },
      {
        "sha": "3dc9a8af05f98d185ca55d56f163dbb46e7ad3f4",
        "commit": {
          "message": "fix forward ref (#24494)\n\nResolves #24428\r\n\r\n---\r\n\r\nFor fiber types that render user code, we check the PerformedWork flag rather than the props, ref, and state to see if the fiber rendered (rather than bailing out/etc.) so we know whether we need to do things like record profile durations. ForwardRef wasn't added to this list, which caused #24428."
        }
      },
      {
        "sha": "024a7274fb07f154676ec6443b83a4e31f259c22",
        "commit": {
          "message": "Constrain the container type of createPortal (#24496)\n\nWe already constrained the type of createRoot (can't take document) and hydrateRoot (can't take fragments)."
        }
      },
      {
        "sha": "d4acbe85d55b6048d65b6ff258b7996516d4aa58",
        "commit": {
          "message": "Fixed possible undefined error in TreeContext reducer (#24501)"
        }
      },
      {
        "sha": "547b707493735327373a9f8792343f73a5b080da",
        "commit": {
          "message": "React DevTools 4.24.4 -> 4.24.5 (#24503)"
        }
      },
      {
        "sha": "e531a4a62d0b88301ac06d4efd3f5a30faa03c94",
        "commit": {
          "message": "[React DevTools] Improve DevTools UI when Inspecting a user Component that Throws an Error  (#24248)\n\n* [ReactDevTools] custom view for errors occur in user's code\r\n\r\n* [ReactDevTools] show message for unsupported feature\r\n\r\n* fix bad import\r\n\r\n* fix typo\r\n\r\n* fix issues from rebasing\r\n\r\n* prettier\r\n\r\n* sync error names\r\n\r\n* sync error name with upstream\r\n\r\n* fix lint & better comment\r\n\r\n* fix error message for test\r\n\r\n* better error message per review\r\n\r\n* add missing file\r\n\r\n* remove dead enum & provide component name in error message\r\n\r\n* better error message\r\n\r\n* better user facing error message"
        }
      },
      {
        "sha": "46a6d77e32d00c8c71ab989ca88b1c51aad07cdd",
        "commit": {
          "message": "Unify JSResourceReference Interfaces (#24507)"
        }
      },
      {
        "sha": "d20c3af9d11ea4a35bfc76cb44c15af9d42059c4",
        "commit": {
          "message": "[DevTools][Bug] Fix Race Condition When Unmounting Fibers (#24510)\n\nWhen we delete fibers, we will call onCommitFiberUnmount on every deleted fiber to also remove them from the element tree. However, there are some cases where fibers aren't deleted but we still want to remove them from the element tree (ex. offscreen). In the second case, we recursively remove these children during handleCommitFiberRoot.\r\n\r\nWhen we remove an element, we will untrack its corresponding fiber ID. However, because of fast refresh, we don't do this immediately, opting to instead add the value to a set to process later. However, before the set has been processed, we unmount that fiber again, we will get duplicate unmounts.\r\n\r\nTo fix this, handleCommitFiberRoot explicitly flushes all the fibers in the set before starting the deletion process. We also need to do this in handleCommitFiberUnmount in case handleCommitFiberRoot gets called first."
        }
      },
      {
        "sha": "8197c73ec334e4430d892cead14aa371f13467a9",
        "commit": {
          "message": "Support document rendering (#24523)\n\n* Support Document as a container for hydration and rendering\r\n\r\nPreviously Document was not handled effectively as a container. in particual when hydrating if there was a fallback to client rendering React would attempt to append a new <html> element into the document before clearing out the existing one which errored leaving the application in brokent state.\r\n\r\nThe initial approach I took was to recycle the documentElement and never remove or append it, always just moving it to the right fiber and appending the right children (heady/body) as needed. However in testing a simple approach in modern browsers it seems like treating the documentElement like any other element works fine. This change modifies the clearContainer method to remove the documentElement if the container is a DOCUMENT_NODE. Once the container is cleared React can append a new documentElement via normal means.\r\n\r\n* Allow Document as container for createRoot\r\n\r\npreviously rendering into Document was broken and only hydration worked because React did not properly deal with the documentElement and would error in a broken state if used that way. With the previous commit addressing this limitation this change re-adds Document as a valid container for createRoot.\r\n\r\nIt should be noted that if you use document with createRoot it will drop anything a 3rd party scripts adds the page before rendering for the first time."
        }
      },
      {
        "sha": "7d9e17a9826595dacbf9e19e8f85b07837adf276",
        "commit": {
          "message": "[DevTools] Add Pragma to Only Run Tests if Version Requirement Satisfied (#24533)\n\nThis PR:\r\n\r\nAdds a transform-react-version-pragma that transforms // @reactVersion SEMVER_VERSION into _test_react_version(...) and _test_react_version_focus(...) that lets us only run a test if it satisfies the right react version.\r\nAdds _test_react_version and _test_react_version_focus to the devtools setupEnv file\r\nAdd a devtools preprocessor file for devtools specific plugins"
        }
      },
      {
        "sha": "34da5aa69b0694348fee9c3cd1351ecc70cd5bb1",
        "commit": {
          "message": "Only treat updates to lazy as a new mount in legacy mode (#24530)\n\n* Only treat updates to lazy as a new mount in legacy mode\r\n\r\n* Update name and swap current check\r\n\r\n* Flip order back"
        }
      },
      {
        "sha": "852f10b5cf188f8aa797f9a809f0caeaa95a4231",
        "commit": {
          "message": "fix a bug in console.log with non-string args (#24546)"
        }
      },
      {
        "sha": "52c434be1dffd0d599a7977ce9cf8bb3326c7806",
        "commit": {
          "message": "React DevTools 4.24.5 -> 4.24.6 (#24547)"
        }
      },
      {
        "sha": "62662633d1293f47ab0f5ee444a2a2fd52df322a",
        "commit": {
          "message": "Remove enableFlipOffscreenUnhideOrder (#24545)"
        }
      },
      {
        "sha": "2c8a1452b82b9ec5ebfa3f370b31fda19610ae92",
        "commit": {
          "message": "Fix ignored setState in Safari when iframe is touched (#24459)"
        }
      },
      {
        "sha": "0ecb77d4c54664e20abd89df0d19ef4e4594f4c8",
        "commit": {
          "message": "[DevTools] Fix formatWithStyles not styling the results if the first argument is an object + Added unit tests (#24554)\n\nformatWithStyles currently doesn't style the array argument if the first argument is an object. This PR fixes this and also adds unit tests."
        }
      },
      {
        "sha": "4c03bb6ed01a448185d9a1554229208a9480560d",
        "commit": {
          "message": "[DevTools] ignore tests without reactVersion pragma if REACT_VERSION specified (#24555)\n\nIn DevTools tests, if the REACT_VERSION specified, we know this is a regression test (testing older React Versions). Because a lot of tests test the DevTools front end and we don't want to run them in the regression test scenario, we decided to only run tests that have the // @reactVersion pragma defined.\r\n\r\nBecause if there are no tests specified, jest will fail, we also opt to use jest.skip to skip all the tests that we don't want to run for a specific React version istead.\r\n\r\nThis PR makes this change."
        }
      },
      {
        "sha": "c5e039d9b0857b10fbcea861469ad0948c84b045",
        "commit": {
          "message": "[DevTools] Add jest-cli --reactVersion argument (#24556)\n\nAdd `--reactVersion` argument. This argument is only used in DevTools. When this is specified, run only the tests that have the `// @reactVersion` pragma that satisfies the semver version range. Otherwise, run tests as normal"
        }
      },
      {
        "sha": "357a61324f8d746a7f745dfc57009ba952c7d640",
        "commit": {
          "message": "[DevTools][Transition Tracing] Added support for Suspense Boundaries (#23365)\n\nThis PR:\r\n\r\n* During the passive effect complete phase for Offscreen, we add all the transitions that were added to the update queue in the render phase to the transitions set on the memoziedState. We also add the stateNode for the Offscreen component to the root pendingSuspenseBoundaries map if the suspense boundary has gone from shown to fallback. We remove the stateNode if the boundary goes from fallback to shown.\r\n* During the passive effect complete phase for the HostRoot, for each transition that was initiated during this commit, we add a pending transitionStart callback. We also add them to the transition set on the memoizedState for the HostRoot. If the root pendingSuspenseBoundaries is empty, we add a pending transitionComplete callback."
        }
      },
      {
        "sha": "a412d787e997da9e47e47886cf7a8fed2ccb6bee",
        "commit": {
          "message": "Remove dependency on build artifacts mirror (#24575)\n\nThis reverts #24106.\r\n\r\nThere was a regression in CircleCI's artifacts API recently where you\r\ncould no longer access artifacts without an authorization token. This\r\nbroke our size reporting CI job because we can't use an authorization\r\ntoken on external PRs without potentially leaking it. As a temporary\r\nworkaround, I changed the size reporting job to use a public mirror of\r\nour build artifacts.\r\n\r\nThe CircleCI API has since been fixed to no longer require\r\nauthorization, so we can revert the workaround."
        }
      },
      {
        "sha": "b77c12576d332d5cee07305a6afee68203d43e9c",
        "commit": {
          "message": "[DevTools] Add React Version Pragma to Tests (#24576)\n\nThis PR adds the reactVersion pragma to tests.\r\n\r\nTests without the reactVersion pragma won't be run if the reactVersion pragma isn't specified.\r\n\r\nTested each React version manually with the pragma to make sure the tests pass"
        }
      },
      {
        "sha": "769875806ca7b90b6ce9178531628e97ef43cd84",
        "commit": {
          "message": "Add option for source maps when running tests (#24577)\n\nI added a `--sourceMaps` option to our test command that enables inline\r\nsource maps. I've kept it disabled by default, since it makes the tests\r\nrun slower. But it's super useful when attaching to a debugger."
        }
      },
      {
        "sha": "835d9c9f4724b71b429a6b7aaced6da1448e7fb8",
        "commit": {
          "message": "Handle github rate limiting response (#24573)\n\nMake the error messages clearer when the API doesn't respond with 200."
        }
      },
      {
        "sha": "d89657bc8f60e9d00e3f73d5bda262fdcb651cdc",
        "commit": {
          "message": "[DevTools] Use Inline Snapshots for storeStressTestSync (#24583)\n\nChange storeStressTestSync to use inline snapshots instead of a snapshot file. We want to do this because some tests are gated and not called in regression tests, and if snapshot tests are not called when there is a corresponding .snap file, that test will fail.\r\n\r\nArguably inline snapshots are a better pattern anyway, so enforcing this in DevTools tests IMO makes sense"
        }
      },
      {
        "sha": "6e2f38f3a4d58f11bbe86ca6f938c27767366967",
        "commit": {
          "message": "[DevTools] Remove string.replaceAll Call in @reactVersion Pragma Functions (#24584)\n\n`string.replaceAll` doesn't exist in our CircleCI Docker environment. We also don't need it in this case because `semver.satisfies` allows for whitespace when specifying a range. This PR removes the unnecessary call."
        }
      },
      {
        "sha": "82c64e1a49239158c0daa7f0d603d2ad2ee667a9",
        "commit": {
          "message": "Match Preact behavior for boolean props on custom elements (#24541)\n\n* Log unexpected warnings when testing with ReactDOMServerIntegrationTestUtils\r\n\r\n* Add test\r\n\r\nFollowing https://github.com/facebook/react/issues/9230#issuecomment-322007671 except that `foo={true}` renders an empty string.\r\nSee https://github.com/facebook/react/issues/9230#issuecomment-1123464720 for rationale.\r\n\r\n* Match Preact behavior for boolean props on custom elements\r\n\r\n* Poke CircleCI"
        }
      },
      {
        "sha": "5a1e558df21bd3cafbaea01cc418fa69d14a8cab",
        "commit": {
          "message": "[DevTools] Regression Test Jest Config (#24598)\n\nSome older React versions have different module import names and are missing certain features. This PR mocks modules that don't exist and maps modules in older versions to the ones that are required in tests. Specifically:\r\n\r\n* In React v16.5, scheduler is named schedule\r\n* In pre concurrent React, there is no act\r\n* Prior to React v18.0, react-dom/client doesn't exist\r\n* In DevTools, we expect to use scheduler/tracing-profiling instead of scheduler/tracing"
        }
      },
      {
        "sha": "210fee474d7152b08171c2953678b607f8baad3e",
        "commit": {
          "message": "[DevTools] Make Devtools Regression Build (#24599)\n\nThis PR adds a script that downloads the specified react version from NPM (ie. react-dom, react, and react-test-renderer) and replaces the corresponding files in the build folder with the downloaded react files.\r\n\r\nThe scheduler package, unlike react-dom, react, and react-test-renderer, is versioned differently, so we also need to specifically account for that in the script."
        }
      },
      {
        "sha": "1e98682dd383ca07f2819dc8987bd46cdb5fa028",
        "commit": {
          "message": "[DevTools] Fix moduleNameMapper Order in DevTools Config  #24602)\n\nWe need the regression config moduleNameMapper to come before the current moduleNameMapper so when it tries to map \"/^react-dom\\/([^/]+)$/ it doesn't get confused. The reason is because order in which the mappings are defined matters. Patterns are checked one by one until one fits, and the most specific rule should be listed first."
        }
      },
      {
        "sha": "a2505792ed17fd4d7ddc69561053c3ac90899491",
        "commit": {
          "message": "[DevTools] Add CircleCI Chron Job For DevTools Regression Tests  (#24601)\n\nThis PR adds an hourly chron job on Circle CI that runs regression tests on the most recent DevTools build for React v16.0, v16.5, v16.8 v17.0 and v18.0."
        }
      },
      {
        "sha": "2c68776abe2100bbf749ac4451b90e66f8290f2f",
        "commit": {
          "message": "fix scripts folder text (#24609)"
        }
      },
      {
        "sha": "b2763d3eaa4a56ce9c973945783aba7cac63478f",
        "commit": {
          "message": "Move hydration code out of normal Suspense path (#24532)\n\n* Move hydration code out of normal Suspense path\r\n\r\nShuffling some code around to make it easier to follow. The logic for\r\nupdating a dehydrated Suspense boundary is significantly different\r\nfrom the logic for a client-rendered Suspense boundary. Most of it was\r\nalready lifted out into a separate function; this moves the remaining\r\nhydration-specific logic out of updateSuspenseComponent and into\r\nupdateDehydratedSuspenseComponent instead.\r\n\r\nNo expected changes to program behavior.\r\n\r\n* Extract hydration logic in complete phase, too\r\n\r\nSame as previous step but for the complete phase. This is a separate\r\ncommit to make bisecting easier in case something breaks. The logic\r\nis very subtle but mostly all I've done is extract it to\r\nanother function."
        }
      },
      {
        "sha": "05c34dea91eced40d08cd72432087c1e26a4f59c",
        "commit": {
          "message": "[Test] Outer boundary should not report errors from an inner boundary (#24618)\n\n* Test to assert that hydration errors of an inner suspended boundary are not retained by an unsuspended outer boundary\r\n\r\n* lints"
        }
      },
      {
        "sha": "1328ff70cd69f02e48ec5505a1f93501b2bcaef4",
        "commit": {
          "message": "[DevTools] Regression-proof e2e Tests (#24620)\n\nThis PR:\r\n\r\n* Increases test retry count to 2 so that flaky tests have more of a chance to pass\r\n* Ideally most e2e tests will run for all React versions (and ensure DevTools elegantly fails if React doesn't support its features). However, some features aren't supported in older React versions at all (ex. Profiling) Add runOnlyForReactRange function in these cases to skip tests that don't satisfy the correct React semver range\r\n* Fix should allow searching for component by name test, which was flaky because sometimes the Searchbox would be unfocused the second time we try to type in it\r\n* Edited test Should allow elements to be inspected to check that element inspect gracefully fails in older React versions\r\n* Updated config to add a config.use.url field and a config.use.react_version field, which change depending on the React Version (and whether it's specified)"
        }
      },
      {
        "sha": "3133dfa6ee8d1a8355c0249007176955d4b7d6b0",
        "commit": {
          "message": "DevTools] e2e Regression Testing App (#24619)\n\nThis PR adds an e2e regression app to the react-devtools-shell package. This app:\r\n\r\n* Has an app.js and an appLegacy.js entrypoint because apps prior to React 18 need to use ReactDOM.render. These files will create and render multiple test apps (though they currently only render the List)\r\n* Moved the ListApp out of the e2e folder and into an e2e-apps folder so that both e2e and e2e-regression can use the same test apps\r\n* Creates a ListAppLegacy app because prior to React 16.8 hooks didn't exist.\r\n* Added a devtools file for the e2e-regression\r\n* Modifies the webpack config so that the e2e-regression React app can use different a different React version than DevTools"
        }
      },
      {
        "sha": "1bed20731fa2789c46d7bff89cd44c3ea9d51abf",
        "commit": {
          "message": "Add a module map option to the Webpack Flight Client (#24629)\n\nOn the server we have a similar translation map from the file path that the\r\nloader uses to the refer to the original module and to the bundled module ID.\r\n\r\nThe Flight server is optimized to emit the smallest format for the client.\r\nHowever during SSR, the same client component might go by a different\r\nmodule ID since it's a different bundle than the client bundle.\r\n\r\nThis provides an option to add a translation map from client ID to SSR ID\r\nwhen reading the Flight stream.\r\n\r\nIdeally we should have a special SSR Flight Client that takes this option\r\nbut for now we only have one Client for both."
        }
      },
      {
        "sha": "f7860538a6e48e61be34f4ba1dfb3f2713820742",
        "commit": {
          "message": "Fix typo in useSyncExternalStore main entry point error (#24631)"
        }
      },
      {
        "sha": "a2766387efe68b318b23d8c35c70b850d1e6a250",
        "commit": {
          "message": "[Fizz] Improve text separator byte efficiency (#24630)\n\n* [Fizz] Improve text separator byte efficiency\r\n\r\nPreviously text separators were inserted following any Text node in Fizz. This increases bytes sent when streaming and in some cases such as title elements these separators are not interpreted as comment nodes and leak into the visual aspects of a page as escaped text.\r\n\r\nThe reason simple tracking on the last pushed type doesn't work is that Segments can be filled in asynchronously later and so you cannot know in a single pass whether the preceding content was a text node or not. This commit adds a concept of TextEmbedding which provides a best effort signal to Segments on whether they are embedded within text. This allows the later resolution of that Segment to add text separators when possibly necessary but avoid them when they are surely not.\r\n\r\nThe current implementation can only \"peek\" head if the segment is a the Root Segment or a Suspense Boundary Segment. In these cases we know there is no trailing text embedding and we can eliminate the separator at the end of the segment if the last emitted element was Text. In normal Segments we cannot peek and thus have to assume there might be a trailing text embedding and we issue a separator defensively. This should be rare in practice as it is assumed most components that will cause segment creation will also emit some markup at the edges.\r\n\r\n* [Fizz] Improve separator efficiency when flushing delayed segments\r\n\r\nThe method by which we get segment markup into the DOM differs depending on when the Segment resolves.\r\n\r\nIf a Segment resolves before flushing begins for it's parent it will be emitted inline with the parent markup. In these cases separators may be necessary because they are how we clue the browser into breakup up text into distinct nodes that will later match up with what will be hydrated on the client.\r\n\r\nIf a Segment resolves after flushing has happened a script will be used to patch up the DOM in the client. when this happens if there are any text nodes on the boundary of the patch they won't be \"merged\" and thus will continue to have distinct representation as Nodes in the DOM. Thus we can avoid doing any separators at the boundaries in these cases.\r\n\r\nAfter applying these changes the only time you will get text separators as follows\r\n\r\n* in between serial text nodes that emit at the same time - these are necessary and cannot be eliminated unless we stop relying on the browser to automatically parse the correct text nodes when processing this HTML\r\n* after a final text node in a non-boundary segment that resolves before it's parent has flushed - these are sometimes extraneous, like when the next emitted thing is a non-Text node.\r\n\r\nIn all other cases text separators should be omitted which means the general byte efficiency of this approach should be pretty good"
        }
      },
      {
        "sha": "aec575914a0fd76c9db8998ea62c3ee975de70d7",
        "commit": {
          "message": "[Fizz] Send errors down to client (#24551)\n\n* use return from onError\r\n\r\n* export getSuspenseInstanceFallbackError\r\n\r\n* stringToChunk\r\n\r\n* return string from onError in downstream type signatures\r\n\r\n* 1 more type\r\n\r\n* support encoding errors in html stream and escape user input\r\n\r\nThis commit adds another way to get errors to the suspense instance by encoding them as dataset properties of a template element at the head of the boundary. Previously if there was an error before the boundary flushed there was no way to stream the error to the client because there would never be a client render instruction.\r\n\r\nAdditionally the error is sent in 3 parts\r\n\r\n1) error hash - this is always sent (dev or prod) if one is provided\r\n2) error message - Dev only\r\n3) error component stack - Dev only, this now captures the stack at the point of error\r\n\r\nAnother item addressed in this commit is the escaping of potentially unsafe data. all error components are escaped as test for browers when written into the html and as javascript strings when written into a client render instruction.\r\n\r\n* nits\r\n\r\nCo-authored-by: Marco Salazar <salazarm@fb.com>"
        }
      },
      {
        "sha": "f534cc6ea4e7cffbfd53b00e14cd0b1849b291f1",
        "commit": {
          "message": "[DevTools] Add --replaceBuild option to Older React Builds Download Script (#24621)\n\nThis PR adds a `--replaceBuild` option to the script that downloads older React version builds. If this flag is true, we will replace the contents of the `build` folder with the contents of the `build-regression` folder and remove the `build-regression` folder after, which was the original behavior.\r\n\r\nHowever, for e2e tests, we need both the original build (for DevTools) and the new build (for the React Apps), so we need both the `build` and the `build-regression` folders. Not adding the `--replaceBuild` option will do this.\r\n\r\nThis PR also modifies the circle CI config to reflect this change."
        }
      },
      {
        "sha": "0b545551e6dea328797e64eed6a9677bf4051eae",
        "commit": {
          "message": "[DevTools] Modify DevTools e2e test script for regression tests (#24642)\n\nModified the `run_devtools_e2e_tests` script so that you can pass in a React version. If you pass in a version, it will build the DevTools shell and run the e2e tests with that version."
        }
      },
      {
        "sha": "be1fd48e96a617f3758d179ebfb0386a382af942",
        "commit": {
          "message": "[DevTools] mock requestAnimationFrame with setTimeout as a temporary fix for #24626 (#24633)\n\n* mock requestAnimationFrame as a temp workaround for #24626\r\n\r\n* give name to constant variable"
        }
      },
      {
        "sha": "25837acfee5f5305d49fe19649e010dbf4f887a2",
        "commit": {
          "message": "React DevTools 4.24.6 -> 4.24.7 (#24646)"
        }
      },
      {
        "sha": "26a5b3c7f781e93b5bcf4e5a7a6f13233409475d",
        "commit": {
          "message": "Explicitly set `highWaterMark` to 0 for `ReadableStream` (#24641)\n\n* Explicitly set highWaterMark to 0 for ReadableStreams\r\n\r\nThis is because not all streaming implementations respect the\r\ndefault behavior of settings highWaterMark to 0 for byte streams.\r\nBeing explicit guarantees the intended behavior across runtimes.\r\n\r\n* Remove size methods and add FlowFixMe instead"
        }
      },
      {
        "sha": "dd4950c90e65a6c53870fd61d2aea67bce7d6713",
        "commit": {
          "message": "[Flight] Implement useId hook (#24172)\n\n* Implements useId hook for Flight server.\r\n\r\nThe approach for ids for Flight is different from Fizz/Client where there is a need for determinancy. Flight rendered elements will not be rendered on the client and as such the ids generated in a request only need to be unique. However since FLight does support refetching subtrees it is possible a client will need to patch up a part of the tree rather than replacing the entire thing so it is not safe to use a simple incrementing counter. To solve for this we allow the caller to specify a prefix. On an initial fetch it is likely this will be empty but on refetches or subtrees we expect to have a client `useId` provide the prefix since it will guaranteed be unique for that subtree and thus for the entire tree. It is also possible that we will automatically provide prefixes based on a client/Fizz useId on refetches\r\n\r\nin addition to the core change I also modified the structure of options for renderToReadableStream where `onError`, `context`, and the new `identifierPrefix` are properties of an Options object argument to avoid the clumsiness of a growing list of optional function arguments.\r\n\r\n* defend against useId call outside of rendering\r\n\r\n* switch to S from F for Server Component ids\r\n\r\n* default to empty string identifier prefix\r\n\r\n* Add a test demonstrating that there is no warning when double rendering on the client a server component that used useId\r\n\r\n* lints and gates"
        }
      },
      {
        "sha": "b1858b110d2888034355ee6dd9c0b581feabbed3",
        "commit": {
          "message": "[DevTools] devtools-test-shell Regression App fixes (#24644)\n\nMade a couple of fixes to the `devtools-test-shell`\r\n* test selectors aren't available in > React v18.0 either, so we'll need to mock the test selector functions there as well\r\n* `react-dom/client` should map to `react-dom/client` and not `react-dom`"
        }
      },
      {
        "sha": "d2c9e834ae07377edbc94128eec4480693b64292",
        "commit": {
          "message": "[DevTools] Run e2e Regression Tests Hourly on Circle CI (#24648)\n\nModifies Circle CI so we run e2e regression tests hourly on Circle CI"
        }
      },
      {
        "sha": "d300cebde2a63e742ccb8b6aa7b0f61db1ae29b4",
        "commit": {
          "message": "[DevTools] only polyfill requestAnimationFrame when necessary (#24651)"
        }
      },
      {
        "sha": "7a5b8227c7d67aefe62f015cf0e961e28075d897",
        "commit": {
          "message": "Allow aritfacts download even if CI is broken (#24666)\n\n* Allow aritfacts download even if CI is broken\r\n\r\nAdds an option to the download script to disable the CI check and\r\ncontinue downloading the artifacts even if CI is broken.\r\n\r\nI often rely on this to debug broken build artifacts. I was thinking\r\nthe sizebot should also use this when downloading the base artifacts\r\nfrom main, since for the purposes of size tracking, it really doesn't\r\nmatter whether the base commit is broken.\r\n\r\n* Sizebot should work even if base rev is broken\r\n\r\nSizebot works by downloading the build artifacts for the base revision\r\nand comparing the fize sizes, but the download script will fail if\r\nthe base revision has a failing CI job. This happens more often than it\r\nshould because of flaky cron jobs, but even when it does, we shouldn't\r\nlet it affect the sizebot — for the purposes of tracking sizes, it\r\ndoesn't really matter whether the base revision is broken."
        }
      },
      {
        "sha": "a97a0810eae4428dd55dc1fa1b94ee1f9c18715b",
        "commit": {
          "message": "DevTools e2e workflow: Download build artifacts (#24676)\n\nWhen running the hourly DevTools testing workflow, we don't need to\r\nbuild React from scratch each time; we can download its build artifacts,\r\nlike we do for sizebot and the release workflow."
        }
      },
      {
        "sha": "a621cb099dafb8bd77370ed4f4d832f049642183",
        "commit": {
          "message": "Fix CI: Download to build instead of base-build (#24677)\n\nFixes a mistake in #24676. The get_base_build job downloads artifacts to\r\n`base-build` instead of `build`, so that sizebot can compare the two\r\ndirectories. For most other jobs, though, we want it to produce the\r\nsame output as the normal build job."
        }
      },
      {
        "sha": "dfd6f96f7699adc005a1b0a011b7c8e7261345ce",
        "commit": {
          "message": "Fix CI: Remove copypasta from sizebot download job\n\nThis was copy pasted from the similar job that exists to download\nbase artifacts for sizebot."
        }
      },
      {
        "sha": "652dcf6550f3586377e910cf41b4846eff374210",
        "commit": {
          "message": "Fix CI: Persist build artifacts to workspace\n\nThe download_build job needs to persist its artifacts to the workspace\nso downstream jobs can access them.\n\nPersist the same directories as the normal build job."
        }
      },
      {
        "sha": "4ddd8b455ce1dac02c56a18790d5068a7714c1a0",
        "commit": {
          "message": "Track revs that intentionally fork the reconciler (#24671)\n\n* Track revs that intentionaly fork the reconciler\r\n\r\nWhen we fork the the \"old\" and \"new\" reconciler implementations, it can\r\nbe difficult to keep track of which commits introduced the delta\r\nin behavior. This makes bisecting difficult if one of the changes\r\nintroduces a bug.\r\n\r\nI've added a new file called `forked-revisions` that contains the list\r\nof commits that intentionally forked the reconcilers.\r\n\r\nIn CI, we'll confirm that the reconcilers are identical except for the\r\nchanges in the listed revisions. This also ensures that the revisions\r\ncan be cleanly reverted.\r\n\r\n* [TEST] Add trivial divergence between forks\r\n\r\nThis should fail CI. We'll see if the next commit fixes it.\r\n\r\n* [TEST] Update list of forked revisions\r\n\r\nThis should fix CI\r\n\r\n* Revert temporary fork\r\n\r\nThis reverts the temporary fork added in the previous commits that was\r\nused to test CI.\r\n\r\n* Update error message when CI fails"
        }
      },
      {
        "sha": "1cd90d2ccc791f3ed25d93ceb7137746185f6e34",
        "commit": {
          "message": "Refactor of interleaved (\"concurrent\") update queue (#24663)\n\n* Always push updates to interleaved queue first\r\n\r\nInterleaves updates (updates that are scheduled while another render\r\nis already is progress) go into a special queue that isn't applied until\r\nthe end of the current render. They are transferred to the \"real\" queue\r\nat the beginning of the next render.\r\n\r\nCurrently we check during `setState` whether an update should go\r\ndirectly onto the real queue or onto the special interleaved queue. The\r\nlogic is subtle and it can lead to bugs if you mess it up, as in #24400.\r\n\r\nInstead, this changes it to always go onto the interleaved queue. The\r\nbehavior is the same but the logic is simpler.\r\n\r\nAs a further step, we can also wait to update the `childLanes` until\r\nthe end of the current render. I'll do this in the next step.\r\n\r\n* Move setState return path traversal to own call\r\n\r\nA lot of the logic around scheduling an update needs access to the\r\nfiber root. To obtain this reference, we must walk up the fiber return\r\npath. We also do this to update `childLanes` on all the parent\r\nnodes, so we can use the same traversal for both purposes.\r\n\r\nThe traversal currently happens inside `scheduleUpdateOnFiber`, but\r\nsometimes we need to access it beyond that function, too.\r\n\r\nSo I've hoisted the traversal out of `scheduleUpdateOnFiber` into its\r\nown function call that happens at the beginning of the\r\n`setState` algorithm.\r\n\r\n* Rename ReactInterleavedUpdates -> ReactFiberConcurrentUpdates\r\n\r\nThe scope of this module is expanding so I've renamed accordingly. No\r\nbehavioral changes.\r\n\r\n* Enqueue and update childLanes in same function\r\n\r\nDuring a setState, the childLanes are updated immediately, even if a\r\nrender is already in progress. This can lead to subtle concurrency bugs,\r\nso the plan is to wait until the in-progress render has finished before\r\nupdating the childLanes, to prevent subtle concurrency bugs.\r\n\r\nAs a step toward that change, when scheduling an update, we should not\r\nupdate the childLanes directly, but instead defer to the\r\nReactConcurrentUpdates module to do it at the appropriate time.\r\n\r\nThis makes markUpdateLaneFromFiberToRoot a private function that is\r\nonly called from the ReactConcurrentUpdates module.\r\n\r\n* [FORKED] Don't update childLanes until after current render\r\n\r\n(This is the riskiest commit in the stack. Only affects the \"new\"\r\nreconciler fork.)\r\n\r\nUpdates that occur in a concurrent event while a render is already in\r\nprogress can't be processed during that render. This is tricky to get\r\nright. Previously we solved this by adding concurrent updates to a\r\nspecial `interleaved` queue, then transferring the `interleaved` queue\r\nto the `pending` queue after the render phase had completed.\r\n\r\nHowever, we would still mutate the `childLanes` along the parent path\r\nimmediately, which can lead to its own subtle data races.\r\n\r\nInstead, we can queue the entire operation until after the render phase\r\nhas completed. This replaces the need for an `interleaved` field on\r\nevery fiber/hook queue.\r\n\r\nThe main motivation for this change, aside from simplifying the logic a\r\nbit, is so we can read information about the current fiber while we're\r\nwalking up its return path, like whether it's inside a hidden tree.\r\n(I haven't done anything like that in this commit, though.)\r\n\r\n* Add 17691ac to forked revisions"
        }
      },
      {
        "sha": "254b49e5897b4e493c88ecec5c80abeacda90526",
        "commit": {
          "message": "Add snapshot testing on e2e test failure (#24672)\n\nWe have a currently unreproducible flaky e2e test. This PR captures snapshots on e2e test failures so we can better debug flaky e2e tests that don't fail locally."
        }
      },
      {
        "sha": "4f29ba1cc52061e439cede3813e100557b23a15c",
        "commit": {
          "message": "support errorInfo in onRecoverableError (#24591)\n\n* extend onRecoverableError API to support errorInfo\r\n\r\nerrorInfo has been used in Error Boundaries wiht componentDidCatch for a while now. To date this metadata only contained a componentStack. onRecoverableError only receives an error (type mixed) argument and thus providing additional error metadata was not possible without mutating user created mixed objects.\r\n\r\nThis change modifies rootConcurrentErrors rootRecoverableErrors, and hydrationErrors so all expect CapturedValue types. additionally a new factory function allows the creation of CapturedValues from a value plus a hash and stack.\r\n\r\nIn general, client derived CapturedValues will be created using the original function which derives a componentStack from a fiber and server originated CapturedValues will be created using with a passed in hash and optional componentStack."
        }
      },
      {
        "sha": "bcbeb52bf36c6f5ecdad46a48e87cf4354c5a64f",
        "commit": {
          "message": "[Fizz] Disallow complex children in <title> elements (#24679)\n\n* [Fizz] Disallow complex children in <title> elements\r\n\r\n<title> Elements in the DOM can only have Text content. In Fizz if more than one text node is emitted an HTML comment node is used as a text separator. Unfortunately because of the content restriction of the DOM representation of the title element this separator is displayed as escaped text which is not what the component author intended.\r\n\r\nThis commit special cases title handling, primarily to issue warnings if you pass complex children to <title>. At the moment title expects to receive a single child or an array of length 1. In both cases the type of that child must be string or number. If anything more complex is provided a warning will be logged to the console explaining why this is problematic.\r\n\r\nThere is no runtime behavior change so broken things are still broken (e.g. returning two text nodes which will cause a separator or using Suspense inside title children) but they should at least be accompanied by warnings that are useful.\r\n\r\nOne edge case that will now warn but won't technically break an application is if you use a Component that returns a single string as a child of title. This is a form of indirection that works but becasue we cannot discriminate between a Component that will follow the rules and one that violates them the warning is issued regardless.\r\n\r\n* fixup dev warning conditional logic\r\n\r\n* lints\r\n\r\n* fix bugs"
        }
      },
      {
        "sha": "3bb154bbab78038f1b0aad42f10c006b71eac8da",
        "commit": {
          "message": "[DevTools] Run Devtools Regression Tests Once a Day (#24678)\n\nWe don't need to run DevTools regression tests once an hour, and also it makes getting the most recent react build or react devtools build really annoying, so run them once a day instead"
        }
      },
      {
        "sha": "7e8a020a4aa8a24e5f0c0ce06b25e485d2888f57",
        "commit": {
          "message": "Remove extra Server Context argument (#24683)\n\nThis was left over from a refactor."
        }
      },
      {
        "sha": "79f54c16dc3d5298e6037df75db2beb3552896e9",
        "commit": {
          "message": "Bugfix: Revealing a hidden update (#24685)\n\n* Add `isHidden` to OffscreenInstance\r\n\r\nWe need to be able to read whether an offscreen tree is hidden from\r\nan imperative event. We can store this on its OffscreenInstance.\r\n\r\nWe were already scheduling a commit effect whenever the visibility\r\nchanges, in order to toggle the inner effects. So we can reuse that.\r\n\r\n* [FORKED] Bugfix: Revealing a hidden update\r\n\r\nThis fixes a bug I discovered related to revealing a hidden Offscreen\r\ntree. When this happens, we include in that render all the updates that\r\nhad previously been deferred — that is, all the updates that would have\r\nalready committed if the tree weren't hidden. This is necessary to avoid\r\ntearing with the surrounding contents. (This was the \"flickering\"\r\nSuspense bug we found a few years ago: #18411.)\r\n\r\nThe way we do this is by tracking the lanes of the updates that were\r\ndeferred by a hidden tree. These are the \"base\" lanes. Then, in order\r\nto reveal the hidden tree, we process any update that matches one of\r\nthose base lanes.\r\n\r\nThe bug I discovered is that some of these base lanes may include\r\nupdates that were not present at the time the tree was hidden. We cannot\r\nflush those updates earlier that the surrounding contents — that, too,\r\ncould cause tearing.\r\n\r\nThe crux of the problem is that we sometimes reuse the same lane for\r\nbase updates and for non-base updates. So the lane alone isn't\r\nsufficient to distinguish between these cases. We must track this in\r\nsome other way.\r\n\r\nThe solution I landed upon was to add an extra OffscreenLane bit to any\r\nupdate that is made to a hidden tree. Then later when we reveal the\r\ntree, we'll know not to treat them as base updates.\r\n\r\nThe extra OffscreenLane bit is removed as soon as that lane is committed\r\nby the root (markRootFinished) — at that point, it gets\r\n\"upgraded\" to a base update.\r\n\r\nThe trickiest part of this algorithm is reliably detecting when an\r\nupdate is made to a hidden tree. What makes this challenging is when the\r\nupdate is received during a concurrent event, while a render is already\r\nin progress — it's possible the work-in-progress render is about to\r\nflip the visibility of the tree that's being updated, leading to a race\r\ncondition.\r\n\r\nTo avoid a race condition, we will wait to read the visibility of the\r\ntree until the current render has finished. In other words, this makes\r\nit an atomic operation. Most of this logic was already implemented\r\nin #24663.\r\n\r\nBecause this bugfix depends on a moderately risky refactor to the update\r\nqueue (#24663), it only works in the \"new\" reconciler fork. We will roll\r\nit out gradually to www before landing in the main fork.\r\n\r\n* Add previous commit to list of forked revisions"
        }
      },
      {
        "sha": "b345523528f6b346c3a6de2145d5df6b2e23ca75",
        "commit": {
          "message": "[Fizz] Support abort reasons (#24680)\n\n* [Fizz] Support abort reasons\r\n\r\nFizz supports aborting the render but does not currently accept a reason. The various render functions that use Fizz have some automatic and some user-controlled abort semantics that can be useful to communicate with the running program and users about why an Abort happened.\r\n\r\nThis change implements abort reasons for renderToReadableStream and renderToPipeable stream as well as legacy renderers such as renderToString and related implementations.\r\n\r\nFor AbortController implementations the reason passed to the abort method is forwarded to Fizz and sent to the onError handler. If no reason is provided the AbortController should construct an AbortError DOMException and as a fallback Fizz will generate a similar error in the absence of a reason\r\n\r\nFor pipeable  streams, an abort function is returned alongside pipe which already accepted a reason. That reason is now forwarded to Fizz and the implementation described above.\r\n\r\nFor legacy renderers there is no exposed abort functionality but it is used internally and the reasons provided give useful context to, for instance to the fact that Suspense is not supported in renderToString-like renderers"
        }
      },
      {
        "sha": "47944142f57d8c1c7b79eaf6522de38e76137ca5",
        "commit": {
          "message": "`now` isn't part of the react-reconciler config anymore (#24689)"
        }
      },
      {
        "sha": "060505e9dce2f3d5d9d67c2a9415b94e5b0ca291",
        "commit": {
          "message": "Fix misapplying prod error opt-out (#24688)\n\nThe eslint-disable-next-line opt out for prod error minification was not properly working. In the build a replacable error was output even though it was not failing the build. This change refactors the code to avoid the erroneous behavior but a fix for the lint may be better"
        }
      },
      {
        "sha": "42b330c1c9bf71ca512c56c204bca36bdd53b3c6",
        "commit": {
          "message": "Fix check_error_codes CI job (#24692)\n\nThe diff command was missing a --quiet argument, causing the job not to\r\nfail when unminified messages were found."
        }
      },
      {
        "sha": "3e92eb0fce762aca49d2ea18b869a2fd8a75089e",
        "commit": {
          "message": "[DevTools] find best renderer when inspecting (#24665)\n\n* [DevTools] find best renderer when inspecting\r\n\r\n* fix lint\r\n\r\n* fix test\r\n\r\n* fix lint\r\n\r\n* move logic to agent\r\n\r\n* fix lint\r\n\r\n* style improvements per review comments\r\n\r\n* fix lint & flow\r\n\r\n* re-add try catch for safety"
        }
      },
      {
        "sha": "9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e",
        "commit": {
          "message": "Update error transform to allow excluding errors inside subexpressions like ternaries (#24693)\n\n* Update error transform to allow excluding errors inside subexpressions like ternaries\r\n\r\n* make leadingcomments aggregation walk the expression stack"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v18.1.0",
      "body": "### React DOM\r\n\r\n* Fix the false positive warning about `react-dom/client` when using UMD bundle. ([@alireza-molaee](https://github.com/alireza-molaee) in [#24274](https://github.com/facebook/react/pull/24274))\r\n* Fix `suppressHydrationWarning` to work in production too. ([@gaearon](https://github.com/gaearon) in [#24271](https://github.com/facebook/react/pull/24271))\r\n* Fix `componentWillUnmount` firing twice inside of Suspense. ([@acdlite](https://github.com/acdlite) in [#24308](https://github.com/facebook/react/pull/24308))\r\n* Fix some transition updates being ignored. ([@acdlite](https://github.com/acdlite) in [#24353](https://github.com/facebook/react/pull/24353))\r\n* Fix `useDeferredValue` causing an infinite loop when passed an unmemoized value. ([@acdlite](https://github.com/acdlite) in [#24247](https://github.com/facebook/react/pull/24247))\r\n* Fix throttling of revealing Suspense fallbacks. ([@sunderls](https://github.com/sunderls) in [#24253](https://github.com/facebook/react/pull/24253))\r\n* Fix an inconsistency in whether the props object is the same between renders. ([@Andarist](https://github.com/Andarist) and [@acdlite](https://github.com/acdlite) in [#24421](https://github.com/facebook/react/pull/24421))\r\n* Fix a missing warning about a `setState` loop in `useEffect`. ([@gaearon](https://github.com/gaearon) in [#24298](https://github.com/facebook/react/pull/24298))\r\n* Fix a spurious hydration error. ([@gnoff](https://github.com/gnoff) in [#24404](https://github.com/facebook/react/pull/24404))\r\n* Warn when calling `setState` in `useInsertionEffect`. ([@gaearon](https://github.com/gaearon) in [#24295](https://github.com/facebook/react/pull/24295))\r\n* Ensure the reason for hydration errors is always displayed. ([@gaearon](https://github.com/gaearon) in [#24276](https://github.com/facebook/react/pull/24276))\r\n\r\n### React DOM Server\r\n\r\n* Fix escaping for the `bootstrapScriptContent` contents. ([@gnoff](https://github.com/gnoff) in [#24385](https://github.com/facebook/react/pull/24385))\r\n* Significantly improve performance of `renderToPipeableStream`. ([@gnoff](https://github.com/gnoff) in [#24291](https://github.com/facebook/react/pull/24291))\r\n\r\n### ESLint Plugin: React Hooks\r\n\r\n* Fix false positive errors with a large number of branches. ([@scyron6](https://github.com/scyron6) in [#24287](https://github.com/facebook/react/pull/24287))\r\n* Don't consider a known dependency stable when the variable is reassigned. ([@afzalsayed96](https://github.com/afzalsayed96) in [#24343](https://github.com/facebook/react/pull/24343))\r\n\r\n### Use Subscription\r\n\r\n* Replace the implementation with the `use-sync-external-store` shim. ([@gaearon](https://github.com/gaearon) in [#24289](https://github.com/facebook/react/pull/24289))"
    },
    "commits": [
      {
        "sha": "3e997fdbaad54bac4aa067895da7814e0f8cfc9e",
        "commit": {
          "message": "Bump react-refresh version"
        }
      },
      {
        "sha": "b2b4bddeb85480922542fd1f3f64982d0e916831",
        "commit": {
          "message": "Bump react-refresh version"
        }
      },
      {
        "sha": "509d2d906591b0fd364b2853433a4fe5b111bf02",
        "commit": {
          "message": "Add React 18 changelog (#24195)\n\n* Add React 18 to changelog\r\n\r\n* Fix typo\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>"
        }
      },
      {
        "sha": "adb8ebc927ea091ba5ffba6a9f30dbe62eaee0c5",
        "commit": {
          "message": "React DevTools 4.24.2 -> 4.24.3 (#24198)"
        }
      },
      {
        "sha": "8acc812c673023ad9b3d5940e94584254a46af2d",
        "commit": {
          "message": "Add a missing breaking change to changelog"
        }
      },
      {
        "sha": "cfc76b46582b6614aa1db191734c75ca58c8dacd",
        "commit": {
          "message": "Update CHANGELOG.md (#24206)"
        }
      },
      {
        "sha": "27199d75678bea21f51ab1364e69ef58e0bde663",
        "commit": {
          "message": "fix build script for react dev tools (#24193)"
        }
      },
      {
        "sha": "c9100d95b97913192397772ad81038ba322d068b",
        "commit": {
          "message": "DevTools release script: Show changelog before minor/patch prompt (#24200)"
        }
      },
      {
        "sha": "8b95ea2cba17d3dd653324debc1170fa50bda038",
        "commit": {
          "message": "Inline DevTools test snapshots and cleaned up tests (#24199)"
        }
      },
      {
        "sha": "0415b18a100043df164bcd40639f9373e3358350",
        "commit": {
          "message": "[ReactDebugTools] add custom error type for future new hooks (#24168)\n\n* [ReactDebugTools] add custom error type for future new hooks\r\n\r\n* update per review comments\r\n\r\n* remove unused argument"
        }
      },
      {
        "sha": "a0fb3cf37ec6e81de7b7b1ca01b2cc560231e0c1",
        "commit": {
          "message": "Fix changelog typos"
        }
      },
      {
        "sha": "7e3121e1cfe25f1af5079b3bf487b5b5202400d4",
        "commit": {
          "message": "Remove unstable_createMutableSource from experimental build (#24209)"
        }
      },
      {
        "sha": "77938881f42ac466c573fa24ecc9eff84ff7aca4",
        "commit": {
          "message": "Update @next version (#24218)\n\nNow that 18.0 is out, the next minor is 18.1"
        }
      },
      {
        "sha": "b76103d66fdb7396cbfcc66a032b31a0cd8ad342",
        "commit": {
          "message": "Remove React 18 issue template (#24220)\n\nReact 18 is just React now."
        }
      },
      {
        "sha": "aa05e73150d4a80fe4b1f9cbf61d3b81766fa127",
        "commit": {
          "message": "Add 4.4.0 release to eslint rules CHANGELOG (#24234)"
        }
      },
      {
        "sha": "4db3ff6c1ac092676dffc2251f5dec908eca9c74",
        "commit": {
          "message": "Test suite for hydration diff warnings (#24229)\n\n* Test suite for hydration diff warnings\r\n\r\n* Test both variants\r\n\r\n* Add more edge cases"
        }
      },
      {
        "sha": "d352fd09315276b3def318d91f462ee7c49fb1af",
        "commit": {
          "message": "Fix for SSR2 fixture not working locally  (#24237)\n\n* SS2 fixture not working locally fix\r\n\r\n* Fix prettier issue\r\n\r\n* prettier excess line fix\r\n\r\n* Update render.js\r\n\r\n* Update README.md\r\n\r\nCo-authored-by: dan <dan.abramov@gmail.com>"
        }
      },
      {
        "sha": "ebd7ff65b6fea73313c210709c88224910e86339",
        "commit": {
          "message": "Don't recreate the same fallback on the client if hydrating suspends (#24236)\n\n* Delay showing fallback if hydrating suspends\r\n\r\n* Fix up\r\n\r\n* Include all non-urgent lanes\r\n\r\n* Moar tests\r\n\r\n* Add test for transitions"
        }
      },
      {
        "sha": "c89a15c716febe71b7d857f839829cd1dc74918f",
        "commit": {
          "message": "[ReactDebugTools] wrap uncaught error from rendering user's component (#24216)\n\n* [ReactDebugTools] wrap uncaught error from rendering user's component\r\n\r\n* fix lint\r\n\r\n* make error names more package specific\r\n\r\n* update per review comments\r\n\r\n* fix tests\r\n\r\n* fix lint\r\n\r\n* fix tests\r\n\r\n* fix lint\r\n\r\n* fix error name & nits\r\n\r\n* try catch instead of mocking error\r\n\r\n* fix test for older node.js version\r\n\r\n* avoid false positive from try-catch in tests"
        }
      },
      {
        "sha": "b8cfda15e1232554487c7285fb464f22705a23ce",
        "commit": {
          "message": "changed Transitions type to Array<Transition> (#24249)\n\nChanged the Transitions type to Array<Transition> because Transitions was confusing"
        }
      },
      {
        "sha": "e912da964dbf5f84bf8c4e78e0ac218362bc074e",
        "commit": {
          "message": "Update Example render for React v18 (#24259)"
        }
      },
      {
        "sha": "985272e26858ce3838fde856b022200b9c7d3dcb",
        "commit": {
          "message": "Fix name mismatch in react-reconciler custom build. (#24272)"
        }
      },
      {
        "sha": "fc47cb1b61ac012f9bd6d7251eb19fcecf364a3b",
        "commit": {
          "message": "Fix suppressHydrationWarning not working in production (#24271)"
        }
      },
      {
        "sha": "5f7f5280836a44d4b81c1cb13f51e7482470cf1b",
        "commit": {
          "message": "Add more tests for suppressHydrationWarning (#24275)\n\n* More tests for suppressHydrationWarning\r\n\r\n* Move suppressHydration tests to new file\r\n\r\n* Extract more tests\r\n\r\n* Test name\r\n\r\n* Test legacy behavior too"
        }
      },
      {
        "sha": "9ededef945f032fa6257711d45a4f198bfdf1633",
        "commit": {
          "message": "Don't mute hydration errors forcing client render (#24276)\n\n* Don't mute hydration errors forcing client render\r\n\r\n* Nits"
        }
      },
      {
        "sha": "1d1fa94a66275c42b5339dabf9985379a0c74a23",
        "commit": {
          "message": "Fix false positive warning about react-dom/client with UMD builds (#24274)"
        }
      },
      {
        "sha": "af730436c05a2fb2c6d8a334c578fc347392ba38",
        "commit": {
          "message": "test: Update attribute fixture snapshot (#24083)\n\n* test: Update attribute fixture snapshot\r\n\r\n* Poke CircleCI\r\n\r\n* Poke CircleCI"
        }
      },
      {
        "sha": "ece5295e5af992d30256f26ca428abdad514f862",
        "commit": {
          "message": "Remove unnecessary flag check (#24284)"
        }
      },
      {
        "sha": "4bc465a16f3270283886221604c1187fc976859b",
        "commit": {
          "message": "Rename Controls to PipeableStream (#24286)\n\nThis type isn't exported so it's technically not public.\r\n\r\nThis object mimics a ReadableStream.\r\n\r\nCurrently this is safe to destructure and call separately but I'm not sure\r\nthat's even guaranteed. It should probably be treated as a class in docs."
        }
      },
      {
        "sha": "bb49abea2377d6391a98cef536e9da4c26ddaa39",
        "commit": {
          "message": "Update some READMEs (#24290)\n\n* Update some READMEs\r\n\r\n* Update README.md"
        }
      },
      {
        "sha": "3e8c91c5f8e142f341b407bdebfe4fe4e0930914",
        "commit": {
          "message": "Fix import in README"
        }
      },
      {
        "sha": "e8f4a6653dc3f5d9702236a3abed887ca44dcfbb",
        "commit": {
          "message": "Fix import in example"
        }
      },
      {
        "sha": "0579154772af551bfccf9ff0cc7076a39316344a",
        "commit": {
          "message": "Update create-subscription README (#24294)"
        }
      },
      {
        "sha": "d68b09defca37c30d3a7a34d4de884e374c74858",
        "commit": {
          "message": "Fix warning about setState in useEffect (#24295)\n\n* Fix warning about setState in useEffect\r\n\r\n* Fix test\r\n\r\n* Fix multiple roots"
        }
      },
      {
        "sha": "548b542b41565340a9ffd36d0d4e5e1d244cc113",
        "commit": {
          "message": "Update renderToPipeableStream#options.onShellError to match usage (#24299)"
        }
      },
      {
        "sha": "f56dfe950b206651913bf0b836c10592c393357d",
        "commit": {
          "message": "Warn on setState() in useInsertionEffect() (#24298)\n\n* Warn on setState() in useInsertionEffect()\r\n\r\n* Use existing DEV reset mechanism"
        }
      },
      {
        "sha": "1f7a901d7b2fc073e29a1887553b1bd18080da1b",
        "commit": {
          "message": "Fix false positive lint error with large number of branches  (#24287)\n\n* Switched RulesOfHooks.js to use BigInt. Added test and updated .eslintrc.js to use es2020.\r\n\r\n* Added BigInt as readonly global in eslintrc.cjs.js and eslintrc.cjs2015.js\r\n\r\n* Added comment to RulesOfHooks.js that gets rid of BigInt eslint error\r\n\r\n* Got rid of changes in .eslintrc.js and yarn.lock\r\n\r\n* Move global down\r\n\r\nCo-authored-by: stephen cyron <stephen.cyron@fdmgroup.com>\r\nCo-authored-by: dan <dan.abramov@gmail.com>"
        }
      },
      {
        "sha": "65f35035a6184865c495934c89477a4d507fba1a",
        "commit": {
          "message": "Allow react-devtools-inline createStore() method to override Store config params (#24303)"
        }
      },
      {
        "sha": "caa60e8fccf4346c64a92fce0e6c171d0ee9764c",
        "commit": {
          "message": "update types for NonIdleLanes and IdleLane (#24313)"
        }
      },
      {
        "sha": "5b2e7253f92a879894f7371472e43c2cff511b30",
        "commit": {
          "message": "React DevTools 4.24.3 -> 4.24.4 (#24315)"
        }
      },
      {
        "sha": "4ebaeae40dec52c84c968a25f1f21f4d0f571336",
        "commit": {
          "message": "moved mutation code to passive (#24251)\n\nThis PR moves the code for transition tracing in the mutation phase that adds transitions to the pending callbacks object (to be called sometime later after paint) from the mutation to the passive phase.\r\n\r\nThings to think about:\r\n\r\nPassive effects can be flushed before or after paint. How do we make sure that we get the correct end time for the interaction?"
        }
      },
      {
        "sha": "bafe912a5f20736c40f505a47fcb238a375572a6",
        "commit": {
          "message": "update types for InputContinuousLane and DefaultLane (#24316)"
        }
      },
      {
        "sha": "a9add2fe08cc3fa8fc811f6efce84815827fb98c",
        "commit": {
          "message": "Fix file path separator compatibility in scripts/babel (#24318)\n\nThe problem in scripts\\babel\\transform-object-assign.js is that file path separator has '/' and '\\' between Linux, MacOS and Windows, which causes yarn build error. See https://github.com/facebook/react/issues/24103"
        }
      },
      {
        "sha": "b86baa1cb7b0838169eb762873d53442b9075c94",
        "commit": {
          "message": "Add back lost cache test (#24317)"
        }
      },
      {
        "sha": "8dcedba15a4a0f5545e3b386355000208884b24f",
        "commit": {
          "message": "Add fallback shim for AbortController (#24285)\n\n* Add fallback shim for AbortController\r\n\r\n* Replace shim with a minimal stub\r\n\r\n* replace-fork\r\n\r\n* Better minification\r\n\r\n* Fix flow\r\n\r\n* Even smaller\r\n\r\n* replace-fork\r\n\r\n* Revert back to object constructor\r\n\r\n* replace-fork"
        }
      },
      {
        "sha": "ea7b2ec2898c615f648aec30fcbcf73aed156583",
        "commit": {
          "message": "Remove wrong return pointer warning\n\nI'm about to refactor part of the commit phase to use recursion instead\nof iteration. As part of that change, we will no longer assign the\n`return` pointer when traversing into a subtree. So I'm disabling\nthe internal warning that fires if the return pointer is not consistent\nwith the parent during the commit phase.\n\nI had originally added this warning to help prevent mistakes when\ntraversing the tree iteratively, but since we're intentionally switching\nto recursion instead, we don't need it."
        }
      },
      {
        "sha": "12d7a9ad7082106102b7dd9fec4c75abafe1c2a8",
        "commit": {
          "message": "Combine commitWork into single switch statement\n\ncommitWork is forked into a separate implementation for mutation mode\n(DOM) and persistent mode (React Native). But unlike when it was first\nintroduced, there's more overlap than differences between the forks,\nmainly because we've added new types of fibers. So this joins the two\nforks and adds more local branches where the behavior actually\ndiverges: host nodes, host containers, and portals."
        }
      },
      {
        "sha": "e66e7a0fb875dac2d3e34c005c5be7503f979143",
        "commit": {
          "message": "Inline commitWork into commitMutationOnFiber\n\nThere's not really any reason these should be separate functions. The\nfactoring has gotten sloppy and redundant because there's similar logic\nin both places, which is more obvious now that they're combined.\n\nNext I'll start combining the redundant branches."
        }
      },
      {
        "sha": "54b5b32d53355ad1634a97e604a583e8da6fa842",
        "commit": {
          "message": "Move Update flag check into each switch case\n\nThe fiber tag is more specific than the effect flag, so we should always\nrefine the type of work first, to minimize redundant checks.\n\nIn the next step I'll move all other other flag checks in this function\ninto the same switch statement."
        }
      },
      {
        "sha": "c99c5f1df6e3c274d34bd2e5f0b27ac4af481f94",
        "commit": {
          "message": "Move ad hoc flag checks into main switch statement\n\nWe should always refine the type of fiber before checking the effect\nflag, because the fiber tag is more specific.\n\nNow we have a single switch statement for all mutation effects."
        }
      },
      {
        "sha": "bcc1b3121e3052f88a643eaefe93f300a4bfa7b2",
        "commit": {
          "message": "Move reportUncaughtErrorInDev to captureCommitPhaseError\n\nreportUncaughtErrorInDev is always followed by captureCommitPhaseError,\nso we can move it into that function."
        }
      },
      {
        "sha": "f9e6aef82880615d7d11fb9facf9edfd8c80dcf6",
        "commit": {
          "message": "Wrap try-catch directly around each user function\n\nThis moves the try-catch from around each fiber's mutation phase to\ndireclty around each user function (effect function, callback, etc).\n\nWe already do this when unmounting because if one unmount function\nerrors, we still need to call all the others so they can clean up\ntheir resources.\n\nPreviously we didn't bother to do this for anything but unmount,\nbecause if a mount effect throws, we're going to delete that whole\ntree anyway.\n\nBut now that we're switching from an iterative loop to a recursive one,\nwe don't want every call frame on the stack to have a try-catch, since\nthe error handling requires additional memory.\n\nWrapping every user function is a bit tedious, but it's better\nfor performance. Many of them already had try blocks around\nthem already."
        }
      },
      {
        "sha": "481dece5808d1207acd66a6a0365efee729cf0f7",
        "commit": {
          "message": "Use recursion to traverse during mutation phase\n\nMost of the commit phase uses iterative loops to traverse the tree.\nOriginally we thought this would be faster than using recursion, but\na while back @trueadm did some performance testing and found that the\nloop was slower because we assign to the `return` pointer before\nentering a subtree (which we have to do because the `return` pointer\nis not always consistent; it could point to one of two fibers).\n\nThe other motivation is so we can take advantage of the JS stack to\ntrack contextual information, like the nearest host parent.\n\nWe already use recursion in a few places; this changes the mutation\nphase to use it, too."
        }
      },
      {
        "sha": "46db4e996d686ffbc8ec4cc7d559d6897288b780",
        "commit": {
          "message": "Combine deletion phase into single recursive function\n\nSimilar to the previous step, this converts the deletion phase into\na single recursive function. Although there's less code, this one is\na bit trickier because it's already contains some stack-like logic\nfor tracking the nearest host parent. But instead of using the actual\nstack, it repeatedly searches up the fiber return path to find the\nnearest host parent.\n\nInstead, I've changed it to track the nearest host parent on the\nJS stack.\n\n(We still search up the return path once, to set the initial host parent\nright before entering a deleted tree. As a follow up, we can instead\npush this to the stack as we traverse during the main mutation phase.)"
        }
      },
      {
        "sha": "ec52a5698e2dfea7050a0b015f0b79abfb2d81b7",
        "commit": {
          "message": "Fix: Don't call cWU if already unmounted\n\nWhen a tree goes offscreen, we unmount all the effects just like we\nwould in a normal deletion. (Conceptually it _is_ a deletion; we keep\nthe fiber around so we can reuse its state if the tree mounts again.)\n\nIf an offscreen component gets deleted \"for real\", we shouldn't unmount\nit again.\n\nThe fix is to track on the stack whether we're inside a hidden tree.\n\nWe already had a stack variable for this purpose, called\n`offscreenSubtreeWasHidden`, in another part of the commit phase, so I\nreused that variable instead of creating a new one. (The name is a bit\nconfusing: \"was\" refers to the current tree before this commit. So, the\n\"previous current\".)\n\nCo-authored-by: dan <dan.abramov@me.com>"
        }
      },
      {
        "sha": "60e63b960f19d4c846cf32d47d2a974297ae253a",
        "commit": {
          "message": "remove console.error in ReactFiberLane (#24319)\n\nWe changed the implementation of root.transitionLanes so that, if there is no transitions for a given lane, we use null instead of an array. This means that this error is no longer valid, so we are removing it"
        }
      },
      {
        "sha": "b0f13e5d391c0deba4327eb15c07e7321f3a871e",
        "commit": {
          "message": "add pendingPassiveTransitions (#24320)\n\nAdd pendingPassiveTransitions work loop module level variable. Because workInProgressTransitions might change before we process it in the passive effects, we introduce a new variable, pendingPassiveTransitions, where we store the transitions until we can actually process them in the commit phase."
        }
      },
      {
        "sha": "e0160d50c5a492a925db6ab3f8478e118336c722",
        "commit": {
          "message": "add transition tracing transitions stack (#24321)\n\nAdded a transitions stack for to keep track of which transitions are still happening for the current boundary.\r\n* On the root, we will get all transitions that have been initiated for the corresponding lanes.\r\n* Whenever we encounter a suspended boundary, we will add all transitions on the stack onto the boundary\r\n* Whenever we encounter a boundary that just unsuspended, we will add all transitions on the boundary onto the stack\r\nA transition will be considered complete when there are no boundaries that have the associated transition"
        }
      },
      {
        "sha": "0568c0f8cde4ac6657dff9a5a8a7112acc35a748",
        "commit": {
          "message": "Replace zero with NoLanes for consistency in FiberLane (#24327)"
        }
      },
      {
        "sha": "fa580022624974f4a8d0e0a3b67e1dc2fd54d583",
        "commit": {
          "message": "[Fizz] Pipeable Stream Perf (#24291)\n\n* Add fixture for comparing baseline render perf for renderToString and renderToPipeableStream\r\n\r\nModified from ssr2 and https://github.com/SuperOleg39/react-ssr-perf-test\r\n\r\n* Implement buffering in pipeable streams\r\n\r\nThe previous implementation of pipeable streaming (Node) suffered some performance issues brought about by the high chunk counts and innefficiencies with how node streams handle this situation. In particular the use of cork/uncork was meant to alleviate this but these methods do not do anything unless the receiving Writable Stream implements _writev which many won't.\r\n\r\nThis change adopts the view based buffering techniques previously implemented for the Browser execution context. The main difference is the use of backpressure provided by the writable stream which is not implementable in the other context. Another change to note is the use of standards constructs like TextEncoder and TypedArrays.\r\n\r\n* Implement encodeInto during flushCompletedQueues\r\n\r\nencodeInto allows us to write directly to the view buffer that will end up getting streamed instead of encoding into an intermediate buffer and then copying that data."
        }
      },
      {
        "sha": "f993ffc5141a58e2a53d4b822b15744b0542aa93",
        "commit": {
          "message": "Fix infinite update loop that happens when an unmemoized value is passed to useDeferredValue (#24247)\n\n* Fix infinite loop if unmemoized val passed to uDV\r\n\r\nThe current implementation of useDeferredValue will spawn a new\r\nrender any time the input value is different from the previous one. So\r\nif you pass an unmemoized value (like an inline object), it will never\r\nstop spawning new renders.\r\n\r\nThe fix is to only defer during an urgent render. If we're already\r\ninside a transition, retry, offscreen, or other non-urgen render, then\r\nwe can use the latest value.\r\n\r\n* Temporarily disable \"long nested update\" warning\r\n\r\nDevTools' timeline profiler warns if an update inside a layout effect\r\nresults in an expensive re-render. However, it misattributes renders\r\nthat are spawned from a sync render at lower priority. This affects the\r\nnew implementation of useDeferredValue but it would also apply to things\r\nlike Offscreen.\r\n\r\nIt's not obvious to me how to fix this given how DevTools models the\r\nidea of a \"nested update\" so I'm disabling the warning for now to\r\nunblock the bugfix for useDeferredValue."
        }
      },
      {
        "sha": "d9a0f9e20338f05f0992562075ff034ccde008fe",
        "commit": {
          "message": "Delete create-subscription folder (#24288)"
        }
      },
      {
        "sha": "01e2bff1dcd99fffc9b1ea3fc398ad1b36f969eb",
        "commit": {
          "message": "Remove unnecessary check (#24332)"
        }
      },
      {
        "sha": "df5d32f230fea7b2ca1e1ddcb78efd6c3f8d7ef2",
        "commit": {
          "message": "Remove create-subscription from the list"
        }
      },
      {
        "sha": "4997515b96eede5ab1ca622e0439a0707f8d4afd",
        "commit": {
          "message": "Point useSubscription to useSyncExternalStore shim (#24289)\n\n* Point useSubscription to useSyncExternalStore shim\r\n\r\n* Update tests\r\n\r\n* Update README\r\n\r\n* Ad hoc case"
        }
      },
      {
        "sha": "069d23bb74939c19bc8860ad4013324bd6e1c5f3",
        "commit": {
          "message": " [eslint-plugin-exhaustive-deps] Fix exhaustive deps check for unstable vars (#24343)\n\n* Fix exhaustive deps for unstable vars\r\n\r\n* Fix formatting\r\n\r\n* Optimise iterations\r\n\r\n* Fix linting"
        }
      },
      {
        "sha": "55a21ef7e78a4e35302cbc7ffb19934a23cc6957",
        "commit": {
          "message": "fix pushTransition for transition tracing (#24338)\n\nWe forgot to move pushTransition out from the enableCache flag in #24321 in a place that both transition tracing and cache need to push transitions. Move it out from behind the enableCache to prepare for the next PRs."
        }
      },
      {
        "sha": "8e2f9b086e7abc7a92951d264a6a5d048defd914",
        "commit": {
          "message": "move passive flag (#24339)\n\nPreviously, we were only adding the passive flag when we add the Visibility flag, which is only set when we go from primary to fallback. Now, we add the passive flag BOTH when we go from primary to fallback and from fallback to primary.\r\n\r\nAn alternate solution is to add the passive flag in the same place as the visibility flag in the offscreen complete phase (rather than the suspense complete phase), but this feature is currently only for suspense, and offscreen can be used in different ways, so for now we add the passive flag only in the suspense component's complete phase. We might want to revisit this later when we think about how offscreen should work with transition tracing."
        }
      },
      {
        "sha": "fea6f8da6ab669469f2fa3f18bd3a831f00ab284",
        "commit": {
          "message": "[Transition Tracing] Add transition to OffscreenState and pendingSuspenseBoundaries to RootState (#24340)\n\nIn this PR we:\r\n\r\nAdd transitions boilerplate to the OffscreenState. The transitions field will be null on initiation. During the commit phase, if there are any new transitions, we will add any new transitions (either as a result of a transition occurring or a parent suspense boundary completing) to the transitions field. Once the suspense boundary resolves, we no longer need to store the transitions on the boundary, so we can put this field on the Offscreen memoized state\r\nAdd pendingSuspenseBoundaries boilerplate to the RootState. This field starts as null. During the commit phase, if a suspense boundary has either gone from fallback to resolved or from resolved to fallback, we will create a new Map if there isn't one, and if there is, we will add (if the boundary is a fallback) or remove the suspense boundary (if the boundary has resolved) from the map.\r\nAdd an optional name field to the Suspense boundary"
        }
      },
      {
        "sha": "80170a0681def183f8f3153425f1086d3d383922",
        "commit": {
          "message": "Match bundle.name and match upper case entry points (#24346)\n\nFix matching in the build script.\r\n\r\nIt's possible to provide a custom bundle name in the case we build deep\r\nimports. We should match those names as a convenience.\r\n\r\nThe script also calls toLowerCase on requested names but some entries have\r\nupper case now."
        }
      },
      {
        "sha": "4fc394bbecdf55e46d192536e1a545376f90d84b",
        "commit": {
          "message": "Fix suspense fallback throttling (#24253)\n\n* fix suspense throttling\r\n\r\n* fix lint\r\n\r\n* Tweak tests + another test\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"
        }
      },
      {
        "sha": "f7cf077cca6524877cb837adb9a8ff54242672b1",
        "commit": {
          "message": "[Transition Tracing] Add Offscreen Queue (#24341)\n\nAdds an Offscreen Queue. We use the offscreen queue to store not yet processed transitions. During the commit phase, we will add these transitions to the transitions field in memoizedState (in the subsequent PR) and clear the transitions field in the updateQueue"
        }
      },
      {
        "sha": "8bc527a4cf3e7e8b15ad0312cd49b438181103f2",
        "commit": {
          "message": "Bugfix: Fix race condition between interleaved and non-interleaved updates (#24353)\n\n* Regression test: Interleaved update race condition\r\n\r\nDemonstrates the bug reported in #24350.\r\n\r\n* Bugfix: Last update wins, even if interleaved\r\n\r\n\"Interleaved\" updates are updates that are scheduled while a render is\r\nalready in progress. We put these on a special queue so that they don't\r\nget processed during the current render. Then we transfer them to\r\nthe \"real\" queue after the render has finished.\r\n\r\nThere was a race condition where an update is received after the render\r\nhas finished but before the interleaved update queue had been\r\ntransferred, causing the updates to be queued in the wrong order.\r\n\r\nThe fix I chose is to check if the interleaved updates queue is empty\r\nbefore adding any update to the real queue. If it's not empty, then\r\nthe new update must also be treated as interleaved."
        }
      },
      {
        "sha": "168da8d55782f3b34e2a6aa0c4dd0587696afdbd",
        "commit": {
          "message": "Fix typo that happened during rebasing\n\nI changed the type of this functions returned value but forgot to change\nthe check.\n\nIt happens to work before anyway, because eventually the interleaved\nupdates will get transferred at the beginning of the next render phase.\nBut this is more logically consistent."
        }
      },
      {
        "sha": "ddb1ab1e97588136a3db736696bbc3c8cf9f0210",
        "commit": {
          "message": "Rename react-dom/testing to react-dom/unstable_testing in yarn build-for-devtools (#24364)\n\nThe shell package wasn't compiling because yarn build-for-devtools was incorrect. The react-dom/test package was renamed to react-dom/unstable_testing. This PR fixes this in the package.json.\r\n\r\nNote: Adding packages to the yarn build-for-devtools command isn't great in the long run. Eventually we should make devtools have its own build script."
        }
      },
      {
        "sha": "d63cd972454125d4572bb8ffbfeccbdf0c5eb27b",
        "commit": {
          "message": "don't stringify objects for console log second render (#24373)\n\nFixes #24302 based on #24306.\r\n---\r\n\r\nThe current implementation for strict mode double logging stringiness and dims the second log. However, because we stringify everything, including objects, this causes objects to be logged as `[object Object]` etc.\r\n\r\nThis PR creates a new function that formats console log arguments with a specified style. It does this by:\r\n1. The first param is a string that contains %c: Bail out and return the args without modifying the styles. We don't want to affect styles that the developer deliberately set.\r\n2. The first param is a string that doesn't contain %c but contains string formatting: `[`%c${args[0]}`, style, ...args.slice(1)]` Note: we assume that the string formatting that the developer uses is correct.\r\n3. The first param is a string that doesn't contain string formatting OR is not a string: Create a formatting string where:\r\n   -  boolean, string, symbol -> %s\r\n   -  number -> %f OR %i depending on if it's an int or float\r\n   -  default -> %o\r\n---\r\nCo-authored-by: Billy Janitsch <billy@kensho.com>"
        }
      },
      {
        "sha": "726ba80298dad46b331aca1bcb71ca9b2004ed91",
        "commit": {
          "message": "Synchronize implementations of second render logging (#24381)\n\nMinor followup to #24373. The fix for #24373 (comment) didn't get synchronized to the hook implementation."
        }
      },
      {
        "sha": "d40dc73cf903e8a12fd29e900df2406e7f611c5c",
        "commit": {
          "message": "Escape bootstrapScriptContent for javascript embedding into HTML (#24385)\n\nThe previous escape was for Text into HTML and breaks script contents. The new escaping ensures that the script contents cannot prematurely close the host script tag by escaping script open and close string sequences using a unicode escape substitution."
        }
      },
      {
        "sha": "2bf5eba7247a58aeb7ba23b3b5630d8bf6c2c4da",
        "commit": {
          "message": "explain the rationale for the chosen escaping implemenation in a comment (#24389)"
        }
      },
      {
        "sha": "ab9cdd34fb6c88d56c83882dbd011b4546878483",
        "commit": {
          "message": "Bugfix: In legacy mode, call suspended tree's unmount effects when it is deleted (#24400)\n\n* Bug: Missing unmount when suspended tree deleted\r\n\r\nWhen a suspended tree switches to a fallback, we unmount the effects.\r\nIf the suspended tree is then deleted, there's a guard to prevent us\r\nfrom unmounting the effects again.\r\n\r\nHowever, in legacy mode, we don't unmount effects when a tree suspends.\r\nSo if the suspended tree is then deleted, we do need to unmount\r\nthe effects.\r\n\r\nWe're missing a check for legacy/concurrent mode.\r\n\r\n* Fix: Unmount suspended tree when it is deleted"
        }
      },
      {
        "sha": "a6d53f3468636bcee30c26d4e0df7a4582526d63",
        "commit": {
          "message": "Revert \"Clean up Selective Hydration / Event Replay flag (#24156)\" (#24402)\n\nThis reverts commit b5cca182ffd5500b83f20f215d0e16d6dbae0efb."
        }
      },
      {
        "sha": "4175f05934d3954827c00b7633c1ce8e4e87d227",
        "commit": {
          "message": "Temporarily feature flag numeric fallback for symbols (#24401)"
        }
      },
      {
        "sha": "1e748b4528cec1e5e8c8413f8b2e9bcde999d981",
        "commit": {
          "message": "Land enableLazyElements flag (#24407)\n\nThis flag is already enabled on all relevant surfaces. We can remove it."
        }
      },
      {
        "sha": "392808a1f7fa2909492a742116ba8b549e862d70",
        "commit": {
          "message": "Land enableClientRenderFallbackOnTextMismatch flag (#24405)\n\nThis flag is already enabled on all relevant surfaces. We can remove it."
        }
      },
      {
        "sha": "354772952a8228255cc7e8e32906e427e5255c30",
        "commit": {
          "message": "Land enableSelectiveHydration flag (#24406)\n\nThis flag is already enabled on all relevant surfaces. We can remove it."
        }
      },
      {
        "sha": "0dc4e6663dc875e0f734b1a96b26ebc33902323a",
        "commit": {
          "message": "Land enableClientRenderFallbackOnHydrationMismatch (#24410)\n\nThis flag is already enabled on all relevant surfaces. We can remove it."
        }
      },
      {
        "sha": "9ae80d6a2bf8f48f20e3d62b9672f21c1ff77bd8",
        "commit": {
          "message": "Suppress hydration warnings when a preceding sibling suspends (#24404)\n\n* Add failing test case for #24384\r\n\r\nIf a components suspends during hydration we expect there to be mismatches with server rendered HTML but we were not always supressing warning messages related to these expected mismatches\r\n\r\n* Mark hydration as suspending on every thrownException\r\n\r\npreviously hydration would only be marked as supsending when a genuine error was thrown. This created an opportunity for a hydration mismatch that would warn after which later hydration mismatches would not lead to warnings. By moving the marker check earlier in the thrownException function we get the hydration context to enter the didSuspend state on both error and thrown promise cases which eliminates this gap.\r\n\r\n* Fix failing test related to client render fallbacks\r\n\r\nThis test was actually subject to the project identified in the issue fixed in this branch. After fixing the underlying issue the assertion logic needed to change to pick the right warning which now emits after hydration successfully completes on promise resolution. I changed the container type to 'section' to make the error message slightly easier to read/understand (for me)\r\n\r\n* Only mark didSuspend on suspense path\r\n\r\nFor unknown reasons the didSuspend was being set only on the error path and nto the suspense path. The original change hoisted this to happen on both paths. This change moves the didSuspend call to the suspense path only. This appears to be a noop because if the error path marked didSuspend it would suppress later warnings but if it does not the warning functions themsevles do that suppression (after the first one which necessarily already happened)\r\n\r\n* gate test on hydration fallback flags\r\n\r\n* refactor didSuspend to didSuspendOrError\r\n\r\nthe orignial behavior applied the hydration warning bailout to error paths only. originally I moved it to Suspense paths only but this commit restores it to both paths and renames the marker function as didThrow rather than didSuspend\r\n\r\nThe logic here is that for either case if we get a mismatch in hydration we want to warm up components but effectively consider the hydration for this boundary halted\r\n\r\n* factor tests to assert different behavior between prod and dev\r\n\r\n* add DEV suffix to didSuspendOrError to better indicate this feature should only affect dev behavior\r\n\r\n* move tests back to ReactDOMFizzServer-test\r\n\r\n* fix comment casing\r\n\r\n* drop extra flag gates in tests\r\n\r\n* add test for user error case\r\n\r\n* remove unnecessary gate\r\n\r\n* Make test better\r\n\r\nit now has an intentional client mismatch that would error if there wasn't suppression brought about by the earlier error. when it client renders it has the updated value not found in the server response but we do not see a hydration warning because it was superseded by the thrown error in that render"
        }
      },
      {
        "sha": "bd081376665f5f081dcf4bf72f06b7e563c8046d",
        "commit": {
          "message": "Fix: useDeferredValue should reuse previous value (#24413)\n\nDuring an urgent update, useDeferredValue should reuse the previous\r\nvalue. The regression test I added shows that it was reverting to\r\nthe initial value instead.\r\n\r\nThe cause of the bug was trivial: the update path doesn't update the\r\nhook's `memoizedState` field. Only the mount path.\r\n\r\nNone of the existing tests happened to catch this because to trigger the\r\nbug, you have to do an urgent update that isn't the first update after\r\ninitial render. In all of the existing tests that included an urgent\r\nupdate, it was the first update, so the \"previous\" value and the initial\r\nvalue happened to be the same thing."
        }
      },
      {
        "sha": "6d3b6d0f408136479d7298f1a14d79e8a12f0c65",
        "commit": {
          "message": "forwardRef et al shouldn't affect if props reused (#24421)\n\nWe don't have strong guarantees that the props object is referentially\r\nequal during updates where we can't bail out anyway — like if the props\r\nare shallowly equal, but there's a local state or context update in the\r\nsame batch.\r\n\r\nHowever, as a principle, we should aim to make the behavior consistent\r\nacross different ways of memoizing a component. For example, React.memo\r\nhas a different internal Fiber layout if you pass a normal function\r\ncomponent (SimpleMemoComponent) versus if you pass a different type like\r\nforwardRef (MemoComponent). But this is an implementation detail.\r\nWrapping a component in forwardRef (or React.lazy, etc) shouldn't affect\r\nwhether the props object is reused during a bailout.\r\n\r\nCo-authored-by: Mateusz Burzyński <mateuszburzynski@gmail.com>"
        }
      },
      {
        "sha": "bd4784c8f8c6b17cf45c712db8ed8ed19a622b26",
        "commit": {
          "message": "Revert #24236 (Don't recreate the same fallback on the client if hydrating suspends) (#24434)\n\n* Revert #24236 (Don't recreate the same fallback on the client if hydrating suspends)\r\n\r\n* Use @gate FIXME"
        }
      },
      {
        "sha": "6bf3deef59a1c910d4cda57409411cb0a6bcd43e",
        "commit": {
          "message": "Upgrade react-shallow-renderer to support react 18 (#24442)\n\nTo a minimum version that support react 18"
        }
      },
      {
        "sha": "22edb9f777d27369fd2c1fad378f74e237b6dfd3",
        "commit": {
          "message": "React `version` field should match package.json (#24445)\n\nThe `version` field exported by the React package currently corresponds\r\nto the `@next` release for that build. This updates the build script\r\nto output the same version that is used in the package.json file.\r\n\r\nIt works by doing a find-and-replace of the React version after the\r\nbuild has completed. This is a bit weird but it saves us from having\r\nto build the `@next` and `@latest` releases separately; they are\r\nidentical except for the version numbers."
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v18.0.0",
      "body": "Below is a list of all new features, APIs, deprecations, and breaking changes.\r\nRead [React 18 release post](https://reactjs.org/blog/2022/03/29/react-v18.html) and [React 18 upgrade guide](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html) for more information.\r\n\r\n### New Features\r\n\r\n### React\r\n\r\n* `useId` is a new hook for generating unique IDs on both the client and server, while avoiding hydration mismatches. It is primarily useful for component libraries integrating with accessibility APIs that require unique IDs. This solves an issue that already exists in React 17 and below, but it’s even more important in React 18 because of how the new streaming server renderer delivers HTML out-of-order.\r\n* `startTransition` and `useTransition` let you mark some state updates as not urgent. Other state updates are considered urgent by default. React will allow urgent state updates (for example, updating a text input) to interrupt non-urgent state updates (for example, rendering a list of search results).\r\n* `useDeferredValue` lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn't block user input.\r\n* `useSyncExternalStore` is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for `useEffect` when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React.\r\n* `useInsertionEffect` is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout.\r\n\r\n### React DOM Client\r\n\r\nThese new APIs are now exported from `react-dom/client`:\r\n\r\n* `createRoot`: New method to create a root to `render` or `unmount`. Use it instead of `ReactDOM.render`. New features in React 18 don't work without it.\r\n* `hydrateRoot`: New method to hydrate a server rendered application. Use it instead of `ReactDOM.hydrate` in conjunction with the new React DOM Server APIs. New features in React 18 don't work without it.\r\n\r\nBoth `createRoot` and `hydrateRoot` accept a new option called `onRecoverableError` in case you want to be notified when React recovers from errors during rendering or hydration for logging. By default, React will use [`reportError`](https://developer.mozilla.org/en-US/docs/Web/API/reportError), or `console.error` in the older browsers.\r\n\r\n### React DOM Server\r\n\r\nThese new APIs are now exported from `react-dom/server` and have full support for streaming Suspense on the server:\r\n\r\n* `renderToPipeableStream`: for streaming in Node environments.\r\n* `renderToReadableStream`: for modern edge runtime environments, such as Deno and Cloudflare workers.\r\n\r\nThe existing `renderToString` method keeps working but is discouraged.\r\n\r\n## Deprecations\r\n\r\n* `react-dom`: `ReactDOM.render` has been deprecated. Using it will warn and run your app in React 17 mode.\r\n* `react-dom`: `ReactDOM.hydrate` has been deprecated. Using it will warn and run your app in React 17 mode.\r\n* `react-dom`: `ReactDOM.unmountComponentAtNode` has been deprecated.\r\n* `react-dom`: `ReactDOM.renderSubtreeIntoContainer` has been deprecated.\r\n* `react-dom/server`: `ReactDOMServer.renderToNodeStream` has been deprecated.\r\n\r\n## Breaking Changes\r\n\r\n### React\r\n\r\n* **Automatic batching:** This release introduces a performance improvement that changes to the way React batches updates to do more batching automatically. See [Automatic batching for fewer renders in React 18](https://github.com/reactwg/react-18/discussions/21) for more info. In the rare case that you need to opt out, wrap the state update in `flushSync`.\r\n* **Stricter Strict Mode**: In the future, React will provide a feature that lets components preserve state between unmounts. To prepare for it, React 18 introduces a new development-only check to Strict Mode. React will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount. If this breaks your app, consider removing Strict Mode until you can fix the components to be resilient to remounting with existing state.\r\n* **Consistent useEffect timing**: React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn't always predictable or consistent.\r\n* **Stricter hydration errors**: Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to \"patch up\" individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest `<Suspense>` boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.\r\n* **Suspense trees are always consistent:** If a component suspends before it's fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.\r\n* **Layout Effects with Suspense**: When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.\r\n* **New JS Environment Requirements**: React now depends on modern browsers features including `Promise`, `Symbol`, and `Object.assign`. If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.\r\n\r\n### Scheduler (Experimental)\r\n\r\n* Remove unstable `scheduler/tracing` API\r\n\r\n## Notable Changes\r\n\r\n### React\r\n\r\n* **Components can now render `undefined`:** React no longer throws if you return `undefined` from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a `return` statement before JSX.\r\n* **In tests, `act` warnings are now opt-in:** If you're running end-to-end tests, the `act` warnings are unnecessary. We've introduced an [opt-in](https://github.com/reactwg/react-18/discussions/102) mechanism so you can enable them only for unit tests where they are useful and beneficial.\r\n* **No warning about `setState` on unmounted components:** Previously, React warned about memory leaks when you call `setState` on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We've [removed](https://github.com/facebook/react/pull/22114) this warning.\r\n* **No suppression of console logs:** When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we've suppressed console logs for one of the two renders to make the logs easier to read. In response to [community feedback](https://github.com/facebook/react/issues/21783) about this being confusing, we've removed the suppression. Instead, if you have React DevTools installed, the second log's renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.\r\n* **Improved memory usage:** React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.\r\n\r\n### React DOM Server\r\n\r\n* **`renderToString`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like `renderToPipeableStream` or `renderToReadableStream` instead.\r\n* **`renderToStaticMarkup`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and retry rendering on the client.\r\n\r\n## All Changes\r\n\r\n## React\r\n\r\n* Add `useTransition` and `useDeferredValue` to separate urgent updates from transitions. ([#10426](https://github.com/facebook/react/pull/10426), [#10715](https://github.com/facebook/react/pull/10715), [#15593](https://github.com/facebook/react/pull/15593), [#15272](https://github.com/facebook/react/pull/15272), [#15578](https://github.com/facebook/react/pull/15578), [#15769](https://github.com/facebook/react/pull/15769), [#17058](https://github.com/facebook/react/pull/17058), [#18796](https://github.com/facebook/react/pull/18796), [#19121](https://github.com/facebook/react/pull/19121), [#19703](https://github.com/facebook/react/pull/19703), [#19719](https://github.com/facebook/react/pull/19719), [#19724](https://github.com/facebook/react/pull/19724), [#20672](https://github.com/facebook/react/pull/20672), [#20976](https://github.com/facebook/react/pull/20976) by [@acdlite](https://github.com/acdlite), [@lunaruan](https://github.com/lunaruan), [@rickhanlonii](https://github.com/rickhanlonii), and [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Add `useId` for generating unique IDs. ([#17322](https://github.com/facebook/react/pull/17322), [#18576](https://github.com/facebook/react/pull/18576), [#22644](https://github.com/facebook/react/pull/22644), [#22672](https://github.com/facebook/react/pull/22672), [#21260](https://github.com/facebook/react/pull/21260) by [@acdlite](https://github.com/acdlite), [@lunaruan](https://github.com/lunaruan), and [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Add `useSyncExternalStore` to help external store libraries integrate with React. ([#15022](https://github.com/facebook/react/pull/15022), [#18000](https://github.com/facebook/react/pull/18000), [#18771](https://github.com/facebook/react/pull/18771), [#22211](https://github.com/facebook/react/pull/22211), [#22292](https://github.com/facebook/react/pull/22292), [#22239](https://github.com/facebook/react/pull/22239), [#22347](https://github.com/facebook/react/pull/22347), [#23150](https://github.com/facebook/react/pull/23150) by [@acdlite](https://github.com/acdlite), [@bvaughn](https://github.com/bvaughn), and [@drarmstr](https://github.com/drarmstr))\r\n* Add `startTransition` as a version of `useTransition` without pending feedback. ([#19696](https://github.com/facebook/react/pull/19696) by [@rickhanlonii](https://github.com/rickhanlonii))\r\n* Add `useInsertionEffect` for CSS-in-JS libraries. ([#21913](https://github.com/facebook/react/pull/21913) by [@rickhanlonii](https://github.com/rickhanlonii))\r\n* Make Suspense remount layout effects when content reappears. ([#19322](https://github.com/facebook/react/pull/19322), [#19374](https://github.com/facebook/react/pull/19374), [#19523](https://github.com/facebook/react/pull/19523), [#20625](https://github.com/facebook/react/pull/20625), [#21079](https://github.com/facebook/react/pull/21079) by [@acdlite](https://github.com/acdlite), [@bvaughn](https://github.com/bvaughn), and [@lunaruan](https://github.com/lunaruan))\r\n* Make `<StrictMode>` re-run effects to check for restorable state. ([#19523](https://github.com/facebook/react/pull/19523) , [#21418](https://github.com/facebook/react/pull/21418) by [@bvaughn](https://github.com/bvaughn) and [@lunaruan](https://github.com/lunaruan))\r\n* Assume Symbols are always available. ([#23348](https://github.com/facebook/react/pull/23348) by [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Remove `object-assign` polyfill. ([#23351](https://github.com/facebook/react/pull/23351) by [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Remove unsupported `unstable_changedBits` API. ([#20953](https://github.com/facebook/react/pull/20953) by [@acdlite](https://github.com/acdlite))\r\n* Allow components to render undefined. ([#21869](https://github.com/facebook/react/pull/21869) by [@rickhanlonii](https://github.com/rickhanlonii))\r\n* Flush `useEffect` resulting from discrete events like clicks synchronously. ([#21150](https://github.com/facebook/react/pull/21150) by [@acdlite](https://github.com/acdlite))\r\n* Suspense `fallback={undefined}` now behaves the same as `null` and isn't ignored. ([#21854](https://github.com/facebook/react/pull/21854) by [@rickhanlonii](https://github.com/rickhanlonii))\r\n* Consider all `lazy()` resolving to the same component equivalent. ([#20357](https://github.com/facebook/react/pull/20357) by [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Don't patch console during first render. ([#22308](https://github.com/facebook/react/pull/22308) by [@lunaruan](https://github.com/lunaruan))\r\n* Improve memory usage. ([#21039](https://github.com/facebook/react/pull/21039) by [@bgirard](https://github.com/bgirard))\r\n* Improve messages if string coercion throws (Temporal.*, Symbol, etc.) ([#22064](https://github.com/facebook/react/pull/22064) by [@justingrant](https://github.com/justingrant))\r\n* Use `setImmediate` when available over `MessageChannel`. ([#20834](https://github.com/facebook/react/pull/20834) by [@gaearon](https://github.com/gaearon))\r\n* Fix context failing to propagate inside suspended trees. ([#23095](https://github.com/facebook/react/pull/23095) by [@gaearon](https://github.com/gaearon))\r\n* Fix `useReducer` observing incorrect props by removing the eager bailout mechanism. ([#22445](https://github.com/facebook/react/pull/22445) by [@josephsavona](https://github.com/josephsavona))\r\n* Fix `setState` being ignored in Safari when appending iframes. ([#23111](https://github.com/facebook/react/pull/23111) by [@gaearon](https://github.com/gaearon))\r\n* Fix a crash when rendering `ZonedDateTime` in the tree. ([#20617](https://github.com/facebook/react/pull/20617) by [@dimaqq](https://github.com/dimaqq))\r\n* Fix a crash when document is set to `null` in tests. ([#22695](https://github.com/facebook/react/pull/22695) by [@SimenB](https://github.com/SimenB))\r\n* Fix `onLoad` not triggering when concurrent features are on. ([#23316](https://github.com/facebook/react/pull/23316) by [@gnoff](https://github.com/gnoff))\r\n* Fix a warning when a selector returns `NaN`.  ([#23333](https://github.com/facebook/react/pull/23333) by [@hachibeeDI](https://github.com/hachibeeDI))\r\n* Fix the generated license header. ([#23004](https://github.com/facebook/react/pull/23004) by [@vitaliemiron](https://github.com/vitaliemiron))\r\n* Add `package.json` as one of the entry points. ([#22954](https://github.com/facebook/react/pull/22954) by [@Jack](https://github.com/Jack-Works))\r\n* Allow suspending outside a Suspense boundary. ([#23267](https://github.com/facebook/react/pull/23267) by [@acdlite](https://github.com/acdlite))\r\n* Log a recoverable error whenever hydration fails. ([#23319](https://github.com/facebook/react/pull/23319) by [@acdlite](https://github.com/acdlite))\r\n\r\n### React DOM\r\n\r\n* Add `createRoot` and `hydrateRoot`. ([#10239](https://github.com/facebook/react/pull/10239), [#11225](https://github.com/facebook/react/pull/11225), [#12117](https://github.com/facebook/react/pull/12117), [#13732](https://github.com/facebook/react/pull/13732), [#15502](https://github.com/facebook/react/pull/15502), [#15532](https://github.com/facebook/react/pull/15532), [#17035](https://github.com/facebook/react/pull/17035), [#17165](https://github.com/facebook/react/pull/17165), [#20669](https://github.com/facebook/react/pull/20669), [#20748](https://github.com/facebook/react/pull/20748), [#20888](https://github.com/facebook/react/pull/20888), [#21072](https://github.com/facebook/react/pull/21072), [#21417](https://github.com/facebook/react/pull/21417), [#21652](https://github.com/facebook/react/pull/21652), [#21687](https://github.com/facebook/react/pull/21687), [#23207](https://github.com/facebook/react/pull/23207), [#23385](https://github.com/facebook/react/pull/23385) by [@acdlite](https://github.com/acdlite), [@bvaughn](https://github.com/bvaughn), [@gaearon](https://github.com/gaearon), [@lunaruan](https://github.com/lunaruan), [@rickhanlonii](https://github.com/rickhanlonii), [@trueadm](https://github.com/trueadm), and [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Add selective hydration. ([#14717](https://github.com/facebook/react/pull/14717), [#14884](https://github.com/facebook/react/pull/14884), [#16725](https://github.com/facebook/react/pull/16725), [#16880](https://github.com/facebook/react/pull/16880), [#17004](https://github.com/facebook/react/pull/17004), [#22416](https://github.com/facebook/react/pull/22416), [#22629](https://github.com/facebook/react/pull/22629), [#22448](https://github.com/facebook/react/pull/22448), [#22856](https://github.com/facebook/react/pull/22856), [#23176](https://github.com/facebook/react/pull/23176) by [@acdlite](https://github.com/acdlite), [@gaearon](https://github.com/gaearon), [@salazarm](https://github.com/salazarm), and [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Add `aria-description` to the list of known ARIA attributes. ([#22142](https://github.com/facebook/react/pull/22142) by [@mahyareb](https://github.com/mahyareb))\r\n* Add `onResize` event to video elements. ([#21973](https://github.com/facebook/react/pull/21973) by [@rileyjshaw](https://github.com/rileyjshaw))\r\n* Add `imageSizes` and `imageSrcSet` to known props. ([#22550](https://github.com/facebook/react/pull/22550) by [@eps1lon](https://github.com/eps1lon))\r\n* Allow non-string `<option>` children if `value` is provided.  ([#21431](https://github.com/facebook/react/pull/21431) by [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Fix `aspectRatio` style not being applied. ([#21100](https://github.com/facebook/react/pull/21100) by [@gaearon](https://github.com/gaearon))\r\n* Warn if `renderSubtreeIntoContainer` is called. ([#23355](https://github.com/facebook/react/pull/23355) by [@acdlite](https://github.com/acdlite))\r\n\r\n### React DOM Server\r\n\r\n* Add the new streaming renderer. ([#14144](https://github.com/facebook/react/pull/14144), [#20970](https://github.com/facebook/react/pull/20970), [#21056](https://github.com/facebook/react/pull/21056), [#21255](https://github.com/facebook/react/pull/21255), [#21200](https://github.com/facebook/react/pull/21200), [#21257](https://github.com/facebook/react/pull/21257), [#21276](https://github.com/facebook/react/pull/21276), [#22443](https://github.com/facebook/react/pull/22443), [#22450](https://github.com/facebook/react/pull/22450), [#23247](https://github.com/facebook/react/pull/23247), [#24025](https://github.com/facebook/react/pull/24025), [#24030](https://github.com/facebook/react/pull/24030) by [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Fix context providers in SSR when handling multiple requests. ([#23171](https://github.com/facebook/react/pull/23171) by [@frandiox](https://github.com/frandiox))\r\n* Revert to client render on text mismatch. ([#23354](https://github.com/facebook/react/pull/23354) by [@acdlite](https://github.com/acdlite))\r\n* Deprecate `renderToNodeStream`. ([#23359](https://github.com/facebook/react/pull/23359) by [@sebmarkbage](https://github.com/sebmarkbage))\r\n* Fix a spurious error log in the new server renderer. ([#24043](https://github.com/facebook/react/pull/24043) by [@eps1lon](https://github.com/eps1lon))\r\n* Fix a bug in the new server renderer. ([#22617](https://github.com/facebook/react/pull/22617) by [@shuding](https://github.com/shuding))\r\n* Ignore function and symbol values inside custom elements on the server. ([#21157](https://github.com/facebook/react/pull/21157) by [@sebmarkbage](https://github.com/sebmarkbage))\r\n\r\n### React DOM Test Utils\r\n\r\n* Throw when `act` is used in production. ([#21686](https://github.com/facebook/react/pull/21686) by [@acdlite](https://github.com/acdlite))\r\n* Support disabling spurious act warnings with `global.IS_REACT_ACT_ENVIRONMENT`. ([#22561](https://github.com/facebook/react/pull/22561) by [@acdlite](https://github.com/acdlite))\r\n* Expand act warning to cover all APIs that might schedule React work. ([#22607](https://github.com/facebook/react/pull/22607) by [@acdlite](https://github.com/acdlite))\r\n* Make `act` batch updates. ([#21797](https://github.com/facebook/react/pull/21797) by [@acdlite](https://github.com/acdlite))\r\n* Remove warning for dangling passive effects. ([#22609](https://github.com/facebook/react/pull/22609) by [@acdlite](https://github.com/acdlite))\r\n\r\n### React Refresh\r\n\r\n* Track late-mounted roots in Fast Refresh. ([#22740](https://github.com/facebook/react/pull/22740) by [@anc95](https://github.com/anc95))\r\n* Add `exports` field to `package.json`. ([#23087](https://github.com/facebook/react/pull/23087) by [@otakustay](https://github.com/otakustay))\r\n\r\n### Server Components (Experimental)\r\n\r\n* Add Server Context support. ([#23244](https://github.com/facebook/react/pull/23244) by [@salazarm](https://github.com/salazarm))\r\n* Add `lazy` support. ([#24068](https://github.com/facebook/react/pull/24068) by [@gnoff](https://github.com/gnoff))\r\n* Update webpack plugin for webpack 5 ([#22739](https://github.com/facebook/react/pull/22739) by [@michenly](https://github.com/michenly))\r\n* Fix a mistake in the Node loader. ([#22537](https://github.com/facebook/react/pull/22537) by [@btea](https://github.com/btea))\r\n* Use `globalThis` instead of `window` for edge environments. ([#22777](https://github.com/facebook/react/pull/22777) by [@huozhi](https://github.com/huozhi))\r\n\r\n### Scheduler (Experimental)\r\n\r\n* Remove unstable `scheduler/tracing` API ([#20037](https://github.com/facebook/react/pull/20037) by [@bvaughn](https://github.com/bvaughn))"
    },
    "commits": [
      {
        "sha": "6c7ef3fce5547da5db3d400ccf95a5023f8891f4",
        "commit": {
          "message": "React DevTools 4.20.2 -> 4.21.0 (#22661)"
        }
      },
      {
        "sha": "9db8713f9d08c1956939e33cc2da25c867748263",
        "commit": {
          "message": "Pin CI to Node 14 (#22665)\n\nCI starting running Node 16, which breaks some of our tests because\r\nthe error message text for undefined property access has changed.\r\n\r\nWe should pin to Node 14 until we are able to update the messages."
        }
      },
      {
        "sha": "a0d991fe6587ad1cd1a97230f62f82c7cb6b9a40",
        "commit": {
          "message": "Re-land #22292 (remove uMS from open source build) (#22664)\n\nI had to revert #22292 because there are some internal callers of\r\nuseMutableSource that we haven't migrated yet. This removes\r\nuseMutableSource from the open source build but keeps it in the\r\ninternal one."
        }
      },
      {
        "sha": "ebf9ae8579230e7b1ed0b1d243e1cf802f56938b",
        "commit": {
          "message": "useId (#22644)\n\n* Add useId to dispatcher\r\n\r\n* Initial useId implementation\r\n\r\nIds are base 32 strings whose binary representation corresponds to the\r\nposition of a node in a tree.\r\n\r\nEvery time the tree forks into multiple children, we add additional bits\r\nto the left of the sequence that represent the position of the child\r\nwithin the current level of children.\r\n\r\n    00101       00010001011010101\r\n    ╰─┬─╯       ╰───────┬───────╯\r\n  Fork 5 of 20       Parent id\r\n\r\nThe leading 0s are important. In the above example, you only need 3 bits\r\nto represent slot 5. However, you need 5 bits to represent all the forks\r\nat the current level, so we must account for the empty bits at the end.\r\n\r\nFor this same reason, slots are 1-indexed instead of 0-indexed.\r\nOtherwise, the zeroth id at a level would be indistinguishable from\r\nits parent.\r\n\r\nIf a node has only one child, and does not materialize an id (i.e. does\r\nnot contain a useId hook), then we don't need to allocate any space in\r\nthe sequence. It's treated as a transparent indirection. For example,\r\nthese two trees produce the same ids:\r\n\r\n<>                          <>\r\n  <Indirection>               <A />\r\n    <A />                     <B />\r\n  </Indirection>            </>\r\n  <B />\r\n</>\r\n\r\nHowever, we cannot skip any materializes an id. Otherwise, a parent id\r\nthat does not fork would be indistinguishable from its child id. For\r\nexample, this tree does not fork, but the parent and child must have\r\ndifferent ids.\r\n\r\n<Parent>\r\n  <Child />\r\n</Parent>\r\n\r\nTo handle this scenario, every time we materialize an id, we allocate a\r\nnew level with a single slot. You can think of this as a fork with only\r\none prong, or an array of children with length 1.\r\n\r\nIt's possible for the the size of the sequence to exceed 32 bits, the\r\nmax size for bitwise operations. When this happens, we make more room by\r\nconverting the right part of the id to a string and storing it in an\r\noverflow variable. We use a base 32 string representation, because 32 is\r\nthe largest power of 2 that is supported by toString(). We want the base\r\nto be large so that the resulting ids are compact, and we want the base\r\nto be a power of 2 because every log2(base) bits corresponds to a single\r\ncharacter, i.e. every log2(32) = 5 bits. That means we can lop bits off\r\nthe end 5 at a time without affecting the final result.\r\n\r\n* Incremental hydration\r\n\r\nStores the tree context on the dehydrated Suspense boundary's state\r\nobject so it resume where it left off.\r\n\r\n* Add useId to react-debug-tools\r\n\r\n* Add selective hydration test\r\n\r\nDemonstrates that selective hydration works and ids are preserved even\r\nafter subsequent client updates."
        }
      },
      {
        "sha": "8c4a05b8fb83624d5442f74138e7f263d666fd5d",
        "commit": {
          "message": "Remove @flow pragma comment from module registration start/stop templates (#22670)"
        }
      },
      {
        "sha": "75f3ddebfa0d9885ce8df42571cf0c09ad6c0a3b",
        "commit": {
          "message": "Remove experimental useOpaqueIdentifier API (#22672)\n\nuseId is the updated version of this API."
        }
      },
      {
        "sha": "5cccacd131242bdea2c2fe4b33fac50d2e3132b4",
        "commit": {
          "message": "Upgrade useId to alpha channel (#22674)"
        }
      },
      {
        "sha": "3fcd81dd1c3cd1413b72ae2919bc8312787f8f58",
        "commit": {
          "message": "Improved workers filenames in devtools-inline (#22676)"
        }
      },
      {
        "sha": "9fb3442250cf198782a08024195fcc5402479160",
        "commit": {
          "message": "Fix DevTools advanced tooltip display conditional check (#22669)"
        }
      },
      {
        "sha": "00ced1e2b7610543a519329a76ad0bfd12cd1c32",
        "commit": {
          "message": "Fix useId in strict mode (#22681)\n\n* Fix: useId in strict mode\r\n\r\nIn strict mode, `renderWithHooks` is called twice to flush out\r\nside effects.\r\n\r\nModying the tree context (`pushTreeId` and `pushTreeFork`) is effectful,\r\nso before this fix, the tree context was allocating two slots for a\r\nmaterialized id instead of one.\r\n\r\nTo address, I lifted those calls outside of `renderWithHooks`. This\r\nis how I had originally structured it, and it's how Fizz is structured,\r\ntoo. The other solution would be to reset the stack in between the calls\r\nbut that's also a bit weird because we usually only ever reset the\r\nstack during unwind or complete.\r\n\r\n* Add test for render phase updates\r\n\r\nNoticed this while fixing the previous bug"
        }
      },
      {
        "sha": "255221c86930e31c144713eb466bf0a00ab8fd7e",
        "commit": {
          "message": "[DevTools] Add open in editor for fb (#22649)\n\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "51c558aeb6f5b0ae639d975fd4044007a73115c1",
        "commit": {
          "message": "Rename (some) \"scheduling profiler\" references to \"timeline\" (#22690)"
        }
      },
      {
        "sha": "1bf6deb865052111474f2988bb831de13d09c560",
        "commit": {
          "message": "Renamed packages/react-devtools-scheduling-profiler to packages/react-devtools-timeline (#22691)"
        }
      },
      {
        "sha": "8ca3f567bc3ed56c2101e5c51f968a5339f63093",
        "commit": {
          "message": "Fix module-boundary wrappers (#22688)"
        }
      },
      {
        "sha": "13455d26d1904519c53686d6f295d4eb50b6c2fc",
        "commit": {
          "message": "Cleaned up remaining \"scheduling profiler\" references in DevTools (#22696)"
        }
      },
      {
        "sha": "54f6ae9b1c0489784f6a95bbe26ffec31816d74a",
        "commit": {
          "message": "Fix small typos (#22701)"
        }
      },
      {
        "sha": "ee069065db449194a62a5c0dc2f8f6b61fa5e1b8",
        "commit": {
          "message": "devtools: Display root type for root updates in \"what caused this update?\" (#22599)"
        }
      },
      {
        "sha": "327d5c48454aaee0d78fa69b7ef96a14605bf93b",
        "commit": {
          "message": "Delete unused Circle CI scripts. (#22710)"
        }
      },
      {
        "sha": "99a73ac670ce8d71ae8a690e9795d35cbdfa20b6",
        "commit": {
          "message": "Timeline: Improved snapshot view (#22706)"
        }
      },
      {
        "sha": "2db6d6a5a7a2ecf74610d5a55732d6753b15b836",
        "commit": {
          "message": "fix(devtools): expose css vars to reach-ui portal components (#22716)"
        }
      },
      {
        "sha": "2b77ab26adc2601dc223ede75ff4d19bc19c8684",
        "commit": {
          "message": "fix(devtools): accept json file in import fileinput (#22717)"
        }
      },
      {
        "sha": "827021c4e30d632f48cdaa41b2e6b2da8719eb8d",
        "commit": {
          "message": "Changelog for eslint-plugin-react-hooks@4.3.0"
        }
      },
      {
        "sha": "c3f34e4beb67a4ddd85a9456ebc9013d123aa6ee",
        "commit": {
          "message": "eslint-plugin-react-hooks@4.3.0"
        }
      },
      {
        "sha": "0ddd69d1226c660ee4930b0dce7860b706e548bc",
        "commit": {
          "message": "Throw on hydration mismatch and force client rendering if boundary hasn't suspended within concurrent root (#22629)\n\n* Throw on hydration mismatch\r\n\r\n* remove debugger\r\n\r\n* update error message\r\n\r\n* update error message part2...\r\n\r\n* fix test?\r\n\r\n* test? :(\r\n\r\n* tests 4real\r\n\r\n* remove useRefAccessWarning gating\r\n\r\n* split markSuspenseBoundary and getNearestBoundary\r\n\r\n* also assert html is correct\r\n\r\n* replace-fork\r\n\r\n* also remove client render flag on suspend\r\n\r\n* replace-fork\r\n\r\n* fix mismerge????"
        }
      },
      {
        "sha": "ff9897d23ec713d4e0c802386dffe4024916749e",
        "commit": {
          "message": "[React Refresh] support typescript namespace syntax (#22621)\n\n* [React Refresh] support typescript namespace syntax\r\n\r\n* [React Refresh] handle nested namespace\r\n\r\nCo-authored-by: Wang Yilin <wang_yil@worksap.co.jp>"
        }
      },
      {
        "sha": "a04f13d299230d1d987548f07f4506038d7367b1",
        "commit": {
          "message": "react-refresh@0.11.0"
        }
      },
      {
        "sha": "e0aa5e205feee53043ce1ae8726fe732866e6ea7",
        "commit": {
          "message": "Add Scheduling Profiler GK link to Timeline UI for FB build (#22730)\n\nThis is a constant source of confusion for FB engineers trying to figure out why Chrome profiling data does not have any React marks."
        }
      },
      {
        "sha": "a44a7a2a3f8d7b24ddf5d0c6efeb6127e6b395c3",
        "commit": {
          "message": "Filter empty commits (all Fibers bailed out) from Profiler (#22745)"
        }
      },
      {
        "sha": "56efc65e5857abe22062c9506207abc35c9532d1",
        "commit": {
          "message": "DevTools should properly report re-renders due to (use)context changes (#22746)\n\nNote that this only fixes things for newer versions of React (e.g. 18 alpha). Older versions will remain broken because there's not a good way to read the most recent context value for a location in the tree after render has completed. This is because React maintains a stack of context values during render, but by the time DevTools is called– render has finished and the stack is empty."
        }
      },
      {
        "sha": "cb11155c86e756838a97679fb04c3256de101943",
        "commit": {
          "message": "Add runtime type checks around module boundary code (#22748)"
        }
      },
      {
        "sha": "c0c71a868560b3042847722659579418bfe2d7e1",
        "commit": {
          "message": "Re-enable useMutableSource in internal RN (#22750)"
        }
      },
      {
        "sha": "f86cd5408b3154b3aa55ca6d9d86aa3091b7b2e5",
        "commit": {
          "message": "devtools: dont restore profiling data if we're profling (#22753)"
        }
      },
      {
        "sha": "e6f60d2adda7d4ebf6631eb8166572c3706d52a3",
        "commit": {
          "message": "fix typos (#22715)"
        }
      },
      {
        "sha": "0b329511b9aaff7e27990fc16354db8ea0a16de8",
        "commit": {
          "message": "chore: fix comment typo (#22657)"
        }
      },
      {
        "sha": "200415c91c724e408c055445e8b99ac0f0c52dc4",
        "commit": {
          "message": "fix typos (#22288)"
        }
      },
      {
        "sha": "d4144e6e54276362b05f4319bb38939aff37bdaa",
        "commit": {
          "message": "fix : grammatical typo for test description (#22764)\n\n* fix : grammatical typo for test description\r\n\r\n* fix linting issues"
        }
      },
      {
        "sha": "489b4bdcca00ddc808276a230f334c575bce9c84",
        "commit": {
          "message": "Fixed typos (#22763)\n\n* Fixed typos\r\n\r\n* Update ReactFiberWorkLoop.new.js\r\n\r\n* Update ReactFiberWorkLoop.old.js"
        }
      },
      {
        "sha": "83564712b6e2907dcffdbf5f99b4713cf6c950de",
        "commit": {
          "message": "Move SuspenseList to experimental channel (#22765)\n\nThere's more work to be done to implement this correctly on the server,\r\nso we're going to wait to release it until an 18.x minor."
        }
      },
      {
        "sha": "a52d76b877cbb7d62f914d32dfede1275da18337",
        "commit": {
          "message": "Bump 18 from alpha to beta (#22766)"
        }
      },
      {
        "sha": "96ca8d9155043e4636308edd6501fde67ce40aa5",
        "commit": {
          "message": "Allow publishing with `beta` tag (#22768)"
        }
      },
      {
        "sha": "ee8f146a61e628ba8da5bff414b0b1142b167426",
        "commit": {
          "message": "Proof of Concept for E2E tests using playwright (#22754)"
        }
      },
      {
        "sha": "4ff5f5719b348d9d8db14aaa49a48532defb4ab7",
        "commit": {
          "message": "Move unstable_scheduleHydration to ReactDOMHydrationRoot (#22455)\n\n* move unstable_scheduleHydration to ReactDOMHydrationRoot\r\n\r\n* move definition of schedule hydration\r\n\r\n* fix test?\r\n\r\n* prototype\r\n\r\n* fix test\r\n\r\n* remove gating because unstable_scheduleHydration is no longer gated through index.stable.js because its exposed through ReactDOMHydrationRoot instead of the ReactDOM package\r\n\r\n* remove another gating"
        }
      },
      {
        "sha": "ca94e268025104e7844edc1fbe6e7b2b10d54e05",
        "commit": {
          "message": "Remove 'packages/shared/invariant.js' (#22779)"
        }
      },
      {
        "sha": "afbc2d08f4dabf00222e9561344b65e51d6ed190",
        "commit": {
          "message": "Remove unused react-internal/invariant-args ESLint rule. (#22778)"
        }
      },
      {
        "sha": "520ffc77a399cc1fd785929b42a84f3d1c8bd106",
        "commit": {
          "message": "Use globalThis if possible for native fetch in browser build (#22777)"
        }
      },
      {
        "sha": "aa19d569b22ae447be18e768c97600656c080993",
        "commit": {
          "message": "Add test selectors to experimental build (#22760)\n\nThis change adds a new \"react-dom/unstable_testing\" entry point but I believe its contents will exactly match \"react-dom/index\" for the stable build. (The experimental build will have the added new selector APIs.)"
        }
      },
      {
        "sha": "f320ef88f51fbdc5aba38bdf07108678a84f7339",
        "commit": {
          "message": "fix(typo): Esacpe -> Escape (#22780)"
        }
      },
      {
        "sha": "fdc1d617a44cb9015c3bac3a6341b5af3311faf6",
        "commit": {
          "message": "Flag for client render fallback behavior on hydration mismatch (#22787)\n\n* Add flag for new client-render fallback behavior on hydration mismatch\r\n\r\n* gate test\r\n\r\n* gate tests too\r\n\r\n* fix test gating"
        }
      },
      {
        "sha": "8edeb787b001f1b989c812aad6ac04f9d67a41dc",
        "commit": {
          "message": "Fix Node package.json ./ exports deprecation warning (#22783)"
        }
      },
      {
        "sha": "b32b67706f1214b730e4203981e5aefe04d473e5",
        "commit": {
          "message": "Migrate from CLIEngine to the new ESLint class. (#22756)\n\n* Migrate from CLIEngine to the new ESLint class.\r\n\r\n* fix output property"
        }
      },
      {
        "sha": "b831aec48f2d54913b836d2288b62b7eee9fbca1",
        "commit": {
          "message": "chore(fast-refresh): double check wasMounted (#22740)"
        }
      },
      {
        "sha": "bddbfb86d858e50695f9f4c3e6f52c663a050069",
        "commit": {
          "message": "Revert \"Fix Node package.json ./ exports deprecation warning (#22783)\" (#22792)\n\nThis reverts commit 8edeb787b001f1b989c812aad6ac04f9d67a41dc."
        }
      },
      {
        "sha": "149b420f63903bcfb99455337a376c75384f86af",
        "commit": {
          "message": "Ensure devtools e2e test use a compatible react-is version (#22790)\n\n* Update lockfile by running `yarn install`\r\n\r\n* Ensure devtools e2e test use a compatible react-is version"
        }
      },
      {
        "sha": "a04795c89cfca8b4d48b3b28be82d53c20d585eb",
        "commit": {
          "message": "Ensure react-is version used for resolution for playwright is installed (#22813)"
        }
      },
      {
        "sha": "09d9b17757d538c43fe872a5a0cb72a72c79c897",
        "commit": {
          "message": "Update deprecated features in ESLint configuration files. (#22767)"
        }
      },
      {
        "sha": "c1220ebdde506de91c8b9693b5cb67ac710c8c89",
        "commit": {
          "message": "treat empty string as null (#22807)"
        }
      },
      {
        "sha": "4e6eec69be632c0c0177c5b1c8a70397d92ee181",
        "commit": {
          "message": "fix: document can be `null`, not just `undefined` (#22695)"
        }
      },
      {
        "sha": "cbc484b5ae8cb683aef5ee61fac468679e9bb2aa",
        "commit": {
          "message": "Update attribute-behavior fixture (#22522)\n\n* Fix missing key warning\r\n\r\n* Add build instructions\r\n\r\n* Update interpretation now that React 17 is latest stable and 18 is next\r\n\r\n* Ignore ReactDOM.render deprecation warning\r\n\r\n* Ensure a server implementation with `renderToString` is used\r\n\r\n* Update AttributeTableSnapshot\r\n\r\n* Ensure Popover doesn't overflow"
        }
      },
      {
        "sha": "ca106a02d1648f4f0048b07c6b88f69aac175d3c",
        "commit": {
          "message": "Add `imageSizes` and `imageSrcSet` to know props (#22550)\n\n* feat(react-dom): Add `imageSrcSet`\r\n\r\n* feat(react-dom): Add `imageSizes`"
        }
      },
      {
        "sha": "0cc724c777930438d92727803826a44ec97bcc55",
        "commit": {
          "message": "update ReactFlightWebpackPlugin to be compatiable with webpack v5 (#22739)"
        }
      },
      {
        "sha": "a65ceef370f978e776c2f3356a8baae22369e698",
        "commit": {
          "message": "DevTools: Log version in internal logger (#22825)"
        }
      },
      {
        "sha": "ed00d2c3d8e39c214bb749dc8a520a4a695c19fd",
        "commit": {
          "message": "Remove unused flag (#22854)"
        }
      },
      {
        "sha": "ea5a413602e6a3beec9ba929930ebb73eeee8da0",
        "commit": {
          "message": "Decouple dispatching from attemptToDispatchEvent (#22851)\n\n* Decoupled dispatching from attemptToDispatchEvent\r\n\r\n* Remove unnecessary field\r\n\r\nIt is unnecessary because it's only true when retval is null."
        }
      },
      {
        "sha": "e737ea965573930eabc97bafea673b7f29b46e79",
        "commit": {
          "message": "Fork dispatch function based on the flag (#22852)\n\n* Fork function based on a flag\r\n\r\n* Prune false branches\r\n\r\nCo-authored-by: Marco Salazar <salazarm@fb.com>"
        }
      },
      {
        "sha": "44f99d75fa4528b82810edd03eccf82f7ea21ea0",
        "commit": {
          "message": "Track currently replaying event (#22853)\n\n* Track currently replaying event\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@me.com>\r\n\r\n* Add warnings\r\n\r\nCo-authored-by: Marco Salazar <salazarm@fb.com>"
        }
      },
      {
        "sha": "71d16750c528ad902e73e2ecb9fc05a40314bb3f",
        "commit": {
          "message": "Replay capture phase for continuous events (#22856)\n\nCo-authored-by: Dan Abramov <dan.abramov@me.com>\r\n\r\nCo-authored-by: Marco Salazar <salazarm@fb.com>"
        }
      },
      {
        "sha": "4729ff6d1f191902897927ff4ecd3d1f390177fa",
        "commit": {
          "message": "Implement identifierPrefix option for useId (#22855)\n\nWhen an `identifierPrefix` option is given, React will add it to the\r\nbeginning of ids generated by `useId`.\r\n\r\nThe main use case is to avoid conflicts when there are multiple React\r\nroots on a single page.\r\n\r\nThe server API already supported an `identifierPrefix` option. It's not\r\nonly used by `useId`, but also for React-generated ids that are used to\r\nstitch together chunks of HTML, among other things. I added a\r\ncorresponding option to the client.\r\n\r\nYou must pass the same prefix option to both the server and client.\r\nEventually we may make this automatic by sending the prefix from the\r\nserver as part of the HTML stream."
        }
      },
      {
        "sha": "8b8817845a8efd8cf53be395fafbb1d0f62c4368",
        "commit": {
          "message": "Timeline search (#22799)\n\nRefactor SearchInput component (used in Components tree) to be generic DevTools component with two uses: ComponentSearchInput and TimelineSearchInput.\r\n\r\nRefactored Timeline Suspense to more closely match other, newer Suspense patterns (e.g. inspect component, named hooks) and colocated Susepnse code in timelineCache file.\r\n\r\nAdd search by component name functionality to the Timeline. For now, searching zooms in to the component measure and you can step through each time it rendered using the next/previous arrows."
        }
      },
      {
        "sha": "3f9480f0f5ceb5a32a3751066f0b8e9eae5f1b10",
        "commit": {
          "message": "enable continuous replay flag (#22863)"
        }
      },
      {
        "sha": "12bffc78d8d9e0ee8d494849f20611fe15d598ef",
        "commit": {
          "message": "[DevTools] Emit new event when DevTools connects in standalone app (#22848)"
        }
      },
      {
        "sha": "c7917fe76982c499c81be9571de44fe1293ac893",
        "commit": {
          "message": "Test showing that a mismatch at the root recovers with client render but shows loading state (#22873)\n\n* rm console.log\r\n\r\n* gate test\r\n\r\n* move test\r\n\r\n* show fallback state"
        }
      },
      {
        "sha": "5041c37d27ee8f80bf152951d20bf861f817c7c6",
        "commit": {
          "message": "Remove hydrate option from createRoot (#22878)\n\n* remove hydrate: true option\r\n\r\n* remove missed comment\r\n\r\n* lint\r\n\r\n* warning\r\n\r\n* circumvent flow"
        }
      },
      {
        "sha": "ad607469c58d337d23d05e3be73087d370f7d715",
        "commit": {
          "message": "StyleX plug-in for resolving atomic styles to values for props.xstyle (#22808)\n\nAdds the concept of \"plugins\" to the inspected element payload. Also adds the first plugin, one that resolves StyleX atomic style names to their values and displays them as a unified style object (rather than a nested array of objects and booleans).\r\n\r\nSource file names are displayed first, in dim color, followed by an ordered set of resolved style values.\r\n\r\nFor builds with the new feature flag disabled, there is no observable change.\r\n\r\nA next step to build on top of this could be to make the style values editable, but change the logic such that editing one directly added an inline style to the item (rather than modifying the stylex class– which may be shared between multiple other components)."
        }
      },
      {
        "sha": "06f403481fe1f30d6952ad60ecd759b410962926",
        "commit": {
          "message": "Add CI job to check npm dependencies (#22881)\n\nChecks that if one React package depends on another, the current\r\nversion satisfies the given dependency range.\r\n\r\nThat way we don't forget to bump dependencies when we release a\r\nnew version."
        }
      },
      {
        "sha": "ec78b135fb0b6184bc42e11b15e4b492764ed0f3",
        "commit": {
          "message": "Don't override use-sync-external-store peerDeps (#22882)\n\nUsually the build script updates transitive React dependencies so that\r\nthey refer to the corresponding release version.\r\n\r\nFor use-sync-external-store, though, we also want to support older\r\nversions of React, too. So the normal behavior of the build script\r\nisn't sufficient.\r\n\r\nFor now, to unblock, I hardcoded a special case, but we should consider\r\na better way to handle this in the future."
        }
      },
      {
        "sha": "e39b2c8998a458a772b9284d0fb9f6a5ccdda914",
        "commit": {
          "message": "Fix peer deps for use-sync-external-store\n\nMerged last PR too quickly"
        }
      },
      {
        "sha": "72e48b8e16cab83e22b5cf24ac73499a48aba23c",
        "commit": {
          "message": "Fix: Don't skip writing updated package.json\n\nAnother fix to previous commit. The special case for\nuse-sync-external-store still needs to write out the updated\npackage.json, because we also use that branch to update the\nversion field."
        }
      },
      {
        "sha": "24dd07bd269590ee5024b7f0f1906887d256ea86",
        "commit": {
          "message": "Add custom element property support behind a flag (#22184)\n\n* custom element props\r\n\r\n* custom element events\r\n\r\n* use function type for on*\r\n\r\n* tests, htmlFor\r\n\r\n* className\r\n\r\n* fix ReactDOMComponent-test\r\n\r\n* started on adding feature flag\r\n\r\n* added feature flag to all feature flag files\r\n\r\n* everything passes\r\n\r\n* tried to fix getPropertyInfo\r\n\r\n* used @gate and __experimental__\r\n\r\n* remove flag gating for test which already passes\r\n\r\n* fix onClick test\r\n\r\n* add __EXPERIMENTAL__ to www flags, rename eventProxy\r\n\r\n* Add innerText and textContent to reservedProps\r\n\r\n* Emit warning when assigning to read only properties in client\r\n\r\n* Revert \"Emit warning when assigning to read only properties in client\"\r\n\r\nThis reverts commit 1a093e584ce50e2e634aa743e04f9cb8fc2b3f7d.\r\n\r\n* Emit warning when assigning to read only properties during hydration\r\n\r\n* yarn prettier-all\r\n\r\n* Gate hydration warning test on flag\r\n\r\n* Fix gating in hydration warning test\r\n\r\n* Fix assignment to boolean properties\r\n\r\n* Replace _listeners with random suffix matching\r\n\r\n* Improve gating for hydration warning test\r\n\r\n* Add outerText and outerHTML to server warning properties\r\n\r\n* remove nameLower logic\r\n\r\n* fix capture event listener test\r\n\r\n* Add coverage for changing custom event listeners\r\n\r\n* yarn prettier-all\r\n\r\n* yarn lint --fix\r\n\r\n* replace getCustomElementEventHandlersFromNode with getFiberCurrentPropsFromNode\r\n\r\n* Remove previous value when adding event listener\r\n\r\n* flow, lint, prettier\r\n\r\n* Add dispatchEvent to make sure nothing crashes\r\n\r\n* Add state change to reserved attribute tests\r\n\r\n* Add missing feature flag test gate\r\n\r\n* Reimplement SSR changes in ReactDOMServerFormatConfig\r\n\r\n* Test hydration for objects and functions\r\n\r\n* add missing test gate\r\n\r\n* remove extraneous comment\r\n\r\n* Add attribute->property test"
        }
      },
      {
        "sha": "29d2bef9f5d21187b4ae71608739fe490c0d15cb",
        "commit": {
          "message": "Bump beta -> rc"
        }
      },
      {
        "sha": "d3001fb6f1bd75c9872efb49195bff990e4eed49",
        "commit": {
          "message": "Use `next` as prerelease label\n\nInstead of `rc`, which is redundant since it's in the next version\nnumber already."
        }
      },
      {
        "sha": "f2a59df48bec2352a4dd3b5415282a4ea240a4f8",
        "commit": {
          "message": "Remove unstableAvoidThisFallback from OSS (#22884)\n\n* avoidThisFallbackFlag\r\n\r\n* avoidThisFallback flag\r\n\r\n* missed a spot\r\n\r\n* rm gating"
        }
      },
      {
        "sha": "2c1cf5618a24238136e3bd6139fb7f359dffe0f9",
        "commit": {
          "message": "DevTools should inject itself for XHTML pages too (not just HTML) (#22932)"
        }
      },
      {
        "sha": "3b3daf5573efe801fa3dc659020625b4023d3a9f",
        "commit": {
          "message": "Advocate for StrictMode usage within Components tree (#22886)\n\nAdds the concept of subtree modes to DevTools to bridge protocol as follows:\r\n1. Add-root messages get two new attributes: one specifying whether the root is running in strict mode and another specifying whether the root (really the root's renderer) supports the concept of strict mode.\r\n2. A new backend message type (TREE_OPERATION_SET_SUBTREE_MODE). This type specifies a subtree root (id) and a mode (bitmask). For now, the only mode this message deals with is strict mode.\r\n\r\nThe DevTools frontend has been updated as well to highlight non-StrictMode compliant components.\r\n\r\nThe changes to the bridge protocol require incrementing the bridge protocol version number, which will also require updating the version of react-devtools-core backend that is shipped with React Native."
        }
      },
      {
        "sha": "a049aa015563c2e50f44214c28d186c0bae09ba6",
        "commit": {
          "message": "[DevTools] Log errors occurring or reported to the frontend (#22948)"
        }
      },
      {
        "sha": "575791925697c7e23966e6934b577e69aef736f3",
        "commit": {
          "message": "DevTools: Correctly log errors reported from the store (#22950)"
        }
      },
      {
        "sha": "911f92a44da540b3c60779b28745d050ddd21679",
        "commit": {
          "message": "DevTools: Support mulitple DevTools instances per page (#22949)\n\nThis is being done so that we can embed DevTools within the new React (beta) docs.\r\n\r\nThe primary changes here are to `react-devtools-inline/backend`:\r\n* Add a new `createBridge` API\r\n* Add an option to the `activate` method to support passing in the custom bridge object.\r\n\r\nThe `react-devtools-inline` README has been updated to include these new methods.\r\n\r\nTo verify these changes, this commit also updates the test shell to add a new entry-point for multiple DevTools.\r\n\r\nThis commit also replaces two direct calls to `window.postMessage()` with `bridge.send()` (and adds the related Flow types)."
        }
      },
      {
        "sha": "0229baee21e8e6ecef04d4d76c41af84dfcca8bc",
        "commit": {
          "message": "React DevTools 4.21.0 -> 4.22.0 (#22951)"
        }
      },
      {
        "sha": "75d34aa083fad0d6bc3ecebe089d00c7ca26ecdc",
        "commit": {
          "message": "Updated DevTools changelog"
        }
      },
      {
        "sha": "cd1a3e9b556ab1eb8009676a38857aae7585dc8b",
        "commit": {
          "message": "Build both a partial renderer and fizz renderer of the legacy API for FB (#22933)\n\nThis lets us test how the new architecture performs without comparing it to\r\nother infra changes related to streaming.\r\n\r\nI renamed the streaming one to ReactDOMServerStreaming so the references\r\nin www need to be updated.\r\n\r\nI'll open an adhoc sync with just those files."
        }
      },
      {
        "sha": "3f45b681414a64c7034fab7f5e7bb4bb8df60f9c",
        "commit": {
          "message": "Re-added deleted files array to react-devtools package.json (#22960)"
        }
      },
      {
        "sha": "b10c3780246c82d4b9770309dec44070a2003ad8",
        "commit": {
          "message": "Revert changes to react-devtools-inline Webpack config from PR #22760 (#22961)"
        }
      },
      {
        "sha": "5b69c94eed8efab55ee60c7f10704ab832d47a70",
        "commit": {
          "message": "React DevTools 4.22.0 -> 4.22.1 (#22962)"
        }
      },
      {
        "sha": "e59233aa854fbeabe4698b40ef95da8e4c69ed6c",
        "commit": {
          "message": "react-devtools-inline README updates (#22967)"
        }
      },
      {
        "sha": "aa8f2bdbce0aa8d5128461190f7ea40f891cb78e",
        "commit": {
          "message": "Refactored DevTools test shell for e2e (#22968)\n\nFixes a regression in the e2e target and makes things easier (hopefully) going forward when adding new e2e tests."
        }
      },
      {
        "sha": "ceee524a8f45b97c5fa9861aec3f36161495d2e1",
        "commit": {
          "message": "Remove unnecessary clearContainer call (#22979)\n\nThis was added when we added error recovery for hydration errors. However,\r\nwhen the fix up pass happens later on, it'll still call clearContainer in\r\nthe commit phase. So this call is unnecessary."
        }
      },
      {
        "sha": "a4ead704ba1df8718d4866a23ac25e78f8ea901a",
        "commit": {
          "message": "Use ReactDOM Test Selector API in DevTools e2e tests (#22978)\n\nBuilds on top of the existing Playwright tests to plug in the test selector API: https://gist.github.com/bvaughn/d3c8b8842faf2ac2439bb11773a19cec\r\n\r\nMy goals in doing this are to...\r\n1. Experiment with the new API to see what works and what doesn't.\r\n2. Add some test selector attributes (and remove DOM-structure based selectors).\r\n3. Focus the tests on DevTools itself (rather than the test app).\r\n\r\nI also took this opportunity to add a few new test cases– like named hooks, editable props, component search, and profiling- just to play around more with the Playwright API.\r\n\r\nRelates to issue #22646"
        }
      },
      {
        "sha": "bd0a5dd6826ff7b3ab889ed0bd55dacc2f69a47e",
        "commit": {
          "message": "#22988 - Fix Bug: @license header in React 18 bundles contains vundefined (#23004)\n\n* Fix Bug: @license header in React 18 bundles contains vundefined\r\n* Remove React version from the header comment"
        }
      },
      {
        "sha": "bcd24a6706cd802e49e9c0a509a42893ddceca7b",
        "commit": {
          "message": "DevTools: Only show StrictMode badge on root elements (#23012)\n\n* DevTools: Only show StrictMode badge on root elements\r\n\r\nShowing an inline non-compliance badge for every element in the tree is noisy. This commit changes it so that we only show inline icons for root elements (although we continue to show an icon for inspected elements regardless)."
        }
      },
      {
        "sha": "a8e9bbe0fe19266e3061b266aabc0269f332a03c",
        "commit": {
          "message": "Made the variable name more meaningful (#23017)"
        }
      },
      {
        "sha": "20212349add45c81fe5ab4760214eabc3d91077f",
        "commit": {
          "message": "Fix variable name (#23021)"
        }
      },
      {
        "sha": "3dc41d8a2590768a6ac906cd1f4c11ca00417eee",
        "commit": {
          "message": "fix: parseExportNamesInto specifiers typo (#22537)"
        }
      },
      {
        "sha": "9724e180045806480d7ef2a50e6a9d70fea98252",
        "commit": {
          "message": "Run DevTools e2e tests on Circle CI (#23019)"
        }
      },
      {
        "sha": "42c30e8b122841d7fe72e28e36848a6de1363b0c",
        "commit": {
          "message": "Correct typing errors detected in several files (#22965)\n\n* Correct spelling errors in several files\r\n* Correct typos in devtools-shared package files"
        }
      },
      {
        "sha": "fe419346da0de40858d5a5c5992c29a1e0b79bb5",
        "commit": {
          "message": "Console message fixed for devtools (#23067)"
        }
      },
      {
        "sha": "fe905f152f1c9740279e31ce4478a5b8ca75172e",
        "commit": {
          "message": "Update package.json (#22954)"
        }
      },
      {
        "sha": "811634762a389bce81bdc145f84bdf247910b8dd",
        "commit": {
          "message": "add enableTransitionTracing feature flag (#23079)\n\nThis PR adds the enableTransitionTracing feature flag"
        }
      },
      {
        "sha": "2f26eb85d657a08c21edbac1e00f9626d68f84ae",
        "commit": {
          "message": "Add exports field to react-refresh's package.json (#23087)\n\n* Add exports field to react-refresh's package.json\r\n\r\n* Update package.json\r\n\r\n* Add runtime to exports"
        }
      },
      {
        "sha": "9a7e6bf0d0cf08114b74c9fe45c06e60a5e496e4",
        "commit": {
          "message": "Add --no-show-signature to \"git show\" commands (#23038)\n\n* Add --no-show-signature to \"git show\" commands.\r\n\r\nThis fixes errors if the user has configured the following in their ~/.gitconfig:\r\n[log]\r\nshowSignature = true\r\n\r\n* yarn prettier-all"
        }
      },
      {
        "sha": "a87adefecdff672d5261e93945c227ad72c5444c",
        "commit": {
          "message": "Allow functions to be passed to custom element setters (#23042)\n\nThis is part of the new custom element features that were implemented\r\nhere:\r\nhttps://github.com/facebook/react/commit/24dd07bd269590ee5024b7f0f1906887d256ea86\r\n\r\nWhen a custom element has a setter for a property and passes the `in`\r\nheuristic, the value passed to the react property should be assigned\r\ndirectly to the custom element's property, regardless of the type of the\r\nvalue. However, it was discovered that this isn't working with\r\nfunctions. This patch makes it work with functions.\r\n\r\nFixes https://github.com/facebook/react/issues/23041"
        }
      },
      {
        "sha": "c09596cc6021e1f9f8a88179add93f80fc07823b",
        "commit": {
          "message": "Add RN_FB bundles for react-is (#23101)\n\n* Add RN_FB bundles for react-is\r\n\r\n* Update packaging.js\r\n\r\n* Add ReactNativeInternalFeatureFlags to externals"
        }
      },
      {
        "sha": "51947a14bb24bd151f76f6fc0acdbbc404de13f7",
        "commit": {
          "message": "Refactored how React/DevTools log Timeline performance data (#23102)\n\nUntil now, DEV and PROFILING builds of React recorded Timeline profiling data using the User Timing API. This commit changes things so that React records this data by calling methods on the DevTools hook. (For now, DevTools still records that data using the User Timing API, to match previous behavior.)\r\n\r\nThis commit is large but most of it is just moving things around:\r\n\r\n* New methods have been added to the DevTools hook (in \"backend/profilingHooks\") for recording the Timeline performance events.\r\n* Reconciler's \"ReactFiberDevToolsHook\" has been updated to call these new methods (when they're present).\r\n* User Timing method calls in \"SchedulingProfiler\" have been moved to DevTools \"backend/profilingHooks\" (to match previous behavior, for now).\r\n* The old reconciler tests, \"SchedulingProfiler-test\" and \"SchedulingProfilerLabels-test\", have been moved into DevTools \"TimelineProfiler-test\" to ensure behavior didn't change unexpectedly.\r\n* Two new methods have been added to the injected renderer interface: injectProfilingHooks() and getLaneLabelMap().\r\n\r\nRelates to #22529."
        }
      },
      {
        "sha": "790b5246f691adafbf4b6a4b3fe2e6cc1370c43e",
        "commit": {
          "message": "Fix setState ignored in Safari when iframe is added to DOM in the same commit (#23111)\n\n* Fix setState being ignored in Safari\r\n\r\n* Add a regression test\r\n\r\n* Add comment"
        }
      },
      {
        "sha": "d5048247804ad3e6bb8e59dd311a4470affd7811",
        "commit": {
          "message": "Enable scheduling profiler flag in react-dom/testing builds (#23142)"
        }
      },
      {
        "sha": "d8cfeaf221563f3828fe7bf07833f3824accfa39",
        "commit": {
          "message": "Fix context propagation for offscreen/fallback trees (#23095)\n\n* Failing test for Context.Consumer in suspended Suspense\r\n\r\nSee issue #19701.\r\n\r\n* Fix context propagation for offscreen trees\r\n\r\n* Address nits\r\n\r\n* Specify propagation root for Suspense too\r\n\r\n* Pass correct propagation root\r\n\r\n* Harden test coverage\r\n\r\nThis test will fail if we remove propagation, or if we propagate with a root node like fiber.return or fiber.return.return. The additional DEV-only error helps detect a different kind of mistake, like if the thing being passed hasn't actually been encountered on the way up. However, we still leave the actual production loop to check against null so that there is no way we loop forever if the propagation root is wrong.\r\n\r\n* Remove superfluous warning\r\n\r\nCo-authored-by: overlookmotel <theoverlookmotel@gmail.com>"
        }
      },
      {
        "sha": "05a55a4b09b7b7c8f63778fb8252a001ca66f8d7",
        "commit": {
          "message": "Fix change events for custom elements (#22938)\n\n* Bypass react event system for custom elements\r\n\r\n* Going to try fixing react event system instead\r\n\r\n* finally got it to call onChange, but perhaps too many times\r\n\r\n* update test\r\n\r\n* Removed ReactDOMComponent changes, now works but still doubles for bubbles\r\n\r\n* Maybe i should only support bubbling events\r\n\r\n* removed some old stuff\r\n\r\n* cleaned up changeeventplugin stuff\r\n\r\n* prettier, lint\r\n\r\n* removed changeeventplugin stuff\r\n\r\n* remove unneeded gate for onInput test\r\n\r\n* Go back to using ChangeEventPlugin\r\n\r\n* Add input+change test\r\n\r\n* lint\r\n\r\n* Move logic to shouldUseChangeEvent\r\n\r\n* use memoizedProps instead of pendingProps\r\n\r\n* Run form control behavior before custom element behavior\r\n\r\n* add bubbling test\r\n\r\n* forgot to append container to body\r\n\r\n* add child event target test\r\n\r\n* expand <input is=...> test expectations\r\n\r\n* Make tests more realistic\r\n\r\n* Add extra test\r\n\r\n* Add missing gating\r\n\r\n* Actually fix gating\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@me.com>"
        }
      },
      {
        "sha": "e4894025570ebbe5955b4e4b226dd900e17c93e7",
        "commit": {
          "message": "Warn when a callback ref returns a function (#23145)"
        }
      },
      {
        "sha": "3fba8d64f12ae04af1b7df88604c49b8ec410b76",
        "commit": {
          "message": "Include other build types when building for CodeSandbox CI (#23152)"
        }
      },
      {
        "sha": "e12a9dfc96be12ea8e5c759986041ee5308e8e06",
        "commit": {
          "message": "Fix production-only updateSyncExternalStore() crash when doing setState in render (#23150)\n\n* Update ReactFiberHooks.new.js\r\n\r\n* Add regression test + replace-fork\r\n\r\n* Prettier\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@me.com>"
        }
      },
      {
        "sha": "505c15c9ef40556b72ddf5cb3a78a6b2dc56908e",
        "commit": {
          "message": "Don't inject timeline hooks unless React supports profiling (#23151)\n\nThis gives DevTools a way to detect whether the current React renderer supports Timeline profiling. (Version alone isn't enough to detect this, neither is general profiling support– since these two are controlled by different feature flags.)"
        }
      },
      {
        "sha": "a63708432082d480d422b0c93de5403611d9ce38",
        "commit": {
          "message": "DevTools: Add Jest snapshot serializer for number formatting (#23139)\n\nNumbers in JavaScript can have precision issues due to how they are encoded. This shows up in snapshot tests sometimes with values like 0.0009999999999999992, which makes the tests hard to read and visually diff.\r\n\r\nThis PR adds a new snapshot serializers which clamps numbers at 3 decimal points (e.g. the above number 0.0009999999999999992 is serialized as 0.001). This new serializer does not impact non-numeric values, integers, and special numbers like NaN and Infinity."
        }
      },
      {
        "sha": "7bee1379b740896c5e6a91c2e95d4fe8bb557105",
        "commit": {
          "message": "Filter out deleted components that are added to the updaters list (#23156)\n\nThere was a bug that occurred when a destroy effect is called that causes an update. The update would be added to the updaters list even though the fiber that was calling the destroy effect was unmounted and no longer exists. This PR:\r\n\r\n* Adds a patch to Devtools to filter out all in the update list that aren't in the fiberToIDMap (which contains all fibers currently on screen)"
        }
      },
      {
        "sha": "26baf6a174d97bf4821c54e0083e69422cb87f45",
        "commit": {
          "message": "styles: replace Array.isArray with module isArray (#23154)"
        }
      },
      {
        "sha": "ca143e18d83dcc57d7133d8859e0fc06df39b9f0",
        "commit": {
          "message": "Prettier"
        }
      },
      {
        "sha": "13036bfbc8ecbcf4451adb7bde397f438caa8607",
        "commit": {
          "message": "DevTools should not crawl unmounted subtrees when profiling starts (#23162)\n\nPreviously we crawled all subtrees, even not-yet-mounted ones, to initialize context values. This was not only unecessary, but it also caused an error to be thrown. This commit adds a test and fixes that behavior."
        }
      },
      {
        "sha": "e28a0db224e1c702cf63916eb39284325c439b8b",
        "commit": {
          "message": "React DevTools 4.22.1 -> 4.23.0"
        }
      },
      {
        "sha": "529dc3ce84f0efe99a8be33ff453c09d5801d5ca",
        "commit": {
          "message": "Fix context providers in SSR when handling multiple requests (#23171)\n\n* add failing test for renderToPipeableStream\r\n\r\n* Fix context providers in SSR when handling multiple requests. Closes #23089\r\n\r\n* Add sibling regression test\r\n\r\nCo-authored-by: zhuyi01 <zhuyi01@ke.com>\r\nCo-authored-by: Dan Abramov <dan.abramov@me.com>"
        }
      },
      {
        "sha": "934f72221df0a006a96e9be70e5dae72aa060ab3",
        "commit": {
          "message": "Gracefully handle empty \"xstyle\" prop values (#23190)"
        }
      },
      {
        "sha": "3d1e7e72783bbd03d5d28c5e9d682da98d6b426e",
        "commit": {
          "message": "Suppress act() warnings in DevTools tests (#23192)\n\nThese warnings are not useful for DevTools tests– and sometimes may mask other, important warnings. This commit disables them."
        }
      },
      {
        "sha": "2ed58eb889b2b2a8a745ec6c73785f8a87034d1f",
        "commit": {
          "message": "Readme fixes (#23187)\n\n* readme: fix contributing guide links"
        }
      },
      {
        "sha": "fa816be7f0b28df051d80acfc85156197a9365de",
        "commit": {
          "message": "DevTools: Timeline profiler refactor\n\nRefactor DevTools to record Timeline data (in memory) while profiling. Updated the Profiler UI to import/export Timeline data along with legacy profiler data.\r\n\r\nRelates to issue #22529"
        }
      },
      {
        "sha": "3f5ff16c1a743bce3f3d772dc5ac63c5fd2dac0a",
        "commit": {
          "message": "[Hydration] Fallback to client render if server rendered extra nodes (#23176)\n\n* rename\r\n\r\n* rename\r\n\r\n* replace-fork\r\n\r\n* rename\r\n\r\n* warn in a loop"
        }
      },
      {
        "sha": "4f5449eb4b6658225e3b4f063b6786d03d78b82b",
        "commit": {
          "message": "Remove main from scheduler `index.js`"
        }
      },
      {
        "sha": "0318ac2c41f7330a211ca7c16c148a6a7c0397f8",
        "commit": {
          "message": "Revert 4f5449"
        }
      },
      {
        "sha": "3a44621296e866eb86123fa5777975765138e633",
        "commit": {
          "message": "Disable avoidThisFallback support in Fizz  (#23224)\n\n* disable fizz avoidThisFallback support\r\n\r\n* true"
        }
      },
      {
        "sha": "5318971f50da06fd42763689826acecdb14b4c5e",
        "commit": {
          "message": "Remove logic for multiple error recovery attempts (#23227)\n\nThis deletes some internal behavior that was only used by\r\nuseOpaqueIdentifier, as an implementation detail: if an update is\r\nscheduled during the render phase, and something threw an error, we\r\nwould try rendering again, either until there were no more errors or\r\nuntil there were no more render phase updates. This was not a publicly\r\ndefined behavior — regular render phase updates are accompanied by\r\na warning.\r\n\r\nBecause useOpaqueIdentifier has been replaced by useId, and does not\r\nrely on this implementation detail, we can delete this code."
        }
      },
      {
        "sha": "848e802d203e531daf2b9b0edb281a1eb6c5415d",
        "commit": {
          "message": "Add onRecoverableError option to hydrateRoot, createRoot (#23207)\n\n* [RFC] Add onHydrationError option to hydrateRoot\r\n\r\nThis is not the final API but I'm pushing it for discussion purposes.\r\n\r\nWhen an error is thrown during hydration, we fallback to client\r\nrendering, without triggering an error boundary. This is good because,\r\nin many cases, the UI will recover and the user won't even notice that\r\nsomething has gone wrong behind the scenes.\r\n\r\nHowever, we shouldn't recover from these errors silently, because the\r\nunderlying cause might be pretty serious. Server-client mismatches are\r\nnot supposed to happen, even if UI doesn't break from the users\r\nperspective. Ignoring them could lead to worse problems later. De-opting\r\nfrom server to client rendering could also be a significant performance\r\nregression, depending on the scope of the UI it affects.\r\n\r\nSo we need a way to log when hydration errors occur.\r\n\r\nThis adds a new option for `hydrateRoot` called `onHydrationError`. It's\r\nsymmetrical to the server renderer's `onError` option, and serves the\r\nsame purpose.\r\n\r\nWhen no option is provided, the default behavior is to schedule a\r\nbrowser task and rethrow the error. This will trigger the normal browser\r\nbehavior for errors, including dispatching an error event. If the app\r\nalready has error monitoring, this likely will just work as expected\r\nwithout additional configuration.\r\n\r\nHowever, we can also expose additional metadata about these errors, like\r\nwhich Suspense boundaries were affected by the de-opt to client\r\nrendering. (I have not exposed any metadata in this commit; API needs\r\nmore design work.)\r\n\r\nThere are other situations besides hydration where we recover from an\r\nerror without surfacing it to the user, or notifying an error boundary.\r\nFor example, if an error occurs during a concurrent render, it could be\r\ndue to a data race, so we try again synchronously in case that fixes it.\r\nWe should probably expose a way to log these types of errors, too. (Also\r\nnot implemented in this commit.)\r\n\r\n* Log all recoverable errors\r\n\r\nThis expands the scope of onHydrationError to include all errors that\r\nare not surfaced to the UI (an error boundary). In addition to errors\r\nthat occur during hydration, this also includes errors that recoverable\r\nby de-opting to synchronous rendering. Typically (or really, by\r\ndefinition) these errors are the result of a concurrent data race;\r\nblocking the main thread fixes them by prevents subsequent races.\r\n\r\nThe logic for de-opting to synchronous rendering already existed. The\r\nonly thing that has changed is that we now log the errors instead of\r\nsilently proceeding.\r\n\r\nThe logging API has been renamed from onHydrationError\r\nto onRecoverableError.\r\n\r\n* Don't log recoverable errors until commit phase\r\n\r\nIf the render is interrupted and restarts, we don't want to log the\r\nerrors multiple times.\r\n\r\nThis change only affects errors that are recovered by de-opting to\r\nsynchronous rendering; we'll have to do something else for errors\r\nduring hydration, since they use a different recovery path.\r\n\r\n* Only log hydration error if client render succeeds\r\n\r\nSimilar to previous step.\r\n\r\nWhen an error occurs during hydration, we only want to log it if falling\r\nback to client rendering _succeeds_. If client rendering fails,\r\nthe error will get reported to the nearest error boundary, so there's\r\nno need for a duplicate log.\r\n\r\nTo implement this, I added a list of errors to the hydration context.\r\nIf the Suspense boundary successfully completes, they are added to\r\nthe main recoverable errors queue (the one I added in the\r\nprevious step.)\r\n\r\n* Log error with queueMicrotask instead of Scheduler\r\n\r\nIf onRecoverableError is not provided, we default to rethrowing the\r\nerror in a separate task. Originally, I scheduled the task with\r\nidle priority, but @sebmarkbage made the good point that if there are\r\nmultiple errors logs, we want to preserve the original order. So I've\r\nswitched it to a microtask. The priority can be lowered in userspace\r\nby scheduling an additional task inside onRecoverableError.\r\n\r\n* Only use host config method for default behavior\r\n\r\nRedefines the contract of the host config's logRecoverableError method\r\nto be a default implementation for onRecoverableError if a user-provided\r\none is not provided when the root is created.\r\n\r\n* Log with reportError instead of rethrowing\r\n\r\nIn modern browsers, reportError will dispatch an error event, emulating\r\nan uncaught JavaScript error. We can do this instead of rethrowing\r\nrecoverable errors in a microtask, which is nice because it avoids any\r\nsubtle ordering issues.\r\n\r\nIn older browsers and test environments, we'll fall back\r\nto console.error.\r\n\r\n* Naming nits\r\n\r\nqueueRecoverableHydrationErrors -> upgradeHydrationErrorsToRecoverable"
        }
      },
      {
        "sha": "1d7728bf9daebb7e04f13fc13bb595c12caae46d",
        "commit": {
          "message": "update node.js version for CI (#23236)"
        }
      },
      {
        "sha": "cd4eb116cf24d5b05107caf67b96c8e0f0cd7dbc",
        "commit": {
          "message": "Revert \"update node.js version for CI (#23236)\" (#23239)\n\nThis reverts commit 1d7728bf9daebb7e04f13fc13bb595c12caae46d."
        }
      },
      {
        "sha": "1dece523505390a2e0da5f93db6d0c37287e02c4",
        "commit": {
          "message": "Add back warning with component stack on Hydration mismatch (#23241)\n\n* add back warning\r\n\r\n* wrapper errorMock in __DEV__ flag\r\n\r\n* lint"
        }
      },
      {
        "sha": "9d4e8e84f7fb782385d81ffcdcda73822acf4ad1",
        "commit": {
          "message": "React Native raw event EventEmitter - intended for app-specific perf listeners and debugging (#23232)\n\n* RawEventEmitter: new event perf profiling mechanism outside of Pressability to capture all touch events, and other event types\r\n\r\n* sync\r\n\r\n* concise notation\r\n\r\n* Move event telemetry event emitter call from Plugin to ReactFabricEventEmitter, to reduce reliance on the plugin system and move the emit call further into the core\r\n\r\n* Backout changes to ReactNativeEventPluginOrder\r\n\r\n* Properly flow typing event emitter, and emit event to two channels: named and catchall\r\n\r\n* fix typing for event name string\r\n\r\n* fix typing for event name string\r\n\r\n* fix flow\r\n\r\n* Add more comments about how the event telemetry system works\r\n\r\n* Add more comments about how the event telemetry system works\r\n\r\n* rename to RawEventTelemetryEventEmitterOffByDefault\r\n\r\n* yarn prettier-all\r\n\r\n* rename event\r\n\r\n* comments\r\n\r\n* improve flow types\r\n\r\n* renamed file"
        }
      },
      {
        "sha": "7b541a980dbebc3b44b6c3b0c2806add79786222",
        "commit": {
          "message": "Add exports field to react-dom (#23252)\n\nThis configures the exports field for react-dom.\r\n\r\nNotably there are some conditions for the /server entry point where we pick\r\nthe export based on environments. Most environments now support Web Streams\r\nwhich is preferred in those environments.\r\n\r\nWe already do this using the \"browser\" field so the \"browser\" condition\r\napplies here too.\r\n\r\nI don't think it's necessary, but I also specified \"worker\" explicitly\r\nsince this is for Service Workers and those are often targeted with\r\nWeb Pack's \"webworker\" target, which is also what Cloudflare currently\r\nrecommends.\r\n\r\nI also added \"deno\" but deno is a bit special because this only works if\r\nyou run with the node compatibility since otherwise you have to specify\r\nabsolute URLs for the imports."
        }
      },
      {
        "sha": "0dedfcc681d7963c5d4d138dc8eba69539a56015",
        "commit": {
          "message": "Update the exports field (#23257)\n\n* Add .browser and .node explicit entry points\r\n\r\nThis can be useful when the automatic selection doesn't work properly.\r\n\r\n* Remove react/index\r\n\r\nI'm not sure why I added this in the first place. Perhaps due to how our\r\nbuilds work somehow.\r\n\r\n* Remove build-info.json from files field"
        }
      },
      {
        "sha": "5690932765b65998ea9f054f0740002257b7675c",
        "commit": {
          "message": "Add onErrorShell Callback (#23247)\n\nThis indicates that an error has happened before the shell completed and\r\nthere's no point in emitting the result of this stream.\r\n\r\nThis is not quite the same as other fatal errors that can happen even\r\nafter streaming as started.\r\n\r\nIt's also not quite the same as onError before onCompleteShell because\r\nonError can be called for an error inside a Suspense boundary before the\r\nshell completes.\r\n\r\nImplement shell error handling in Node SSR fixtures\r\n\r\nInstead of hanging indefinitely.\r\n\r\nUpdate Browser Fixture\r\n\r\nExpose onErrorShell to the Node build\r\n\r\nThis API is not Promisified so it's just a separate callback instead.\r\n\r\nPromisify the Browser Fizz API\r\n\r\nIt's now a Promise of a readable stream. The Promise resolves when the\r\nshell completes. If the shell errors, the Promise is rejected."
        }
      },
      {
        "sha": "a3bde7974c48cfa749b18531700f895c86cbad91",
        "commit": {
          "message": "Exclude react-dom/unstable_testing entry point from stable releases (#23258)\n\n* Use consistent naming for unstable_testing entry point\r\n\r\n* Exclude the testing build from non-experimental builds except at FB\r\n\r\n* FB builds shouldn't contribute to whether we include the npm files\r\n\r\n* Exclude exports fields if we delete the files entry\r\n\r\n* Move test to no longer be internal so we can test against the build\r\n\r\n* Update the bundle artifact names since they've now changed\r\n\r\n* Gate import since it doesn't exist"
        }
      },
      {
        "sha": "274b9fb168eae1b3e5b83db657eb964d365fc45a",
        "commit": {
          "message": "Remove path resolution from internal forks plugin (#23255)\n\nAlternative to #23254\r\n\r\nOur build script has a custom plugin to resolve internal module forks.\r\nCurrently, it uses require.resolve to resolve the path to a real file\r\non disk.\r\n\r\nInstead, I've updated all the forked module paths to match their\r\nlocation on disk, relative to the project root, to remove the need to\r\nresolve them in the build script's runtime.\r\n\r\nThe main motivation is because require.resolve doesn't work with ESM\r\nmodules, but aside from that, hardcoding the relative paths is more\r\npredictable — the Node module resolution algorithm is complicated, and\r\nwe don't really need its features for this purpose."
        }
      },
      {
        "sha": "9b5e0517b4d203d49063e975a4597e9c666e0212",
        "commit": {
          "message": "Remove deprecated wildcard folder mapping (#23256)\n\n* Remove deprecated folder mapping\r\n\r\nNode v16 deprecated the use of trailing \"/\" to define subpath folder\r\nmappings in the \"exports\" field of package.json.\r\n\r\nThe recommendation is to explicitly list all our exports. We already do\r\nthat for all our public modules. I believe the only reason we have a\r\nwildcard pattern is because our package.json files are also used at\r\nbuild time (by Rollup) to resolve internal source modules that don't\r\nappear in the final npm artifact.\r\n\r\nChanging trailing \"/\" to \"/*\" fixes the warnings. See\r\nhttps://nodejs.org/api/packages.html#subpath-patterns for more info.\r\n\r\nSince the wildcard pattern only exists so our build script has access to\r\ninternal at build time, I've scoped the wildcard to \"/src/*\". Because\r\nour public modules are located outside the \"src\" directory, this means\r\ndeep imports of our modules will no longer work: only packages that are\r\nlisted in the \"exports\" field.\r\n\r\nThe only two affected packages are react-dom and react. We need to be\r\nsure that all our public modules are still reachable. I audited the\r\nexports by comparing the entries to the \"files\" field in package.json,\r\nwhich represents a complete list of the files that are included in the\r\nfinal release artifact.\r\n\r\nAt some point, we should add an e2e packaging test to prevent\r\nregressions; for now, we should have decent coverage because in CI we\r\nrun our Jest test suite against the release artifacts.\r\n\r\n* Remove umd from exports\r\n\r\nOur expectation is that if you're using the UMD builds, you're not\r\nloading them through a normal module system like require or import.\r\nInstead you're probably copying the files directly or loading them from\r\na CDN like unpkg."
        }
      },
      {
        "sha": "e0af1aabec3d3ee24f57aaaf9407860463f20213",
        "commit": {
          "message": "Fix wrong context argument to `apply`\n\nThe context argument should be the array, not null.\n\nI wrote a test that I'll include in the next PR."
        }
      },
      {
        "sha": "efd8f6442d1aa7c4566fe812cba03e7e83aaccc3",
        "commit": {
          "message": "Resolve default onRecoverableError at root init (#23264)\n\nMinor follow up to initial onRecoverableError PR.\r\n\r\nWhen onRecoverableError is not provided to `createRoot`, the\r\nrenderer falls back to a default implementation. Originally I\r\nimplemented this with a host config method, but what we can do instead\r\nis pass the default implementation the root constructor as if it were\r\na user provided one."
        }
      },
      {
        "sha": "64223fed82414ee41839e95ebc97df330b2b71ca",
        "commit": {
          "message": "Fix: Multiple hydration errors in same render (#23273)\n\nI made a minor mistake in the original onRecoverableError PR that\r\nonly surfaces if there are hydration errors in two different Suspense\r\nboundaries in the same render. This fixes it and adds a unit test."
        }
      },
      {
        "sha": "796fff5483925f90db5fe705af6d8b06fce661a5",
        "commit": {
          "message": "Allow suspending outside a Suspense boundary (#23267)\n\n(If the update is wrapped in startTransition)\r\n\r\nCurrently you're not allowed to suspend outside of a Suspense boundary.\r\nWe throw an error:\r\n\r\n> A React component suspended while rendering, but no fallback UI\r\nwas specified\r\n\r\nWe treat this case like an error because discrete renders are expected\r\nto finish synchronously to maintain consistency with external state.\r\nHowever, during a concurrent transition (startTransition), what we can\r\ndo instead is treat this case like a refresh transition: suspend the\r\ncommit without showing a fallback.\r\n\r\nThe behavior is roughly as if there were a built-in Suspense boundary\r\nat the root of the app with unstable_avoidThisFallback enabled.\r\nConceptually it's very similar because during hydration you're already\r\nshowing server-rendered UI; there's no need to replace that with\r\na fallback when something suspends."
        }
      },
      {
        "sha": "a6987bee730052dccdddd4645e15b1ce458fd9a6",
        "commit": {
          "message": "add <TracingMarker> component boilerplate (#23275)\n\n- Add Tracing Marker component type to React exports\r\n- Add reconciler work tag\r\n- Add devtools work tag\r\n- Add boilerplate for the cache to render children\r\n\r\nNo functionality yet"
        }
      },
      {
        "sha": "1fb0d06878416d321182ddb4601231982e7433c9",
        "commit": {
          "message": "[Devtools][Transition Tracing] Add Transition callbacks to createRoot (#23276)\n\n- Add the type of transition tracing callbacks\r\n- Add transition tracing callbacks as an option to `createRoot`\r\n- Add transition tracing callbacks on the root\r\n- Add option to pass transition tracing callbacks to createReactNoop"
        }
      },
      {
        "sha": "08fce6208ed8bede70fa9291eac8412f20ac56b5",
        "commit": {
          "message": "Gracefully handle empty \"xstyle\" prop values (Part 2) (#23279)\n\n#23190 misses if entry is undefined or null. This fixes this issue."
        }
      },
      {
        "sha": "27b5699694f20220e0448f0ba3eb6bfa0d3a64ed",
        "commit": {
          "message": "Simplify cache pool contexts (#23280)\n\nThe `pooledCache` variable always points to either `root.pooledCache`\r\nor the stack cursor that is used to track caches that were resumed from\r\na previous render. We can get rid of it by reading from those instead.\r\nThis simplifies the code a lot and is harder to mess up, I think."
        }
      },
      {
        "sha": "f7f7ed089eb04a3504762425baf1d673701c736b",
        "commit": {
          "message": "Allow suspending in the shell during hydration (#23304)\n\n* Allow suspending in the shell during hydration\r\n\r\nBuilds on behavior added in #23267.\r\n\r\nInitial hydration should be allowed to suspend in the shell. In\r\npractice, this happens because the code for the outer shell hasn't\r\nloaded yet.\r\n\r\nCurrently if you try to do this, it errors because it expects there to\r\nbe a parent Suspense boundary, because without a fallback we can't\r\nproduce a consistent tree. However, for non-sync updates, we don't need\r\nto produce a consistent tree immediately — we can delay the commit\r\nuntil the data resolves.\r\n\r\nIn #23267, I added support for suspending without a parent boundary if\r\nthe update was wrapped with `startTransition`. Here, I've expanded this\r\nto include hydration, too.\r\n\r\nI wonder if we should expand this even further to include all non-sync/\r\ndiscrete updates.\r\n\r\n* Allow suspending in shell for all non-sync updates\r\n\r\nInstead of erroring, we can delay the commit.\r\n\r\nThe only time we'll continue to error when there's no parent Suspense\r\nboundary is during sync/discrete updates, because those are expected to\r\nproduce a complete tree synchronously to maintain consistency with\r\nexternal state."
        }
      },
      {
        "sha": "80059bb7307e30234ebcc9e6b491c0606e66e6c7",
        "commit": {
          "message": "Switch to client rendering if root receives update (#23309)\n\nIf a hydration root receives an update before the outermost shell has\r\nfinished hydrating, we should give up hydrating and switch to\r\nclient rendering.\r\n\r\nSince the shell is expected to commit quickly, this doesn't happen that\r\noften. The most common sequence is something in the shell suspends, and\r\nthen the user quickly navigates to a different screen, triggering a\r\ntop-level update.\r\n\r\nInstead of immediately switching to client rendering, we could first\r\nattempt to hydration at higher priority, like we do for updates that\r\noccur inside nested dehydrated trees.\r\n\r\nBut since this case is expected to be rare, and mainly only happens when\r\nthe shell is suspended, an attempt at higher priority would likely end\r\nup suspending again anyway, so it would be wasted effort. Implementing\r\nit this way would also require us to add a new lane especially for root\r\nhydration. For simplicity's sake, we'll immediately switch to client\r\nrendering. In the future, if we find another use case for a root\r\nhydration lane, we'll reconsider."
        }
      },
      {
        "sha": "79ed5e18fd5dba4148e3ca73da53fd6eef037209",
        "commit": {
          "message": "Delete vestigial RetryAfterError logic (#23312)\n\nThis code was originally added to force a client render after receiving\r\nan error during hydration. Later we added the ForceClientRender to\r\nimplement the same behavior, but scoped to an individual Suspense\r\nboundary instead of all the boundaries in the entire root. So it's\r\nnow redudant.\r\n\r\nWe had some test coverage already but I added another test specifically\r\nfor the case of throwing a recoverable hydration error in the shell."
        }
      },
      {
        "sha": "51c8411d9dab33290b794fe716b9514e7db1fb68",
        "commit": {
          "message": "Log a recoverable error whenever hydration fails (#23319)\n\nThere are several cases where hydration fails, server-rendered HTML is\r\ndiscarded, and we fall back to client rendering. Whenever this happens,\r\nwe will now log an error with onRecoverableError, with a message\r\nexplaining why.\r\n\r\nIn some of these scenarios, this is not the only recoverable error that\r\nis logged. For example, an error during hydration will cause hydration\r\nto fail, which is itself an error. So we end up logging two separate\r\nerrors: the original error, and one that explains why hydration failed.\r\n\r\nI've made sure that the original error always gets logged first, to\r\npreserve the causal sequence.\r\n\r\nAnother thing we could do is aggregate the errors with the Error \"cause\"\r\nfeature and AggregateError. Since these are new-ish features in\r\nJavaScript, we'd need a fallback behavior. I'll leave this for a\r\nfollow up."
        }
      },
      {
        "sha": "e9aa9592c10f604dde7bb31b73e58ec190f3b3dc",
        "commit": {
          "message": "change ReactBatchConfig.transition\n\nPreviously, ReactBatchConfig.transition was an number (1 = there is a transition, 0 = there isn't one). This PR changes this to a transition object (object = there is a transition, null = there isn't one) in preparation for transition tracing changes."
        }
      },
      {
        "sha": "54f785bc51800556dead12aaedf9594b2f15e836",
        "commit": {
          "message": "Disallow comments as DOM containers for createRoot (#23321)\n\nThis is an old feature that we no longer support. `hydrateRoot` already\r\nthrows if you pass a comment node; this change makes `createRoot`\r\nthrow, too.\r\n\r\nStill enabled in the Facebook build until we migrate the callers."
        }
      },
      {
        "sha": "419ccc2b1974206b9fcbe539a31654dd64024156",
        "commit": {
          "message": "Land skipUnmountedBoundaries experiment (#23322)\n\nThis has been rolled out to 10% of Facebook users for months without\r\nany issues."
        }
      },
      {
        "sha": "caf6d470772d3bf06af5042502579477e367e04f",
        "commit": {
          "message": "Enable enableCache on Test Renderer native (#23314)\n\nCo-authored-by: Dave McCabe <davemccabe@fb.com>"
        }
      },
      {
        "sha": "40eaa22d9af685c239f9d8d42b454d031791e76d",
        "commit": {
          "message": "Remove dependency on Offscreen Fiber updateQueue for React Cache (#23229)\n\nWe need to use the Offscreen Fiber's update queue for interaction tracing. This PR removes the optimization that React Cache uses to not need to push and pop the cache in special circumstances and defaults to always pushing and popping the cache as long as there was a previous cache."
        }
      },
      {
        "sha": "4de99b3ca689e8f995f90f199cd8d7bfb4b35eca",
        "commit": {
          "message": "fix getSnapshot warning when a selector returns NaN (#23333)\n\n* fix getSnapshot warning when a selector returns NaN\r\n\r\nuseSyncExternalStoreWithSelector delegate a selector as\r\ngetSnapshot of useSyncExternalStore.\r\n\r\n* Fiber's use sync external store has a same issue\r\n\r\n* Small nits\r\n\r\nWe use Object.is to check whether the snapshot value has been updated,\r\nso we should also use it to check whether the value is cached.\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>"
        }
      },
      {
        "sha": "552c067bb18062f6a1bba2fc848033abd2ea8090",
        "commit": {
          "message": "Remove public export for unstable-shared-subset.js (#23261)\n\nThe unstable-shared-subset.js file is not a public module — it's a\r\nprivate module that the \"react\" package maps to when it's accessed from\r\nthe \"react-server\" package.\r\n\r\nWe originally added it because it was required to make our Rollup\r\nconfiguration work, because at the time only \"public\" modules could act\r\nas the entry point for a build artifact — that's why it's prefixed with\r\n\"unstable\". We've since updated our Rollup config to support private\r\nentry points, so we can remove the extra indirection."
        }
      },
      {
        "sha": "1760b27c02b632594048183a93afc7881203a230",
        "commit": {
          "message": "Remove ./src/* export from public build (#23262)\n\nWe only export the source directory so Jest and Rollup can access them\r\nduring local development and at build time. The files don't exist in the\r\npublic builds, so we don't need the export entry, either."
        }
      },
      {
        "sha": "2c693b2dee6e0a644e9e952b5c2b64a1b21c8e55",
        "commit": {
          "message": "Re-add reentrancy avoidance (#23342)\n\n* tests: add failing test to demonstrate bug in ReadableStream implementation\r\n\r\n* Re-add reentrancy avoidance\r\n\r\nI removed the equivalency of this in #22446. However, I didn't fully\r\nunderstand the intended semantics of the spec but I understand this better\r\nnow.\r\n\r\nThe spec is not actually recursive. It won't call pull again inside of a\r\npull. It might not call it inside startWork neither which the original\r\nissue avoided. However, it will call pull if you enqueue to the controller\r\nwithout filling up the desired size outside any call.\r\n\r\nWe could avoid that by returning a Promise from pull that we wait to\r\nresolve until we've performed all our pending tasks. That would be the\r\nmore idiomatic solution. That's a bit more involved but since we know\r\nunderstand it, we can readd the reentrancy hack since we have an easy place\r\nto detect it. If anything, it should probably throw or log here otherwise.\r\n\r\nI believe this fixes #22772.\r\n\r\nThis includes the test from #22889 but should ideally have one for Fizz.\r\n\r\nCo-authored-by: Josh Larson <josh.larson@shopify.com>"
        }
      },
      {
        "sha": "40351575d3cfaef62426c889a90431c01fdeff0f",
        "commit": {
          "message": "Split writeChunk into void and return value (#23343)\n\nThis function was modeled after Node streams where write returns a boolean\r\nwhether to keep writing or not. I think we should probably switch this\r\nup and read desired size explicitly in appropriate places.\r\n\r\nHowever, in the meantime, we don't have to return a value where we're\r\nnot going to use it. So I split this so that we call writeChunkAndReturn\r\nif we're going to return the boolean.\r\n\r\nThis should help with the compilation so that they can be inlined."
        }
      },
      {
        "sha": "587e759302ef1cc02954831ccc72f7f668e32426",
        "commit": {
          "message": "Remove Numeric Fallback of Symbols (#23348)\n\nThis was already defeating the XSS issue that Symbols was meant to protect\r\nagainst. So you were already supposed to use a polyfill for security.\r\n\r\nWe rely on real Symbol.for in Flight for Server Components so those require\r\nreal symbols anyway.\r\n\r\nWe also don't really support IE without additional polyfills anyway."
        }
      },
      {
        "sha": "1f3f6db73caf72a7d2287241212b7669d0c2dd2f",
        "commit": {
          "message": "Remove createMutableSource from stable exports (#23352)\n\nI removed useMutableSource in a previous PR but forgot this one.\r\n\r\nWe still export it in the FB builds until we can migrate the internal\r\ncallers (Recoil)."
        }
      },
      {
        "sha": "990098f88aef825762f72e76ae84cfe1520222c2",
        "commit": {
          "message": "Re-arrange main ReactFeatureFlags module (#23350)\n\n@sebmarkbage and I audited the feature flags file to review the status\r\nof each feature or experiment. Based on that, I've added some more\r\ncomments to the main ReactFeatureFlags module and rearranged them\r\ninto groups.\r\n\r\nI haven't changed the value of any flags, yet. There are a few we're\r\ngoing to land but I'll do them as separate PRs."
        }
      },
      {
        "sha": "b3f3da205b9abfc3c70e7018b03114a33ef43ca5",
        "commit": {
          "message": "Land warnOnSubscriptionInsideStartTransition flag (#23353)\n\nWe're including this in 18. The feature was already enabled — this just\r\nremoves the flag."
        }
      },
      {
        "sha": "1ad8d81292415e26ac070dec03ad84c11fbe207d",
        "commit": {
          "message": "Remove object-assign polyfill (#23351)\n\n* Remove object-assign polyfill\r\n\r\nWe really rely on a more modern environment where this is typically\r\npolyfilled anyway and we don't officially support IE with more extensive\r\npolyfilling anyway. So all environments should have the native version\r\nby now.\r\n\r\n* Use shared/assign instead of Object.assign in code\r\n\r\nThis is so that we have one cached local instance in the bundle.\r\n\r\nIdeally we should have a compile do this for us but we already follow\r\nthis pattern with hasOwnProperty, isArray, Object.is etc.\r\n\r\n* Transform Object.assign to now use shared/assign\r\n\r\nWe need this to use the shared instance when Object.spread is used."
        }
      },
      {
        "sha": "52c393b5d261550609dda955f059a26d1db63538",
        "commit": {
          "message": "Revert to client render on text mismatch (#23354)\n\n* Refactor warnForTextDifference\r\n\r\nWe're going to fork the behavior of this function between concurrent\r\nroots and legacy roots.\r\n\r\nThe legacy behavior is to warn in dev when the text mismatches during\r\nhydration. In concurrent roots, we'll log a recoverable error and revert\r\nto client rendering. That means this is no longer a development-only\r\nfunction — it affects the prod behavior, too.\r\n\r\nI haven't changed any behavior in this commit. I only rearranged the\r\ncode slightly so that the dev environment check is inside the body\r\ninstead of around the function call. I also threaded through an\r\nisConcurrentMode argument.\r\n\r\n* Revert to client render on text content mismatch\r\n\r\nExpands the behavior of enableClientRenderFallbackOnHydrationMismatch to\r\ncheck text content, too.\r\n\r\nIf the text is different from what was rendered on the server, we will\r\nrecover the UI by falling back to client rendering, up to the nearest\r\nSuspense boundary."
        }
      },
      {
        "sha": "a5b22155c8431c25df728f61869ff1616e51e133",
        "commit": {
          "message": "Warn if renderSubtreeIntoContainer is called (#23355)\n\nWe already warn for all the other legacy APIs. Forgot to enable\r\nthis one."
        }
      },
      {
        "sha": "8c4cd65cfaa4614bac7fd7783b4ec502a337eba3",
        "commit": {
          "message": "Add warnings for common root API mistakes (#23356)\n\nFor createRoot, a common mistake is to pass JSX as the second argument,\r\ninstead of calling root.render.\r\n\r\nFor hydrateRoot, a common mistake is to forget to pass children as\r\nthe second argument.\r\n\r\nThe type system will enforce correct usage, but since not everyone uses\r\ntypes we'll log a helpful warning, too."
        }
      },
      {
        "sha": "68cb55f262b75f5d5b723104b830daab37b1ea14",
        "commit": {
          "message": "Add more warnings for second argument to root.render. (#23358)\n\nWe already had one for callbacks but containers is also an easy mistake."
        }
      },
      {
        "sha": "42f15b324f50d0fd98322c21646ac3013e30344a",
        "commit": {
          "message": "[DevTools][Transition Tracing] onTransitionComplete and onTransitionStart implmentation (#23313)\n\n* add transition name to startTransition\r\n\r\nAdd a transitionName to start transition, store the transition start time and name in the batch config, and pass it to the root on render\r\n\r\n* Transition Tracing Types and Consts\r\n\r\n* Root begin work\r\n\r\nThe root operates as a tracing marker that has all transitions on it. This PR only tested the root with one transition so far\r\n\r\n- Store transitions in memoizedState. Do this in updateHostRoot AND attemptEarlyBailoutIfNoScheduledUpdate. We need to do this in the latter part because even if the root itself doesn't have an update, it could still have new transitions in its transitionLanes map that we need to process.\r\n\r\n* Transition Tracing commit phase\r\n\r\n- adds a module scoped pending transition callbacks object that contains all transition callbacks that have not yet been processed. This  contains all callbacks before the next paint occurs.\r\n- Add code in the mutation phase to:\r\n        * For the root, if there are transitions that were initialized during this commit in the root transition lanes map, add a transition start call to the pending transition callbacks object. Then, remove the transitions from the root transition lanes map.\r\n        * For roots, in the commit phase, add a transition complete call\r\n\r\nWe add this code in the mutation phase because we can't add it to the passive phase because then the paint might have occurred before we even know which callbacks to call\r\n\r\n* Process Callbacks after paint\r\n\r\nAt the end of the commit phase, call scheduleTransitionCallbacks to schedule all pending transition callbacks to be called after paint. Then clear the callbacks"
        }
      },
      {
        "sha": "efe4121ee218099539523a713272edadbaafca2a",
        "commit": {
          "message": "Add : to beginning and end of every useId (#23360)\n\nThe ids generated by useId are unique per React root. You can create\r\nadditional ids by concatenating them with locally unique strings.\r\n\r\nTo support this pattern, no id will ever be a subset of another id. We\r\nachieve this by adding a special character to the beginning and end.\r\n\r\nWe use a colon (\":\") because it's uncommon — even if you don't prefix\r\nthe ids using the `identifierPrefix` option, collisions are unlikely.\r\n\r\nOne downside of a colon is that it's not a valid character in DOM\r\nselectors, like `querySelectorAll`. We think this is probably\r\nfine because it's not a common use case in React, and there are\r\nworkarounds or alternative solutions. But we're open to reconsidering\r\nthis in the future if there's a compelling argument."
        }
      },
      {
        "sha": "8d0d0e9a8aadc4bdddff3a40871dbc54c63264f3",
        "commit": {
          "message": "Deprecate renderToNodeStream (and fix textarea bug) (#23359)\n\n* Deprecate renderToNodeStream\r\n\r\n* Use renderToPipeableStream in tests instead of renderToNodeStream\r\n\r\nThis is the equivalent API. This means that we have way less test coverage\r\nof this API but I feel like that's fine since it has a deprecation warning\r\nin it and we have coverage on renderToString that is mostly the same.\r\n\r\n* Fix textarea bug\r\n\r\nThe test changes revealed a bug with textarea. It happens because we\r\ncurrently always insert trailing comment nodes. We should optimize that\r\naway. However, we also don't really support complex children so we\r\nshould toString it anyway which is what partial renderer used to do.\r\n\r\n* Update tests that assert number of nodes\r\n\r\nThese tests are unnecessarily specific about number of nodes.\r\n\r\nI special case these, which these tests already do, because they're good\r\ntests to test that the optimization actually works later when we do\r\nfix it."
        }
      },
      {
        "sha": "3a60844a0f3449d7e6d208e31df44c5ba3466e38",
        "commit": {
          "message": "Update error message for suspending at sync priority (#23361)\n\nInstead of adding a new Suspense boundary, the default recommendation\r\nis to wrap the suspending update with startTransition."
        }
      },
      {
        "sha": "629036a9c4fa925351fe714162dd2218eef3ac56",
        "commit": {
          "message": "Bump versions to prepare for rc.1 (#23362)"
        }
      },
      {
        "sha": "5d08a24c21dcb3d42ea628ce3f94bdbd0d432756",
        "commit": {
          "message": "useId: Use 'H' to separate main id from hook index (#23363)\n\nNo id should be a subset of any other id. Currently, this is not true\r\nwhen there are multiple hooks in the same component. We append the\r\nhook index to the end of the id, except for the first one. So you get\r\nthis pattern.\r\n\r\nBefore this change:\r\n\r\n- 1st hook's id: :R0:\r\n- 2nd hook's id: :R0:1:\r\n\r\nThe first hook's id is a subset of all the other ids in the\r\nsame component.\r\n\r\nThe fix for this is to use a different character to separate the main\r\nid from the hook index. I've chosen a captial 'H' for this because\r\ncapital letters are not part of the base 32 character set when encoding\r\nwith `toString(32)`.\r\n\r\nAfter this change:\r\n\r\n- 1st hook's id: :R0:\r\n- 2nd hook's id: :R0H1:"
        }
      },
      {
        "sha": "f468816ef1000b2fe0086feabc0115b86f299cad",
        "commit": {
          "message": "Fix false positive hydration warnings (#23364)\n\n* Failing test for react#23331\r\n\r\n* Don't warn on hydration mismatch if suspended\r\n\r\nWhen something suspends during hydration, we continue rendering the\r\nsiblings to warm up the cache and fire off any lazy network requests.\r\nHowever, if there are any mismatches while rendering the siblings, it's\r\nlikely a false positive caused by the earlier suspended component. So\r\nwe should suppress any hydration warnings until the tree no\r\nlonger suspends.\r\n\r\nFixes #23332\r\n\r\nCo-authored-by: Marcel Laverdet <marcel@laverdet.com>"
        }
      },
      {
        "sha": "a82ef6d40bb0b000a97ca82590bfeaa3637c66bb",
        "commit": {
          "message": "Add back skipUnmountedBoundaries flag only for www (#23383)\n\nThere are a few internal tests that still need to be updated, so I'm\r\nadding this flag back for www only.\r\n\r\nThe desired behavior rolled out to 10% public, so we're confident there\r\nare no issues.\r\n\r\nThe open source behavior remains (skipUnmountedBoundaries = true)."
        }
      },
      {
        "sha": "a2327442157265873bf63f1124c142322f41f6de",
        "commit": {
          "message": "Remove flushControlled from experimental releases (#23384)\n\nThis brings the exports on npm to parity which simplifies things a bit.\r\n\r\nWe also don't plan to release this. It is used by Draft.js but that caller\r\nwill need to switch to flushSync."
        }
      },
      {
        "sha": "086fa8ee2f80f0dc34b7d145be72f9843fca975d",
        "commit": {
          "message": "re-trigger load events for img elements on commit (#23316)\n\nearly load events will be missed by onLoad handlers if they trigger before the tree is committed\r\nto avoid this we reset the src property on the img element to cause the browser to re-load\r\nthe img.\r\n\r\nCo-authored-by: Josh Story <story@hey.com>"
        }
      },
      {
        "sha": "75662d6a7d135df9d10055f49c3a4ca09fe4efcc",
        "commit": {
          "message": "Remove hacky stream.locked check, declare as byte stream instead (#23387)\n\nWe used to check for stream.locked in pull to see if we've been passed to\r\nsomething that reads yet.\r\n\r\nThis was a bad hack because it won't actually call pull again if that changes.\r\n\r\nThe source of this is because the default for \"highWaterMark\" is 1 on some\r\nstreams. So it always wants to add one \"chunk\" (of size 1).\r\n\r\nIf we leave our high water mark as 0, we won't fill up any buffers unless we're\r\nasked for more.\r\n\r\nThis web API is somewhat odd because it would be way more efficient if it\r\njust told us how much the recipient wants instead of calling us once per\r\nchunk.\r\n\r\nAnyway, I turns out that if we define ourselves as a \"bytes\" type of\r\nstream, the default also happens to be a high water mark of 0 so we can\r\njust use that instead."
        }
      },
      {
        "sha": "17806594cc28284fe195f918e8d77de3516848ec",
        "commit": {
          "message": "Move createRoot/hydrateRoot to react-dom/client (#23385)\n\n* Move createRoot/hydrateRoot to /client\r\n\r\nWe want these APIs ideally to be imported separately from things you\r\nmight use in arbitrary components (like flushSync). Those other methods\r\nare \"isomorphic\" to how the ReactDOM tree is rendered. Similar to hooks.\r\n\r\nE.g. importing flushSync into a component that only uses it on the client\r\nshould ideally not also pull in the entry client implementation on the\r\nserver.\r\n\r\nThis also creates a nicer parity with /server where the roots are in a\r\nseparate entry point.\r\n\r\nUnfortunately, I can't quite do this yet because we have some legacy APIs\r\nthat we plan on removing (like findDOMNode) and we also haven't implemented\r\nflushSync using a flag like startTransition does yet.\r\n\r\nAnother problem is that we currently encourage these APIs to be aliased by\r\n/profiling (or unstable_testing). In the future you don't have to alias\r\nthem because you can just change your roots to just import those APIs and\r\nthey'll still work with the isomorphic forms. Although we might also just\r\nuse export conditions for them.\r\n\r\nFor that all to work, I went with a different strategy for now where the\r\nreal API is in / but it comes with a warning if you use it. If you instead\r\nimport /client it disables the warning in a wrapper. That means that if you\r\nalias / then import /client that will inturn import the alias and it'll\r\njust work.\r\n\r\nIn a future breaking changes (likely when we switch to ESM) we can just\r\nremove createRoot/hydrateRoot from / and move away from the aliasing\r\nstrategy.\r\n\r\n* Update tests to import from react-dom/client\r\n\r\n* Fix fixtures\r\n\r\n* Update warnings\r\n\r\n* Add test for the warning\r\n\r\n* Update devtools\r\n\r\n* Change order of react-dom, react-dom/client alias\r\n\r\nI think the order matters here. The first one takes precedence.\r\n\r\n* Require react-dom through client so it can be aliased\r\n\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>"
        }
      },
      {
        "sha": "feefe437fe160cb99facbf9444ad6a32a901c6a3",
        "commit": {
          "message": "Refactor Cache Code (#23393)\n\nThis PR refactors the cache code by moving it out of ReactFiberCacheComponent to ReactFiberTransitionPool in anticipation of it being reused by multiple stacks (ie. transition tracing)"
        }
      },
      {
        "sha": "f0dd459e0d97081cb3c313ec52285e3e422f8dbf",
        "commit": {
          "message": "reassign src from props not the dom element src property (#23395)\n\nThe src property on the dom element will return a fully qualified name and this does not match the dom\r\nsrc attribute or the props provided to react. instead of reading from the element and re-assigning the property we\r\nassign the property from props which is how it was initially assigned during the render\r\n\r\nCo-authored-by: Josh Story <story@hey.com>"
        }
      },
      {
        "sha": "0e0b1a45fa09c0a8b162cde655016af97eda5c88",
        "commit": {
          "message": "Show DevTools backend and frontend versions in UI (#23399)\n\nThis information can help with bug investigation for renderers (like React Native) that embed the DevTools backend into their source (separately from the DevTools frontend, which gets run by the user).\r\n\r\nIf the DevTools backend is too old to report a version, or if the version reported is the same as the frontend (as will be the case with the browser extension) then only a single version string will be shown, as before. If a different version is reported, then both will be shown separately."
        }
      },
      {
        "sha": "f6c130f6145dbae5436625560f520957b5e27859",
        "commit": {
          "message": "React DevTools 4.23.0 -> 4.24.0 (#23400)\n\n* React DevTools 4.23.0 -> 4.24.0\r\n\r\n* Fixed CHANGELOG header format\r\n\r\n* Add separator line beween header version numbers"
        }
      },
      {
        "sha": "08644348b62bbfe979570b7174ff493da9bc70e9",
        "commit": {
          "message": "Added unit Tests in the ReactART, increasing the code coverage (#23195)"
        }
      },
      {
        "sha": "05c283c3c31184d68c6a54dfd6a044790b89a08a",
        "commit": {
          "message": "Fabric HostComponent as EventEmitter: support add/removeEventListener (unstable only) (#23386)\n\n* Implement addEventListener and removeEventListener on Fabric HostComponent\r\n\r\n* add files\r\n\r\n* re-add CustomEvent\r\n\r\n* fix flow\r\n\r\n* Need to get CustomEvent from an import since it won't exist on the global scope by default\r\n\r\n* yarn prettier-all\r\n\r\n* use a mangled name consistently to refer to imperatively registered event handlers\r\n\r\n* yarn prettier-all\r\n\r\n* fuzzy null check\r\n\r\n* fix capture phase event listener logic\r\n\r\n* early exit from getEventListeners more often\r\n\r\n* make some optimizations to getEventListeners and the bridge plugin\r\n\r\n* fix accumulateInto logic\r\n\r\n* fix accumulateInto\r\n\r\n* Simplifying getListeners at the expense of perf for the non-hot path\r\n\r\n* feedback\r\n\r\n* fix impl of getListeners to correctly remove function\r\n\r\n* pass all args in to event listeners"
        }
      },
      {
        "sha": "5662857616f7d645d3f7f5d4709c5bc36c660fcf",
        "commit": {
          "message": "[Fizz] Export debug function for FB (#24024)\n\n* export debug function for FB\r\n\r\n* silence flow"
        }
      },
      {
        "sha": "cb1e7b1c6ccd989d54b376ee4ae9da72a34f96e5",
        "commit": {
          "message": "Move onCompleteAll to .allReady Promise (#24025)\n\n* Move onCompleteAll to .allReady Promise\r\n\r\nThe onCompleteAll callback can sometimes resolve before the promise that\r\nreturns the stream which is tough to coordinate. A more idiomatic API\r\nfor a one shot event is a Promise.\r\n\r\nThat way the way you render for SEO or SSG is:\r\n\r\nconst stream = await renderToReadableStream(...);\r\nawait stream.readyAll;\r\nrespondWith(stream);\r\n\r\nIdeally this should be a sub-class of ReadableStream but we don't yet\r\ncompile these to ES6 and they'd had to be to native class to subclass\r\na native stream.\r\n\r\nI have other ideas for overriding the .tee() method in a subclass anyway.\r\nSo this is inline with that strategy.\r\n\r\n* Reject the Promise on fatal errors"
        }
      },
      {
        "sha": "14c2be8dac2d5482fda8a0906a31d239df8551fc",
        "commit": {
          "message": "Rename Node SSR Callbacks to onShellReady/onAllReady and Other Fixes (#24030)\n\n* I forgot to call onFatalError\r\n\r\nI can't figure out how to write a test for this because it only happens\r\nwhen there is a bug in React itself which would then be fixed if we found\r\nit.\r\n\r\nWe're also covered by the protection of ReadableStream which doesn't leak\r\nother errors to us.\r\n\r\n* Abort requests if the reader cancels\r\n\r\nNo need to continue computing at this point.\r\n\r\n* Abort requests if node streams get destroyed\r\n\r\nThis is if the downstream cancels is for example.\r\n\r\n* Rename Node APIs for Parity with allReady\r\n\r\nThe \"Complete\" terminology is a little misleading because not everything\r\nhas been written yet. It's just \"Ready\" to be written now.\r\n\r\nonShellReady\r\nonShellError\r\nonAllReady\r\n\r\n* 'close' should be enough"
        }
      },
      {
        "sha": "e09518e5bbb78447d6c86481cf0dcafb4b09c734",
        "commit": {
          "message": "[Fizz] write chunks to a buffer with no re-use (#24034)\n\n* write chunks to a buffer with no re-use\r\n\r\nchunks were previously enqueued to a ReadableStream as they were written. We now write them to a view over an ArrayBuffer\r\nand enqueue them only when writing has completed or the buffer's size is exceeded. In addition this copy now ensures\r\nwe don't attempt to re-send buffers that have already been transferred.\r\n\r\n* refactor writeChunk to be more defensive and efficient\r\n\r\nWe now defend against overflows using the next views length instead of the current one. this protects us against a future where we use byobRequest and we get longer initial views than we might create after overflowing the first time. Additionally we add in an optimization when we have completely filled up the currentView where we avoid creating subarrays of the chunk to write since it lands exactly on a view boundary. Finally we move the view creation to beginWriting to avoid a runtime check on each write and because we want to reset the view on each beginWriting call in case a throw elsewhere in the program leaves the currentView in an unfinished state\r\n\r\n* add tests to exercise codepaths dealing with buffer overlows"
        }
      },
      {
        "sha": "57799b912d365b373d2fe18d637e77480415df91",
        "commit": {
          "message": "Add more feature flag checks (#24037)"
        }
      },
      {
        "sha": "6edd55a3ffda9267cdbf3237ba0e44b5d62b6552",
        "commit": {
          "message": "Gate unstable_expectedLoadTime on enableCPUSuspense (#24038)"
        }
      },
      {
        "sha": "d5f1b067c8bbb826b823d0354a28ba31078b70c0",
        "commit": {
          "message": "[ServerContext] Flight support for ServerContext (#23244)\n\n* Flight side of server context\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* 1 more test\r\n\r\n* rm unused function\r\n\r\n* flow+prettier\r\n\r\n* flow again =)\r\n\r\n* duplicate ReactServerContext across packages\r\n\r\n* store default value when lazily initializing server context\r\n\r\n* .\r\n\r\n* better comment\r\n\r\n* derp... missing import\r\n\r\n* rm optional chaining\r\n\r\n* missed feature flag\r\n\r\n* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??\r\n\r\n* add warning if non ServerContext passed into useServerContext\r\n\r\n* pass context in as array of arrays\r\n\r\n* make importServerContext nott pollute the global context state\r\n\r\n* merge main\r\n\r\n* remove useServerContext\r\n\r\n* dont rely on object getters in ReactServerContext and disallow JSX\r\n\r\n* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry\r\n\r\n* gate test case as experimental\r\n\r\n* feedback\r\n\r\n* remove unions\r\n\r\n* Lint\r\n\r\n* fix oopsies (tests/lint/mismatching arguments/signatures\r\n\r\n* lint again\r\n\r\n* replace-fork\r\n\r\n* remove extraneous change\r\n\r\n* rebase\r\n\r\n* reinline\r\n\r\n* rebase\r\n\r\n* add back changes lost due to rebase being hard\r\n\r\n* emit chunk for provider\r\n\r\n* remove case for React provider type\r\n\r\n* update type for SomeChunk\r\n\r\n* enable flag with experimental\r\n\r\n* add missing types\r\n\r\n* fix flow type\r\n\r\n* missing type\r\n\r\n* t: any\r\n\r\n* revert extraneous type change\r\n\r\n* better type\r\n\r\n* better type\r\n\r\n* feedback\r\n\r\n* change import to type import\r\n\r\n* test?\r\n\r\n* test?\r\n\r\n* remove react-dom\r\n\r\n* remove react-native-renderer from react-server-native-relay/package.json\r\n\r\n* gate change in FiberNewContext, getComponentNameFromType, use switch statement in FlightServer\r\n\r\n* getComponentNameFromTpe: server context type gated and use displayName if available\r\n\r\n* fallthrough\r\n\r\n* lint....\r\n\r\n* POP\r\n\r\n* lint"
        }
      },
      {
        "sha": "a59f53a603306777fc6f949d84ce85f09bba4e4c",
        "commit": {
          "message": "Fizz: Prevent UnhandledPromiseRejection if shell errors (#24043)"
        }
      },
      {
        "sha": "9fa654eccd74035de0c2c873e61ecfe3fae1bf09",
        "commit": {
          "message": "Bump versions to rc.2"
        }
      },
      {
        "sha": "11c5bb6e168297f01f7a5954961706237937c105",
        "commit": {
          "message": "Bump versions to rc.2"
        }
      },
      {
        "sha": "c91892ec3c180a8f85a030aea931b58e326a55a7",
        "commit": {
          "message": "[Fizz] Don't flush empty segments (#24054)\n\nBefore this change, we would sometimes write segments without any content\r\nin them. For example for a Suspense boundary that immediately suspends\r\nwe might emit something like:\r\n\r\n<div hidden id=\"123\">\r\n  <template id=\"456\"></template>\r\n</div>\r\n\r\nWhere the outer div is just a temporary wrapper and the inner one is a\r\nplaceholder for something to be added later.\r\n\r\nThis serves no purpose.\r\n\r\nWe should ideally have a heuristic that holds back segments based on byte\r\nsize and time. However, this is a straight forward clear win for now."
        }
      },
      {
        "sha": "b9de50d2f9ad6ff8caae0729976c3cc9a69c176e",
        "commit": {
          "message": "Update test to reset modules instead of using private state (#24055)"
        }
      },
      {
        "sha": "72a933d2892dac9e5327678b6bd37af8d589bb22",
        "commit": {
          "message": "Gate legacy hidden (#24047)\n\n* Gate legacy hidden\r\n\r\n* Gate tests\r\n\r\n* Remove export from experimental"
        }
      },
      {
        "sha": "48a8574a68066be0385bd90c4a24e3e620eafb92",
        "commit": {
          "message": "Fixed edge case bug in Profiler (#24031)"
        }
      },
      {
        "sha": "4a87fb52115ca26b2251bdcc94deeff841b66e52",
        "commit": {
          "message": "Better handle undefined Error stacks in DevTools error boundary (#24065)"
        }
      },
      {
        "sha": "82762bea55d56afda2dcd00a565941be3798e0ac",
        "commit": {
          "message": "React DevTools 4.23.0 -> 4.24.0 (#24066)\n\n* Revert \"React DevTools 4.23.0 -> 4.24.0 (#23400)\"\r\n\r\nThis reverts commit f6c130f6145dbae5436625560f520957b5e27859.\r\n\r\n* React DevTools 4.23.0 -> 4.24.0\r\n\r\n* Added additional, pending bugfixes to CHANGELOG\r\n\r\n* Updated DevTools build and release script to fix header format"
        }
      },
      {
        "sha": "581f0c42ed4baa07309dbda296dc93a101bd922b",
        "commit": {
          "message": "[Flight] add support for Lazy components in Flight server (#24068)\n\n* [Flight] add support for Lazy components in Flight server\r\n\r\nLazy components suspend until resolved just like in Fizz. Add tests to confirm Lazy works with Shared Components and Client Component references.\r\n\r\n* Support Lazy elements\r\n\r\nReact.Lazy can now return an element instead of a Component. This commit implements support for Lazy elements when server rendering.\r\n\r\n* add lazy initialization to resolveModelToJson\r\n\r\nadding lazying initialization toResolveModelToJson means we use attemptResolveElement's full logic on whatever the resolved type ends up being. This better aligns handling of misued Lazy types like a lazy element being used as a Component or a lazy Component being used as an element."
        }
      },
      {
        "sha": "c8e4789e21f6cb031b92b3bd8a905244bfd808b2",
        "commit": {
          "message": "Pass children to hydration root constructor\n\nI already made this change for the concurrent root API in #23309. This\ndoes the same thing for the legacy API.\n\nDoesn't change any behavior, but I will use this in the next steps."
        }
      },
      {
        "sha": "83b941a519f0528f3c7938f2bc6094a8de60c21e",
        "commit": {
          "message": "Add isRootDehydrated function\n\nCurrently this does nothing except read a boolean field, but I'm about\nto change this logic.\n\nSince this is accessed by React DOM, too, I put the function in a\nseparate module that can be deep imported. Previously, it was accessing\nthe FiberRoot directly. The reason it's a separate module is to break a\ncircular dependency between React DOM and the reconciler."
        }
      },
      {
        "sha": "02b65fd8c5dbc6bfe2c976841f2f70a593ac9129",
        "commit": {
          "message": "Allow updates at lower pri without forcing client render\n\nCurrently, if a root is updated before the shell has finished hydrating\n(for example, due to a top-level navigation), we immediately revert to\nclient rendering. This is rare because the root is expected is finish\nquickly, but not exceedingly rare because the root may be suspended.\n\nThis adds support for updating the root without forcing a client render\nas long as the update has lower priority than the initial hydration,\ni.e. if the update is wrapped in startTransition.\n\nTo implement this, I had to do some refactoring. The main idea here is\nto make it closer to how we implement hydration in Suspense boundaries:\n\n- I moved isDehydrated from the shared FiberRoot object to the\nHostRoot's state object.\n- In the begin phase, I check if the root has received an by comparing\nthe new children to the initial children. If they are different, we\nrevert to client rendering, and set isDehydrated to false using a\nderived state update (a la getDerivedStateFromProps).\n- There are a few places where we used to set root.isDehydrated to false\nas a way to force a client render. Instead, I set the ForceClientRender\nflag on the root work-in-progress fiber.\n- Whenever we fall back to client rendering, I log a recoverable error.\n\nThe overall code structure is almost identical to the corresponding\nlogic for Suspense components.\n\nThe reason this works is because if the update has lower priority than\nthe initial hydration, it won't be processed during the hydration\nrender, so the children will be the same.\n\nWe can go even further and allow updates at _higher_ priority (though\nnot sync) by implementing selective hydration at the root, like we do\nfor Suspense boundaries: interrupt the current render, attempt hydration\nat slightly higher priority than the update, then continue rendering the\nupdate. I haven't implemented this yet, but I've structured the code in\nanticipation of adding this later."
        }
      },
      {
        "sha": "832e2987e01aa357c3b2e551acae0682ca36fb14",
        "commit": {
          "message": "Revert accdientally merged PR (#24081)"
        }
      },
      {
        "sha": "796724086a8a64100abf8bbc848a07daeb37777d",
        "commit": {
          "message": "Match select value against primitives to string but not undefined (#24077)"
        }
      },
      {
        "sha": "061ac27bc9c30e758301d9db823677a0803938c8",
        "commit": {
          "message": "Fix use of hydrateRoot in DevTools test (#24084)\n\nI noticed while working on a different PR that this test was not\r\nusing hydrateRoot correctly. You're meant to pass the initial children\r\nas the second argument."
        }
      },
      {
        "sha": "2bf7c02f0ecddff385f8acb9c797e65884f1a3b3",
        "commit": {
          "message": "Don't hide console error|warn in inspectedElement-test (#24086)"
        }
      },
      {
        "sha": "43eb28339a0dc645c27b36f06200da63d57c292f",
        "commit": {
          "message": "Add skipBubbling property to dispatch config (#23366)"
        }
      },
      {
        "sha": "63b86e19955a3f68c3e6e4928f4e5b24fd8a8342",
        "commit": {
          "message": "Disable unsupported Bridge protocol version dialog and add workaround for old protocol operations format (#24093)\n\nRationale: The only case where the unsupported dialog really matters is React Naive. That's the case where the frontend and backend versions are most likely to mismatch. In React Native, the backend is likely to send the bridge protocol version before sending operations– since the agent does this proactively during initialization.\r\n\r\nI've tested the React Native starter app– after forcefully downgrading the backend version to 4.19.1 (see #23307 (comment)) and verified that this change \"fixes\" things. Not only does DevTools no longer throw an error that causes the UI to be hidden– it works (meaning that the Components tree can be inspected and interacted with)."
        }
      },
      {
        "sha": "ac574d68834cbe7fd053b411e32a1b7687f5a473",
        "commit": {
          "message": "React DevTools 4.24.0 -> 4.24.1 (#24100)"
        }
      },
      {
        "sha": "d9677e3492f058e32468b8e728683d1d08bcba6f",
        "commit": {
          "message": "Update CHANGELOG.md"
        }
      },
      {
        "sha": "0412f0c1a46ef60032b70c43d55ec010f908855f",
        "commit": {
          "message": "add offscreen state node (#24026)\n\nAdd state node on Offscreen fibers with id (in preparation for transition tracing)"
        }
      },
      {
        "sha": "ba5dc6ccde775e742643ac7da16ff5d4b29cc09c",
        "commit": {
          "message": "Add authorization header to artifacts request (#24106)\n\n* Add authorization header to artifacts request\r\n\r\nCircleCI's artifacts API was updated; it now errors unless you're\r\nlogged in. This affects any of our workflows that download\r\nbuild artifacts.\r\n\r\nTo fix, I added an authorization header to the request.\r\n\r\n* Update sizbot to pull artifacts from public mirror\r\n\r\nWe can't use the normal download-build script in sizebot because it\r\ndepends on the CircleCI artifacts API, which was recently changed to\r\nrequire authorization. And we can't pass an authorization token\r\nwithout possibly leaking it to the public, since we run sizebot on\r\nPRs from external contributors. As a temporary workaround, this job\r\nwill pull the artifacts from a public mirror that I set up. But we\r\nshould find some other solution so we don't have to maintain\r\nthe mirror."
        }
      },
      {
        "sha": "ef23a9ee8114c939946ceff91becc13415d99d5a",
        "commit": {
          "message": "Flag for text hydration mismatch (#24107)\n\n* flag for text hydration mismatch\r\n\r\n* rm unused import"
        }
      },
      {
        "sha": "8fce116998ea525194e02075d1b89ddafc8d698f",
        "commit": {
          "message": "Update DevTools READMEs (#24105)"
        }
      },
      {
        "sha": "b075f974229f5eee820e97e87c2c73056c12c0b7",
        "commit": {
          "message": "Fix dispatch config type for skipBubbling (#24109)"
        }
      },
      {
        "sha": "1c44437355e21f2992344fdef9ab1c1c5a7f8c2b",
        "commit": {
          "message": "Fix createRoot container signature (#24110)\n\nThe internal Container type represents the types of containers that React\r\ncan support in its internals that deal with containers.\r\n\r\nThis didn't include DocumentFragment which we support specifically for\r\nrendering into shadow roots.\r\n\r\nHowever, not all types makes sense to pass into the createRoot API.\r\n\r\nOne of those is comment nodes that is deprecated and we don't really fully\r\nsupport. It really only exists for FB legacy.\r\n\r\nFor createRoot it doesn't make sense to pass a Document since that will try\r\nto empty the document which removes the HTML tag which doesn't work.\r\nDocuments can only be passed to hydrateRoot.\r\n\r\nConversely I'm not sure we actually support hydrating a shadow root properly\r\nso I excluded DocumentFragment from hydrateRoot."
        }
      },
      {
        "sha": "645ec5d6fce7926e1d23105a93621147ec3d7f17",
        "commit": {
          "message": "fix inspecting an element in a nested renderer bug (#24116)\n\nFixes this issue, where inspecting components in nested renderers results in an error. The reason for this is because we have different fiberToIDMap instances for each renderer, and owners of a component could be in different renderers.\r\n\r\nThis fix moves the fiberToIDMap and idToArbitraryFiberMap out of the attach method so there's only one instance of each for all renderers."
        }
      },
      {
        "sha": "dbe9e732af1f12757a55adb12a8279d7db898b60",
        "commit": {
          "message": "Avoid conditions where control flow is sufficient (#24126)\n\nThis also fixes a type error since resetTextContent can only be called\r\non Instances."
        }
      },
      {
        "sha": "2e0d86d22192ff0b13b71b4ad68fea46bf523ef6",
        "commit": {
          "message": "Allow updating dehydrated root at lower priority without forcing client render (#24082)\n\n* Pass children to hydration root constructor\r\n\r\nI already made this change for the concurrent root API in #23309. This\r\ndoes the same thing for the legacy API.\r\n\r\nDoesn't change any behavior, but I will use this in the next steps.\r\n\r\n* Add isRootDehydrated function\r\n\r\nCurrently this does nothing except read a boolean field, but I'm about\r\nto change this logic.\r\n\r\nSince this is accessed by React DOM, too, I put the function in a\r\nseparate module that can be deep imported. Previously, it was accessing\r\nthe FiberRoot directly. The reason it's a separate module is to break a\r\ncircular dependency between React DOM and the reconciler.\r\n\r\n* Allow updates at lower pri without forcing client render\r\n\r\nCurrently, if a root is updated before the shell has finished hydrating\r\n(for example, due to a top-level navigation), we immediately revert to\r\nclient rendering. This is rare because the root is expected is finish\r\nquickly, but not exceedingly rare because the root may be suspended.\r\n\r\nThis adds support for updating the root without forcing a client render\r\nas long as the update has lower priority than the initial hydration,\r\ni.e. if the update is wrapped in startTransition.\r\n\r\nTo implement this, I had to do some refactoring. The main idea here is\r\nto make it closer to how we implement hydration in Suspense boundaries:\r\n\r\n- I moved isDehydrated from the shared FiberRoot object to the\r\nHostRoot's state object.\r\n- In the begin phase, I check if the root has received an by comparing\r\nthe new children to the initial children. If they are different, we\r\nrevert to client rendering, and set isDehydrated to false using a\r\nderived state update (a la getDerivedStateFromProps).\r\n- There are a few places where we used to set root.isDehydrated to false\r\nas a way to force a client render. Instead, I set the ForceClientRender\r\nflag on the root work-in-progress fiber.\r\n- Whenever we fall back to client rendering, I log a recoverable error.\r\n\r\nThe overall code structure is almost identical to the corresponding\r\nlogic for Suspense components.\r\n\r\nThe reason this works is because if the update has lower priority than\r\nthe initial hydration, it won't be processed during the hydration\r\nrender, so the children will be the same.\r\n\r\nWe can go even further and allow updates at _higher_ priority (though\r\nnot sync) by implementing selective hydration at the root, like we do\r\nfor Suspense boundaries: interrupt the current render, attempt hydration\r\nat slightly higher priority than the update, then continue rendering the\r\nupdate. I haven't implemented this yet, but I've structured the code in\r\nanticipation of adding this later.\r\n\r\n* Wrap useMutableSource logic in feature flag"
        }
      },
      {
        "sha": "577f2de46cb2f6d71380551478a02de3965a764b",
        "commit": {
          "message": "enableCacheElement flag (#24131)\n\n* enableCacheElement flag\r\n\r\n* Update packages/shared/forks/ReactFeatureFlags.testing.js\r\n\r\nCo-authored-by: Ricky <rickhanlonii@gmail.com>\r\n\r\n* Update packages/shared/forks/ReactFeatureFlags.test-renderer.js\r\n\r\nCo-authored-by: Ricky <rickhanlonii@gmail.com>\r\n\r\n* Update packages/shared/forks/ReactFeatureFlags.native-oss.js\r\n\r\nCo-authored-by: Ricky <rickhanlonii@gmail.com>\r\n\r\n* Update packages/shared/ReactFeatureFlags.js\r\n\r\nCo-authored-by: Ricky <rickhanlonii@gmail.com>\r\n\r\nCo-authored-by: Dave McCabe <davemccabe@fb.com>\r\nCo-authored-by: Ricky <rickhanlonii@gmail.com>"
        }
      },
      {
        "sha": "de516ca5a635220d0cbe82b8f04003820e3f4072",
        "commit": {
          "message": "Bump versions to rc.3 (#24141)"
        }
      },
      {
        "sha": "3f8990898309c61c817fbf663f5221d9a00d0eaa",
        "commit": {
          "message": "Fix test-build-devtools if build was generated by build-for-devtools (#24088)\n\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>"
        }
      },
      {
        "sha": "e62a8d754548a490c2a3bcff3b420e5eedaf11c0",
        "commit": {
          "message": "Store throws a specific Error type (UnsupportedBridgeOperationError) (#24147)\n\nWhen this Error type is detected, DevTools shows a custom error overlay with upgrade/downgrade instructions."
        }
      },
      {
        "sha": "8df8a57eddbb3e89f0383c9d4d7feb6a13034fef",
        "commit": {
          "message": "React DevTools 4.24.1 -> 4.24.2 (#24150)"
        }
      },
      {
        "sha": "1159ff6193d500046d7bb86c234e167ea4b0becb",
        "commit": {
          "message": "Add details in READMEs for react-devtools local developement (#24148)\n\n* Add details in READMEs for react-devtools local developement\r\n\r\n* typo\r\n\r\n* update yarn for release script"
        }
      },
      {
        "sha": "6b85823b35f75baec9022a40df336d6aee788ce0",
        "commit": {
          "message": "Clean up Selective Hydration / Event Replay flag (#24156)\n\n* clean up selective hydration / replay flag\r\n\r\n* dont export return_targetInst"
        }
      },
      {
        "sha": "78fa7109c76225187427266e4f682fb713f3b922",
        "commit": {
          "message": "Release script prompts to stop running DEV scripts (#24154)"
        }
      },
      {
        "sha": "4072bdfd6d1fcebe520e114e04047e06992af839",
        "commit": {
          "message": "Add Node 17 to devEngines"
        }
      },
      {
        "sha": "033fe52b48338aec2522f1918408296cbec523d6",
        "commit": {
          "message": "DevTools imports (#24163)\n\n* Update DevTools imports: react-dom -> react-dom/client\r\n* Silence ReactDOM.render warning in DevTools test shell"
        }
      },
      {
        "sha": "a6bdb882b73cd0b2702656d767606c74ac0b6670",
        "commit": {
          "message": "Attach DevTools Tree keyboard events to the Tree container (not the document) (#24164)\n\nWe used to listen to at the document level for this event. That allowed us to listen to up/down arrow key events while another section\r\nof DevTools (like the search input) was focused. This was a minor UX positive.\r\n\r\n(We had to use ownerDocument rather than document for this, because the DevTools extension renders the Components and Profiler tabs into portals.)\r\n\r\nThis approach caused a problem though: it meant that a react-devtools-inline instance could steal (and prevent/block) keyboard events from other JavaScript on the page– which could even include other react-devtools-inline instances. This is a potential major UX negative.\r\n\r\nGiven the above trade offs, we now listen on the root of the Tree itself."
        }
      },
      {
        "sha": "3787230b1bff799bb8837b5a30e2d11d24b77ce1",
        "commit": {
          "message": "Fix fixture"
        }
      },
      {
        "sha": "e7d0053e65db49a536440eb24e6c1e4961d976f6",
        "commit": {
          "message": "[fizz] Fix validateIterable call (#24166)\n\n* fix validate iterable call\r\n\r\n* supports iterable\r\n\r\n* gate test by experimental"
        }
      },
      {
        "sha": "ba0aee5d71874202ebf8760a802bb1d6f2f61a5e",
        "commit": {
          "message": "DevTools bugfix: Ignore duplicate welcome \"message\" events (#24186)"
        }
      },
      {
        "sha": "fe6e0741286345edb2aa23784c21f8ea611ebdea",
        "commit": {
          "message": "Fix usage of console.error to prevent transform (#24188)\n\nWe were suppressing the `react-internals/warning-args` lint rule\r\nfor the call to `console.error` in `defaultOnRecoverableError`.\r\n\r\nAs far as I could tell, the lint rule exists because on dev builds,\r\nwe replace all calls to `console.error` with [this error\r\nfunction](https://github.com/facebook/react/blob/main/packages/shared/consoleWithStackDev.js#L31-L37)\r\nwhich expects a format string + args and nothing else. We were trying\r\nto pass in an `Error` object directly. After this commit's change,\r\nwe will still be passing an `Error` but the transform won't occur."
        }
      },
      {
        "sha": "fc46dba67fc47783bbb5919e656c66c6e51ce16d",
        "commit": {
          "message": "Remove rc suffix from versions (#24190)\n\n* Remove rc suffix from versions\r\n\r\n* Bump eslint-plugin-react-hooks version\r\n\r\nI noticed this one was behind the latest published version"
        }
      },
      {
        "sha": "eaa493e5325cec0d8ba41bc0a4bcb300d1a72b7d",
        "commit": {
          "message": "Profiler should only report stateful hooks that change between renders (#24189)\n\nThe Profiler has an advanced feature that shows why a component re-rendered. In the case of props and (class) state, it shows the names of props/state values that changed between renders. For hooks, DevTools tries to detect which ones may been related to the update by comparing prev/next internal hook structures.\r\n\r\nMy initial implementation tried to detect all changed hooks. In hindsight this is confusing, because only stateful hooks (e.g. useState, useReducer, and useSyncExternalStore) can schedule an update. (Other types of hooks can change between renders, but in a reactive way.) This PR changes the behavior to only report hooks that scheduled the update."
        }
      },
      {
        "sha": "34aa5cfe0d9b6ec4667e02bf46ab34d83dfb2d6d",
        "commit": {
          "message": "Update local package.jsons for 18"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v17.0.2",
      "body": "### React DOM\r\n\r\n* Remove an unused dependency to address the [`SharedArrayBuffer` cross-origin isolation warning](https://developer.chrome.com/blog/enabling-shared-array-buffer/). ([@koba04](https://github.com/koba04) and [@bvaughn](https://github.com/bvaughn) in [#20831](https://github.com/facebook/react/pull/20831), [#20832](https://github.com/facebook/react/pull/20832), and [#20840](https://github.com/facebook/react/pull/20840))\r\n\r\n## Artifacts\r\n\r\n- react: https://unpkg.com/react@17.0.2/umd/\r\n- react-art: https://unpkg.com/react-art@17.0.2/umd/\r\n- react-dom: https://unpkg.com/react-dom@17.0.2/umd/\r\n- react-is: https://unpkg.com/react-is@17.0.2/umd/\r\n- react-test-renderer: https://unpkg.com/react-test-renderer@17.0.2/umd/\r\n- scheduler: https://unpkg.com/scheduler@0.20.2/umd/"
    },
    "commits": [
      {
        "sha": "8cc6ff24880ac00fdb9d11bce480a0433456e82d",
        "commit": {
          "message": "fix: use SharedArrayBuffer only when cross-origin isolation is enabled (#20831)\n\n* fix: check cross-origin isolation for SharedArrayBuffer\r\n\r\n* chore: remove unused a $FlowFixMe comment\r\n\r\n* prettier"
        }
      },
      {
        "sha": "b2bbee7ba31bb7d212a9ff2e682a695a32f8a87f",
        "commit": {
          "message": "Disable (unstable) scheduler sampling profiler for OSS builds (#20832)\n\n* Disabled Scheduler sampling profiler for OSS builds\n* Added missing conditional feature flag around profiling calls"
        }
      },
      {
        "sha": "12adaffef7105e2714f82651ea51936c563fe15c",
        "commit": {
          "message": "Remove scheduler sampling profiler shared array buffer (#20840)\n\nNo one has been using this data so there's no reason to collect it. Event log has been maintained and tests have been updated."
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v17.0.1",
      "body": "### React DOM\r\n\r\n* Fix a crash in IE11. ([@gaearon](https://github.com/gaearon) in [#20071](https://github.com/facebook/react/pull/20071))\r\n"
    },
    "commits": [
      {
        "sha": "8e5adfbd7e605bda9c5e96c10e015b3dc0df688e",
        "commit": {
          "message": "Remove usage of Array#fill (#20071)"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v17.0.0",
      "body": "Today, we are releasing React 17!\r\n\r\n**[Learn more about React 17 and how to update to it on the official React blog.](https://reactjs.org/blog/2020/10/20/react-v17.html)**\r\n\r\n### React\r\n\r\n* Add `react/jsx-runtime` and `react/jsx-dev-runtime` for the [new JSX transform](https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154-https-githubcom-babel-babel-pull-11154). ([@lunaruan](https://github.com/lunaruan) in [#18299](https://github.com/facebook/react/pull/18299))\r\n* Build component stacks from native error frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18561](https://github.com/facebook/react/pull/18561))\r\n* Allow to specify `displayName` on context for improved stacks. ([@eps1lon](https://github.com/eps1lon) in [#18224](https://github.com/facebook/react/pull/18224))\r\n* Prevent `'use strict'` from leaking in the UMD bundles. ([@koba04](https://github.com/koba04) in [#19614](https://github.com/facebook/react/pull/19614))\r\n* Stop using `fb.me` for redirects. ([@cylim](https://github.com/cylim) in [#19598](https://github.com/facebook/react/pull/19598))\r\n\r\n### React DOM\r\n\r\n* Delegate events to roots instead of `document`. ([@trueadm](https://github.com/trueadm) in [#18195](https://github.com/facebook/react/pull/18195) and [others](https://github.com/facebook/react/pulls?q=is%3Apr+author%3Atrueadm+modern+event+is%3Amerged))\r\n* Clean up all effects before running any next effects. ([@bvaughn](https://github.com/bvaughn) in [#17947](https://github.com/facebook/react/pull/17947))\r\n* Run `useEffect` cleanup functions asynchronously. ([@bvaughn](https://github.com/bvaughn) in [#17925](https://github.com/facebook/react/pull/17925))\r\n* Use browser `focusin` and `focusout` for `onFocus` and `onBlur`. ([@trueadm](https://github.com/trueadm) in [#19186](https://github.com/facebook/react/pull/19186))\r\n* Make all `Capture` events use the browser capture phase. ([@trueadm](https://github.com/trueadm) in [#19221](https://github.com/facebook/react/pull/19221))\r\n* Don't emulate bubbling of the `onScroll` event. ([@gaearon](https://github.com/gaearon) in [#19464](https://github.com/facebook/react/pull/19464))\r\n* Throw if `forwardRef` or `memo` component returns `undefined`. ([@gaearon](https://github.com/gaearon) in [#19550](https://github.com/facebook/react/pull/19550))\r\n* Remove event pooling. ([@trueadm](https://github.com/trueadm) in [#18969](https://github.com/facebook/react/pull/18969))\r\n* Stop exposing internals that won’t be needed by React Native Web. ([@necolas](https://github.com/necolas) in [#18483](https://github.com/facebook/react/pull/18483))\r\n* Attach all known event listeners when the root mounts. ([@gaearon](https://github.com/gaearon) in [#19659](https://github.com/facebook/react/pull/19659))\r\n* Disable `console` in the second render pass of DEV mode double render. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))\r\n* Deprecate the undocumented and misleading `ReactTestUtils.SimulateNative` API. ([@gaearon](https://github.com/gaearon) in [#13407](https://github.com/facebook/react/pull/13407))\r\n* Rename private field names used in the internals. ([@gaearon](https://github.com/gaearon) in [#18377](https://github.com/facebook/react/pull/18377))\r\n* Don't call User Timing API in development. ([@gaearon](https://github.com/gaearon) in [#18417](https://github.com/facebook/react/pull/18417))\r\n* Disable console during the repeated render in Strict Mode. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18547](https://github.com/facebook/react/pull/18547))\r\n* In Strict Mode, double-render components without Hooks too. ([@eps1lon](https://github.com/eps1lon) in [#18430](https://github.com/facebook/react/pull/18430))\r\n* Allow calling `ReactDOM.flushSync` during lifecycle methods (but warn). ([@sebmarkbage](https://github.com/sebmarkbage) in [#18759](https://github.com/facebook/react/pull/18759))\r\n* Add the `code` property to the keyboard event objects. ([@bl00mber](https://github.com/bl00mber) in [#18287](https://github.com/facebook/react/pull/18287))\r\n* Add the `disableRemotePlayback` property for `video` elements. ([@tombrowndev](https://github.com/tombrowndev) in [#18619](https://github.com/facebook/react/pull/18619))\r\n* Add the `enterKeyHint` property for `input` elements. ([@eps1lon](https://github.com/eps1lon) in [#18634](https://github.com/facebook/react/pull/18634))\r\n* Warn when no `value` is provided to `<Context.Provider>`. ([@charlie1404](https://github.com/charlie1404) in [#19054](https://github.com/facebook/react/pull/19054))\r\n* Warn when `memo` or `forwardRef` components return `undefined`. ([@bvaughn](https://github.com/bvaughn) in [#19550](https://github.com/facebook/react/pull/19550))\r\n* Improve the error message for invalid updates. ([@JoviDeCroock](https://github.com/JoviDeCroock) in [#18316](https://github.com/facebook/react/pull/18316))\r\n* Exclude forwardRef and memo from stack frames. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18559](https://github.com/facebook/react/pull/18559))\r\n* Improve the error message when switching between controlled and uncontrolled inputs. ([@vcarl](https://github.com/vcarl) in [#17070](https://github.com/facebook/react/pull/17070))\r\n* Keep `onTouchStart`, `onTouchMove`, and `onWheel` passive. ([@gaearon](https://github.com/gaearon) in [#19654](https://github.com/facebook/react/pull/19654))\r\n* Fix `setState` hanging in development inside a closed iframe. ([@gaearon](https://github.com/gaearon) in [#19220](https://github.com/facebook/react/pull/19220))\r\n* Fix rendering bailout for lazy components with `defaultProps`. ([@jddxf](https://github.com/jddxf) in [#18539](https://github.com/facebook/react/pull/18539))\r\n* Fix a false positive warning when `dangerouslySetInnerHTML` is `undefined`. ([@eps1lon](https://github.com/eps1lon) in [#18676](https://github.com/facebook/react/pull/18676))\r\n* Fix Test Utils with non-standard `require` implementation. ([@just-boris](https://github.com/just-boris) in [#18632](https://github.com/facebook/react/pull/18632))\r\n* Fix `onBeforeInput` reporting an incorrect `event.type`. ([@eps1lon](https://github.com/eps1lon) in [#19561](https://github.com/facebook/react/pull/19561))\r\n* Fix `event.relatedTarget` reported as `undefined` in Firefox. ([@claytercek](https://github.com/claytercek) in [#19607](https://github.com/facebook/react/pull/19607))\r\n* Fix \"unspecified error\" in IE11. ([@hemakshis](https://github.com/hemakshis) in [#19664](https://github.com/facebook/react/pull/19664))\r\n* Fix rendering into a shadow root. ([@Jack-Works](https://github.com/Jack-Works) in [#15894](https://github.com/facebook/react/pull/15894))\r\n* Fix `movementX/Y` polyfill with capture events. ([@gaearon](https://github.com/gaearon) in [#19672](https://github.com/facebook/react/pull/19672))\r\n* Use delegation for `onSubmit` and `onReset` events. ([@gaearon](https://github.com/gaearon) in [#19333](https://github.com/facebook/react/pull/19333))\r\n* Improve memory usage. ([@trueadm](https://github.com/trueadm) in [#18970](https://github.com/facebook/react/pull/18970))\r\n\r\n### React DOM Server\r\n\r\n* Make `useCallback` behavior consistent with `useMemo` for the server renderer. ([@alexmckenley](https://github.com/alexmckenley) in [#18783](https://github.com/facebook/react/pull/18783))\r\n* Fix state leaking when a function component throws. ([@pmaccart](https://github.com/pmaccart) in [#19212](https://github.com/facebook/react/pull/19212))\r\n\r\n### React Test Renderer\r\n\r\n* Improve `findByType` error message. ([@henryqdineen](https://github.com/henryqdineen) in [#17439](https://github.com/facebook/react/pull/17439))\r\n\r\n### Concurrent Mode (Experimental)\r\n\r\n* Revamp the priority batching heuristics. ([@acdlite](https://github.com/acdlite) in [#18796](https://github.com/facebook/react/pull/18796))\r\n* Add the `unstable_` prefix before the experimental APIs. ([@acdlite](https://github.com/acdlite) in [#18825](https://github.com/facebook/react/pull/18825))\r\n* Remove `unstable_discreteUpdates` and `unstable_flushDiscreteUpdates`. ([@trueadm](https://github.com/trueadm) in [#18825](https://github.com/facebook/react/pull/18825))\r\n* Remove the `timeoutMs` argument. ([@acdlite](https://github.com/acdlite) in [#19703](https://github.com/facebook/react/pull/19703))\r\n* Disable `<div hidden />` prerendering in favor of a different future API. ([@acdlite](https://github.com/acdlite) in [#18917](https://github.com/facebook/react/pull/18917))\r\n* Add `unstable_expectedLoadTime` to Suspense for CPU-bound trees. ([@acdlite](https://github.com/acdlite) in [#19936](https://github.com/facebook/react/pull/19936))\r\n* Add an experimental `unstable_useOpaqueIdentifier` Hook. ([@lunaruan](https://github.com/lunaruan) in [#17322](https://github.com/facebook/react/pull/17322))\r\n* Add an experimental `unstable_startTransition` API. ([@rickhanlonii](https://github.com/rickhanlonii) in [#19696](https://github.com/facebook/react/pull/19696))\r\n* Using `act` in the test renderer no longer flushes Suspense fallbacks. ([@acdlite](https://github.com/acdlite) in [#18596](https://github.com/facebook/react/pull/18596))\r\n* Use global render timeout for CPU Suspense. ([@sebmarkbage](https://github.com/sebmarkbage) in [#19643](https://github.com/facebook/react/pull/19643))\r\n* Clear the existing root content before mounting. ([@bvaughn](https://github.com/bvaughn) in [#18730](https://github.com/facebook/react/pull/18730))\r\n* Fix a bug with error boundaries. ([@acdlite](https://github.com/acdlite) in [#18265](https://github.com/facebook/react/pull/18265))\r\n* Fix a bug causing dropped updates in a suspended tree. ([@acdlite](https://github.com/acdlite) in [#18384](https://github.com/facebook/react/pull/18384) and [#18457](https://github.com/facebook/react/pull/18457))\r\n* Fix a bug causing dropped render phase updates. ([@acdlite](https://github.com/acdlite) in [#18537](https://github.com/facebook/react/pull/18537))\r\n* Fix a bug in SuspenseList. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18412](https://github.com/facebook/react/pull/18412))\r\n* Fix a bug causing Suspense fallback to show too early. ([@acdlite](https://github.com/acdlite) in [#18411](https://github.com/facebook/react/pull/18411))\r\n* Fix a bug with class components inside SuspenseList. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18448](https://github.com/facebook/react/pull/18448))\r\n* Fix a bug with inputs that may cause updates to be dropped. ([@jddxf](https://github.com/jddxf) in [#18515](https://github.com/facebook/react/pull/18515) and [@acdlite](https://github.com/acdlite) in [#18535](https://github.com/facebook/react/pull/18535))\r\n* Fix a bug causing Suspense fallback to get stuck.  ([@acdlite](https://github.com/acdlite) in [#18663](https://github.com/facebook/react/pull/18663))\r\n* Don't cut off the tail of a SuspenseList if hydrating. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18854](https://github.com/facebook/react/pull/18854))\r\n* Fix a bug in `useMutableSource` that may happen when `getSnapshot` changes. ([@bvaughn](https://github.com/bvaughn) in [#18297](https://github.com/facebook/react/pull/18297))\r\n* Fix a tearing bug in `useMutableSource`. ([@bvaughn](https://github.com/bvaughn) in [#18912](https://github.com/facebook/react/pull/18912))\r\n* Warn if calling setState outside of render but before commit. ([@sebmarkbage](https://github.com/sebmarkbage) in [#18838](https://github.com/facebook/react/pull/18838))\r\n\r\n## Artifacts\r\n\r\n- react: https://unpkg.com/react@17.0.1/umd/\r\n- react-art: https://unpkg.com/react-art@17.0.1/umd/\r\n- react-dom: https://unpkg.com/react-dom@17.0.1/umd/\r\n- react-is: https://unpkg.com/react-is@17.0.1/umd/\r\n- react-test-renderer: https://unpkg.com/react-test-renderer@17.0.1/umd/\r\n- scheduler: https://unpkg.com/scheduler@0.20.1/umd/"
    },
    "commits": [
      {
        "sha": "89b610969d70d788f8c9769e3fa5b0044f5737ab",
        "commit": {
          "message": "Bump versions for 17"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.14.0",
      "body": "### React\r\n\r\n* Add support for the [new JSX transform](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html). ([@lunaruan](https://github.com/lunaruan) in [#18299](https://github.com/facebook/react/pull/18299))\r\n"
    },
    "commits": []
  },
  {
    "release": {
      "tag_name": "v15.7.0",
      "body": "### React\r\n\r\n* Backport support for the [new JSX transform](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) to 15.x. ([@lunaruan](https://github.com/lunaruan) in [#18299](https://github.com/facebook/react/pull/18299) and [@gaearon](https://github.com/gaearon) in [#20024](https://github.com/facebook/react/pull/20024))\r\n"
    },
    "commits": []
  },
  {
    "release": {
      "tag_name": "0.14.10",
      "body": "### React\r\n\r\n* Backport support for the [new JSX transform](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) to 0.14.x. ([@lunaruan](https://github.com/lunaruan) in [#18299](https://github.com/facebook/react/pull/18299) and [@gaearon](https://github.com/gaearon) in [#20024](https://github.com/facebook/react/pull/20024))\r\n"
    },
    "commits": [
      {
        "sha": "d5d659062d156de67a62ed3fd11ad9c08034bfdc",
        "commit": {
          "message": "Updated DevTools test snapshots"
        }
      },
      {
        "sha": "47915fd6e1858e8d3434caff9588237448a00b3f",
        "commit": {
          "message": "[ESLint] Fix a bug causing a too coarse dependency suggestion (#19313)\n\n* Add regression test for ESLint rule\r\n\r\n* Fix the issue"
        }
      },
      {
        "sha": "a2b4db05bc8ac1ff92ed914008260875e4c11284",
        "commit": {
          "message": "eslint-plugin-react-hooks@4.0.7"
        }
      },
      {
        "sha": "61dd00db24bec6305bd72908d3617b9f2a5183da",
        "commit": {
          "message": "Extract some of the tidy up changes from 19278 (#19315)"
        }
      },
      {
        "sha": "e2d73e91cce37d66f7b5ef7512b3c735dcef2256",
        "commit": {
          "message": "chore: Build react-dom/test-utils in codesandbox deploy (#19321)"
        }
      },
      {
        "sha": "26472c88979bb60746a47a660415df80775d25f9",
        "commit": {
          "message": "Bubble onSubmit/onReset behind a feature flag (#19333)"
        }
      },
      {
        "sha": "84479046f789be7ae19b410df4c6041e25a31a55",
        "commit": {
          "message": "reference not add to dependencies if only its type is used as typeof arg (#19316)\n\n* reference not add to dependencies if only its type is used as typeof arg\r\n\r\n* Add a few more tests"
        }
      },
      {
        "sha": "fe19b4247b97c20b4c6af92c022fcfccb45e3148",
        "commit": {
          "message": "eslint-plugin-react-hooks@4.0.8"
        }
      },
      {
        "sha": "d1f2143aa6f2bba622b244e296ccb89e1c6a7495",
        "commit": {
          "message": "Use RetryLanes instead of event time (follow up) (#19335)\n\nSame logic as #19307. Uses RetryLanes instead of event time to\r\ndetermine if a render includes new updates."
        }
      },
      {
        "sha": "fbc63863692d291b50e55400673845f7c81aff61",
        "commit": {
          "message": "Fix DevTools handling of empty Suspense tag for legacy renderer versions (#19337)"
        }
      },
      {
        "sha": "9ea0f6752da28a91bdb56382367e2a07390cb733",
        "commit": {
          "message": "fix mistake in React devtools (#19336)\n\nCo-authored-by: Пономаренко Богдан <b.ponomarenko@tinkoff.ru>"
        }
      },
      {
        "sha": "6d7555b014513125b0c229b9c6e45c903d974ff7",
        "commit": {
          "message": "Scheduling profiler updates (#19334)\n\n* Make enableSchedulingProfiler static for profiling+experimental builds\r\n\r\n* Copied debug tracing and scheduler profiling to .new fork\r\n\r\n* Updated test @gate conditions"
        }
      },
      {
        "sha": "147179ae82039f38fa1a9a72402f578af8fb3ea3",
        "commit": {
          "message": "Fix createEventHandle bug with comment containers (#19348)"
        }
      },
      {
        "sha": "566f613763d180a9bed110513c9fc453f2eca252",
        "commit": {
          "message": "Revert \"Fix createEventHandle bug with comment containers (#19348)\" (#19354)\n\nThis reverts commit 147179ae82039f38fa1a9a72402f578af8fb3ea3."
        }
      },
      {
        "sha": "c604b69973c40410384fe2ca70b34325c67cd22d",
        "commit": {
          "message": "Revert \"Revert \"Fix createEventHandle bug with comment containers (#19348)\" (#19354)\" (#19365)\n\nThis reverts commit 566f613763d180a9bed110513c9fc453f2eca252."
        }
      },
      {
        "sha": "392277f0abc2251ea93b7debad4ae86cd0f1bdff",
        "commit": {
          "message": "Revert \"Scheduling profiler updates (#19334)\" (#19366)\n\nThis reverts commit 6d7555b014513125b0c229b9c6e45c903d974ff7."
        }
      },
      {
        "sha": "45eef8b6b5df27c661b3e33e579abc11b563c65b",
        "commit": {
          "message": "Devtools: improve getID guard (#19364)"
        }
      },
      {
        "sha": "a9ba5283d9ad1b1a1fa7ae1eaa217ea8cf0c1c4c",
        "commit": {
          "message": "Disable DevTools minification (#19369)\n\nDevTools isn't being downloaded like typical JavaScript, so bundle size concerns don't apply. Parsing is still a consideration (so I'm open for discussion here) but I think this change would provide a couple of benefits:\r\n* People are more likely to *actually read* non-minified source code when e.g. a breakpoint is hit (as with the recent debugger statement)\r\n* Component stacks will be easier to parse on bug reports"
        }
      },
      {
        "sha": "4961833dbf3ac885668020e329236ea6b2b09f9a",
        "commit": {
          "message": "Don't build shallow renderer UMD bundles"
        }
      },
      {
        "sha": "a89854bc936668d325cac9a22e2ebfa128c7addf",
        "commit": {
          "message": "Fix Suspense-wrapping heuristic (and bump version numbers) (#19373)\n\n* Fixed suspense wrapping heuristic\r\n\r\n* Bump package numbers 16.13.1 -> 17.0.0-alpha.0 to fix DevTools Suspense heuristic"
        }
      },
      {
        "sha": "fed4ae0247883050aab6d77d9a83f9b6399d9a45",
        "commit": {
          "message": "DevTools 4.8.1 -> 4.8.2 (and CHANGELOG)"
        }
      },
      {
        "sha": "a226b9b44591e2af85388fa88ddf76b3f3a9de6c",
        "commit": {
          "message": "Effects list refactor continued: did-bailout flag (#19322)\n\n* Effects list rewrite\r\n\r\n* Improved deletions approach\r\n\r\nProcess deletions as we traverse the tree during commit, before we process other effects. This has the result of better mimicking the previous sequencing.\r\n\r\n* Made deletions field nullable\r\n\r\n* Revert (no longer necessary) change to ReactNative test\r\n\r\n* Eagerly set Deletions effect on Fiber when adding child to deletions array\r\n\r\n* Initialize deletions array to null\r\n\r\n* Null out deletions array instead of splicing 🤡\r\n\r\n* Removed TODO comment\r\n\r\n* Initial exploration on a did-bailout flag\r\n\r\n* fixed the rest of the bugs\r\n\r\n* Rolled temporary didBailout attribute into subtreeTag\r\n\r\n* addressed comments\r\n\r\n* Removed DidBailout subtree tag\r\n\r\n* Removed stale comment\r\n\r\n* use while loop instead of recursion for siblings\r\n\r\n* move bailout flag from while loop\r\n\r\n* Removed some unnecessary Deletion effectTags from children\r\n\r\n* Move Deletion effect assignment to deletions array initialization\r\n\r\nCo-authored-by: Luna <lunaris.ruan@gmail.com>"
        }
      },
      {
        "sha": "e387c98ffabdf3808d34910b4493093dd975ec69",
        "commit": {
          "message": "Fix bug with enableLegacyFBSupport click handlers (#19378)"
        }
      },
      {
        "sha": "bc4cd92cd542c56b82c72a2f9e8ef2a8e5cb14a6",
        "commit": {
          "message": "Use jest-environment-jsdom-sixteen (#19288)\n\n* Use jest-environment-jsdom-sixteen\r\n\r\n* Update yarn.lock\r\n\r\n* Dedupe new jest packages in yarn.lock\r\n\r\n* Pull upstream changes"
        }
      },
      {
        "sha": "9102719baacb64738e9235bc80d3d7d9918cc74c",
        "commit": {
          "message": "Tidy up React Scope API (#19352)"
        }
      },
      {
        "sha": "a59f899a1d021b231f8bd830436708294d9022c0",
        "commit": {
          "message": "Modern Event System: use focusin/focusout for onFocus/onBlur (#19186)"
        }
      },
      {
        "sha": "aec934af7f182e0bda910f64972722b147a68657",
        "commit": {
          "message": "Remove form event delegation flag (#19395)"
        }
      },
      {
        "sha": "51267c4ac9de8bf190505fbb7670ed99aae325f7",
        "commit": {
          "message": "Sync scheduling profiler marks and debug tracing to new reconciler fork (#19375, #19376, #19396)\n\n* Make enableSchedulingProfiler flag static\r\n\r\n* Copied debug tracing and scheduler profiling to .new fork and updated feature flags\r\n\r\n* Move profiler component stacks behind a feature flag"
        }
      },
      {
        "sha": "4c8c98ab9b669faf0280922932c51680ce6491bb",
        "commit": {
          "message": "Sync latest useFocus/useFocusWithin changes (#19397)"
        }
      },
      {
        "sha": "faa697f4f9afe9f1c98e315b2a9e70f5a74a7a74",
        "commit": {
          "message": "Set current update lane priority for user blocking events (#19342)\n\n* Set current update lane priority for user blocking events\r\n\r\n* Update to use LanePriority and not use runWithPriority\r\n\r\n* Remove unused imports\r\n\r\n* Fix tests, and I missed ReactDOMEventListener\r\n\r\n* Fix more tests\r\n\r\n* Add try/finally and hardcode lane priorities instead\r\n\r\n* Also hard code InputContinuousLanePriority in tests\r\n\r\n* Remove un-needed exports\r\n\r\n* Comment rollbacks"
        }
      },
      {
        "sha": "b23ea02be507cc08747d49c1994f283514c5aeea",
        "commit": {
          "message": "Track event times per lane on the root (#19387)\n\n* Pass event time to markRootUpdated\r\n\r\nSome minor rearranging so that eventTime gets threaded through. No\r\nchange in behavior.\r\n\r\n* Track event times per lane on the root\r\n\r\nPrevious strategy was to store the event time on the update object\r\nand accumulate the most recent one during the render phase.\r\n\r\nAmong other advantages, by tracking them on the root, we can read the\r\nevent time before the render phase has finished.\r\n\r\nI haven't removed the `eventTime` field from the update object yet,\r\nbecause it's still used to compute the timeout. Tracking the timeout\r\non the root is my next step."
        }
      },
      {
        "sha": "ecbdb74d7ce0f009cb735ddb83d4f760020b9f88",
        "commit": {
          "message": "Added the word \"events\" to clear ambiguousness. (#19409)"
        }
      },
      {
        "sha": "ab1f51700056667e5a2b97d5df7f118fea9868ac",
        "commit": {
          "message": "isFBBundle should be true if it's FB for www or FB for RN (#19420)\n\nThis ensures that the .fb.js override files kick in for RN. Otherwise we\r\nwon't have FB specific exports in the isomorphic modules."
        }
      },
      {
        "sha": "c9749d38e3f6c4d9f6c6cbca900ec83cc6cd30ee",
        "commit": {
          "message": "Generate RN renderers for stable builds (#19421)\n\n* Generate RN renderers for experimental builds\r\n\r\n* Don't generate FB builds for experimental channels"
        }
      },
      {
        "sha": "1dcee8656523668038551b3d1b69f7d679e769f8",
        "commit": {
          "message": "Regression test for media event bubbling (#19428)"
        }
      },
      {
        "sha": "356c17108f4e132371450338fa86e195f5e0acf4",
        "commit": {
          "message": "Remove capturePhaseEvents and separate events by bubbling (#19278)\n\n* Remove capturePhaseEvents and separate events by bubbling\r\n\r\nWIP\r\n\r\nRefine all logic\r\n\r\nRevise types\r\n\r\nFix\r\n\r\nFix conflicts\r\n\r\nFix flags\r\n\r\nFix\r\n\r\nFix\r\n\r\nFix test\r\n\r\nRevise\r\n\r\nCleanup\r\n\r\nRefine\r\n\r\nDeal with replaying\r\n\r\nFix\r\n\r\n* Add non delegated listeners unconditionally\r\n\r\n* Add media events\r\n\r\n* Fix a previously ignored test\r\n\r\n* Address feedback\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@me.com>"
        }
      },
      {
        "sha": "1aae05c4364ca8553c62b46a8df70ebe8fa574f0",
        "commit": {
          "message": "Revise comment + add non-bubbling event test (#19432)"
        }
      },
      {
        "sha": "125d1a19a211c51d5ee52ec0c1cc1f538eb44d5c",
        "commit": {
          "message": "Move event things around (#19433)\n\n* Put all synthetic events in one file\r\n\r\n* Inline other helpers\r\n\r\n* Remove Modern from filenames"
        }
      },
      {
        "sha": "30e3cfe40679f2247179bfe54f4768f2cbbc8161",
        "commit": {
          "message": "Fix scope issue (#19434)"
        }
      },
      {
        "sha": "76ce685d0fc7821a6c8be486d7cbb2c3d22f6fb7",
        "commit": {
          "message": "Remove SyntheticEvent subtypes (#19436)\n\n* Remove SyntheticEvent subtypes\r\n\r\n* Code golf"
        }
      },
      {
        "sha": "909b612e27d1a59aa601e2b8461a44661faaffa8",
        "commit": {
          "message": "Sync React Native types (#19437)"
        }
      },
      {
        "sha": "d93c8faadac0a1cea4ba2a3c1333e78314a6e61a",
        "commit": {
          "message": "Move Persistent Mode Optimization away from firstEffect (#19381)\n\nPersistent mode needs to clone a parent and add its children if a child has\r\nchanged.\r\n\r\nWe have an optimization in persistent mode where we don't do that if no\r\nchild could've changed. If there are no effects scheduled for any child\r\nthen there couldn't have been changes.\r\n\r\nInstead of checking for this on firstEffect, we now check this on the\r\nchildren's effectTag and subtreeTags.\r\n\r\nThis is quite unfortunate because if we could just do this check a little\r\nbit later we would've already gotten it transferred to the completed work's\r\nsubtreeTag. Now we have to loop over all the children and if any of them\r\nchanged, we have to loop over them again. Doing at least two loops per\r\nparent."
        }
      },
      {
        "sha": "b55f75d0a5383a60085e051d19b62ae68d71e366",
        "commit": {
          "message": "fix issue #19362 + test (#19412)"
        }
      },
      {
        "sha": "ef22aecfc52cdf0d7cedc723c590719c009c2a64",
        "commit": {
          "message": "Add invalid/close events to <dialog> element (#19439)\n\nSupport dialog\r\n\r\nFix"
        }
      },
      {
        "sha": "242a50a652f70df73a9ea4c696c2ed00e55e5bae",
        "commit": {
          "message": "Fix issue with capture phase non-bubbling events (#19452)"
        }
      },
      {
        "sha": "5530f1ccfba873e04b1580629b6659139435f9a8",
        "commit": {
          "message": "Upgrade art fixtures to babel 7 (#16235)\n\n* chore: upgrade art fixtures to babel 7\r\n\r\n* upgrade\r\n\r\n* use yarn"
        }
      },
      {
        "sha": "d29bf59a6e5bc79aa623538288f49cedee7cbb96",
        "commit": {
          "message": "Update my mailmap entries (#19455)"
        }
      },
      {
        "sha": "05344faca42468ff7e9225fa26d79fb89377c0cb",
        "commit": {
          "message": "Follow up fix to 19452 (#19454)"
        }
      },
      {
        "sha": "6bb86fd1629896019dfaa9c6ea6e0680913820a7",
        "commit": {
          "message": "Delegated all capture events (#19463)"
        }
      },
      {
        "sha": "217ecf581bb1e62dacafb3125b9d92b3346a3fa8",
        "commit": {
          "message": "Re-added toggle event to non-delegated events (#19465)"
        }
      },
      {
        "sha": "06d104e8ec89df4bc5176e014c83e8b6393e555f",
        "commit": {
          "message": "Don't emulate bubbling of the scroll event (#19464)\n\n* Don't emulate bubbling of the scroll event\r\n\r\n* Put behind a flag"
        }
      },
      {
        "sha": "144297165b5cad384485f4738ac6740e75bd5ae0",
        "commit": {
          "message": "Bail-out of attaching non-delegated listeners (#19466)\n\n* Bail-out of attaching non-delegated listeners\r\n\r\nRevise comment\r\n\r\n* Fix tests/add tests\r\n\r\n* Add onInvalid test"
        }
      },
      {
        "sha": "c24b641b768dc6ea2e7303cf0f4436e55ea61964",
        "commit": {
          "message": "Remove `timeout` option from `scheduleCallback` (#19457)\n\nSince the Lanes refactor landed, we no longer rely on this anywhere, so\r\nwe can remove it.\r\n\r\nThe `delay` option is still needed by our timer implementation\r\n(setTimeout polyfill). We'll keep the feature, but we'll likely change\r\nhow it's exposed once we figure out the proper layering between the\r\nvarious Scheduler APIs."
        }
      },
      {
        "sha": "96ac799eace5d989de3b4f80e6414e94a08ff77a",
        "commit": {
          "message": "Remove `callbackId` field from FiberRoot (#19458)\n\nThe old expiration times implementation used this field to infer when\r\nthe priority of a task had changed at a more granular level than a\r\nScheduler priority level.\r\n\r\nNow that we have the LanePriority type, which is React-specific, we no\r\nlonger need the `callbackId` field."
        }
      },
      {
        "sha": "feb134c30d20ef332771d71d8d1cb66d34311637",
        "commit": {
          "message": "feat(react-dom): Add enterKeyHint (#18634)"
        }
      },
      {
        "sha": "722bc046dcd748dde7109bc959318d3b14cf5196",
        "commit": {
          "message": "Don't rely on `didTimeout` for SyncBatched (#19469)\n\nTasks with SyncBatchedPriority — used by Blocking Mode — should always\r\nbe rendered by the `peformSyncWorkOnRoot` path, not\r\n`performConcurrentWorkOnRoot`.\r\n\r\nCurrently, they go through the `performConcurrentWorkOnRoot` callback.\r\nThen, we check `didTimeout` to see if the task expired. Since\r\nSyncBatchedPriority translates to ImmediatePriority in the Scheduler,\r\n`didTimeout` is always `true`, so we mark it as expired. Then it exits\r\nand re-enters in the `performSyncWorkOnRoot` path.\r\n\r\nAside from being overly convoluted, we shouldn't rely on Scheduler to\r\ntell us that SyncBatchedPriority work is synchronous. We should handle\r\nthat ourselves.\r\n\r\nThis will allow us to remove the `didTimeout` check. And it further\r\ndecouples us from the Scheduler priority, so we can eventually remove\r\nthat, too."
        }
      },
      {
        "sha": "52c51462744ac6a9437d64ae84fcd94eacbb8aa8",
        "commit": {
          "message": "Add SchedulerHostConfig fork for post task (#19470)"
        }
      },
      {
        "sha": "5227a37868c4bf3133ba5f2b3b39cac9175d7ea9",
        "commit": {
          "message": "Add \"unstable_\" prefix to experimental mutable source APIs (#19472)\n\n* Add \"unstbale_\" prefix to mutable source APIs\r\n\r\n* DebugHooks no longer calls useMutableSource() on init\r\n\r\nThis was causing an observable behavioral difference between experimental DEV and PROD builds.\r\n\r\nWe don't initialize stack position for other composite hooks (e.g. useDeferredValue, useTransition, useOpaqueIdentifier). If we did, it would cause the same obesrvable behavioral difference."
        }
      },
      {
        "sha": "0eea16601cab75dbb698d67220bce5674a13e38a",
        "commit": {
          "message": "Event propagation test suite (#19483)"
        }
      },
      {
        "sha": "7c8cc4358e79670d1e3be803a8c5267116e09bff",
        "commit": {
          "message": "Add postTask browser scheduler implementation  (#19479)\n\n* Reduce code to necessities\r\n\r\n* Switch to postTask API\r\n\r\n* Add SchedulerPostTask tests\r\n\r\n* Updates from review\r\n\r\n* Fix typo from review\r\n\r\n* Generate build of unstable_post_task"
        }
      },
      {
        "sha": "291db05a756dd88d0f687b3083e85a22abbf5214",
        "commit": {
          "message": "Add regression tests for all events (#19485)"
        }
      },
      {
        "sha": "74cd7e5f17e801f89c88689ecd9560a342b95c2c",
        "commit": {
          "message": "Use feature flags for React Native in the test renderer (#19486)"
        }
      },
      {
        "sha": "eae90cdbe90ab6ad8c48cee6f5af10e767a3f9fc",
        "commit": {
          "message": "Effects list refactor continued: passive effects traversal (#19374)\n\n* Adds new `Passive` subtree tag value.\r\n* Adds recursive traversal for passive effects (mounts and unmounts).\r\n* Removes `pendingPassiveHookEffectsMount` and `pendingPassiveHookEffectsUnmount` arrays from work loop.\r\n* Re-adds sibling and child pointer detaching (temporarily removed in previous PR).\r\n* Addresses some minor TODO comments left over from previous PRs.\r\n\r\n---\r\n\r\nCo-authored-by: Luna Ruan <luna@fb.com>"
        }
      },
      {
        "sha": "dff97a6915ef3a3897f85e3e47ffa55d4714ae72",
        "commit": {
          "message": "Fix onGot/LostPointerCapture events (#19487)"
        }
      },
      {
        "sha": "e1f96b82b4aff1d5c50d02c76df9c60e32dba408",
        "commit": {
          "message": "Check PassiveStatic instead of Passive (#19489)\n\nSaves us from having to set a flag on `current` during the layout phase.\r\n\r\nCould result in some redundant traversal, since PassiveStatic includes\r\neffects that don't need clean-up. But it's worth it to remove the work\r\nfrom the layout phase.\r\n\r\nWhile I was editing this, I also re-arranged it so that we check the\r\n`effectTag` check before we check the `tag`, since the `effectTag` check\r\nis the one that's more likely to fail."
        }
      },
      {
        "sha": "6ef997b534bfbf10071401ea15b39a678d557135",
        "commit": {
          "message": "Check for passive effects on the root fiber (#19488)\n\nThe root fiber doesn't have a parent from which we can read the\r\n`subtreeTag`, so we need to check its `effectTag` directly.\r\n\r\nThe root fiber previously did not have any pending passive effects,\r\nbut it does now that deleted fibers are cleaned up in the passive phase.\r\n\r\nThis allows us to remove a `schedulePassiveEffectCallback` call from the\r\nsynchronous unmount path.\r\n\r\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "22d16cc15df8e570b79c2825fb495c2b98b40bf5",
        "commit": {
          "message": "Remove event constants (#19276)\n\n* Remove opaque event type\r\n\r\n* Rename type and merge files\r\n\r\n* Use literals where we have Flow coverage\r\n\r\n* Flowify some plugins\r\n\r\n* Remove constants except necessary ones"
        }
      },
      {
        "sha": "ede9170648d07a63cd282e6acb3ea1fe9e22ded9",
        "commit": {
          "message": "Move passive logic out of layout phase (#19500)\n\n* setCurrentFiber per fiber, instead of per effect\r\n\r\n* Re-use safelyCallDestroy\r\n\r\nPart of the code in flushPassiveUnmountEffects is a duplicate of the\r\ncode used for unmounting layout effects. I did some minor refactoring to\r\nso we could use the same function in both places.\r\n\r\nClosure will inline anyway so it doesn't affect code size or\r\nperformance, just maintainability.\r\n\r\n* Don't check HookHasEffect during deletion\r\n\r\nWe don't need to check HookHasEffect during a deletion; all effects are\r\nunmounted.\r\n\r\nSo we also don't have to set HookHasEffect during a deletion, either.\r\n\r\nThis allows us to remove the last remaining passive effect logic from\r\nthe synchronous layout phase."
        }
      },
      {
        "sha": "815ee89bf55078f2447fe49a1c68336e70c1ce44",
        "commit": {
          "message": "Statically enable enableFilterEmptyStringAttributesDOM (#19502)"
        }
      },
      {
        "sha": "332ecefacec7a15d9088b37e2a158fe91641ed67",
        "commit": {
          "message": "Revert \"Statically enable enableFilterEmptyStringAttributesDOM (#19502)\" (#19504)\n\nThis reverts commit 815ee89bf55078f2447fe49a1c68336e70c1ce44."
        }
      },
      {
        "sha": "3d0895557a8c06e8fcab3bebaee368d5bc582337",
        "commit": {
          "message": "Disable onScroll bubbling statically except for WWW (#19503)"
        }
      },
      {
        "sha": "7543459a4819a443f4e3fd9fcf55d773721e0571",
        "commit": {
          "message": "Allow publishing untagged releases (#19505)"
        }
      },
      {
        "sha": "58b3ee7a889b62fefb9cc64962819795bebce7b8",
        "commit": {
          "message": "Support untagged releases (#19507)\n\n* Support untagged releases\r\n\r\n* Fix"
        }
      },
      {
        "sha": "5d271fc3b173e9b6d67d6c38af2048be0382408a",
        "commit": {
          "message": "Revert \"Support untagged releases (#19507)\" (#19508)\n\nThis reverts commit 58b3ee7a889b62fefb9cc64962819795bebce7b8."
        }
      },
      {
        "sha": "a1c0864d19b16a76a0727934e59406e2d77bd6ee",
        "commit": {
          "message": "Support untagged releases (#19509)"
        }
      },
      {
        "sha": "93a0c2830534cfbc4e6be3ecc9c9fc34dee3cfaa",
        "commit": {
          "message": "Add static version of Passive subtree tag (#19510)\n\nCreates new subtree tag, PassiveStatic, that represents whether a\r\ntree contains any passive effect hooks.\r\n\r\nIt corresponds to the PassiveStatic effect tag, which represents the\r\nsame concept for an individual fiber.\r\n\r\nThis allows us to remove the PassiveStatic effect tag from PassiveMask.\r\nIts presence was causing us to schedule a passive effect phase callback\r\non every render, instead of only when something changed. That's now\r\nfixed; this is reflected in the SchedulerProfiler tests.\r\n\r\n(The naming is getting really confusing. Need to do some bikeshedding.)"
        }
      },
      {
        "sha": "5f1890f12b4ea900a82853c528c0fe040760857c",
        "commit": {
          "message": "Bugfix: Don't unmount siblings of deleted node (#19516)\n\n* Test: Don't unmount siblings of deleted node\r\n\r\nAdds a failing regression test. Will fix in the next commit.\r\n\r\n* Refactor to accept deleted fiber, not child list\r\n\r\nA deleted fiber is passed to\r\nflushPassiveUnmountEffectsInsideOfDeletedTree, but the code is written\r\nas if it accepts the first node of a child list. This is likely because\r\nthe function was based on similar functions like\r\n`flushPassiveUnmountEffects`, which do accept a child list.\r\n\r\nUnfortunately, types don't help here because we use the first node\r\nin the list to represent the whole list, so in both cases, the type\r\nis Fiber.\r\n\r\nMight be worth changing the other functions to also accept individual\r\nfibers instead of a child list, to help avoid confusion.\r\n\r\n* Add layout effect to regression test, just in case"
        }
      },
      {
        "sha": "86314d5b458348c06df810a67605e8dad1133dd1",
        "commit": {
          "message": "Turn off new component stacks for React Native (#19521)"
        }
      },
      {
        "sha": "a437f3ff302dc92347d812d518c9a9659d9aa546",
        "commit": {
          "message": "Use RN fork in default branch of feature flags (#19522)"
        }
      },
      {
        "sha": "8d57ca519a3f8e7f76f81f404d048dfc35303d98",
        "commit": {
          "message": "fix: typo in React Release Scripts (#19524)"
        }
      },
      {
        "sha": "b61174fb7b09580c1ec2a8f55e73204b706d2935",
        "commit": {
          "message": "Remove the deprecated React Flare event system (#19520)"
        }
      },
      {
        "sha": "e9721e14e4b8776c107afa3cdd7c6d664fe20c24",
        "commit": {
          "message": "Remove onScroll bubbling flag (#19535)"
        }
      },
      {
        "sha": "5cff7755022220f24c1066643e0036b41806e8fa",
        "commit": {
          "message": "[Scheduler] Get current time from performance.now in non-DOM environments (#19532)\n\n* Get current time from performance.now in non-DOM environments\r\n\r\n* Use local references to native APIs for Date and Performance\r\n\r\n* Refactored to read globals directly"
        }
      },
      {
        "sha": "e67a6b16030ebc30257a69a7fb36a9ed67f29b39",
        "commit": {
          "message": "Fix runtime error that happens if a passive destroy function throws within an unmounted tree (#19543)\n\nA passive effect's cleanup function may throw after an unmount. In that event, React sometimes threw an uncaught runtime error trying to access a property on a null stateNode field. This commit fixes that (and adds a regression test)."
        }
      },
      {
        "sha": "f77c7b9d76205d93908a06fb2d58ee8c31188d16",
        "commit": {
          "message": "Re-add discrete flushing timeStamp heuristic (behind flag) (#19540)"
        }
      },
      {
        "sha": "50893dbcb7030499eeecfa4b44539b603b757afd",
        "commit": {
          "message": "fix(react-dom): unnecesary path on DOMEventProperties (#19544)"
        }
      },
      {
        "sha": "a5fed98a96c41cb852355f208bc86a9120f3227e",
        "commit": {
          "message": "Register more node types that are used later as JSXIdentifiers (#19514)"
        }
      },
      {
        "sha": "5bdd4c8c60ed6c12c5af7ffb73660c8f91bf955a",
        "commit": {
          "message": "Remove unused argument from call to jest method (#19546)"
        }
      },
      {
        "sha": "32ff4286872d1a6bb8ce71730064f60ebbdd1509",
        "commit": {
          "message": "Add feature flag for setting update lane priority (#19401)\n\n* Add feature flag for setting update lane priority\r\n\r\n* Remove second feature flag\r\n\r\n* Refactor feature flag locations\r\n\r\n* Add missing else"
        }
      },
      {
        "sha": "a63893ff320c39802e8c37fca84ea023f55230c9",
        "commit": {
          "message": "Warn about undefined return value for memo and forwardRef (#19550)"
        }
      },
      {
        "sha": "336729856a1355ff264e3e5427c67bb23b708657",
        "commit": {
          "message": "Nesting Fixture (#19531)\n\n* Nesting Fixture\r\n\r\n* Add README to nesting fixture\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Ricky <rickhanlonii@gmail.com>\r\n\r\n* Fixes\r\n\r\n* Add Redux\r\n\r\n* Use different versions\r\n\r\n* Use Consumer API\r\n\r\n* Rename helper\r\n\r\n* Write docs\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\nCo-authored-by: Rick Hanlon <rickhanlonii@gmail.com>"
        }
      },
      {
        "sha": "db2f22911083f5c8f5c637adf41bb7554928a339",
        "commit": {
          "message": "Fix command"
        }
      },
      {
        "sha": "2d9ec9199ccdfa9872ccb0c86096547d63682cf4",
        "commit": {
          "message": "Indent a command"
        }
      },
      {
        "sha": "0cd9a6de557f44dcfe79a4f287ca04b05d674bdc",
        "commit": {
          "message": "Parallelize Jest in CI (#19552)\n\nUses CircleCI's `parallelism` key to split our test jobs across multiple\r\nprocesses, like we do for the build job."
        }
      },
      {
        "sha": "7c30fb3b0b98d3e903e1dc60497f8e7ffb530153",
        "commit": {
          "message": "Update outdated lockfile (#19568)"
        }
      },
      {
        "sha": "7f696bd99c39348a631c20378d2a8704634bab04",
        "commit": {
          "message": "fix: onFocus/onBlur/onBeforeInput have a matching event type (#19561)\n\n* test: Add current behavior for event types of onFocus/onBlur\r\n\r\n* fix: onFocus/onBlur have a matching event type\r\n\r\n* fix useFocus\r\n\r\n* fix: don't compare native event types with react event types\r\n\r\n* Add FocusIn/FocusOutEventInterface\r\n\r\n* A simpler alternative fix\r\n\r\n* Add regression tests\r\n\r\n* Always pass React event type and fix beforeinput\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@me.com>"
        }
      },
      {
        "sha": "aa99b0b08e355fbbff3aaf6568d89b7a9c0e9705",
        "commit": {
          "message": "Rename test files"
        }
      },
      {
        "sha": "94c0244bab7515c9b2c00b8e5312a9b6f31ef13a",
        "commit": {
          "message": "Fix double-firing mouseenter (#19571)\n\n* test: Simulate mouseover in browser\r\n\r\n* Fix duplicate onMouseEnter event when relatedTarget is a root\r\n\r\n* Test leave as well\r\n\r\nCo-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>"
        }
      },
      {
        "sha": "0c52e24cb65a8f1c370184f58ee2d5601a3acd7f",
        "commit": {
          "message": "Support inner component _debugOwner in memo (#19556)\n\n* Support inner component _debugOwner in memo\r\n\r\n* test with devtool context\r\n\r\n* remove memo test\r\n\r\n* Merged master; tweaked test and snapshot\r\n\r\n* Pass owner to createFiber fn when creating a memo component.\r\n\r\nCo-authored-by: Theodore Han <tqhan317@gmail.com>"
        }
      },
      {
        "sha": "2704bb5374e52ed548db96df2d975dae42158dfb",
        "commit": {
          "message": "Add ReactVersion to SchedulingProfiler render scheduled marks (#19553)\n\n* Add ReactVersion to SchedulingProfiler render scheduled marks\r\n\r\n* Move ReactVersion to a new --react-init-* mark\r\n\r\nCo-authored-by: E-Liang Tan <eliang@eliangtan.com>"
        }
      },
      {
        "sha": "ce37bfad5f61dcca7c2d0c0787bc65e64614c912",
        "commit": {
          "message": "Remove resolutions from test renderer package.json (#19577)"
        }
      },
      {
        "sha": "c8d9b8878a3a50fe94db5407727a3d5cba13f971",
        "commit": {
          "message": "Speed up yarn cache in circle (#19566)"
        }
      },
      {
        "sha": "b8ed6a1aa580e4de80f707293015d638d3252d63",
        "commit": {
          "message": "[Scheduler] Call postTask directly (#19551)\n\nThis updates the experimental Scheduler postTask build to call postTask\r\ndirectly, instead of managing our own custom queue and work loop.\r\n\r\nWe still use a deadline 5ms mechanism to implement `shouldYield`.\r\n\r\nThe main thing that postTask is currently missing is the continuation\r\nfeature — when yielding to the main thread, the yielding task is sent\r\nto the back of the queue, instead of maintaining its position.\r\n\r\nWhile this would be nice to have, even without it, postTask may be good\r\nenough to replace our userspace implementation.\r\n\r\nWe'll run some tests to see."
        }
      },
      {
        "sha": "b6e1d086043a801682ff01b00c7a623d529b46c0",
        "commit": {
          "message": "DevTools bug fix: Proxied methods should be safely dehydrated for display"
        }
      },
      {
        "sha": "629125555f381764c9f4943e877985274ebbc1b6",
        "commit": {
          "message": "[Scheduler] Re-throw unhandled errors (#19595)\n\nBecause `postTask` returns a promise, errors inside a `postTask`\r\ncallback result in the promise being rejected.\r\n\r\nIf we don't catch those errors, then the browser will report an\r\n\"Unhandled promise rejection\" error. This is a confusing message to see\r\nin the console, because the fact that `postTask` is a promise-based API\r\nis an implementation detail from the perspective of the developer.\r\n\"Promise rejection\" is a red herring.\r\n\r\nOn the other hand, if we do catch those errors, then we need to report\r\nthe error to the user in some other way.\r\n\r\nWhat we really want is the default error reporting behavior that a\r\nnormal, non-Promise browser event gets.\r\n\r\nSo, we'll re-throw inside `setTimeout`."
        }
      },
      {
        "sha": "ccb6c39451b502c6b3ff3c014962827c54bae548",
        "commit": {
          "message": "Remove unused argument (#19600)"
        }
      },
      {
        "sha": "c3ee973c5604078d5e9645a7e50db1842939d1e0",
        "commit": {
          "message": "Fix emoji character displayed in Chrome extension (#19603)"
        }
      },
      {
        "sha": "dab0854c5e66ca74ca0591fd312d6a654e5aaaf1",
        "commit": {
          "message": "Move commit passive unmount/mount to CommitWork (#19599)"
        }
      },
      {
        "sha": "1d5e10f7035f0d3bcbffcd057a15940b1a20b164",
        "commit": {
          "message": "[eslint-plugin-react-hooks] Report constant constructions (#19590)\n\n* [eslint-plugin-react-cooks] Report constant constructions\r\n\r\nThe dependency array passed to a React hook can be thought of as a list of cache keys. On each render, if any dependency is not `===` its previous value, the hook will be rerun. Constructing a new object/array/function/etc directly within your render function means that the value will be referentially unique on each render. If you then use that value as a hook dependency, that hook will get a \"cache miss\" on every render, making the dependency array useless.\r\n\r\nThis can be especially dangerous since it can cascade. If a hook such as `useMemo` is rerun on each render, not only are we bypassing the option to avoid potentially expensive work, but the value _returned_ by `useMemo` may end up being referentially unique on each render causing other downstream hooks or memoized components to become deoptimized.\r\n\r\n* Fix/remove existing tests\r\n\r\n* Don't give an autofix of wrapping object declarations\r\n\r\nIt may not be safe to just wrap the declaration of an object, since the object may get mutated.\r\n\r\nOnly offer this autofix for functions which are unlikely to get mutated.\r\n\r\nAlso, update the message to clarify that the entire construction of the value should get wrapped.\r\n\r\n* Handle the long tail of nodes that will be referentially unique\r\n\r\n* Catch let/var constant constructions on initial assignment\r\n\r\n* Trim trailing whitespace\r\n\r\n* Address feedback from @gaearon\r\n\r\n* Rename \"assignment\" to \"initialization\"\r\n\r\n* Add test for a constant construction used in multiple dependency arrays"
        }
      },
      {
        "sha": "fe6d05229f29c59ea2bbbd616cdfa0c6e2ea03fc",
        "commit": {
          "message": "fix event.relatedTarget fallback logic for firefox (#19607)\n\n* fix event.relatedTarget fallback logic for firefox\r\n\r\n* check if relatedTarget is undefined for fallback"
        }
      },
      {
        "sha": "9abc2785cb070148d64fae81e523246b90b92016",
        "commit": {
          "message": "Remove wasteful checks from `shouldYield`\n\n`shouldYield` will currently return `true` if there's a higher priority\ntask in the Scheduler queue.\n\nSince we yield every 5ms anyway, this doesn't really have any practical\nbenefit. On the contrary, the extra checks on every `shouldYield` call\nare wasteful."
        }
      },
      {
        "sha": "3f8115cdd1e6ba237619cf8a7d433900dcf413c2",
        "commit": {
          "message": "Remove `didTimeout` check from work loop\n\nNo longer need this, since we have starvation protection in userspace.\n\nThis will also allow us to remove the concept from the Scheduler\npackage, which is nice because `postTask` doesn't currently support it."
        }
      },
      {
        "sha": "9b35dd2fcc8b8dfbd1363cef9e5c59a0deab0dd3",
        "commit": {
          "message": "Permanently removed component stacks from scheduling profiler data (#19615)\n\nThese stacks improve the profiler data but they're expensive to generate and generating them can also cause runtime errors in larger applications (although an exact repro has been hard to nail down). Removing them for now. We can revisit adding them after this profiler has been integrated into the DevTools extension and we can generate them lazily."
        }
      },
      {
        "sha": "ffb749c95e0361b3cfbbfc4e1a73bfa2fda0aa93",
        "commit": {
          "message": "Improve error boundary handling for unmounted subtrees (#19542)\n\nA passive effect's cleanup function may throw after an unmount. Prior to this commit, such an error would be ignored. (React would not notify any error boundaries.) After this commit, React's behavior varies depending on which reconciler fork is being used.\r\n\r\nFor the old reconciler, React will call componentDidCatch for the nearest unmounted error boundary (if there is one). If there are no unmounted error boundaries, React will still swallow the error because the return pointer has been disconnected, so the normal error handling logic does not know how to traverse the tree to find the nearest still-mounted ancestor.\r\n\r\nFor the new reconciler, React will skip any unmounted boundaries and look for a still-mounted boundary. If one is found, it will call getDerivedStateFromError and/or componentDidCatch (depending on the type of boundary).\r\n\r\nTests have been added for both reconciler variants for now."
        }
      },
      {
        "sha": "49cd77d24a5244d159be14671654da63932ea9be",
        "commit": {
          "message": "fix: leak strict mode with UMD builds (#19614)"
        }
      },
      {
        "sha": "702fad4b1b48ac8f626ed3f35e8f86f5ea728084",
        "commit": {
          "message": "refactor fb.me redirect link to reactjs.org/link (#19598)\n\n* refactor fb.me url to reactjs.org/link\r\n\r\n* Update ESLintRuleExhaustiveDeps-test.js\r\n\r\n* Update ReactDOMServerIntegrationUntrustedURL-test.internal.js\r\n\r\n* Update createReactClassIntegration-test.js\r\n\r\n* Update ReactDOMServerIntegrationUntrustedURL-test.internal.js\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"
        }
      },
      {
        "sha": "ced05c46c114453ac4d8d469296f6ca3f96fe908",
        "commit": {
          "message": "Update CHANGELOG.md"
        }
      },
      {
        "sha": "e4afb2fddf6d1c596c703c384303a35d4d0d830f",
        "commit": {
          "message": "eslint-plugin-react-hooks@4.1.0"
        }
      },
      {
        "sha": "1287670191e8e3bb193c83c18e587ccb8159a4ba",
        "commit": {
          "message": "Fix: React cannot render in ShadowRoot (#15894)\n\n* fix: render in shadow root\r\n\r\n* fix: flow typing\r\n\r\n* Remove types and turn invariant into warning\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@me.com>"
        }
      },
      {
        "sha": "1a41a196bcb30d456d1692c4a40cb8273fa2cb92",
        "commit": {
          "message": "Append text string to <Text> error message (#19581)\n\n* Append text string to <Text> error message\r\n\r\n* Truncate text in <Text> error message\r\n\r\n* Regenerate `codes.json`"
        }
      },
      {
        "sha": "bcca5a6ca78b33504e0a328c411b043261e7e303",
        "commit": {
          "message": "Always skip unmounted/unmounting error boundaries (#19627)\n\nThe behavior of error boundaries for passive effects that throw during cleanup was recently changed so that React ignores boundaries which are also unmounting in favor of still-mounted boundaries. This commit implements that same behavior for layout effects (useLayoutEffect, componentWillUnmount, and ref-detachment).\r\n\r\nThe new, skip-unmounting-boundaries behavior is behind a feature flag (`skipUnmountedBoundaries`)."
        }
      },
      {
        "sha": "ee409ea3b577f9ff37d36ccbfc642058ad783bb0",
        "commit": {
          "message": "change destroy to safelyCallDestroy (#19605)\n\nWe use safelyCallDestroy for commitUnmount and passive effects unmounts but we call destroy directly in commitHookEffectListUnmount (AKA layout effects unmounts because we don't use this anywhere else). This PR changes the direct destroy call to safelyCallDestroy for consistency"
        }
      },
      {
        "sha": "24f1923b1b55f142c39364c88a57b2a1b90d3972",
        "commit": {
          "message": "fix: open two same tabs on firefox (#19632)\n\nclose #19629"
        }
      },
      {
        "sha": "23595ff593b2e53ddfec2a08e848704d15d84b51",
        "commit": {
          "message": "Add missing param to safelyCallDestroy() (#19638)"
        }
      },
      {
        "sha": "c45a195429b238587357f71a0e487dd80ed7c59f",
        "commit": {
          "message": "fix: property list values should show whitespace (#19640)"
        }
      },
      {
        "sha": "32ca31306006d54d4887549b10608dc691cab055",
        "commit": {
          "message": "refactor: remove unnecessary return statements (#19625)"
        }
      },
      {
        "sha": "b8fa09e9e2b52d46e47ad604ef7c8c3529471b71",
        "commit": {
          "message": "provide profiling bundle for react-reconciler (#19559)"
        }
      },
      {
        "sha": "87b3e2d257e49b6d2c8e662830fc8f3c7d62f85f",
        "commit": {
          "message": "Add flow to SyntheticEvent (#19564)\n\n* Add flow to SyntheticEvent\r\n\r\n* Minimal implementation of known and unknown synthetic events\r\n\r\n* less casting\r\n\r\n* Update EnterLeaveEventPlugin.js\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"
        }
      },
      {
        "sha": "dd651df05e5802a31484f269b689c17acf087299",
        "commit": {
          "message": "Keep onTouchStart, onTouchMove, and onWheel passive (#19654)\n\n* Keep onTouchStart, onTouchMove, and onWheel passive\r\n\r\n* Put it behind a feature flag on WWW"
        }
      },
      {
        "sha": "64ddef44c69a18038b1683e04c4558a72af1b91a",
        "commit": {
          "message": "Revert \"Remove onScroll bubbling flag (#19535)\" (#19655)\n\nThis reverts commit e9721e14e4b8776c107afa3cdd7c6d664fe20c24."
        }
      },
      {
        "sha": "08e69f65b44f5e5501c796be6f7b272441ebd0e6",
        "commit": {
          "message": "Fix incorrect copy-paste in test (#19657)"
        }
      },
      {
        "sha": "c641b611c4d270660b0bb850759f5a324787a7b3",
        "commit": {
          "message": "Upgrade all @babel/* packages to fix DevTools builds on newer Node versions (#19647)"
        }
      },
      {
        "sha": "2bea3fb0b8f13db702da14b2b02e85127ed397a4",
        "commit": {
          "message": "Import React Concurrent Mode Profiler (#19634)\n\n\r\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>\r\nCo-authored-by: Kartik Choudhary <kartikc.918@gmail.com>"
        }
      },
      {
        "sha": "d5ed78764fcf406d32f02de248d4c7a22843732c",
        "commit": {
          "message": "Visually distinguish user timing marks from React events (#19663)"
        }
      },
      {
        "sha": "f912186012f17858b9d25466c658a46e25093941",
        "commit": {
          "message": "Fix: Unspecified error for IE11 (#19530) (#19664)"
        }
      },
      {
        "sha": "d6e433899f387be42a3cec2115b4607f32910a3b",
        "commit": {
          "message": "Use Global Render Timeout for CPU Suspense (#19643)\n\n* Use Retry lane for resuming CPU suspended work\r\n\r\n* Use a global render timeout for CPU suspense heuristics\r\n\r\n* Fix profiler test since we're now reading time more often\r\n\r\n* Sync to new reconciler\r\n\r\n* Test synchronously rerendering should not render more rows"
        }
      },
      {
        "sha": "49af88991c3a3e79e663e495458fad12d3162894",
        "commit": {
          "message": "Fix DevTools crash when inspecting document.all (#19619)\n\n* Add html_all_collection type to correct typeof document.all\r\n\r\n* process HTMLAllCollection like HTMLElement + fix flow issue\r\n\r\n* fix lint\r\n\r\n* move flow fix comment\r\n\r\n* Make it work with iframes too\r\n\r\n* optimize how we get html_all_collection type\r\n\r\n* use once Object.prototype.toString.call"
        }
      },
      {
        "sha": "90d212d326d8bb8f5ee414801db37e688d585712",
        "commit": {
          "message": "Fix movementX/Y polyfill with capture events (#19672)\n\n* Fix movementX/Y polyfill with capture events\r\n\r\n* Remove unnecesary call for better inlining"
        }
      },
      {
        "sha": "0386bd0da22cce1608f42072e64b35443eae871b",
        "commit": {
          "message": "Tweaked landing page styles (#19665)\n\n* Tweaked landing page styles\r\n\r\n* Update GitHub link\r\n\r\nCo-authored-by: E-Liang Tan <eliang@eliangtan.com>"
        }
      },
      {
        "sha": "d2e914ab4eb265bec82c01a083f608208f50d833",
        "commit": {
          "message": "Remove remaining references to effect list (#19673)\n\n* Remove `firstEffect` null check\r\n\r\nThis is the last remaining place where the effect list has semantic\r\nimplications.\r\n\r\nI've replaced it with a check of `effectTag` and `subtreeTag`, to see\r\nif there are any effects in the whole tree. This matches the semantics\r\nof the old check. However, I think only reason this optimization exists\r\nis because it affects profiling. We should reconsider whether this\r\nis necessary.\r\n\r\n* Remove remaining references to effect list\r\n\r\nWe no longer use the effect list anywhere in our implementation. It's\r\nbeen replaced by a recursive traversal in the commit phase.\r\n\r\nThis removes all references to the effect list in the new fork."
        }
      },
      {
        "sha": "2ada4bd0c2c8e2ccac0c3c952712d6e03c9a7362",
        "commit": {
          "message": "Add a test for non-passive event handlers for events affected by the browsers' intervention (#19658)"
        }
      },
      {
        "sha": "8c9fc4e90f58fab25c2991ac60ddb6a6afe9271c",
        "commit": {
          "message": "Remove usage of PossiblyWeakSet from createEventHandle (#19686)"
        }
      },
      {
        "sha": "848bb2426e44606e0a55dfe44c7b3ece33772485",
        "commit": {
          "message": "Attach Listeners Eagerly to Roots and Portal Containers (#19659)\n\n* Failing test for #19608\r\n\r\n* Attach Listeners Eagerly to Roots and Portal Containers\r\n\r\n* Forbid createEventHandle with custom events\r\n\r\nWe can't support this without adding more complexity. It's not clear that this is even desirable, as none of our existing use cases need custom events. This API primarily exists as a deprecation strategy for Flare, so I don't think it is important to expand its support beyond what Flare replacement code currently needs. We can later revisit it with a better understanding of the eager/lazy tradeoff but for now let's remove the inconsistency.\r\n\r\n* Reduce risk by changing condition only under the flag\r\n\r\nCo-authored-by: koba04 <koba0004@gmail.com>"
        }
      },
      {
        "sha": "af219cc6e6c514099a667ffab4e2d80c5c0c1bcc",
        "commit": {
          "message": "Lint rule to forbid access of cross-fork fields (#19679)\n\n* Lint rule to forbid access of cross-fork fields\r\n\r\nWe use a shared Fiber type for both reconciler forks (old and new). It\r\nis a superset of all the fields used by both forks. However, there are\r\nsome fields that should only be used in the new fork, and others that\r\nshould only be used in the old fork.\r\n\r\nIdeally we would enforce this with separate Flow types for each fork.\r\nThe problem is that the Fiber type is accessed by some packages outside\r\nthe reconciler (like React DOM), and get passed into the reconciler as\r\narguments. So there's no way to fork the Fiber type without also forking\r\nthe packages where they are used. FiberRoot has the same issue.\r\n\r\nInstead, I've added a lint rule that forbids cross-fork access of\r\nfork-specific fields. Fields that end in `_old` or `_new` are forbidden\r\nfrom being used inside the new or old fork respectively. Or you can\r\nspecific custom fields using the ESLint plugin options.\r\n\r\nI used this plugin to find and remove references to the effect list\r\nin d2e914a.\r\n\r\n* Mark effect list fields as old\r\n\r\nAnd `subtreeTag` as new.\r\n\r\nI didn't mark `lastEffect` because that name is also used by the\r\nHook type. Not super important; could rename to `lastEffect_old` but\r\nidk if it's worth the effort."
        }
      },
      {
        "sha": "c4e0768d7487a9359b74986e3b07841d2520f593",
        "commit": {
          "message": "Remove unused argument from `finishConcurrentRender` (#19689)"
        }
      },
      {
        "sha": "5564f2c95bb61b446f93dc5c519740bdb39e1989",
        "commit": {
          "message": "Add React.startTransition (#19696)\n\n* Add React.startTransition\r\n\r\n* Export startTransition from index.js as well"
        }
      },
      {
        "sha": "60ba723bf78b9a28f60dce854e88e206fab52301",
        "commit": {
          "message": "Add SuspenseList to devTools (#19684)\n\n* ensure getDisplayName is only called on functions\r\n\r\n* add SuspenseList to Dev tools element names\r\n\r\n* Add SuspenseList and pass tests\r\n\r\n* Import SuspenseList directly\r\n\r\n* run prettier\r\n\r\n* Refactor tests to use real components\r\n\r\n* run linter"
        }
      },
      {
        "sha": "8da0da0937af154b775b243c9d28b6aa50db696b",
        "commit": {
          "message": "Disable timeoutMs argument (#19703)\n\n* Remove distinction between long, short transitions\r\n\r\nWe're removing the `timeoutMs` option, so there's no longer any\r\ndistinction between \"short\" and \"long\" transitions. They're all treated\r\nthe same.\r\n\r\nThis commit doesn't remove `timeoutMs` yet, only combines the internal\r\npriority levels.\r\n\r\n* Disable `timeoutMs` argument\r\n\r\ntl;dr\r\n-----\r\n\r\n- We're removing the `timeoutMs` argument from `useTransition`.\r\n- Transitions will either immediately switch to a skeleton/placeholder\r\n  view (when loading new content) or wait indefinitely until the data\r\n  resolves (when refreshing stale content).\r\n- This commit disables the `timeoutMS` so that the API has the desired\r\n  semantics. It doesn't yet update the types or migrate all the test\r\n  callers. I'll do those steps in follow-up PRs.\r\n\r\nMotivation\r\n----------\r\n\r\nCurrently, transitions initiated by `startTransition` / `useTransition`\r\naccept a `timeoutMs` option. You can use this to control the maximum\r\namount of time that a transition is allowed to delay before we give up\r\nand show a placeholder.\r\n\r\nWhat we've discovered is that, in practice, every transition falls into\r\none of two categories: a **load** or a **refresh**:\r\n\r\n- **Loading a new screen**: show the next screen as soon as possible,\r\n  even if the data hasn't finished loading. Use a skeleton/placeholder\r\n  UI to show progress.\r\n- **Refreshing a screen that's already visible**: keep showing the\r\n  current screen indefinitely, for as long as it takes to load the fresh\r\n  data, even if the current data is stale. Use a pending state (and\r\n  maybe a busy indicator) to show progress.\r\n\r\nIn other words, transitions should either *delay indefinitely* (for a\r\nrefresh) or they should show a placeholder *instantly* (for a load).\r\nThere's not much use for transitions that are delayed for a\r\nsmall-but-noticeable amount of time.\r\n\r\nSo, the plan is to remove the `timeoutMs` option. Instead, we'll assign\r\nan effective timeout of `0` for loads, and `Infinity` for refreshes.\r\n\r\nThe mechanism for distinguishing a load from a refresh already exists in\r\nthe current model. If a component suspends, and the nearest Suspense\r\nboundary hasn't already mounted, we treat that as a load, because\r\nthere's nothing on the screen. However, if the nearest boundary is\r\nmounted, we treat that as a refresh, since it's already showing content.\r\n\r\nIf you need to fix a transition to be treated as a load instead of a\r\nrefresh, or vice versa, the solution will involve rearranging the\r\nlocation of your Suspense boundaries. It may also involve adding a key.\r\n\r\nWe're still working on proper documentation for these patterns. In the\r\nmeantime, please reach out to us if you run into problems that you're\r\nunsure how to fix.\r\n\r\nWe will remove `timeoutMs` from `useDeferredValue`, too, and apply the\r\nsame load versus refresh semantics to the update that spawns the\r\ndeferred value.\r\n\r\nNote that there are other types of delays that are not related to\r\ntransitions; for example, we will still throttle the appearance of\r\nnested placeholders (we refer to this as the placeholder \"train model\"),\r\nand we may still apply a Just Noticeable Difference heuristic (JND) in\r\nsome cases. These aren't going anywhere. (Well, the JND heuristic might\r\nbut for different reasons than those discussed above.)"
        }
      },
      {
        "sha": "1eaafc9ade46ba708b2361b324dd907d019e3939",
        "commit": {
          "message": "Clean up timeoutMs-related implementation details (#19704)\n\n* Disable busyDelayMs and busyMinDurationMs\r\n\r\nRefer to explanation in previous commit.\r\n\r\n* Remove unnecessary work loop variables\r\n\r\nSince we no longer support SuspenseConfig options, we don't need to\r\ntrack these values.\r\n\r\n* Remove unnecessary Update fields"
        }
      },
      {
        "sha": "c1ac052158ee9ec29d3e748420d9d577b8b7412d",
        "commit": {
          "message": "[Flight] Support more element types and Hooks for Server and Hybrid Components (#19711)\n\n* Shim support for more element types\r\n\r\n* Shim commonly used Hooks that are safe\r\n\r\n* Flow\r\n\r\n* Oopsie"
        }
      },
      {
        "sha": "b754caaaf23a070de281dcd0a9d32846470e1907",
        "commit": {
          "message": "Enable eager listeners in open source (#19716)\n\n* Enable eager listeners in open source\r\n\r\n* Fix tests\r\n\r\n* Enable in all places"
        }
      },
      {
        "sha": "92fcd46cc79bbf45df4ce86b0678dcef3b91078d",
        "commit": {
          "message": "Replace SuspenseConfig object with an integer (#19706)\n\nNow that the options in SuspenseConfig are no longer supported, the\r\nonly thing we use it for is to track whether an update is part of\r\na transition.\r\n\r\nI've renamed `ReactCurrentBatchConfig.suspense` to\r\n`ReactCurrentBatchConfig.transition`, and changed the type to a number.\r\nThe number is always either 0 or 1. I could have made it a boolean;\r\nhowever, most likely this will eventually be either a Lane or an\r\nincrementing identifier.\r\n\r\nThe `withSuspenseConfig` export still exists until we've removed\r\nall the callers from www."
        }
      },
      {
        "sha": "ddd1faa1972b614dfbfae205f2aa4a6c0b39a759",
        "commit": {
          "message": "Remove config argument from useTransition (#19719)\n\nAnd `useDeferredValue`.\r\n\r\nThe options were already disabled in previous commits, so this doesn't\r\nchange any behavior. I upated type signatures and cleaned up the hook\r\nimplementation a bit — no longer have to wrap the `start` method with\r\n`useCallback`, because its only remaining dependency is a `setState`\r\nmethod, which never changes. Instead, we can store the `start` method\r\non a ref."
        }
      },
      {
        "sha": "380dc95de826508ef4c637f2a27f2501b8b8e693",
        "commit": {
          "message": "Revert \"Append text string to <Text> error message (#19581)\" (#19723)\n\nThis reverts commit 1a41a196bcb30d456d1692c4a40cb8273fa2cb92."
        }
      },
      {
        "sha": "4f5fb56100fac50f2c8bb33f984301b550e71407",
        "commit": {
          "message": "Use gate pragma instead of if (__EXPERIMENTAL__) (#19722)\n\n* Use gate pragma instead of if (__EXPERIMENTAL__)\r\n\r\n* Fix stream error handling in tests\r\n\r\nAdded an error listener so that the tests fail within their Jest scope,\r\ninstead of crashing the whole process."
        }
      },
      {
        "sha": "a8500be893acbaaecb44bced3fbdcd2d0c356ef7",
        "commit": {
          "message": "Add `startTransition` as a known stable method (#19720)\n\nThe `startTransition` method returned from `useTransition` is a stable\r\nmethod, like `dispatch` or `setState`. You should not have to specify\r\nit as a hook dependency."
        }
      },
      {
        "sha": "1396e4a8f5646f35929883cbb449d2c83e7cbc79",
        "commit": {
          "message": "Fixes eslint warning when node type is ChainExpression (#19680)\n\n* Add babel parser which supports ChainExpression\r\n\r\n* Add and fix tests for new babel eslint parser\r\n\r\n* extract function to mark node\r\n\r\n* refactor for compatibility with eslint v7.7.0+\r\n\r\n* Update eslint to v7.7.0\r\nUpdate hook test since eslint now supports nullish coalescing"
        }
      },
      {
        "sha": "1f38dcff67d12828be771403e183652f5e93909a",
        "commit": {
          "message": "Remove withSuspenseConfig (#19724)\n\nRemoves `withSuspenseConfig` and migrates relevant tests to\r\n`startTransition` instead.\r\n\r\nWe only had one caller in www, which I've removed."
        }
      },
      {
        "sha": "b7d18c4daf244b991858cc9b0706b64589f4fd60",
        "commit": {
          "message": "Support Babel's envName option in React Refresh plugin (#19009)\n\n* Fix envName bug\r\n\r\n* Replace getEnv with env"
        }
      },
      {
        "sha": "53e622ca7f643cc9d18c9c4896b68ab14549e292",
        "commit": {
          "message": "Fix instances of function declaration after return (#19733)\n\n* Add ESLint plugin to check for any function declare after return\r\n* Refactor code to move function declarations before return and fix failing lint"
        }
      },
      {
        "sha": "98dba66ee1e5fcf3b88a0fe0331c8d84e9ddfbed",
        "commit": {
          "message": "Add ⎇ + arrow key navigation to DevTools (#19741)\n\n⎇ + left/right navigates between owners (similar to owners tree) and ⎇ + up/down navigations between siblings."
        }
      },
      {
        "sha": "2cfd73c4d02cfe4c745a1862ef4a9c44e8a41da4",
        "commit": {
          "message": "Fix typo in comment (Noticable→Noticeable) (#19737)"
        }
      },
      {
        "sha": "99cae887f3a8bde760a111516d254c1225242edf",
        "commit": {
          "message": "Add failing test for passive effect cleanup functions and memoized components (#19750)\n\n* Add failing tests for passive effects cleanup not being called for memoized components\r\n\r\n* Bubble passive static subtreeTag even after bailout\r\n\r\nThis prevents subsequent unmounts from skipping over any pending passive effect destroy functions"
        }
      },
      {
        "sha": "835c11eba713ea836af6dae67b4d0e835c0eabdf",
        "commit": {
          "message": "Add checkbox toggle for boolean values (#19714)\n\n* added a checkbox which appears to the right of a value when value is boolean\r\n* checkbox with toggle capability created for boolean props\r\n\r\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>"
        }
      },
      {
        "sha": "93400833956d4aa5b3136fb5883142a70a4f54e6",
        "commit": {
          "message": "Scheduling Profiler: Add Fast Refresh (#19757)"
        }
      },
      {
        "sha": "e9454894ff1715d6d51558fb05c1344440901069",
        "commit": {
          "message": "Scheduling Profiler: Extract and test scroll state from horizontal pan and zoom view (#19682)\n\n* Extract reusable scroll logic from HorizontalPanAndZoomView\r\n\r\n* Change VerticalScrollView to use scrollState\r\n\r\n* Clarify test name"
        }
      },
      {
        "sha": "bcc0aa4633760352c6c56f559d1e2d374d302f5a",
        "commit": {
          "message": "Revert \"Revert \"Remove onScroll bubbling flag (#19535)\" (#19655)\" (#19761)\n\nThis reverts commit 64ddef44c69a18038b1683e04c4558a72af1b91a."
        }
      },
      {
        "sha": "38a512acade57578738e2c5ebbb0709cd56a9bbd",
        "commit": {
          "message": "Scheduling Profiler: Redesign with DevTools styling (#19707)\n\n\r\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "eabd18c73f0df5e38431e47b0549566a6f41e15f",
        "commit": {
          "message": "Scheduling Profiler: Move preprocessing to web worker and add loading indicator (#19759)\n\n* Move preprocessData into a web worker\r\n* Add UI feedback for loading/import error states\r\n* Terminate worker when done handling profile\r\n* Add display density CSS variables"
        }
      },
      {
        "sha": "36df483af4a626fd4021c060fcb0f62471e82af1",
        "commit": {
          "message": "Add feature flag to disable scheduler timeout in work loop (#19771)"
        }
      },
      {
        "sha": "708fa77a783bbe729cfcebdd513d23eafc455b8b",
        "commit": {
          "message": "Decrease expiration time of input updates (#19772)\n\nChanges the expiration time of input updates from 1000ms to 250ms, to\r\nmatch the corresponding constant in Scheduler.js.\r\n\r\nWhen we made it larger, a product metric in www regressed, suggesting\r\nthere's a user interaction that's being starved by a series of\r\nsynchronous updates. If that theory is correct, the proper solution is\r\nto fix the starvation. However, this scenario supports the idea that\r\nexpiration times are an important safeguard when starvation does happen.\r\n\r\nAlso note that, in the case of user input specifically, this will soon\r\nno longer be an issue because we plan to make user input synchronous by\r\ndefault (until you enter `startTransition`, of course.)\r\n\r\nIf weren't planning to make these updates synchronous soon anyway, I\r\nwould probably make this number a configurable parameter."
        }
      },
      {
        "sha": "16654436039dd8f16a63928e71081c7745872e8f",
        "commit": {
          "message": "Rename effect fields (#19755)\n\n- `effectTag` -> `flags`\r\n- `subtreeTag` -> `subtreeFlags`"
        }
      },
      {
        "sha": "7baf9d4128d41903de125527b50285ea9862cf9a",
        "commit": {
          "message": "Combine Flags and SubtreeFlags types (#19775)\n\nBecause the `subtreeFlags` is the union of all the flags present in\r\na subtree, we can use the same type as `flags`.\r\n\r\nOne practical benefit is that we can bubble up the flags from the\r\nchildren with a single `|=` operator.\r\n\r\nStructurally, everything else about the effect algorithm is unchanged."
        }
      },
      {
        "sha": "4f3f7eeb7f467be7a8c5e7c2cdf64cb95a6099c3",
        "commit": {
          "message": "Bugfix: Effect clean up when deleting suspended tree (#19752)\n\n* Bug: Effect clean up when deleting suspended tree\r\n\r\nAdds a failing unit test.\r\n\r\n* Re-use static flags from suspended primary tree\r\n\r\nWhen switching to a Suspense boundary's fallback, we need to be sure\r\nto preserve static subtree flags from the primary tree."
        }
      },
      {
        "sha": "d38ec17b1d6ab75715c4ec06f2793c2986dcd549",
        "commit": {
          "message": "[Flight] Set dispatcher for duration of performWork() (#19776)"
        }
      },
      {
        "sha": "d17086c7c813402a550d15a2f56dc43f1dbd1735",
        "commit": {
          "message": "Decouple public, internal act implementation (#19745)\n\nIn the next major release, we intend to drop support for using the `act`\r\ntesting helper in production. (It already fires a warning.) The\r\nrationale is that, in order for `act` to work, you must either mock the\r\ntesting environment or add extra logic at runtime. Mocking the testing\r\nenvironment isn't ideal because it requires extra set up for the user.\r\nExtra logic at runtime is fine only in development mode — we don't want\r\nto slow down the production builds.\r\n\r\nSince most people only run their tests in development mode, dropping\r\nsupport for production should be fine; if there's demand, we can add it\r\nback later using a special testing build that is identical to the\r\nproduction build except for the additional testing logic.\r\n\r\nOne blocker for removing production support is that we currently use\r\n`act` to test React itself. We must test React in both development and\r\nproduction modes.\r\n\r\nSo, the solution is to fork `act` into separate public and\r\ninternal implementations:\r\n\r\n- *public implementation of `act`* – exposed to users, only works in\r\n  development mode, uses special runtime logic, does not support partial\r\n  rendering\r\n- *internal implementation of `act`* – private, works in both\r\n  development and productionm modes, only used by the React Core test\r\n  suite, uses no special runtime logic, supports partial rendering (i.e.\r\n  `toFlushAndYieldThrough`)\r\n\r\nThe internal implementation should mostly match the public\r\nimplementation's behavior, but since it's a private API, it doesn't have\r\nto match exactly. It works by mocking the test environment: it uses a\r\nmock build of Scheduler to flush rendering tasks, and Jest's mock timers\r\nto flush Suspense placeholders.\r\n\r\n---\r\n\r\nIn this first commit, I've added the internal forks of `act` and\r\nmigrated our tests to use them. The public `act` implementation is\r\nunaffected for now; I will leave refactoring/clean-up for a later step."
        }
      },
      {
        "sha": "e7b255341b059b4e2a109847395d0d0ba2633999",
        "commit": {
          "message": "Internal `act`: Flush timers at end of scope (#19788)\n\nIf there are any suspended fallbacks at the end of the `act` scope,\r\nforce them to display by running the pending timers (i.e. `setTimeout`).\r\n\r\nThe public implementation of `act` achieves the same behavior with an\r\nextra check in the work loop (`shouldForceFlushFallbacks`). Since our\r\ninternal `act` needs to work in both development and production, without\r\nadditional runtime checks, we instead rely on Jest's mock timers.\r\n\r\nThis doesn't not affect refresh transitions, which are meant to delay\r\nindefinitely, because in that case we exit the work loop without\r\nposting a timer."
        }
      },
      {
        "sha": "781212aab344b1619806369d768fad0c1ac3e04a",
        "commit": {
          "message": "Remove double space in test name (#19762)"
        }
      },
      {
        "sha": "a08ae9f147a716520a089055e2dec8f5397a4b0f",
        "commit": {
          "message": "Listen to onScroll during hydration (#19803)"
        }
      },
      {
        "sha": "cd75f93c03a15d00f0f82f52587f110d6fba7216",
        "commit": {
          "message": "eslint-plugin-react-hooks: fix compatibility with @typescript-eslint/parser@4.0.0+ (#19751)\n\nIn addition to `TSTypeQuery`, dependency nodes with a `TSTypeReference`\r\nparent need to be ignored as well. Without this fix, generic type\r\nvariables will be listed as missing dependencies.\r\n\r\nExample:\r\n\r\n    export function useFoo<T>(): (foo: T) => boolean {\r\n        return useCallback((foo: T) => false, []);\r\n    }\r\n\r\nThis will report the following issue:\r\n\r\n    React Hook useCallback has a missing dependency: 'T'. Either include\r\n    it or remove the dependency array\r\n\r\nCloses: #19742"
        }
      },
      {
        "sha": "ed4fdfc737a34fbb9fcb189cd4c7abe831130b33",
        "commit": {
          "message": "test(eslint-plugin-react-hooks): Run with TS parsers >= 2.x (#19792)\n\n* test(eslint-plugin-react-hooks): Run with TS parsers >= 2.x\r\n\r\n* name test suites for each parser"
        }
      },
      {
        "sha": "77544a0d6fd4df55e4e971e481dd49d2b67a375c",
        "commit": {
          "message": "Update CHANGELOG.md"
        }
      },
      {
        "sha": "ad8a0a8cd0cc918c5aa7faca8d22413192f9e3d2",
        "commit": {
          "message": "eslint-plugin-react-hooks@4.1.1"
        }
      },
      {
        "sha": "84558c61ba1e511768e4f775fcf9c7af3a339caf",
        "commit": {
          "message": "Don't visit passive effects during layout phase (#19809)\n\nRemoves the `Update` flag when scheduling a passive effect for\r\n`useEffect`. The `Passive` flag alone is sufficient.\r\n\r\nThis doesn't affect any behavior, but does optimize the performance of\r\nthe commit phase."
        }
      },
      {
        "sha": "0f70d4dd667d8c953aaf8b0d40f6a0439cd4ab27",
        "commit": {
          "message": "Consider components in jsx as missing dependencies in @typescript-eslint/parser@4.x (#19815)\n\n* Run JS tests with TS esling parser\r\n\r\n* Add failing test\r\n\r\n* fix: Mark JSXIdentifier has missing dependency\r\n\r\n* Safe isSameIdentifier"
        }
      },
      {
        "sha": "0044805c8885994a9869f6c752ef71e5ef9f297f",
        "commit": {
          "message": "Update CHANGELOG.md"
        }
      },
      {
        "sha": "cc581065df5e4bc986af3c38253b265be0dbaac4",
        "commit": {
          "message": "eslint-plugin-react-hooks@4.1.2"
        }
      },
      {
        "sha": "ebb2253428315bfa3237df403082b0d2ec2f9c5c",
        "commit": {
          "message": "updates mailmap entries (#19824)"
        }
      },
      {
        "sha": "11ee82df4572fff2bbe82fef5fc98281d977b072",
        "commit": {
          "message": "[Events] Make passiveness and priority non-configurable (#19807)"
        }
      },
      {
        "sha": "917cb01a58f59725e3824f0b1912a23116c4cd7c",
        "commit": {
          "message": "React DevTools: Show symbols used as keys in state (#19786)\n\n\r\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "ec39a5e9017dfa2c3311bc2b74a4d535ea2630a2",
        "commit": {
          "message": "DevTools: Improve browser extension iframe support (#19827)\n\n\r\nCo-authored-by: Joel DSouza <joel.dsouza@kapturecrm.com>\r\nCo-authored-by: Damien Maillard <damien.maillard@dailymotion.com>\r\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>"
        }
      },
      {
        "sha": "b93f3e7d2d595444c6ee2964d4cce2e17f4ffa28",
        "commit": {
          "message": "Fix `act` bundle size regression (#19832)\n\nAdds back the `TestUtils.act` implementation that I had removed\r\nin #19745. This version of `act` is implemented in \"userspace\" (i.e. not\r\nthe reconciler), so it doesn't add to the production bundle size.\r\n\r\nI had removed this in #19745 in favor of the `act` exported by the\r\nreconciler because I thought we would remove support for `act` in\r\nproduction in the impending major release. (It currently warns.)\r\n\r\nHowever, we've since decided to continue supporting `act` in prod for\r\nnow, so that it doesn't block people from upgrading to v17. We'll drop\r\nsupport in a future major release.\r\n\r\nSo, to avoid bloating the production bundle size, we need to move the\r\npublic version of `act` back to \"userspace\", like it was before.\r\n\r\nThis doesn't negate the main goal of #19745, though, which was to\r\ndecouple the public version(s) of `act` from the internal one that we\r\nuse to test React itself."
        }
      },
      {
        "sha": "16fb2b6f9e8fb17e2c468384e870cab635e4b1bb",
        "commit": {
          "message": "Moved resetChildLanes into complete work (#19836)\n\nThis allows us to inline a few checks that are specific to a certain tag-type."
        }
      },
      {
        "sha": "36df9185c53ce4e90dc1f7362f74533ecf0607db",
        "commit": {
          "message": "chore(docs): Removed outdated comment about fb.me link  (#19830)"
        }
      },
      {
        "sha": "6fddca27e75950adda92ab4f4946442907dc3bb7",
        "commit": {
          "message": "Remove passive intervention flag (#19849)"
        }
      },
      {
        "sha": "26857ecfa924c05119773dae7e59577e730f8faf",
        "commit": {
          "message": "Revert \"DevTools: Improve browser extension iframe support (#19827)\" (#19852)\n\nThis reverts commit ec39a5e9017dfa2c3311bc2b74a4d535ea2630a2."
        }
      },
      {
        "sha": "b3b1bb9ce282c107fe898e53ef70485c530d8f3c",
        "commit": {
          "message": "Enable source maps for DevTools production builds (#19773)\n\n\r\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "50d9451f320a9aaf94304209193562cc385567d8",
        "commit": {
          "message": "Improve DevTools editing interface (#19774)\n\n* Improve DevTools editing interface\r\n\r\nThis commit adds the ability to rename or delete keys in the props/state/hooks/context editor and adds tests to cover this functionality. DevTools will degrade gracefully for older versions of React that do not inject the new reconciler rename* or delete* methods.\r\n\r\nSpecifically, this commit includes the following changes:\r\n* Adds unit tests (for modern and legacy renderers) to cover overriding props, renaming keys, and deleting keys.\r\n* Refactor backend override methods to reduce redundant Bridge/Agent listeners and methods.\r\n* Inject new (DEV-only) methods from reconciler into DevTools to rename and delete paths.\r\n* Refactor 'inspected element' UI components to improve readability.\r\n* Improve auto-size input to better mimic Chrome's Style editor panel. (See this Code Sandbox for a proof of concept.)\r\n\r\nIt also contains the following code cleanup:\r\n* Additional unit tests have been added for modifying values as well as renaming or deleting paths.\r\n* Four new DEV-only methods have been added to the reconciler to be injected into the DevTools hook: overrideHookStateDeletePath, overrideHookStateRenamePath, overridePropsDeletePath, and overridePropsRenamePath. (DevTools will degrade gracefully for older renderers without these methods.)\r\n* I also took this as an opportunity to refactor some of the existing code in a few places:\r\n  * Rather than the backend implementing separate methods for editing props, state, hooks, and context– there are now three methods: deletePath, renamePath, and overrideValueAtPath that accept a type argument to differentiate between props, state, context, or hooks.\r\n  * The various UI components for the DevTools frontend have been refactored to remove some unnecessary repetition.\r\n\r\nThis commit also adds temporary support for override* commands with mismatched backend/frontend versions:\r\n* Add message forwarding for older backend methods (overrideContext, overrideHookState, overrideProps, and overrideState) to the new overrideValueAtPath method. This was done in both the frontend Bridge (for newer frontends passing messages to older embedded backends) and in the backend Agent (for older frontends passing messages to newer backends). We do this because React Native embeds the React DevTools backend, but cannot control which version of the frontend users use.\r\n* Additional unit tests have been added as well to cover the older frontend to newer backend case. Our DevTools test infra does not make it easy to write tests for the other way around."
        }
      },
      {
        "sha": "8b2d3783e58d1acea53428a10d2035a8399060fe",
        "commit": {
          "message": "Use Passive flag to schedule onPostCommit (#19862)\n\nInstead of calling `onPostCommit` in a separate phase, we can fire\r\nthem during the same traversal as the rest of the passive effects.\r\n\r\nThis works because effects are executed depth-first. So by the time we\r\nreach a Profiler node, we'll have already executed all the effects in\r\nits subtree."
        }
      },
      {
        "sha": "a774502e0ff2a82e3c0a3102534dbc3f1406e5ea",
        "commit": {
          "message": "Use single quotes in getComponentName return (#19873)"
        }
      },
      {
        "sha": "bc6b7b6b16f771bfc8048fe15e211ac777253b64",
        "commit": {
          "message": "Don't trigger lazy in DEV during element creation (#19871)"
        }
      },
      {
        "sha": "a8de69f358acb6d0be5f1c2970592fb0b1b821a1",
        "commit": {
          "message": "DevTools: Drop IE 11 support (#19875)\n\nDevTools shared Babel config previously supported IE 11 to target Hermes (for the standalone backend that gets embedded within React Native apps). This targeting resulted in less optimal code for other DevTools targets though which did not need to support IE 11. This PR updates the shared config to remove IE 11 support by default, and only enables it for the standalone backend target."
        }
      },
      {
        "sha": "6d73063ddf51be3b7885d83a1a6171448492c895",
        "commit": {
          "message": "Enable building of DevTools and scheduling profiler in CI (#19691)\n\n\r\nRe-enables building of main DevTools in CI and add new CI target for building the scheduling profiler."
        }
      },
      {
        "sha": "ded2a83ebfb7d0d755b0527bb221fa1a2b19b3b8",
        "commit": {
          "message": "Improved DevTools context test harness (#19878)"
        }
      },
      {
        "sha": "04e21efd09ab35ed33ca5374ef13ccb9fe69455a",
        "commit": {
          "message": "Add scheduling profiler deployment CI job (#19874)\n\n\r\n* Add vercel to scheduling profiler dev deps\r\n* Add vercel.json\r\n* Add CD job\r\n* Add CD setup instructions"
        }
      },
      {
        "sha": "c91c1c4ebeb8db2f9fe5574a83ce828f9032351e",
        "commit": {
          "message": "Release script: allow preparing RC from npm"
        }
      },
      {
        "sha": "7355bf575ad0e5fa84061287df8d6330d0a4803f",
        "commit": {
          "message": "Consolidate commit phase hook functions (#19864)\n\nThere were a few pairs of commit phase functions that were almost\r\nidentical except for one detail. I've refactored them a bit to\r\nconsolidate their implementations:\r\n\r\n- Lifted error handling logic when mounting a fiber's passive hook\r\neffects to surround the entire list, instead of surrounding each effect.\r\n- Lifted profiler duration tracking to surround the entire list.\r\n\r\nIn both cases, this matches the corresponding code for the layout phase.\r\n\r\nThe naming is still a bit of a mess but I'm not too concerned because\r\nmy next step is to refactor each commit sub-phase (layout, mutation)\r\nso that we can store values on the JS stack. So the existing function\r\nboundaries are about to change, anyway."
        }
      },
      {
        "sha": "81aaee56afba2bb3558f2aaa484b594f23b59d4c",
        "commit": {
          "message": "Don't call onCommit et al if there are no effects (#19863)\n\n* Don't call onCommit et al if there are no effects\r\n\r\nChecks `subtreeFlags` before scheduling an effect on the Profiler.\r\n\r\n* Fix failing Profiler tests\r\n\r\nThe change to conditionally call Profiler commit hooks only if updates were scheduled broke a few of the Profiler tests. I've fixed the tests by either:\r\n* Adding a no-op passive effect into the subtree or\r\n* Converting onPostCommit to onCommit\r\n\r\nWhen possible, I opted to add the no-op passive effect to the tests since that that hook is called later (during passive phase) so the test is a little broader. In a few cases, this required adding awkward act() wrappers so I opted to go with onCommit instead.\r\n\r\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "92c7e49895032885cffaad77a69d71268dda762e",
        "commit": {
          "message": "Don't consumer iterators while inspecting (#19831)\n\n\r\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "87c023b1c1b00d6776b7031f6e105913ead355da",
        "commit": {
          "message": "Profiler onRender only called when we do work (#19885)\n\nIf we didn't perform any work in the subtree, skip calling onRender."
        }
      },
      {
        "sha": "c6917346ff9f7ebdfbe11b73a72c82153ac704ec",
        "commit": {
          "message": "Fixed broken Profiler test (#19894)"
        }
      },
      {
        "sha": "a99bf5c5f4840c558f5e5923fcbe4ad6cb8ade98",
        "commit": {
          "message": "DevTools: Improve browser extension iframe support (#19854)\n\n\r\nCo-authored-by: Joel DSouza <joel.dsouza@kapturecrm.com>\r\nCo-authored-by: Damien Maillard <damien.maillard@dailymotion.com>\r\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>"
        }
      },
      {
        "sha": "c63741fb3daef6c1e8746cbe7d7b07ecb281a9fd",
        "commit": {
          "message": "offscreen double invoke effects (#19523)\n\nThis PR double invokes effects in __DEV__ mode.\r\n\r\nWe are thinking about unmounting layout and/or passive effects for a hidden tree. To understand potential issues with this, we want to double invoke effects. This PR changes the behavior in DEV when an effect runs from create() to create() -> destroy() -> create(). The effect cleanup function will still be called before the effect runs in both dev and prod. (Note: This change is purely for research for now as it is likely to break real code.)\r\n\r\n**Note: The change is fully behind a flag and does not affect any of the code on npm.**"
        }
      },
      {
        "sha": "1890159a5d362e76ee949dfcace1ccb9677abc45",
        "commit": {
          "message": "Separate SyntheticEvent constructors to prevent deopts (#19907)\n\n* Remove arguments from hot path\r\n\r\n* Make SyntheticEvent subtypes monomorphic\r\n\r\n* Maybe fix Flow?"
        }
      },
      {
        "sha": "0a008044945a9dcdc9543575a8ba90b1aaacf56c",
        "commit": {
          "message": "Remove Array.from() from hot path (#19908)\n\n* Remove Array.from() from hot path\r\n\r\n* Fix build\r\n\r\nDon't declare block variables inside loops"
        }
      },
      {
        "sha": "480626a9e920d5e04194c793a828318102ea4ff4",
        "commit": {
          "message": "Create Synthetic Events Lazily (#19909)"
        }
      },
      {
        "sha": "71bc8ac74c5c96279b8ca5aac6939ea1e4d81235",
        "commit": {
          "message": "Improve wording for inline DevTools README.md (#19897)"
        }
      },
      {
        "sha": "ba82eea3837e4aaeb5a30b7827b664a8c2128d2e",
        "commit": {
          "message": "Remove disableSchedulerTimeoutInWorkLoop flag (#19902)\n\nWe found and mitigated the root cause of the regression that led us to\r\ntemporarily revert this change. So now I'm un-reverting it."
        }
      },
      {
        "sha": "9198a5cec0936a21a5ba194a22fcbac03eba5d1d",
        "commit": {
          "message": "Refactor layout effect methods (#19895)\n\n\r\nCommit phase durations (layout and passive) are stored on the nearest (ancestor) Profiler and bubble up during the commit phase. This bubbling used to be implemented by traversing the return path each time we finished working on a Profiler to find the next nearest Profiler.\r\n\r\nThis commit removes that traversal. Instead, we maintain a stack of nearest Profiler ancestor while recursing the tree. This stack is maintained in the work loop (since that's where the recursive functions are) and so bubbling of durations has also been moved from commit-work to the work loop.\r\n\r\nThis PR also refactors the methods used to recurse and apply effects in preparation for the new Offscreen component type."
        }
      },
      {
        "sha": "7f08e908b10a58cda902611378ec053003d371ed",
        "commit": {
          "message": "Fix missing context to componentDidMount() when double-invoking lifecycles (#19935)"
        }
      },
      {
        "sha": "1faf9e3dd5d6492f3607d5c721055819e4106bc6",
        "commit": {
          "message": "Suspense for CPU-bound trees (#19936)\n\nAdds a new prop to the Suspense component type,\r\n`unstable_expectedLoadTime`. The presence of this prop indicates that\r\nthe content is computationally expensive to render.\r\n\r\nDuring the initial mount, React will skip over expensive trees by\r\nrendering a placeholder — just like we do with trees that are waiting\r\nfor data to resolve. That will help unblock the initial skeleton for the\r\nnew screen. Then we will continue rendering in the next commit.\r\n\r\nFor now, while we experiment with the API internally, any number passed\r\nto `unstable_expectedLoadTime` will be treated as \"computationally\r\nexpensive\", no matter how large or small. So it's basically a boolean.\r\nThe reason it's a number is that, in the future, we may try to be clever\r\nwith this additional information. For example, SuspenseList could use\r\nit as part of its heuristic to determine whether to keep rendering\r\nadditional rows.\r\n\r\nBackground\r\n----------\r\n\r\nMuch of our early messaging and research into Suspense focused on its\r\nability to throttle the appearance of placeholder UIs. Our theory was\r\nthat, on a fast network, if everything loads quickly, excessive\r\nplaceholders will contribute to a janky user experience. This was backed\r\nup by user research and has held up in practice.\r\n\r\nHowever, our original demos made an even stronger assertion: not only is\r\nit preferable to throttle successive loading states, but up to a certain\r\nthreshold, it’s also preferable to remain on the previous screen; or in\r\nother words, to delay the transition.\r\n\r\nThis strategy has produced mixed results. We’ve found it works well for\r\ncertain transitions, but not for all them. When performing a full page\r\ntransition, showing an initial skeleton as soon as possible is crucial\r\nto making the transition feel snappy. You still want throttle the nested\r\nloading states as they pop in, but you need to show something on the new\r\nroute. Remaining on the previous screen can make the app feel\r\nunresponsive.\r\n\r\nThat’s not to say that delaying the previous screen always leads to a\r\nbad user experience. Especially if you can guarantee that the delay is\r\nsmall enough that the user won’t notice it. This threshold is a called a\r\nJust Noticeable Difference (JND). If we can stay under the JND, then\r\nit’s worth skipping the first placeholder to reduce overall thrash.\r\n\r\nDelays that are larger than the JND have some use cases, too. The main\r\none we’ve found is to refresh existing data, where it’s often preferable\r\nto keep stale content on screen while the new data loads in the\r\nbackground. It’s also useful as a fallback strategy if something\r\nsuspends unexpectedly, to avoid hiding parts of the UI that are already\r\nvisible.\r\n\r\nWe’re still in the process of optimizing our heuristics for the most\r\ncommon patterns. In general, though, we are trending toward being more\r\naggressive about prioritizing the initial skeleton.\r\n\r\nFor example, Suspense is usually thought of as a feature for displaying\r\nplaceholders when the UI is missing data — that is, when rendering is\r\nbound by pending IO.\r\n\r\nBut it turns out that the same principles apply to CPU-bound\r\ntransitions, too. It’s worth deferring a tree that’s slow to render if\r\ndoing so unblocks the rest of the transition — regardless of whether\r\nit’s slow because of missing data or because of expensive CPU work.\r\n\r\nWe already take advantage of this idea in a few places, such as\r\nhydration. Instead of hydrating server-rendered UI in a single pass,\r\nReact splits it into chunks. It can do this because the initial HTML\r\nacts as its own placeholder. React can defer hydrating a chunk of UI as\r\nlong as it wants until the user interacts it. The boundary we use to\r\nsplit the UI into chunks is the same one we use for IO-bound subtrees:\r\nthe <Suspense /> component.\r\n\r\nSuspenseList does something similar. When streaming in a list of items,\r\nit will occasionally stop to commit whatever items have already\r\nfinished, before continuing where it left off. It does this by showing a\r\nplaceholder for the remaining items, again using the same <Suspense />\r\ncomponent API, even if the item is CPU-bound.\r\n\r\nUnresolved questions\r\n--------------------\r\n\r\nThere is a concern that showing a placeholder without also loading new\r\ndata could be disorienting. Users are trained to believe that a\r\nplaceholder signals fresh content. So there are still some questions\r\nwe’ll need to resolve."
        }
      },
      {
        "sha": "5427b4657b3c23e2ab73b4ab906147c5c7927adf",
        "commit": {
          "message": "Temporarily disable Profiler commit hooks flag (#19900)\n\n\r\nTemporarily disable Profiler commit hooks flag to verify it does not cause a regression."
        }
      },
      {
        "sha": "91d2b6ef0189797dfc8f1dc6a89bc26fb2911b78",
        "commit": {
          "message": "DevTools: Remove ReactJS.org version check \"cheat\" (#19939)\n\n\r\nRemove dead code as facebook.github.io/react always redirects to reactjs.org, which has prod version of react. so removing the \"cheat\" (#19939)"
        }
      },
      {
        "sha": "8657ad4278334a072dc88ce8bb0ea4090fd944e2",
        "commit": {
          "message": "Fix(React DevTools) - prevent phishing attacks (#19934)\n\nWhen a link opens a URL in a new tab with target=\"_blank\", it is very simple for the opened page to change the location of the original page because the JavaScript variable window.opener is not null and thus \"window.opener.location can be set by the opened page. This exposes the user to very simple phishing attacks."
        }
      },
      {
        "sha": "43363e2795393a00fd77312a16d6b80e626c29de",
        "commit": {
          "message": "Fix codestyle for typeof comparison (#19928)"
        }
      },
      {
        "sha": "97625272abe1fecc8ffba469795803ca8cfff9a7",
        "commit": {
          "message": "Debug tracing tests for CPU bound suspense (#19943)"
        }
      },
      {
        "sha": "cc77be957e502ca6b855f1600d7fd11748dceb18",
        "commit": {
          "message": "Remove unnecessary error overriding in (#19949)"
        }
      },
      {
        "sha": "461cd84944c28a5715a16a19f2503c87068832d6",
        "commit": {
          "message": "Revert \"DevTools: Improve browser extension iframe support (#19854)\" (#19959)\n\nThis reverts commit a99bf5c5f4840c558f5e5923fcbe4ad6cb8ade98."
        }
      },
      {
        "sha": "44d39c4d76c4ea4b26a2160ae6ba861babfb2b14",
        "commit": {
          "message": "Removed skip-error-boundaries modifications from old fork (#19961)\n\nTechnically this change is unnecessary, since the feature is controlled by a flag, but since we decided not to ship this in v17– I'm going to remove it for now entirely."
        }
      },
      {
        "sha": "1992d973068d031083f507558d89ad91c0015709",
        "commit": {
          "message": "Revert \"Temporarily disable Profiler commit hooks flag (#19900)\" (#19960)"
        }
      },
      {
        "sha": "4ead6b53057ee6c6129a6d2f6e264232130b1fce",
        "commit": {
          "message": "Treat <time> tag as a normal HTML tag. (#19951)\n\n<time> tag has been supported by Chrome since Chrome 62.0.\r\nRemove workarounds which were in place to avoid friction with\r\nversions before Chrome 62.\r\n\r\nSigned-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>"
        }
      },
      {
        "sha": "6eca8eff08e293229c2ff957f175573faf994fc0",
        "commit": {
          "message": "updating the informations needed when adding a root node to a tree in react-devtools overview doc (#19979)\n\nCo-authored-by: Idriss AITHAFID <Idriss.AITHAFID@um6p.ma>"
        }
      },
      {
        "sha": "40c52de96043f56430d464a62635014f0e8dd900",
        "commit": {
          "message": "[Flight] Add Runtime Errors for Non-serializable Values (#19980)\n\n* Error on encoding non-serializable props\r\n\r\n* Add DEV time warnings to enforce that values are plain objects"
        }
      },
      {
        "sha": "993ca533b42756811731f6b7791ae06a35ee6b4d",
        "commit": {
          "message": "Enable eager listeners statically (#19983)"
        }
      },
      {
        "sha": "0a4c7c565146222a2b701455ba2d66540063b98d",
        "commit": {
          "message": "[Flight] Don't warn for key, but error for ref (#19986)\n\n* Improve error message by expanding the object in question\r\n\r\n* Don't warn for key/ref getters\r\n\r\n* Error if refs are passed in server components or to client components"
        }
      },
      {
        "sha": "f46a80ae11ce606e5dc148f9399bef7c60a755a2",
        "commit": {
          "message": "Update outdated links and fix two broken links  (#19985)\n\n* update all facebook.github.io links\r\n\r\n* facebookincubator links : update some outdated links and fix two other broken links where they are actually the latest updated ones"
        }
      },
      {
        "sha": "48907797294340b6d5d8fecfbcf97edf0691888d",
        "commit": {
          "message": "Updated OVERVIEW.md to the new infos required when adding a new leaf node to the tree (#19981)\n\nCo-authored-by: Idriss AITHAFID <Idriss.AITHAFID@um6p.ma>"
        }
      },
      {
        "sha": "7e405d458d6481fb1c04dfca6afab0651e6f67cd",
        "commit": {
          "message": "[DevTools] Add DevTools forked Feature flags (#18994)\n\nAlso resolve an uncaught error in extension build (#18843).\r\n\r\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>\r\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "7559722a865e89992f75ff38c1015a865660c3cd",
        "commit": {
          "message": "Fix bad null check in DevTools highlight code (#20010)"
        }
      },
      {
        "sha": "e614e6965749c096c9db0e6ad2844a2803ebdcb6",
        "commit": {
          "message": "handled a missing suspense fiber when suspense is filtered on the profiler (#19987)\n\nCo-authored-by: Brian Vaughn <bvaughn@fb.com>"
        }
      },
      {
        "sha": "880587366d84f9d36dd606088bc7bad050ead77e",
        "commit": {
          "message": "Deprecate old test script commands (#19893)\n\n* Deprecate old test script commands\r\n\r\n* Update PR template test script\r\n\r\n* Add test-stable and test-www-classic\r\n\r\n* Update circle test names\r\n\r\n* Rename test-www-classic to test-classic\r\n\r\n* Missed some job renames\r\n\r\n* Missed some more job renames"
        }
      },
      {
        "sha": "f75f8b48a2ab14e31712389f91750c58de18c378",
        "commit": {
          "message": "DevTools always overrides the dispatcher when shallow rendering (#20011)\n\nThis is done so that any effects scheduled by the shallow render are thrown away.\r\n\r\nUnlike the code this was forked from (in ReactComponentStackFrame) DevTools should override the dispatcher even when DevTools is compiled in production mode, because the app itself may be in development mode and log errors/warnings."
        }
      },
      {
        "sha": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "commit": {
          "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments"
        }
      },
      {
        "sha": "037717685a3f18079bdd002541e8da22ca29c9a9",
        "commit": {
          "message": "Check in old major packages"
        }
      },
      {
        "sha": "790e2446abee5283ef52477183b8d3b2ec07afc3",
        "commit": {
          "message": "Copy JSX runtime bundles from the fixture"
        }
      },
      {
        "sha": "1fb5c123b8411bdaa5f6543e87f261f377db90b5",
        "commit": {
          "message": "Bump versions"
        }
      },
      {
        "sha": "056ac56b526d09f72039ff377465b4fb51aeeeb7",
        "commit": {
          "message": ".eslintignore"
        }
      },
      {
        "sha": "6948842cf80ce57007cfab1006ca8f9cf55798be",
        "commit": {
          "message": "Remove CI check"
        }
      },
      {
        "sha": "170a8b21b65398c132f1409e3297cd4abaeeb646",
        "commit": {
          "message": "Bump versions in build artifacts"
        }
      },
      {
        "sha": "4337c1c00609ec8d7ae399c736e9d37bb159fac5",
        "commit": {
          "message": "Fix missing package"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.13.1",
      "body": "### React DOM\r\n\r\n* Fix bug in legacy mode Suspense where effect clean-up functions are not fired. This only affects users who use Suspense for data fetching in legacy mode, which is not technically supported. ([@acdlite](https://github.com/acdlite) in [#18238](https://github.com/facebook/react/pull/18238))\r\n* Revert warning for cross-component updates that happen inside class render lifecycles (`componentWillReceiveProps`, `shouldComponentUpdate`, and so on). ([@gaearon](https://github.com/gaearon) in [#18330](https://github.com/facebook/react/pull/18330))\r\n\r\n## Artifacts\r\n\r\n- react: https://unpkg.com/react@16.13.1/umd/\r\n- react-art: https://unpkg.com/react-art@16.13.1/umd/\r\n- react-dom: https://unpkg.com/react-dom@16.13.1/umd/\r\n- react-is: https://unpkg.com/react-is@16.13.1/umd/\r\n- react-test-renderer: https://unpkg.com/react-test-renderer@16.13.1/umd/\r\n- scheduler: https://unpkg.com/scheduler@0.19.1/umd/"
    },
    "commits": [
      {
        "sha": "82cf50ab3a0c412aef9a97630695a2f5b78fbad3",
        "commit": {
          "message": "Bugfix: Dropped effects in Legacy Mode Suspense (#18238)\n\n* Failing: Dropped effects in Legacy Mode Suspense\r\n\r\n* Transfer mounted effects on suspend in legacy mode\r\n\r\nIn legacy mode, a component that suspends bails out and commit in\r\nits previous state. If the component previously had mounted effects,\r\nwe must transfer those to the work-in-progress so they don't\r\nget dropped."
        }
      },
      {
        "sha": "2186beb775338184f7310dea2c5988f1bde2184e",
        "commit": {
          "message": "Remove unnecessary warnings (#18135)"
        }
      },
      {
        "sha": "7554ab76727ba3c18d1493d4f4bc7f7a88926ffe",
        "commit": {
          "message": "improve error message for cross-functional component updates (#18316)\n\n* improve error message for cross-functional component updates\r\n\r\n* correctly use %s by quoting it\r\n\r\n* use workInProgress and lint\r\n\r\n* add test assertion\r\n\r\n* fix test\r\n\r\n* Improve the error message\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@me.com>"
        }
      },
      {
        "sha": "da834083cccb6ef942f701c6b6cecc78213196a8",
        "commit": {
          "message": "Don't fire the render phase update warning for class lifecycles (#18330)\n\n* Change the warning to not say \"function body\"\r\n\r\nThis warning is more generic and may happen with class components too.\r\n\r\n* Dedupe by the rendering component\r\n\r\n* Don't warn outside of render"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.13.0",
      "body": "### React \r\n\r\n* Warn when a string ref is used in a manner that's not amenable to a future codemod ([@lunaruan](https://github.com/lunaruan) in [#17864](https://github.com/facebook/react/pull/17864))\r\n* Deprecate `React.createFactory()` ([@trueadm](https://github.com/trueadm) in [#17878](https://github.com/facebook/react/pull/17878))\r\n\r\n### React DOM\r\n\r\n* Warn when changes in `style` may cause an unexpected collision ([@sophiebits](https://github.com/sophiebits) in [#14181](https://github.com/facebook/react/pull/14181), [#18002](https://github.com/facebook/react/pull/18002))\r\n* Warn when a function component is updated during another component's render phase ([@acdlite]((https://github.com/acdlite)) in [#17099](https://github.com/facebook/react/pull/17099))\r\n* Deprecate `unstable_createPortal` ([@trueadm](https://github.com/trueadm) in [#17880](https://github.com/facebook/react/pull/17880))\r\n* Fix `onMouseEnter` being fired on disabled buttons ([@AlfredoGJ](https://github.com/AlfredoGJ) in [#17675](https://github.com/facebook/react/pull/17675))\r\n* Call `shouldComponentUpdate` twice when developing in `StrictMode` ([@bvaughn](https://github.com/bvaughn) in [#17942](https://github.com/facebook/react/pull/17942))\r\n* Add `version` property to ReactDOM ([@ealush](https://github.com/ealush) in [#15780](https://github.com/facebook/react/pull/15780))\r\n* Don't call `toString()` of `dangerouslySetInnerHTML` ([@sebmarkbage](https://github.com/sebmarkbage) in [#17773](https://github.com/facebook/react/pull/17773))\r\n* Show component stacks in more warnings ([@gaearon](https://github.com/gaearon) in [#17922](https://github.com/facebook/react/pull/17922), [#17586](https://github.com/facebook/react/pull/17586))\r\n\r\n### Concurrent Mode (Experimental)\r\n\r\n* Warn for problematic usages of `ReactDOM.createRoot()` ([@trueadm](https://github.com/trueadm) in [#17937](https://github.com/facebook/react/pull/17937))\r\n* Remove `ReactDOM.createRoot()` callback params and added warnings on usage ([@bvaughn](https://github.com/bvaughn) in [#17916](https://github.com/facebook/react/pull/17916))\r\n* Don't group Idle/Offscreen work with other work ([@sebmarkbage](https://github.com/sebmarkbage) in [#17456](https://github.com/facebook/react/pull/17456))\r\n* Adjust `SuspenseList` CPU bound heuristic ([@sebmarkbage](https://github.com/sebmarkbage) in [#17455](https://github.com/facebook/react/pull/17455))\r\n* Add missing event plugin priorities ([@trueadm](https://github.com/trueadm) in [#17914](https://github.com/facebook/react/pull/17914))\r\n* Fix `isPending` only being true when transitioning from inside an input event ([@acdlite](https://github.com/acdlite) in [#17382](https://github.com/facebook/react/pull/17382))\r\n* Fix `React.memo` components dropping updates when interrupted by a higher priority update ([@acdlite]((https://github.com/acdlite)) in [#18091](https://github.com/facebook/react/pull/18091)) \r\n* Don't warn when suspending at the wrong priority ([@gaearon](https://github.com/gaearon) in [#17971](https://github.com/facebook/react/pull/17971))\r\n* Fix a bug with rebasing updates ([@acdlite](https://github.com/acdlite) and [@sebmarkbage](https://github.com/sebmarkbage) in [#17560](https://github.com/facebook/react/pull/17560), [#17510](https://github.com/facebook/react/pull/17510), [#17483](https://github.com/facebook/react/pull/17483), [#17480](https://github.com/facebook/react/pull/17480))\r\n\r\n## Artifacts\r\n\r\n- react: https://unpkg.com/react@16.13.0/umd/\r\n- react-art: https://unpkg.com/react-art@16.13.0/umd/\r\n- react-dom: https://unpkg.com/react-dom@16.13.0/umd/\r\n- react-is: https://unpkg.com/react-is@16.13.0/umd/\r\n- react-test-renderer: https://unpkg.com/react-test-renderer@16.13.0/umd/\r\n- scheduler: https://unpkg.com/scheduler@0.19.0/umd/"
    },
    "commits": [
      {
        "sha": "8e74a31b2d0017061e265ae1a3fbfbacb7af5614",
        "commit": {
          "message": "Add Webpack as devDependency (#17379)\n\nThis is now used by the Flight package so it needs to be installed as a\r\npeer."
        }
      },
      {
        "sha": "2586303662736d72e79046b51c8df993b21e6093",
        "commit": {
          "message": "[Bugfix] Pending state is always user-blocking (#17382)\n\nFixes a bug where `isPending` is only set to `true` if `startTransition`\r\nis called from inside an input event. That's usually the case, but\r\nnot always.\r\n\r\nNow it works regardless of where you call it."
        }
      },
      {
        "sha": "a807c307c496d96e8ff79f53cf2d6203c45cf0c6",
        "commit": {
          "message": "[eslint] Check forwardRef callbacks (#17255)\n\n* [eslint] Check forwardRef callbacks (#17220)\r\n\r\n* [eslint] Make tests more realistic (#17220)\r\n\r\n* [eslint] Check anonymous callback of React.memo for rules-of-hooks (#17220)\r\n\r\n* [eslint] Add tests for callbacks not known to be components (#17220)\r\n\r\n* [eslint] Correct comments and add another test (#17220)"
        }
      },
      {
        "sha": "1f2da0babd723f1b479f84cef5a0ea4fedac3959",
        "commit": {
          "message": "Forgot to mark test as experimental (#17391)"
        }
      },
      {
        "sha": "3ad076472ce9108b9b8a6a6fe039244b74a34392",
        "commit": {
          "message": "Update Fixtures to use new APIs (#17380)\n\nAlso renamed unstable-async to concurrent"
        }
      },
      {
        "sha": "a7d07ff24d8d3d925ab45f5eb9be42a62a345dad",
        "commit": {
          "message": "[react-interactions] Rename Flare listeners prop to DEPRECATED_flareListeners (#17394)"
        }
      },
      {
        "sha": "3fdfa231ad4bbe81516866dc9cd7ed5d18acf223",
        "commit": {
          "message": "[react-interactions] Refine virtual click detection for FF+JAWS/NVDA (#17422)"
        }
      },
      {
        "sha": "007a276b6541f98318adf5d37668fceb5ef37223",
        "commit": {
          "message": "[react-interactions] Fix memory leak in event responder system (#17421)"
        }
      },
      {
        "sha": "237a966da058fa063abd2e1365e90f2a26aa4e51",
        "commit": {
          "message": "[Fresh] Fix an infinite loop in an edge case (#17414)\n\n* [Fresh] Fix an infinite loop in an edge case\r\n\r\n* Make it work in IE11"
        }
      },
      {
        "sha": "54f66731c84e3f141a1c0bc5d32be7cc5d4b9bbf",
        "commit": {
          "message": "Update release script URL (#17428)\n\nCircleCI API endpoint changed"
        }
      },
      {
        "sha": "6470e0f169b4cf0416132aa66221bf20e264c618",
        "commit": {
          "message": "[Fresh] Make all errors recoverable (#17438)\n\n* [Fresh] Detect root updates more reliably\r\n\r\n* [Fresh] Use WeakMap for root elements\r\n\r\n* [Fresh] Make initial failures recoverable too\r\n\r\n* Fix DevTools check\r\n\r\n* Fix wrong flow type"
        }
      },
      {
        "sha": "5fc97420b95d36e50a064ec351d2fedca22e9464",
        "commit": {
          "message": "Remove dependency on local git checkout from build process (#17475)\n\n* Remove dependency on local git checkout from build process\r\n\r\n* Updated Webpack dependencies to account for recent changes to deps for Flight"
        }
      },
      {
        "sha": "3816ae7c3860f3efd013d95259b5a93ae27f8f39",
        "commit": {
          "message": "DevTools version bump 4.2.0 -> 4.2.1"
        }
      },
      {
        "sha": "969f4b5bb8302afb3eb1656784130651047c3718",
        "commit": {
          "message": "Change DevTools hook warning message (#17478)"
        }
      },
      {
        "sha": "b64938e1234b77c50d9b2680dd836cd27ce5ad91",
        "commit": {
          "message": "Fixed changelog formatting #17481 (#17487)"
        }
      },
      {
        "sha": "79572e34d18c67768c93b1a4d60703a5929363a3",
        "commit": {
          "message": "Adjust SuspenseList CPU bound heuristic (#17455)\n\n* Adjust SuspenseList CPU bound heuristic\r\n\r\nIn SuspenseList we switch to rendering fallbacks (or stop rendering further\r\nrows in the case of tail=\"collapsed/hidden\") if it takes more than 500ms\r\nto render the list. The limit of 500ms is similar to the train model and\r\ndesigned to be short enough to be in the not noticeable range.\r\n\r\nThis works well if each row is small because we time the 500ms range well.\r\nHowever, if we have a few large rows then we're likely to exceed the limit\r\nby a lot. E.g. two 480ms rows hits almost a second instead of 500ms.\r\n\r\nThis PR adjusts the heuristic to instead compute whether something has\r\nexpired based on the render time of the last row. I.e. if we think rendering\r\none more row would exceed the timeout, then we don't attempt.\r\n\r\nThis still works well for small rows and bails earlier for large rows.\r\n\r\nThe expiration is still based on the start of the list rather than the\r\nstart of the render. It should probably be based on the start of the render\r\nbut that's a bigger change and needs some thought.\r\n\r\n* Comment"
        }
      },
      {
        "sha": "d75323f65d0f263dd4b0c15cebe987cccf822783",
        "commit": {
          "message": "Remove case that only exists for createBatch (#17506)\n\nThe comment says this is only needed for createBatch().commit() which\r\ndoesn't exist anymore."
        }
      },
      {
        "sha": "f523b2e0d369e3f42938b56784f9ce1990838753",
        "commit": {
          "message": "Use fewer global variables in Hooks (#17480)\n\n* We don't need the global state for this\r\n\r\n* Move componentUpdateQueue and sideEffectTag out of global state\r\n\r\n* Move firstWorkInProgressHook off global state\r\n\r\n* Move remainingExpirationTime off global state\r\n\r\n* Reset fiber to its current state if it throws\r\n\r\n* Move rerender error check to avoid global state\r\n\r\nThis means that it's harder to find it since it's not in the dispatch\r\nfunction's stack but we can add a DEV only one for that if we really\r\nneed it. Alternatively, we can check it in against the renderUpdates queue.\r\n\r\n* Move next___Hook out of global state\r\n\r\n* Assert that currentlyRenderingFiber is always set\r\n\r\nWhen accessed, this should always be set. This could enforced by storing\r\nthis on the dispatcher for example.\r\n\r\n* Add another test just to be safe"
        }
      },
      {
        "sha": "dc18b8b8d24d188517caeff624e999f197f3b9b6",
        "commit": {
          "message": "Don't group Idle/Offscreen work with other work (#17456)\n\nWhen we suspend we always try a lower level but we shouldn't try offscreen."
        }
      },
      {
        "sha": "6d105ad3f6814e6d44e8141d9524097f166b5ae9",
        "commit": {
          "message": "[react-interactions] Move Flare event registration to commit phase (#17518)"
        }
      },
      {
        "sha": "5064c7f6aa2b46469ac601cc851640e91ec340a9",
        "commit": {
          "message": "Revert Rerender Error Check (#17519)\n\n* Add failing test\r\n\r\n* Revert \"Move rerender error check to avoid global state\"\r\n\r\nThis reverts commit 3e77742d8c4e64b89f816c0b1ce0bc156f8c5f61."
        }
      },
      {
        "sha": "5235d193d70d2623c98788ccb8dffc1d5abd688d",
        "commit": {
          "message": "fix: make serializable data  in react-devtools (#17233)\n\n* fix: make serializable data for bridge in react-devtools\r\n\r\n* fix: add bigint data type in hydration\r\n\r\n* refactor: remove console.log\r\n\r\n* test: update unit tests for bigint in react-devtools"
        }
      },
      {
        "sha": "acfe4b21b2621da3618f9096c8be06b32d6247ec",
        "commit": {
          "message": "[react-interactions] Upgrade passive event listeners to active listeners (#17513)"
        }
      },
      {
        "sha": "b43eec7eaad14747d24ef24a06b27cb2a5653bbc",
        "commit": {
          "message": "Replace `wrap-warning-with-env-check` with an eslint plugin (#17540)\n\n* Replace Babel plugin with an ESLint plugin\r\n\r\n* Fix ESLint rule violations\r\n\r\n* Move shared conditions higher\r\n\r\n* Test formatting nits\r\n\r\n* Tweak ESLint rule\r\n\r\n* Bugfix: inside else branch, 'if' tests are not satisfactory\r\n\r\n* Use a stricter check for exactly if (__DEV__)\r\n\r\nThis makes it easier to see what's going on and matches dominant style in the codebase.\r\n\r\n* Fix remaining files after stricter check"
        }
      },
      {
        "sha": "9e937e7e86be4af829bd7be2045bf3601928c9b5",
        "commit": {
          "message": "[react-interactions] fix Press/Tap behavior for virtual middle clicks (#17554)\n\nTools like BetterTouchTool for macOS trigger middle-clicks with a 'buttons'\r\nvalue that doesn't correspond to the middle-mouse button. To account for this\r\nwe also inspect the value of 'button'.\r\n\r\nClose #17367"
        }
      },
      {
        "sha": "3c1efa0d771d3dfb2666b7f4a4392cc851146d44",
        "commit": {
          "message": "[react-interactions] Remove Focus/FocusWithin root event types (#17555)"
        }
      },
      {
        "sha": "b617db3d966f678eb0b4aac6d96f7967b37a9e91",
        "commit": {
          "message": "Refactor Update Queues to Fix Rebasing Bug\n\nFixes a bug related to rebasing updates. Once an update has committed,\nit should never un-commit, even if interrupted by a higher priority\nupdate. The fix includes a refactor of how update queues work.\n\nThis commit is a combination of two PRs:\n\n- #17483 by @sebmarkbage refactors the hook update queue\n- #17510 by @acdlite refactors the class and root update queue\n\nLanding one without the other would cause state updates to sometimes be\ninconsistent across components, so I've combined them into a single\ncommit in case they need to be reverted.\n\nCo-authored-by: Sebastian Markbåge <sema@fb.com>\nCo-authored-by: Andrew Clark <git@andrewclark.io>"
        }
      },
      {
        "sha": "e039e690b5c45c458dd4026f3db16bac18ed0e47",
        "commit": {
          "message": "Revert Update Queue Refactor\n\nReverts b617db3d966f678eb0b4aac6d96f7967b37a9e91.\n\nFound some bugs when attempting to land in www. Reverting to fix master.\nI'll land again *after* the change successfully land downstream."
        }
      },
      {
        "sha": "031a5aaffbc06f0ac115f1d814e43e4d63ae15d2",
        "commit": {
          "message": "Show component location for selected element in bottom/right of props panel (#17567)\n\n* Show component location info for selected element in bottom/right of props panel\r\n\r\n* Moved RegExp declaration into function basedon PR feedback"
        }
      },
      {
        "sha": "7bf40e1cfdb780788700a41bf30163fdb8d105a3",
        "commit": {
          "message": "Initialize update queue object on mount (#17560)\n\n* Refactor Update Queues to Fix Rebasing Bug\r\n\r\nFixes a bug related to rebasing updates. Once an update has committed,\r\nit should never un-commit, even if interrupted by a higher priority\r\nupdate. The fix includes a refactor of how update queues work.\r\n\r\nThis commit is a combination of two PRs:\r\n\r\n- #17483 by @sebmarkbage refactors the hook update queue\r\n- #17510 by @acdlite refactors the class and root update queue\r\n\r\nLanding one without the other would cause state updates to sometimes be\r\ninconsistent across components, so I've combined them into a single\r\ncommit in case they need to be reverted.\r\n\r\nCo-authored-by: Sebastian Markbåge <sema@fb.com>\r\nCo-authored-by: Andrew Clark <git@andrewclark.io>\r\n\r\n* Initialize update queue object on mount\r\n\r\nInstead of lazily initializing update queue objects on the first update,\r\nclass and host root queues are created on mount. This simplifies the\r\nlogic for appending new updates and matches what we do for hooks."
        }
      },
      {
        "sha": "9ac42dd074c42b66ecc0334b75200b1d2989f892",
        "commit": {
          "message": "Remove the condition argument from warning() (#17568)\n\n* prep for codemod\r\n\r\n* prep warnings\r\n\r\n* rename lint rules\r\n\r\n* codemod for ifs\r\n\r\n* shim www functions\r\n\r\n* Handle more cases in the transform\r\n\r\n* Thanks De Morgan\r\n\r\n* Run the codemod\r\n\r\n* Delete the transform\r\n\r\n* Fix up confusing conditions manually\r\n\r\n* Fix up www shims to match expected API\r\n\r\n* Also check for low-pri warning in the lint rule"
        }
      },
      {
        "sha": "2afeebdcc4ed8a78ab5b36792f768078d70e1ffd",
        "commit": {
          "message": "[react-interactions] Remove responder root event types + revert commit phase change (#17577)"
        }
      },
      {
        "sha": "12c000412d05c4a6079b4f57f721a40b8cea374d",
        "commit": {
          "message": "Improved inspected element props with inline previews (#17579)\n\n* Improved inspected element props with inline previews\r\n\r\nThis mimics the inline preview shown by the brower console and dramatically improves the UX when inspecting deep values. I also updated tests to add more coverage for this new functionality.\r\n\r\n* Cleaned up the DataView vs typed array check\r\n\r\n* Added early bailouts to DevTools when generating preview strings for iterables/objects/arrays, to avoid doing unnecessary work"
        }
      },
      {
        "sha": "612a76812fce2354aa37e8cbcc1b39bba3e9a97b",
        "commit": {
          "message": "[react-interactions] Mock touchend events should use empty array for 'touches' (#17589)\n\nThe 'touches' value should be an empty array rather than 'null'"
        }
      },
      {
        "sha": "b15bf36750ca4c4a5a09f2de76c5315ded1258d0",
        "commit": {
          "message": "Add component stacks to (almost) all warnings (#17586)"
        }
      },
      {
        "sha": "be603f5a51be33027193d9e5ae35a0e572d8ad5d",
        "commit": {
          "message": "[react-events] Remove lastNativeEvent in favor of SystemFlags (#17585)"
        }
      },
      {
        "sha": "8a347ed024159a5307172ea633a4561160f4a6b9",
        "commit": {
          "message": "Remove renderPhaseUpdates Map (#17484)\n\n* Render phase updates can now be extracted from the pending queue\r\n\r\n* Use a custom dispatcher for the second render pass\r\n\r\n* Discard render phase updates if component throws\r\n\r\nWhen aborting a render, we also need to throw out render phase updates.\r\nRemove the updates from the queues so they do not persist to the next\r\nrender. We already did a single pass through the whole list of hooks, so\r\nwe know that any pending updates must have been dispatched during the\r\nrender phase. The ones that were dispatched before we started rendering\r\nwere already transferred to the current hook's queue."
        }
      },
      {
        "sha": "b6c423daadaa35da3f34048628df9635505eecb1",
        "commit": {
          "message": "Use matching test command for equivalence tests (#17604)"
        }
      },
      {
        "sha": "0cf22a56a18790ef34c71bef14f64695c0498619",
        "commit": {
          "message": "Use console directly instead of warning() modules (#17599)\n\n* Replace all warning/lowPriWarning with console calls\r\n\r\n* Replace console.warn/error with a custom wrapper at build time\r\n\r\n* Fail the build for console.error/warn() where we can't read the stack"
        }
      },
      {
        "sha": "0b5a26a4895261894f04e50d5a700e83b9c0dcf6",
        "commit": {
          "message": "Rename toWarnDev -> toErrorDev, toLowPriorityWarnDev -> toWarnDev (#17605)\n\n* Rename toWarnDev -> toErrorDev in tests\r\n\r\n* Rename toWarnDev matcher implementation to toErrorDev\r\n\r\n* Rename toLowPriorityWarnDev -> toWarnDev in tests and implementation"
        }
      },
      {
        "sha": "f42431abe1a31a3798989a6477422c492cf8dac1",
        "commit": {
          "message": "Revert \"Remove renderPhaseUpdates Map (#17484)\" (#17623)\n\nThis reverts commit 8a347ed024159a5307172ea633a4561160f4a6b9."
        }
      },
      {
        "sha": "7c21bf72ace77094fd1910cc350a548287ef8350",
        "commit": {
          "message": "Fix release script to ignore empty package folders"
        }
      },
      {
        "sha": "36a6e29bb3eead85e3500ba7269cbcd55516a8fb",
        "commit": {
          "message": "Fix test_build_devtools CI job to run test-build-devtools (#17631)\n\n* Skip abandoned project folders in Jest config\r\n\r\nThis fixes a problem that occurs after renaming a package.\r\n\r\n* Fix test_build_devtools to run test-build-devtools\r\n\r\n* Exclude console.error plugin for DevTools packages\r\n\r\n* Use correct release channel for DevTools tests\r\n\r\nThis should fix the createRoot error.\r\n\r\n* Fix TZ dependent test\r\n\r\n* Change DT job dependencies"
        }
      },
      {
        "sha": "0253ee9a2e94d43e220a997eeedfcc6847c4542b",
        "commit": {
          "message": "Additional test infra changes for toErrorDev rename (#17632)"
        }
      },
      {
        "sha": "c2d1561c60507189b43ae96c6b89580874367e36",
        "commit": {
          "message": "[Fast Refresh] Support injecting runtime after renderer executes (#17633)"
        }
      },
      {
        "sha": "b66e86d9578b031a23385dfc21b0eca4e0cf4456",
        "commit": {
          "message": "react-refresh@0.7.1"
        }
      },
      {
        "sha": "3c54df0914f02fed146faa519a5a899d0e3af32e",
        "commit": {
          "message": "Fix missing stacks in WWW warnings (#17638)"
        }
      },
      {
        "sha": "9bb3fbe893619a26f48e8a08fcc04763ef1d4b12",
        "commit": {
          "message": "Move DevTools CI job to experimental workflow (#17640)"
        }
      },
      {
        "sha": "7309c5f93469266729578f1d0e0d273604b45da4",
        "commit": {
          "message": "Use zero-fill right shift instead of Math.floor (#17616)\n\nFor positive numbers, binary displacement is better."
        }
      },
      {
        "sha": "bb75a4fa897576a9d386e30efb451bfbc98619a8",
        "commit": {
          "message": "Improved selection and toggling for props/hooks/state (#17588)\n\n1. Enable nested values to be expanded/collapsed by clicking on values as well as keys.\r\n2. Enable keys and values to be selectable (for copy-pasting purposes)"
        }
      },
      {
        "sha": "24dbe851e8a3a3a5233654183fd80b0d64b99295",
        "commit": {
          "message": "fix(dev-tools): fix show correct displayName with forwardRef in Dev Tools (#17613)\n\n* fix(dev-tools): fix show correct displayName with forwardRef in Dev Tools\r\n\r\nallow set `displayName` after `React.forwardRef()`,\r\nmakesure Dev Tools show displayName as same as `getWrappedName` in `shared/getComponentName.js`\r\n\r\n* Removed a little unnecessary/redundant code.\r\n\r\n* Fixed lint error (removed unused var)"
        }
      },
      {
        "sha": "4b0cdf29a89d5199690a6aa64b362670d9bf9669",
        "commit": {
          "message": "Build FB RN targets only in experimental mode (#17641)"
        }
      },
      {
        "sha": "e84327ba0c547431e3c67b30c5fb5453fcb11573",
        "commit": {
          "message": "Added more forwardRef test cases for DevTools (#17642)"
        }
      },
      {
        "sha": "9fe1031244903e442de179821f1d383a9f2a59f2",
        "commit": {
          "message": "[react-interactions] Rename Flare APIs to deprecated and remove from RN (#17644)"
        }
      },
      {
        "sha": "6fef7c47a984cf0d07776c017e58b45f5af8276e",
        "commit": {
          "message": "Add a regression test for switching from Fragment to a component (#17647)\n\n* Add a regression test for switching from Fragment to a component\r\n\r\n* Add a few more tests"
        }
      },
      {
        "sha": "4c270375e931b133261495e3aa3f34407c5f79d8",
        "commit": {
          "message": "Favor fallthrough switch instead of case statements for work tags (#17648)\n\n* Favor fallthrough switch instead of case statements for work tags\r\n\r\nCurrently we're inconsistently handling tags that are only relevant\r\nfor certain flags. We should throw if the tag is not part of the built\r\nfeature flags. This should also mean that the case statements can be\r\neliminated.\r\n\r\nWe can achieve this effect by putting the invariant outside of the switch\r\nand always early return in the switch. We already do this in beginWork.\r\nThis PR makes this consistent in other places.\r\n\r\n* Fail if fundamental/scope tags are discovered without the flag on"
        }
      },
      {
        "sha": "9354dd2752239b72b3c183c75256a7830d2938c0",
        "commit": {
          "message": "Make HostComponent inexact (#17412)"
        }
      },
      {
        "sha": "7dc9745427046d462506e9788878ba389e176b8a",
        "commit": {
          "message": "[Flight] Chunks API (#17398)\n\n* Add feature flags\r\n\r\n* Add Chunk type and constructor\r\n\r\n* Wire up Chunk support in the reconciler\r\n\r\n* Update reconciler to reconcile Chunks against the render method\r\n\r\nThis allows the query and args to be updated.\r\n\r\n* Drop the ref. Chunks cannot have refs anyway.\r\n\r\n* Add Chunk checks in more missing cases\r\n\r\n* Rename secondArg\r\n\r\n* Add test and fix lazy chunks\r\n\r\nNot really a supported use case but for consistency I guess.\r\n\r\n* Fix fragment test"
        }
      },
      {
        "sha": "933f6a07cac6beb5a5540b1942e84064f1c8dd36",
        "commit": {
          "message": "DevTools context menu (#17608)\n\n* Added rudimentary context menu hook and menu UI\r\n\r\n* Added backend support for copying a value at a specific path for the inspected element\r\n\r\n* Added backend support for storing a value (at a specified path) as a global variable\r\n\r\n* Added special casing to enable copying undefined/unserializable values to the clipboard\r\n\r\n* Added copy and store-as-global context menu options to selected element props panel\r\n\r\n* Store global variables separately, with auto-incremented name (like browsers do)\r\n\r\n* Added tests for new copy and store-as-global backend functions\r\n\r\n* Fixed some ownerDocument/contentWindow edge cases\r\n\r\n* Refactored context menu to support dynamic options\r\n\r\nUsed this mechanism to add a conditional menu option for inspecting the current value (if it's a function)\r\n\r\n* Renamed \"safeSerialize\" to \"serializeToString\" and added inline comment"
        }
      },
      {
        "sha": "fd2a3ae57fa15487619385de5d27afde6f78509b",
        "commit": {
          "message": "Updated DevTools changelog"
        }
      },
      {
        "sha": "95056b68365f1f3a646d1d6c65c9e3d2a50122ca",
        "commit": {
          "message": "DevTools build script enhancements (#17653)\n\n* Updated DevTools local development instructions to mention experimental build step\r\n\r\n* Added a command to download latest experimental release (for DevTools)\r\n\r\n* Updated build instructions for clarity\r\n\r\n* Added build-for-devtools package alias"
        }
      },
      {
        "sha": "a5e951d4cc75583084c91d7eb0332831e15bfbc0",
        "commit": {
          "message": "[react-interactions] Event testing library improvements (#17614)\n\nIntroduces a state machine around pointer events to produce more accurate mock\r\ntouch events. This allows multi-touch unit tests to be written entirely in\r\nterms of mock pointer interactions, while producing the expected\r\n'changedTouches', 'targetTouches', and 'touches' fields for mock touch events."
        }
      },
      {
        "sha": "e7494c86c501f53a1068953aa0f4efe4bb0c8655",
        "commit": {
          "message": "[react-interactions] Remove batchedUpdates from responder lifecycles (#17659)"
        }
      },
      {
        "sha": "72592310a84ac2cfb132569de52b4c598494b203",
        "commit": {
          "message": "Create packages/dom-event-testing-library (#17660)\n\nMoves the unit testing library for events into the `packages` directory so it can more easily be used in tests for other react packages, and mirrored internally to help with testing of event hooks we prototype in www."
        }
      },
      {
        "sha": "897976600c2277e70601d771992f26ba5c1a14f0",
        "commit": {
          "message": "[ESLint] Allow partial matches for custom Effect Hooks (#17663)"
        }
      },
      {
        "sha": "1b9328cd9b516fb3d1bd125a6cbd1e9e8333ac5c",
        "commit": {
          "message": "Null stateNode after unmount (#17666)"
        }
      },
      {
        "sha": "dbc46ac63e4d88af8b70a75838f63a8a11a5d171",
        "commit": {
          "message": "[react-interactions] Rename test + fix master (#17679)"
        }
      },
      {
        "sha": "79734771cd78f0b0ee02abbbe386f4a40ccca1ab",
        "commit": {
          "message": "Disable \"copy to clipboard\" and \"go to definition\" context menu options for Firefox addon (#17668)"
        }
      },
      {
        "sha": "31350237fab02cad8c2610ff72196e807d12618f",
        "commit": {
          "message": "Add unit tests to dom-event-testing-library (#17680)\n\nUnit tests for the simple event mocks"
        }
      },
      {
        "sha": "3e09677836df6272472e3049b04a94b55fb6577b",
        "commit": {
          "message": "DevTools v4.2.1 -> 4.3.0"
        }
      },
      {
        "sha": "85d9655d6f72fc34b71b6b25b1f76a307db81c96",
        "commit": {
          "message": "[react-dom] Refactor event priority handling to its own module (#17678)"
        }
      },
      {
        "sha": "6215e1c2db7e55a364a1156be38b4e3d7490d551",
        "commit": {
          "message": "Add Shift+Enter to go to previous search result (#17005)"
        }
      },
      {
        "sha": "ccc6100d7f587551e46c91cce4a0db2c1b72604d",
        "commit": {
          "message": "Fix comments typos (#17550)\n\n* Fix comments typos\r\n\r\n* Fix comments typos\r\n\r\n* Fix more typos\r\n\r\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>"
        }
      },
      {
        "sha": "1959671d45bc3b5214b3e124549f4e068455d0e5",
        "commit": {
          "message": "Add tooltip to interaction name in DevTools Profiler sidebar (#17689)"
        }
      },
      {
        "sha": "f887d1aa27336baa0bc292158793a5a244c712b6",
        "commit": {
          "message": "[DevTools] Display RegExp values in props/state (#17690)\n\nPreviously, when props/state contained a regexp, it was shown as an\r\nempty object. This commit adds regexps as values in need of special\r\nrehydration (like Symbols or TypedArrays), and display them as a user\r\nmight expect.\r\n\r\nCo-authored-by: Zirak <zirakertan@gmail.com>"
        }
      },
      {
        "sha": "0eac01abcd44579db03821347f103c816cd55372",
        "commit": {
          "message": "Added missing Flow type coverage to DevTools context menu (#17733)\n\nThe  param should probably be a generic type, but I'm not sure how to satisfy Flow with the current top-level  Map. At least this adds basic coverage (which was missing before, oops)."
        }
      },
      {
        "sha": "2b903da355fa53b3ac5a7f340134575119de2f40",
        "commit": {
          "message": "Make DevTools check document.contentType before injecting (#17739)\n\nIt should only inject the global hook into HTML documents. This will avoid breaking syntax highlighting for e.g. XML documents."
        }
      },
      {
        "sha": "22ef96ae63f40b1b9367bc2d8bdb3db33e6943b0",
        "commit": {
          "message": "Devtools renable copy attr context menu for firefox (#17740)\n\n* Use exportFunction() to share clipboard copy with JS running in document/page context.\r\n\r\n* Remove no-longer-used option to disable copy operation."
        }
      },
      {
        "sha": "9357a483e9d9581bf65e7e82541cfb6bde84fdb0",
        "commit": {
          "message": "Fix for the standalone devtools not responding to clicks. (#17584)"
        }
      },
      {
        "sha": "d259f458133865757c0d18895d537f14908f0a5b",
        "commit": {
          "message": "Fix various typos (#17724)"
        }
      },
      {
        "sha": "4d463fce4e50b8c8d097d0c961afa60231e4631b",
        "commit": {
          "message": "Bump handlebars from 4.1.2 to 4.5.3 (#17732)\n\nBumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.\r\n- [Release notes](https://github.com/wycats/handlebars.js/releases)\r\n- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)\r\n- [Commits](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      {
        "sha": "ee38c00bd5be550b0eb27b22689220f87c3b369f",
        "commit": {
          "message": "Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/fiber-debugger (#17727)\n\nBumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.6 to 4.5.3.\r\n- [Release notes](https://github.com/wycats/handlebars.js/releases)\r\n- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)\r\n- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.6...v4.5.3)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      {
        "sha": "3bec713b850abf49e4d6a917fc05be0e5698d45b",
        "commit": {
          "message": "Bump handlebars from 4.0.10 to 4.5.3 in /fixtures/attribute-behavior (#17728)\n\nBumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.10 to 4.5.3.\r\n- [Release notes](https://github.com/wycats/handlebars.js/releases)\r\n- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)\r\n- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.10...v4.5.3)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      {
        "sha": "e6226e6493a7edec779841e8b85111bc8be88ca7",
        "commit": {
          "message": "Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/dom (#17730)\n\nBumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.6 to 4.5.3.\r\n- [Release notes](https://github.com/wycats/handlebars.js/releases)\r\n- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)\r\n- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.6...v4.5.3)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      {
        "sha": "b4e2fac09dbfc616860f8aefeacf25076809ed92",
        "commit": {
          "message": "Bump handlebars from 4.0.11 to 4.5.3 in /fixtures/expiration (#17729)\n\nBumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.11 to 4.5.3.\r\n- [Release notes](https://github.com/wycats/handlebars.js/releases)\r\n- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)\r\n- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.11...v4.5.3)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>"
        }
      },
      {
        "sha": "86883d7aace02b4a3d7c3b86d52cbc4e2003a0f7",
        "commit": {
          "message": "Updated DevTools pending CHANGELOG"
        }
      },
      {
        "sha": "2c1e5d2b223a267179954cfe54592a7ba102de10",
        "commit": {
          "message": "Build and store DevTools artifacts in Circle CI (#17746)"
        }
      },
      {
        "sha": "195b3db61885552b84eacb2ab51502b342d0fa8a",
        "commit": {
          "message": "Added missing guard to DevTools for Objects with null proto (#17757)\n\nThis prevents a runtime error from occurring when these objects are inspected."
        }
      },
      {
        "sha": "b05cd611ba2e47dbc991abf9128d1fab6c237fd5",
        "commit": {
          "message": "Fixed CircleCI DevTools build artifact tar internal structure (#17758)"
        }
      },
      {
        "sha": "cca994c6a1f13dd0b64ad0a909b5209b10cc8609",
        "commit": {
          "message": "DevTools Profiler commit selector wraps around (#17760)\n\nI used to disable the <- and -> buttons when you reached the beginning or end of the profiler data. This can be kind of annoying though when you just want to get to the last commit, and I don't think there's a good reason to enforce it anyway, so I backed that change out. The buttons now wrap around at the beginning or end of the list."
        }
      },
      {
        "sha": "5d3d71b1ddbbf5743108c998904f7bb575f4330e",
        "commit": {
          "message": "Partial fix DevTools Profiler ''Could not find node…'' error (#17759)\n\nThe Profiler stores:\r\n\r\n1. A snapshot of the React tree when profiling started\r\n2. The operations array for each commit\r\n3. Profiling metadata (e.g. durations, what changed, etc) for each commit\r\n\r\nIt uses this information (snapshot + operations diff) to reconstruct the state of the application for a given commit as it's viewed in the Profiler UI. Because of this, it's very important that the operations and metadata arrays align. If they don't align, the profiler will be unable to correctly reconstruct the tree, and it will likely throw errors (like 'Could not find node…')\r\n\r\n#16446 tracks a long-standing bug where these two arrays get misaligned. I am still not entirely sure what causes this bug, but with PR #17253, I exacerbated things by introducing another potential way for it to happen. This PR addresses the regression at least (and adds test coverage for it).\r\n\r\nI will follow up this afternoon on the original #16446 issue. I think I may have a lead on what's happening at least, if not exactly an idea of how to reproduce it."
        }
      },
      {
        "sha": "7e2ab87a613b11250fe9678cc111fc8485c8a683",
        "commit": {
          "message": "DevTools: Replaced unsafe hasOwnProperty() calls (#17768)\n\nDevTools previously called  in several places with user-defined values. This could lead to runtime errors if those values had an overriden  attribute. This commit replaces those callse with  instead.\r\n\r\nNew test cases have been added."
        }
      },
      {
        "sha": "59f21f1b2444aabe9133c358eaa0ed2c7b953ea7",
        "commit": {
          "message": "HostText needs to copy over from current if it is unchanged in persistent  mode (#17538)\n\nstateNode is not one of the fields that gets copied over by createWorkInProgress.\r\n\r\nThis is bad for persistent mode since it's not the same instance.\r\n\r\nIn HostComponent we happened to always end up transferring the current stateNode when we bail.\r\nHowever, we didn't do this for HostText."
        }
      },
      {
        "sha": "f749045a5b4f6b9599cf54ea654b60b3a6155f0d",
        "commit": {
          "message": "DevTools 4.3.0 -> 4.4.0"
        }
      },
      {
        "sha": "9cc094a19a9e43d33ba5ac713935e657ea4e3cdd",
        "commit": {
          "message": "Scope dev tools wildcard styles within DevTools CSS class"
        }
      },
      {
        "sha": "edeea0720791f998b505f2ecdcf866c7e539e7a2",
        "commit": {
          "message": "Remove toString of dangerouslySetInnerHTML (#17773)\n\nAs far as I can tell, the toString call was added here:\r\n\r\nhttps://github.com/facebook/react/commit/caae627cd557812d28d11237b34bff6c661ea8bc#diff-5574f655d491348f422bca600ff6711dR887\r\n\r\nIt was never really needed. Subsequently when we added Trusted Types,\r\nthis needed to be changed to a special call but we really should just\r\nalways let it pass through."
        }
      },
      {
        "sha": "24f824250fde6418569222f6e33b35ba9c1f1f46",
        "commit": {
          "message": "DevTools Profiler: Improve how empty commits are filtered (#17771)\n\nPreviously, DevTools filtered empty commits on the backend, while profiling, through the use of a bailout heuristic that React currently happens to use. This approach was brittle and may have exacerbated the long-standing Profiler bug #16446.\r\n\r\nThis PR removes that heuristic and adds as a post-processing filtering pass instead. This removes the coupling between DevTools and a React internal implementation detail that may change.\r\n\r\nI believe DevTools has two choices of criteria for this filtering:\r\n* Filter commits that have no actual duration metadata.\r\n* Filter commits that have no recorded operations (no mutations to the tree, no changed tree base durations).\r\n\r\nI chose the first option, filtering by commits that have no reported metadata. It will miss an edge case, e.g. , but we would have nothing meaningful to show in the Profiler for those cases anyway. (This particular edge case is why one of the snapshots changed with this commit.)\r\n\r\nThe second option, filtering by recorded operations, could potentially miss a more important edge case: where a component *did* render, but its  didn't change. (In that event, there would be no operations to send.)"
        }
      },
      {
        "sha": "2bb227ef801c3a876d8064bc75903c29c94bc71d",
        "commit": {
          "message": "DevTools: Improve function props display for inspected elements (#17789)"
        }
      },
      {
        "sha": "1c63b2e416b5ab4efe91fd73b055092001583b73",
        "commit": {
          "message": "Renamed \"backend.js\" to \"react_devtools_backend.js\" (#17790)"
        }
      },
      {
        "sha": "fc921a1693aaeb9eb7fc2745a3ff5a9d33aefeee",
        "commit": {
          "message": "Updated DevTools CHANGELOG to add pending release details"
        }
      },
      {
        "sha": "c1b573bf2fcd7a550d4d8c052b155562290e8fc5",
        "commit": {
          "message": "Merge branch 'scope-devtools-styles' of https://github.com/GasimGasimzada/react into GasimGasimzada-scope-devtools-styles"
        }
      },
      {
        "sha": "80e32487b989bb948293876583b9ced90022d9b1",
        "commit": {
          "message": "Fixed box-sizing problem in test shell"
        }
      },
      {
        "sha": "7580d6717c11fb745b89e8e1aecded7c6d025192",
        "commit": {
          "message": "Fixed padding problem in standalone shell"
        }
      },
      {
        "sha": "5586b3022c667bec0d797a36691365b787437ce2",
        "commit": {
          "message": "Merge branch 'GasimGasimzada-scope-devtools-styles'"
        }
      },
      {
        "sha": "40568e9773276d94e6aa5b70fed4355a7291827f",
        "commit": {
          "message": "Updated DevTools CHANGELOG to add pending release details"
        }
      },
      {
        "sha": "5e21157d86a4f589891e90f4103b3a411af889a3",
        "commit": {
          "message": "[react-interactions] Fix Hover issues with portals (#17765)"
        }
      },
      {
        "sha": "6250462bed19c9f18a8cf3c2b5fcaf9aba1df72b",
        "commit": {
          "message": "Renamed \"ReactDOM-fb\" imports to \"ReactDOM\" in www shims (#17797)\n\n* Renamed \"ReactDOM-fb\" imports to \"ReactDOM\" in www shims\r\n\r\n* Removed ReactDOMComponentTree_DO_NOT_USE.js"
        }
      },
      {
        "sha": "19f6fe170ce920d7183a5620f4e218334c8bac62",
        "commit": {
          "message": "Revert \"Revert \"Dispatch commands to both UIManagers from both renderers (#17211)\" (#17232)\" (#17799)\n\n* Revert \"Revert \"Dispatch commands to both UIManagers from both renderers (#17211)\" (#17232)\"\r\n\r\nThis reverts commit d0fc0ba0a688950b8ab24a89f14888a19efa2444.\r\n\r\n* Clean up another __DEV__ warning check"
        }
      },
      {
        "sha": "18875b240131273c8e3dd213341edc159150d80e",
        "commit": {
          "message": "Remove special casing of toString values when enableTrustedTypesIntegration (#17774)\n\n* Remove toString of dangerouslySetInnerHTML\r\n\r\nAs far as I can tell, the toString call was added here:\r\n\r\nhttps://github.com/facebook/react/commit/caae627cd557812d28d11237b34bff6c661ea8bc#diff-5574f655d491348f422bca600ff6711dR887\r\n\r\nIt was never really needed. Subsequently when we added Trusted Types,\r\nthis needed to be changed to a special call but we really should just\r\nalways let it pass through.\r\n\r\n* Remove special casing of toString values when enableTrustedTypesIntegration\r\n\r\nAs far as I can tell, we only toString in user space because of IE8/9.\r\n\r\nWe don't really support IE8/9 anymore and by the time this flag is on,\r\nwe should be able to deprecate it.\r\n\r\nUnless this is also an issue in IE11. I haven't tested yet."
        }
      },
      {
        "sha": "b979db4e7215957f03c4221622f0b115a868439a",
        "commit": {
          "message": "Bump Prettier (#17811)\n\n* Bump Prettier\r\n\r\n* Reformat\r\n\r\n* Use non-deprecated option"
        }
      },
      {
        "sha": "e706721490e50d0bd6af2cd933dbf857fd8b61ed",
        "commit": {
          "message": "Update Flow to 0.84 (#17805)\n\n* Update Flow to 0.84\r\n\r\n* Fix violations\r\n\r\n* Use inexact object syntax in files from fbsource\r\n\r\n* Fix warning extraction to use a modern parser\r\n\r\n* Codemod inexact objects to new syntax\r\n\r\n* Tighten types that can be exact\r\n\r\n* Revert unintentional formatting changes from codemod"
        }
      },
      {
        "sha": "2e4948a34d4504eb852f7473d3c0315037f75d22",
        "commit": {
          "message": "Add configuration for the \"Stale\" GitHub App (#17806)\n\nConfiguration for the bot that marks and closes stale issues and pull requests.\r\nhttps://probot.github.io/apps/stale/"
        }
      },
      {
        "sha": "435259f189526fa32b8c9cdab7d7b2c1dc260bc8",
        "commit": {
          "message": "Add better test coverage for hooks in DevTools Profiler's change-detection (#17816)"
        }
      },
      {
        "sha": "3ac81a57fbb7bd272f62444820c0451e0b344408",
        "commit": {
          "message": "Update create-react-app note for eslint-plugin-react-hooks (#16982)\n\neslint-plugin-react-hooks was added in react-scripts 3.0.0"
        }
      },
      {
        "sha": "1b6e269751c28030429503a60590114e252fc86c",
        "commit": {
          "message": "Create SECURITY.md (#15784)\n\nAdds SECURITY.md as mentioned in #15722."
        }
      },
      {
        "sha": "ff900095b98621848caf6ed1483dce0e347d3aa4",
        "commit": {
          "message": "Fix message typo in printOperationsArray function (#17039)"
        }
      },
      {
        "sha": "5d6129b5d1eb53bdfec8c2b44ec3c9cc3a4a1770",
        "commit": {
          "message": "Update ReactSuspenseList-test.internal.js (#17034)\n\nTypo"
        }
      },
      {
        "sha": "05e487a12ffee59b75db82995f3f826254444741",
        "commit": {
          "message": "Add GitHub issue templates (#17815)"
        }
      },
      {
        "sha": "d8570ec6eaa4133037e1f350c8e8ed570c8b1b71",
        "commit": {
          "message": "Create ReactFabric.stopSurface and use that for bridgeless mode binding (#16164)"
        }
      },
      {
        "sha": "64aae7b06fa47e126b0ba9c0ba9896caa803528e",
        "commit": {
          "message": "Fix issue template for questions (#17817)"
        }
      },
      {
        "sha": "255d9ac5f58e85903e27128cf263dd6d2f9e7133",
        "commit": {
          "message": "[Fresh] Fix edge case with early function call (#17824)"
        }
      },
      {
        "sha": "f4ca909e0e001b2318cac4ed61773a24f4244b0c",
        "commit": {
          "message": "react-refresh@0.7.2"
        }
      },
      {
        "sha": "4f480d064531fa51d9a3bdd0b7a1b0367c2ee209",
        "commit": {
          "message": "Fix typo in TestCase description (#17077)"
        }
      },
      {
        "sha": "50eafef07e10874cc11dd2a79065ca28dabb0e46",
        "commit": {
          "message": "Update babel-eslint and eslint packages (#17829)"
        }
      },
      {
        "sha": "3bd6adceda6335adc5f5bbae148dd2ff290eeea6",
        "commit": {
          "message": "Update typescript package and jest preprocessor (#17839)"
        }
      },
      {
        "sha": "1e1a98942225771f86d8a81b5ac561a9fbff9263",
        "commit": {
          "message": "Re-enabled DevTools context menu option in Firefox to inspect function prop source (#17838)"
        }
      },
      {
        "sha": "643dcb5526f05957ffaf1c8ba991563f988d655b",
        "commit": {
          "message": "Add support for Node v13 for development (#17837)"
        }
      },
      {
        "sha": "8aefb1995cc6d46cc29778b0c54bd989478973c0",
        "commit": {
          "message": "Removed 'reactInternal' reference in DevTools overlay highlighter (#17841)"
        }
      },
      {
        "sha": "b6173e643a4311b9b1cf039824b2f3d7b974b8cf",
        "commit": {
          "message": "[react-interactions] Add DO_NOT_USE to Scope methods (#17835)"
        }
      },
      {
        "sha": "bc1f3e1a691be8926b48859fc96ef7ca76590d1e",
        "commit": {
          "message": "Fix DevTools Flow error for key-sort function (#17849)"
        }
      },
      {
        "sha": "9e075d16b250de8f65680c45c3686eb3faec8153",
        "commit": {
          "message": "[react-interactions] Remove deprecated Scope APIs + update Focus components/docs (#17859)"
        }
      },
      {
        "sha": "b43b36dd91dcd09282a334b61e79dd89e2a08dcf",
        "commit": {
          "message": "Remove ReactInstanceMap_DO_NOT_USE shim (#17861)"
        }
      },
      {
        "sha": "29b4d0721ce288ccbd3691e2dd768058255992b4",
        "commit": {
          "message": "Allow debug-test commands to run on Windows (#17122)\n\nFix #17121"
        }
      },
      {
        "sha": "95bd7aad7daa80c381faa3215c80b0906ab5ead5",
        "commit": {
          "message": "Remove renderPhaseUpdates Map (#17625)\n\n* Remove renderPhaseUpdates Map\r\n\r\nFollow up to #17484, which was reverted due to a bug found in www.\r\n\r\n* Failing test: Dropped updates\r\n\r\nWhen resetting render phase updates after a throw, we should only clear\r\nthe pending queue of hooks that were already processed.\r\n\r\n* Fix non-render-phase updates being dropped\r\n\r\nDetects if a queue has been processed by whether the hook was cloned.\r\nIf we change the implementation to an array instead of a list, we'll\r\nneed some other mechanism to determine whether the hook was processed.\r\n\r\n* Regression test: startTransition in render phase\r\n\r\nuseTransition uses the state hook as part of its implementation, so we\r\nneed to fork it in the dispatcher used for re-renders, too."
        }
      },
      {
        "sha": "a209a97ed742ced488d7edf4fc2dcbf316ba13cb",
        "commit": {
          "message": "Add feature flag around React.createFactory (#17873)"
        }
      },
      {
        "sha": "9fd760ce75fd76716888997852ca85394eeab49a",
        "commit": {
          "message": "Add disable <textarea/> children flag (#17874)"
        }
      },
      {
        "sha": "0c04acaf8955d3f754ec894abfc7586cbf3220dc",
        "commit": {
          "message": "Remove FB specific build (#17875)\n\nI moved unstable_SuspenseList internally. We don't need the FB build.\r\nI plan on also removing the ReactDOM fb specific entry. We shouldn't add\r\nany more FB specific internals nor APIs. If they're experimental they\r\nshould go onto the experimental builds to avoid too many permutations."
        }
      },
      {
        "sha": "f2fd484afdee1e4e25ee453bb7a544fa0558d172",
        "commit": {
          "message": "Add React.createFactory() deprecation warning (#17878)"
        }
      },
      {
        "sha": "c322f5913f5ec4f0f8d7926ba7401e94c0aaa772",
        "commit": {
          "message": "Add unstable_renderSubtreeIntoContainer and unstable_createPortal feature flags (#17880)"
        }
      },
      {
        "sha": "cf7a0c24d4640f07d465c5a67aab2639ddd5d0a9",
        "commit": {
          "message": "Remove dynamic GKs for selective/train (#17888)\n\nThere are shipped/shipping."
        }
      },
      {
        "sha": "6c00c5bba4d2272de6975c124ab6dc29abb629c8",
        "commit": {
          "message": "Update to flow-bin@0.89 (#17842)"
        }
      },
      {
        "sha": "3b3decf87121dcc20bfc0820b7b35d2b028adaf2",
        "commit": {
          "message": "add warning when owner and self are different for string refs (#17864)\n\nWhen owner and self are different for string refs, we can't easily convert them to callback refs. This PR adds a warning for string refs when owner and self are different to tell users to manually update these refs."
        }
      },
      {
        "sha": "3c713d513195a53788b3f8bb4b70279d68b15bcc",
        "commit": {
          "message": "chore: update to latest release of babel (#17897)"
        }
      },
      {
        "sha": "9d09052d2f14a238285352f3156bbe034451bc7b",
        "commit": {
          "message": "Update various monorepo dependencies (#17901)"
        }
      },
      {
        "sha": "81e30c7ff67d4c5d6e9b9f2bb3d9af44bd40c621",
        "commit": {
          "message": "Remove unused modules from legacy event responders (#17907)"
        }
      },
      {
        "sha": "6faf6f5eb1705eef39a1d762d6ee381930f36775",
        "commit": {
          "message": "Update to flow 0.97 (#17892)"
        }
      },
      {
        "sha": "cf0081263ced42ddebe0a0d868701890448bfd4b",
        "commit": {
          "message": "Upgrade to jest 25 (#17896)\n\nThe changes to the test code relate to changes in JSDOM that come with Jest 25:\r\n\r\n* Several JSDOM workarounds are no longer needed.\r\n* Several tests made assertions to match incorrect JSDOM behavior (e.g. setAttribute calls) that JSDOM has now patched to match browsers.\r\n  * https://codesandbox.io/s/resets-value-of-datetime-input-to-fix-bugs-in-ios-safari-1ppwh\r\n* JSDOM no longer triggers default actions when dispatching click events.\r\n  * https://codesandbox.io/s/beautiful-cdn-ugn8f\r\n* JSDOM fixed (jsdom/jsdom#2700) a bug so that calling focus() on an already focused element does not dispatch a FocusEvent.\r\n* JSDOM now supports passive events.\r\n* JSDOM has improved support for custom CSS properties.\r\n  * But requires jsdom/cssstyle#112 to land to support webkit prefixed properties."
        }
      },
      {
        "sha": "e26682a9f3889439765942f1510f280466c3433a",
        "commit": {
          "message": "Removed Root API callback params and added warnings (#17916)"
        }
      },
      {
        "sha": "b7f217d40c6c8c973c86fabceeda238b38662171",
        "commit": {
          "message": "[Concurrent Mode] Add missing event plugin priorities (#17914)"
        }
      },
      {
        "sha": "29a1559619a4f7b63cc2a824482e86e6e9886938",
        "commit": {
          "message": "Add semver dependency explicitly to DevTools (#17919)"
        }
      },
      {
        "sha": "a8fce06d3efd52834de0e63c72ee77c2b267b48c",
        "commit": {
          "message": "Fix Jest diff call (#17921)"
        }
      },
      {
        "sha": "57333ca33a0619ff2334e4eb19139b4c7e9830f7",
        "commit": {
          "message": "Show first component stack in context warning (#17922)\n\n* Update tests\r\n\r\n* Show first component stack in context warning\r\n\r\nCo-authored-by: Dominic Gannaway <trueadm@users.noreply.github.com>"
        }
      },
      {
        "sha": "faabe22b4f5b5812dc756b437465a3c519f6d872",
        "commit": {
          "message": "Use next tag for canary releases in the doc (#17923)"
        }
      },
      {
        "sha": "241c4467eef7c2a8858c96d5dfe4e8ef84c47bad",
        "commit": {
          "message": "Add a note about expiring OTP codes"
        }
      },
      {
        "sha": "01974a867c543fca6ebe9f4e612dcc3bb8f80528",
        "commit": {
          "message": "Bugfix: Expiring a partially completed tree (#17926)\n\n* Failing test: Expiring a partially completed tree\r\n\r\nWe should not throw out a partially completed tree if it expires in the\r\nmiddle of rendering. We should finish the rest of the tree without\r\nyielding, then finish any remaining expired levels in a single batch.\r\n\r\n* Check if there's a partial tree before restarting\r\n\r\nIf a partial render expires, we should stay in the concurrent path\r\n(performConcurrentWorkOnRoot); we'll stop yielding, but the rest of the\r\nbehavior remains the same.\r\n\r\nWe will only revert to the sync path (performSyncWorkOnRoot) when\r\nstarting on a new level.\r\n\r\nThis approach prevents partially completed concurrent work from\r\nbeing discarded.\r\n\r\n* New test: retry after error during expired render"
        }
      },
      {
        "sha": "b2382a71503595288a63050d1c71ff0be6650d6f",
        "commit": {
          "message": "Add ReactDOM.unstable_renderSubtreeIntoContainer warning flag (#17936)"
        }
      },
      {
        "sha": "1662035852519983955c8c3bdab72a0c60b1264b",
        "commit": {
          "message": "Ensure createRoot warning parity with ReactDOM.render (#17937)"
        }
      },
      {
        "sha": "e98797f7b98c827fb691e519bc2c445977a0546c",
        "commit": {
          "message": "Fix Event Replaying in Flare by Eagerly Adding Active Listeners  (#17933)\n\n* Add test of Event Replaying using Flare\r\n\r\n* Fix Event Replaying in Flare by Eagerly Adding Active Listeners\r\n\r\nThis effectively reverts part of https://github.com/facebook/react/pull/17513"
        }
      },
      {
        "sha": "d2ae77d0e41fc6cee22bf3f0c9bd9c3d8bcec58c",
        "commit": {
          "message": "Remove root.unmount() callback from DevTools code (#17939)"
        }
      },
      {
        "sha": "9dbe1c54dff3b6a7f89bae9b19b4698e0bfbcb9a",
        "commit": {
          "message": "Revert \"Bugfix: Expiring a partially completed tree (#17926)\" (#17941)\n\nThis reverts commit 01974a867c543fca6ebe9f4e612dcc3bb8f80528.\r\n\r\n* Failing test: Expiring a partially completed tree\r\n\r\nWe should not throw out a partially completed tree if it expires in the\r\nmiddle of rendering. We should finish the rest of the tree without\r\nyielding, then finish any remaining expired levels in a single batch.\r\n\r\n* Check if there's a partial tree before restarting\r\n\r\nIf a partial render expires, we should stay in the concurrent path\r\n(performConcurrentWorkOnRoot); we'll stop yielding, but the rest of the\r\nbehavior remains the same.\r\n\r\nWe will only revert to the sync path (performSyncWorkOnRoot) when\r\nstarting on a new level.\r\n\r\nThis approach prevents partially completed concurrent work from\r\nbeing discarded.\r\n\r\n* New test: retry after error during expired render"
        }
      },
      {
        "sha": "6ae2c33a759e8f44622795603c84da9a2ebddf43",
        "commit": {
          "message": "StrictMode should call sCU twice in DEV (#17942)"
        }
      },
      {
        "sha": "38cd75861f44a40e686a39403bff39bf16fd796d",
        "commit": {
          "message": "Update google-closure-compiler (#17902)"
        }
      },
      {
        "sha": "d9a5170594486deeb767c243cc4b381e9e085c79",
        "commit": {
          "message": "fix: check bigint in serializeToString and change it to string (#17931)"
        }
      },
      {
        "sha": "00745b053fa00424d0963a0b9d64e3fcb3f90298",
        "commit": {
          "message": "Typo fix (#17946)"
        }
      },
      {
        "sha": "9ad35905fae96036a130d9dec24b47132dfe4076",
        "commit": {
          "message": "Add DevTools tests for copying complex values (#17948)"
        }
      },
      {
        "sha": "08c1f79e1e13719ae2b79240bbd8f97178ddd791",
        "commit": {
          "message": "Fix Cannot read property 'sub' of undefined when navigating to plain-text pages (#17848)\n\nUpdate various parts of DevTools to account for the fact that the global \"hook\" might be undefined if DevTools didn't inject it (due to the page's `contentType`) it (due to the page's `contentType`)"
        }
      },
      {
        "sha": "434770c3b4b94315c789234c27ed9dc2ec8a78ad",
        "commit": {
          "message": "Add beforeRemoveInstance method to ReactNoop (#17959)"
        }
      },
      {
        "sha": "9944bf27fb75b330202f51f58a2ce5c0ea778bef",
        "commit": {
          "message": "Add version property to ReactDOM (#15780)"
        }
      },
      {
        "sha": "7df32c4c8c53d971e894c5e8d62a3cc908489b05",
        "commit": {
          "message": "Flush `useEffect` clean up functions in the passive effects phase (#17925)\n\n* Flush useEffect clean up functions in the passive effects phase\r\n\r\nThis is a change in behavior that may cause broken product code, so it has been added behind a killswitch (deferPassiveEffectCleanupDuringUnmount)\r\n\r\n* Avoid scheduling unnecessary callbacks for cleanup effects\r\n\r\nUpdated enqueuePendingPassiveEffectDestroyFn() to check rootDoesHavePassiveEffects before scheduling a new callback. This way we'll only schedule (at most) one.\r\n\r\n* Updated newly added test for added clarity.\r\n\r\n* Cleaned up hooks effect tags\r\n\r\nWe previously used separate Mount* and Unmount* tags to track hooks work for each phase (snapshot, mutation, layout, and passive). This was somewhat complicated to trace through and there were man tag types we never even used (e.g. UnmountLayout, MountMutation, UnmountSnapshot). In addition to this, it left passive and layout hooks looking the same after renders without changed dependencies, which meant we were unable to reliably defer passive effect destroy functions until after the commit phase.\r\n\r\nThis commit reduces the effect tag types to only include Layout and Passive and differentiates between work and no-work with an HasEffect flag.\r\n\r\n* Disabled deferred passive effects flushing in OSS builds for now\r\n\r\n* Split up unmount and mount effects list traversal"
        }
      },
      {
        "sha": "ace9e8134c3080d86f20097d5ba3369e15a97a83",
        "commit": {
          "message": "Simplify Continuous Hydration Targets (#17952)\n\n* Simplify Continuous Hydration Targets\r\n\r\nLet's use a constant priority for this. This helps us avoid restarting\r\na render when switching targets and simplifies the model.\r\n\r\nThe downside is that now we're not down-prioritizing the previous hover\r\ntarget. However, we think that's ok because it'll only do one level too\r\nmuch and then stop.\r\n\r\n* Add test meant to show why it's tricky to merge both hydration levels\r\n\r\nHaving both levels co-exist works. However, if we deprioritize hydration\r\nusing a single level, we might deprioritize the wrong thing.\r\n\r\nThis adds a test that catches it if we ever try a naive deprioritization\r\nin the future.\r\n\r\nIt also tests that we don't down-prioritize if we're changing the hover\r\nin the middle of doing continuous priority work."
        }
      },
      {
        "sha": "3e9251d605692e6db6103e4fca9771ac30a62247",
        "commit": {
          "message": "make testing builds for React/ReactDOM (#17915)\n\nThis PR introduces adds `react/testing` and `react-dom/testing`.\r\n- changes infra to generate these builds\r\n- exports act on ReactDOM in these testing builds\r\n- uses the new test builds in fixtures/dom\r\n\r\nIn the next PR -\r\n\r\n- I'll use the new builds for all our own tests\r\n- I'll replace usages of TestUtils.act with ReactDOM.act."
        }
      },
      {
        "sha": "2078aa9a401aa91e97b42cdd36a6310888128ab2",
        "commit": {
          "message": "Add dom fixture for autofilled form state (#17951)"
        }
      },
      {
        "sha": "812277dab6b449596288825d59184dfc1acdf370",
        "commit": {
          "message": "Fix onMouseEnter is fired on disabled buttons (#17675)"
        }
      },
      {
        "sha": "d6e08fe0a806703241311b5331c21f29fdf4a139",
        "commit": {
          "message": "Remove Suspense priority warning (#17971)\n\n* Remove Suspense priority warning\r\n\r\n* Fix tests"
        }
      },
      {
        "sha": "cddde45806a8e37f534742a280fa18be79871d18",
        "commit": {
          "message": "apply changes on editablevalue on blur feature implemented (#17062)\n\n* apply changes on editablevalue on blur feature implemented\r\n\r\n* Removed \"Undo\" button and unnecessary event.preventDefault()\r\n\r\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>"
        }
      },
      {
        "sha": "9dba218d933d66fba9a8ba23b90dbb852514da8b",
        "commit": {
          "message": "[Mock Scheduler] Mimic browser's advanceTime (#17967)\n\nThe mock Scheduler that we use in our tests has its own fake timer\r\nimplementation. The `unstable_advanceTime` method advances the timeline.\r\n\r\nCurrently, a call to `unstable_advanceTime` will also flush any pending\r\nexpired work. But that's not how it works in the browser: when a timer\r\nfires, the corresponding task is added to the Scheduler queue. However,\r\nwe will still wait until the next message event before flushing it.\r\n\r\nThis commit changes `unstable_advanceTime` to more closely resemble the\r\nbrowser behavior, by removing the automatic flushing of expired work.\r\n\r\n```js\r\n// Before this commit\r\nScheduler.unstable_advanceTime(ms);\r\n\r\n// Equivalent behavior after this commit\r\nScheduler.unstable_advanceTime(ms);\r\nScheduler.unstable_flushExpired();\r\n```\r\n\r\nThe general principle is to prefer separate APIs for scheduling tasks\r\nand flushing them.\r\n\r\nThis change does not affect any public APIs. `unstable_advanceTime` is\r\nonly used by our own test suite. It is not used by `act`.\r\n\r\nHowever, we may need to update tests in www, like Relay's."
        }
      },
      {
        "sha": "562d2fbc497d5e8e6ae5934ae9f68b28cd613fab",
        "commit": {
          "message": "Fix release scripts (#17972)\n\nCircle CI seems to have changed the reported artifact path which broke our scripts."
        }
      },
      {
        "sha": "613cbd3acef902c9737a8934f0950bf934c5f30e",
        "commit": {
          "message": "Formatting fix (Prettier) to build script"
        }
      },
      {
        "sha": "d84c539b31bc703fe6271965ce85344f50c8c207",
        "commit": {
          "message": "fix sizebot - point correctly to circleci artifact (#17975)\n\nsimilar to #17972, this should fix sizebot not reporting stats right now"
        }
      },
      {
        "sha": "9e158c091bb2bd795b734437bf5cead514039531",
        "commit": {
          "message": "Updated release script documentation and command names (#17929)\n\n* Updated release script documentation and command names\r\n\r\n* Update scripts/release/README.md\r\n\r\nCo-Authored-By: Sunil Pai <threepointone@oculus.com>\r\n\r\n* Updated README\r\n\r\nCo-authored-by: Sunil Pai <threepointone@oculus.com>"
        }
      },
      {
        "sha": "df134d31cb107d0dbcdf036d3502a23a81b2c029",
        "commit": {
          "message": "Use babel parser rather than Babylon in extract errors (#17988)"
        }
      },
      {
        "sha": "256d78d11f1c7da749914a8b2d35b2974a54b0f2",
        "commit": {
          "message": "Add feature flag for removing children Map support (#17990)"
        }
      },
      {
        "sha": "3f814e75823dcef29a2f4ee5b22c94830a85a0e2",
        "commit": {
          "message": "Fix Flow type for React Native (#17992)"
        }
      },
      {
        "sha": "901d76bc5c8dcd0fa15bb32d1dfe05709aa5d273",
        "commit": {
          "message": "dataForRoots.set duplicate removal (#17993)\n\ndataForRoots.set duplicate removal"
        }
      },
      {
        "sha": "c55c34e46a6d8148afb78594d14f4675f9346900",
        "commit": {
          "message": "Move React Map child check to behind flags or __DEV__ (#17995)"
        }
      },
      {
        "sha": "d1bfdfb861dfcb5e9697686bfa37c5b734c0250e",
        "commit": {
          "message": "Ignore react-native-web in Flow checks (#17999)"
        }
      },
      {
        "sha": "e05dedc415171aad65e4263ef861b21e867325f7",
        "commit": {
          "message": "Added $FlowFixMe to DevTools shell for module we Flow-ignore (#18001)"
        }
      },
      {
        "sha": "4f71f25a34db0caa1c9c0b75f1f453f948272e65",
        "commit": {
          "message": "Re-enable shorthand CSS property collision warning (#18002)\n\nOriginally added in https://github.com/facebook/react/pull/14181; disabled in https://github.com/facebook/react/pull/14245. Intention was to enable it in React 16.7 but we forgot."
        }
      },
      {
        "sha": "89c6042df373f422bce5744f28597390b6c01ecb",
        "commit": {
          "message": "fix: typo in test (#18005)"
        }
      },
      {
        "sha": "b63cb6f6cf18bbe28eb0a443c64fd9b87d79616d",
        "commit": {
          "message": "Update ReactFiberExpirationTime.js (#17825)\n\nreplaced 'add' with 'subtract'"
        }
      },
      {
        "sha": "517de74b0c33aa800dbf1f5ce48dc7e336c93cfb",
        "commit": {
          "message": "Tweak comment wording (#18007)\n\n* Revert \"Update ReactFiberExpirationTime.js (#17825)\"\r\n\r\nThis reverts commit b63cb6f6cf18bbe28eb0a443c64fd9b87d79616d.\r\n\r\n* Reword"
        }
      },
      {
        "sha": "ab7b83a924bc7c9f43d37beb601d42215916c891",
        "commit": {
          "message": "Stop exposing some internals on FB build (#18011)"
        }
      },
      {
        "sha": "df5faddcc2ad27be5700823d4f5367e5e9ae4620",
        "commit": {
          "message": "Refactor commitPlacement to recursively insert nodes (#17996)"
        }
      },
      {
        "sha": "42918f40aabd41a324b5dd10652e078dd2c411e6",
        "commit": {
          "message": "Change build from babylon to babel (#18015)"
        }
      },
      {
        "sha": "529e58ab0a62ed22be9b40bbe44a6ac1b2c89cfe",
        "commit": {
          "message": "Remove legacy www config from Rollup build (#18016)"
        }
      },
      {
        "sha": "f7278034de5a289571f26666e6717c4df9f519ad",
        "commit": {
          "message": "Flush all passive destroy fns before calling create fns (#17947)\n\n* Flush all passive destroy fns before calling create fns\r\n\r\nPreviously we only flushed destroy functions for a single fiber.\r\n\r\nThe reason this is important is that interleaving destroy/create effects between sibling components might cause components to interfere with each other (e.g. a destroy function in one component may unintentionally override a ref value set by a create function in another component).\r\n\r\nThis PR builds on top of the recently added deferPassiveEffectCleanupDuringUnmount kill switch to separate passive effects flushing into two separate phases (similar to layout effects).\r\n\r\n* Change passive effect flushing to use arrays instead of lists\r\n\r\nThis change offers a small advantage over the way we did things previous: it continues invoking destroy functions even after a previous one errored."
        }
      },
      {
        "sha": "988f4b14eee482e6f73e897cd5329318023e5696",
        "commit": {
          "message": "Do not export passiveBrowserEventsSupported from Focus responder (#18022)\n\nRemove code"
        }
      },
      {
        "sha": "a607ea4c424356707302da998bf13e9bf1b55007",
        "commit": {
          "message": "Remove getIsHydrating (#18019)"
        }
      },
      {
        "sha": "58b8797b7372c9296e65e08ce8297e4a394b7972",
        "commit": {
          "message": "remove \"Unreleased\" section from CHANGELOG (#18027)\n\nThis section is empty, and imo isn't really helpful in React's changelog. I'm honestly not sure why this is even here? Figured I'd start a discussion with a PR, or we can remove it right now."
        }
      },
      {
        "sha": "8777b44e982e7ddedda62aee02f1fd370795db44",
        "commit": {
          "message": "Add Modern WWW build (#18028)\n\n* Build both stable and experimental WWW builds\r\n\r\n* Flip already experimental WWW flags to true\r\n\r\n* Remove FB-specific internals from modern FB builds\r\n\r\nWe think we're not going to need these.\r\n\r\n* Disable classic features in modern WWW builds\r\n\r\n* Disable legacy ReactDOM API for modern WWW build\r\n\r\n* Don’t include user timing in prod\r\n\r\n* Fix bad copy paste and add missing flags to test renderer\r\n\r\n* Add testing WWW feature flag file\r\n\r\nWe need it because WWW has a different meaning of experimental now."
        }
      },
      {
        "sha": "d4f2b0379c8ecf8266497f863ee5a2aa612ff4ba",
        "commit": {
          "message": "Add Auto Import to Babel Plugin  (#16626)\n\nThis babel transform is a fork of the @babel/plugin-transform-react-jsx transform and is for experimentation purposes only. We don't plan to own this code in the future, and we will upstream this to Babel at some point once we've proven out the concept.\r\n\r\nAs per the RFC to simplify element creation, we want to add the ability to auto import \"react' directly from the babel plugin. This commit updates the babel plugin with two options:\r\n\r\n1.) importSource: The React module to import from. Defaults to react.\r\n2.) autoImport: The type of import. Defaults to none.\r\n- none: Does not import React. JSX compiles to React.jsx etc.\r\n- namespace: import * as _react from \"react\";. JSX compiles to _react.jsx etc.\r\n- default: import _default from \"react\"; JSX compiles to _default.jsx etc.\r\n- namedExports: import {jsx as _jsx} from \"react\"; JSX compiles to _jsx etc.\r\n- require: var _react = _interopRequireWildcard(require(\"react\"));. jSX compiles to _react.jsx etc.\r\n\r\nnamespace, default, and namedExports can only be used when sourceType: module and require can only be used when sourceType: script.\r\n\r\nIt also adds two pragmas (jsxAutoImport and jsxImportSource) that allow users to specify autoImport and importSource in the docblock."
        }
      },
      {
        "sha": "2d6be757df86177ca8590bf7c361d6c910640895",
        "commit": {
          "message": "[Native] Delete NativeComponent and NativeMethodsMixin (#18036)\n\n* [Native] Delete NativeComponent and NativeMethodsMixin\r\n\r\n* Remove more files"
        }
      },
      {
        "sha": "9def56ec0e1e71928ee999f48c00b1803ed8772a",
        "commit": {
          "message": "Refactor DOM plugin system to single module (#18025)"
        }
      },
      {
        "sha": "93a229bab59f94e214256582c55d3b6c1fc2b958",
        "commit": {
          "message": "Update eslint rule exhaustive deps to use new suggestions feature (#17385)\n\nThis closes #16313"
        }
      },
      {
        "sha": "56a8c353219ac93ab358eb28009de881ae48251e",
        "commit": {
          "message": "eslint-plugin-react-hooks@2.4.0"
        }
      },
      {
        "sha": "d533229fba8f7e7e576436bf52bbcae56c862906",
        "commit": {
          "message": "Fix Prettier"
        }
      },
      {
        "sha": "f48a5e64e8fd903293f5b854beb795dcc6bae86d",
        "commit": {
          "message": "Further cleanup of plugin event system (#18056)"
        }
      },
      {
        "sha": "d5ddc16a3398c33d70489cee87f5176c85f3c9f5",
        "commit": {
          "message": "React developer tools extension for Microsoft Edge  (#18041)\n\n* Port Chrome extension to Microsoft Edge"
        }
      },
      {
        "sha": "90be006da8e231279151e7b1518bb64c62e26851",
        "commit": {
          "message": "Updated Yarn lockfile"
        }
      },
      {
        "sha": "48c4867d745bbf91ae73892545960c0979c2dbf7",
        "commit": {
          "message": "Update issue templates to directly link to relevant sources (#18039)\n\nGitHub supports linking to off-site sources for certain types of issue."
        }
      },
      {
        "sha": "1a6d8179b6dd427fdf7ee50d5ac45ae5a40979eb",
        "commit": {
          "message": "[react-interactions] Ensure onBeforeBlur fires for hideInstance (#18064)"
        }
      },
      {
        "sha": "56d8a73affad624ee4d48f1685e0a92adce0bd9c",
        "commit": {
          "message": "[www] Disable Scheduler `timeout` w/ dynamic flag (#18069)\n\nBefore attempting to land an expiration times refactor, I want to see\r\nif this particular change will impact performance (either positively\r\nor negatively). I will test this with a GK."
        }
      },
      {
        "sha": "691096c95d1019f57e0da2c9a060c5e094b7c586",
        "commit": {
          "message": "Split recent passive effects changes into 2 flags (#18030)\n\n* Split recent passive effects changes into 2 flags\r\n\r\nSeparate flags can now be used to opt passive effects into:\r\n1) Deferring destroy functions on unmount to subsequent passive effects flush\r\n2) Running all destroy functions (for all fibers) before create functions\r\n\r\nThis allows us to test the less risky feature (2) separately from the more risky one.\r\n\r\n* deferPassiveEffectCleanupDuringUnmount is ignored unless runAllPassiveEffectDestroysBeforeCreates is true"
        }
      },
      {
        "sha": "14afeb1033e25942e63787750388972916f20a39",
        "commit": {
          "message": "Added missing feature flag"
        }
      },
      {
        "sha": "4d9f8500651c5d1e19d8ec9a2359d5476a53814b",
        "commit": {
          "message": "Re-throw errors thrown by the renderer at the root in the complete phase (#18029)\n\n* Re-throw errors thrown by the renderer at the root\r\n\r\nReact treats errors thrown at the root as a fatal because there's no\r\nparent component that can capture it. (This is distinct from an\r\n\"uncaught error\" that isn't wrapped in an error boundary, because in\r\nthat case we can fall back to deleting the whole tree -- not great, but\r\nat least the error is contained to a single root, and React is left in a\r\nconsistent state.)\r\n\r\nIt turns out we didn't have a test case for this path. The only way it\r\ncan happen is if the renderer's host config throws. We had similar test\r\ncases for host components, but none for the host root.\r\n\r\nThis adds a new test case and fixes a bug where React would keep\r\nretrying the root because the `workInProgress` pointer was not advanced\r\nto the next fiber. (Which in this case is `null`, since it's the root.)\r\n\r\nWe could consider in the future trying to gracefully exit from certain\r\ntypes of root errors without leaving React in an inconsistent state. For\r\nexample, we should be able to gracefully exit from errors thrown in the\r\nbegin phase. For now, I'm treating it like an internal invariant and\r\nimmediately exiting.\r\n\r\n* Add comment"
        }
      },
      {
        "sha": "4912ba31e3dcc8d08f5b16ae38b38d74da85ea21",
        "commit": {
          "message": "Add modern event system flag + rename legacy plugin module (#18073)"
        }
      },
      {
        "sha": "a8643e905e39f041cda80b498dc06018b27f6554",
        "commit": {
          "message": "add no-restricted-globals to eslint config (#18076)\n\nOur current lint config assumes a browser environment, which means it won't warn you if you use a variable like `name` without declaring it earlier. This imports the same list as the one used by create-react-app, and enables it against our codebase."
        }
      },
      {
        "sha": "2512c309e34f0207d29c19392d144edab719f347",
        "commit": {
          "message": "Remove Flare bundles from build (#18077)"
        }
      },
      {
        "sha": "44e5f5e6451cf192af5dee3aa1f3a87119fc231e",
        "commit": {
          "message": "Add fiber summary tooltip to devtools profiling (#18048)\n\n* Add tooltip component\r\n\r\n* Separate logic of ProfilerWhatChanged to a component\r\n\r\n* Add hovered Fiber info tooltip component\r\n\r\n* Add flame graph chart tooltip\r\n\r\n* Add commit ranked list tooltip\r\n\r\n* Fix flow issues\r\n\r\n* Minor improvement in filter\r\n\r\n* Fix flickering issue\r\n\r\n* Resolved issues on useCallbacks and mouse event listeners\r\n\r\n* Fix lints\r\n\r\n* Remove unnecessary useCallback"
        }
      },
      {
        "sha": "a12dd52a4a5f19d990694810db86cc30e98308ae",
        "commit": {
          "message": "Don't build some packages for WWW (#18078)"
        }
      },
      {
        "sha": "1000f6135efba4f8d8ebffedeb7b472f532a8475",
        "commit": {
          "message": "Add container to event listener signature (#18075)"
        }
      },
      {
        "sha": "b6c94d636cb33a265671b864b97870da38d97207",
        "commit": {
          "message": "Add guard around FocusWithin responder root events (#18080)"
        }
      },
      {
        "sha": "7e770dae93e1a934b905d8678c7ce368ed86ef0b",
        "commit": {
          "message": "Profiler tooltip tweaks (#18082)\n\n* Moved Profiler views into Profiler folder\r\n\r\n* Tweaked Profiler tooltip CSS styles\r\n\r\n* Tweaked Tooltip positioning code"
        }
      },
      {
        "sha": "085d02133e9e3b24ae548d89e4003899bf85022c",
        "commit": {
          "message": "[Native] Migrate focus/blur to call TextInputState with the host component (#18068)"
        }
      },
      {
        "sha": "ea6ed3dbbd32515e2d4d9783c358beceeadd4b1d",
        "commit": {
          "message": "Warn for update on different component in render (#17099)\n\nThis warning already exists for class components, but not for functions.\r\n\r\nIt does not apply to render phase updates to the same component, which\r\nhave special semantics that we do support."
        }
      },
      {
        "sha": "3f85d53ca6f2af8a711daae6322e6bdda862f660",
        "commit": {
          "message": "Further pre-requisite changes to plugin event system (#18083)"
        }
      },
      {
        "sha": "b789060dca314f052d856cab509569cf41020cd5",
        "commit": {
          "message": "Feature Flag for React.jsx` \"spreading a key to jsx\" warning (#18074)\n\nAdds a feature flag for when React.jsx warns you about spreading a key into jsx. It's false for all builds, except as a dynamic flag for fb/www.\r\n\r\nI also included the component name in the warning."
        }
      },
      {
        "sha": "abfbae02a4dcb56ef0040401e7822007a9d61d5b",
        "commit": {
          "message": "Update Rollup version to 1.19.4 and fix breaking changes (#15037)\n\n* update rollup versioni\r\n\r\n* ignore Rollup warnings for known warning codes\r\n\r\n* add lecacy support from elas7\r\n\r\n* rollup 1.5\r\n\r\n* upd to ver 1.6.0\r\n\r\n* don't throw error\r\n\r\n* use return instead of throw error\r\n\r\n* upd code in comment\r\n\r\n* fix getters test\r\n\r\n* rollup 1.7\r\n\r\n* rollup 1.7.3\r\n\r\n* remove comments\r\n\r\n* use rollup 1.7.4\r\n\r\n* update yarn.lock for new rollup version\r\n\r\n* rollup version 1.9.0\r\n\r\n* rollback to version 1.7.4\r\n\r\n* add globalThis to eslintrc.umd\r\n\r\n* rollup 1.9.0\r\n\r\n* upd rollup plugin versions to satisfied latest versions\r\n\r\n* add result.json update\r\n\r\n* rollup 1.9.3\r\n\r\n* rollup 1.10.0\r\n\r\n* ver 1.10.1\r\n\r\n* rollup 1.11.3\r\n\r\n* rollup ver 1.12.3\r\n\r\n* rollup 1.13.1\r\n\r\n* rollup 1.14.6\r\n\r\n* rollup 1.15.6\r\n\r\n* rollup 1.16.2\r\n\r\n* upd tests\r\n\r\n* prettier\r\n\r\n* Rollup 1.16.3\r\n\r\n* upd\r\n\r\n* should throw when finding getters with a different syntax from the ones generated by Rollup\r\n\r\n* add more one test\r\n\r\n* rollup-plugin-prettier updated changed stuff, revert them\r\n\r\n* don't upd all the Rollup plugins\r\n\r\n* rollup-plugin-babel 3.0.7\r\n\r\n* upd rollup plugin versions\r\n\r\n* upd rollup-plugin-commonjs\r\n\r\n* bracket spacing\r\n\r\n* rollup 1.16.6\r\n\r\n* rollup 1.16.7\r\n\r\n* rename test description\r\n\r\n* rollup 1.18.0\r\n\r\n* use externalLiveBindings: false\r\n\r\n* rollup 1.19.3\r\n\r\n* remove remove-getters\r\n\r\n* simplify CIRCULAR_DEPENDENCY warning\r\n\r\n* simplify if logic in sizes-plugin\r\n\r\n* rollup 1.19.4\r\n\r\n* update output for small optimizations\r\n\r\n* remove globalThis\r\n\r\n* remove results.json file\r\n\r\n* re-add globalThis"
        }
      },
      {
        "sha": "5de5b61507d44c158fc0223728c5834fbd224ec5",
        "commit": {
          "message": "Bugfix: `memo` drops lower pri updates on bail out (#18091)\n\nFixes a bug where lower priority updates on a components wrapped with\r\n`memo` are sometimes left dangling in the queue without ever being\r\nprocessed, if they are preceded by a higher priority bailout.\r\n\r\nCause\r\n-----\r\n\r\nThe pending update priority field is cleared at the beginning of\r\n`beginWork`. If there is remaining work at a lower priority level, it's\r\nexpected that it will be accumulated on the work-in-progress fiber\r\nduring the begin phase.\r\n\r\nThere's an exception where this assumption doesn't hold:\r\nSimpleMemoComponent contains a bailout that occurs *before* the\r\ncomponent is evaluated and the update queues are processed, which means\r\nwe don't accumulate the next priority level. When we complete the fiber,\r\nthe work loop is left to believe that there's no remaining work.\r\n\r\nMitigation\r\n----------\r\n\r\nSince this only happens in a single case, a late bailout in\r\nSimpleMemoComponent, I've mitigated the bug in that code path by\r\nrestoring the original update priority from the current fiber.\r\n\r\nThis same case does not apply to MemoComponent, because MemoComponent\r\nfibers do not contain hooks or update queues; rather, they wrap around\r\nan inner fiber that may contain those. However, I've added a test case\r\nfor MemoComponent to protect against a possible future regression.\r\n\r\nPossible next steps\r\n-------------------\r\n\r\nWe should consider moving the update priority assignment in `beginWork`\r\nout of the common path and into each branch, to avoid similar bugs in\r\nthe future."
        }
      },
      {
        "sha": "8b596e00a4fffd6bb5e6990f4dd59e40e80a5ea0",
        "commit": {
          "message": "Remove unused arguments in the reconciler (#18092)"
        }
      },
      {
        "sha": "65bbda7f169394005252b46a5992ece5a2ffadad",
        "commit": {
          "message": "Rename Chunks API to Blocks (#18086)\n\nSounds like this is the name we're going with. This also helps us\r\ndistinguish it from other \"chunking\" implementation details."
        }
      },
      {
        "sha": "2c4221ce8bc5765bfddc4b32af4af602077a4a3e",
        "commit": {
          "message": "Change string refs in function component message (#18031)\n\nThis should refer to string refs specifically. The forwardRef part doesn't\r\nmake any sense in this case. I think this was just an oversight."
        }
      },
      {
        "sha": "78e816032c8af962343abbf384e06f3e9bae9269",
        "commit": {
          "message": "Don't warn about unmounted updates if pending passive unmount (#18096)\n\nI recently landed a change to the timing of passive effect cleanup functions during unmount (see #17925). This change defers flushing of passive effects for unmounted components until later (whenever we next flush pending passive effects).\r\n\r\nSince this change increases the likelihood of a (not actionable) state update warning for unmounted components, I've suppressed that warning for Fibers that have scheduled passive effect unmounts pending."
        }
      },
      {
        "sha": "09348798a912c8682e57c35842aa7a007e13fdb9",
        "commit": {
          "message": "Codemod to import * as React from \"react\"; (#18102)\n\n* import * as React from \"react\";\r\n\r\nThis is the correct way to import React from an ES module since the ES\r\nmodule will not have a default export. Only named exports.\r\n\r\n* import * as ReactDOM from \"react-dom\""
        }
      },
      {
        "sha": "be76966f6b23e158f3c163061dcc266a294fddc1",
        "commit": {
          "message": "Code mod import * as React from 'react' in react-window (#18105)"
        }
      },
      {
        "sha": "501a78881e356bae2bc66be3d25966e87f5aa757",
        "commit": {
          "message": "runAllPassiveEffectDestroysBeforeCreates's feature flag description typo fixed (#18115)"
        }
      },
      {
        "sha": "ccab49473897aacae43bb4d55c1061065892403c",
        "commit": {
          "message": "Move type DOMContainer to HostConfig (#18112)\n\nExports from ReactDOM represents React's public API. This include types\r\nexported by React. At some point we'll start building Flow types from\r\nthese files.\r\n\r\nThe duplicate name between DOMContainer and Container seems confusing too\r\nsince it was used in the same files even though they're the same."
        }
      },
      {
        "sha": "0e49074f7a5ba3981ffd28387c8b7f891c7bad24",
        "commit": {
          "message": "Cross platform support to run yarn test:edge for Microsoft Edge dev tools extension (#18108)\n\n* Test automation for edge dev tools extension\r\n\r\n* Linter changes\r\n\r\n* Load extension automatically.\r\n\r\n* Fixed path in `test` command\r\n\r\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>"
        }
      },
      {
        "sha": "bf13d3e3c6632acad4e7fce1bc93df336cb57acc",
        "commit": {
          "message": "[eslint-plugin-react-hooks] Fix cyclic caching for loops containing a… (#16853)\n\n* [eslint-plugin-react-hooks] Fix cyclic caching for loops containing a condition\r\n\r\n* [eslint-plugin-react-hooks] prettier write\r\n\r\n* [eslint-plugin-react-hooks] Fix set for tests\r\n\r\n* Update packages/eslint-plugin-react-hooks/src/RulesOfHooks.js\r\n\r\nCo-Authored-By: Luke Kang <kidkkr@icloud.com>\r\n\r\nCo-authored-by: Luke Kang <kidkkr@icloud.com>"
        }
      },
      {
        "sha": "a29a273c17d069f3bc89c8a71dc90da4dafe544e",
        "commit": {
          "message": "[react-interactions] Ensure blur to window disengages press (#18125)"
        }
      },
      {
        "sha": "8d7535e540c036a40754acb53d51f1fdcc8dc6d8",
        "commit": {
          "message": "Add @nolint to FB bundle headers (#18126)"
        }
      },
      {
        "sha": "60016c448bb7d19fc989acd05dda5aca2e124381",
        "commit": {
          "message": "Export React as Named Exports instead of CommonJS (#18106)\n\n* Add options for forked entry points\r\n\r\nWe currently fork .fb.js entry points. This adds a few more options.\r\n\r\n.modern.fb.js - experimental FB builds\r\n.classic.fb.js - stable FB builds\r\n.fb.js - if no other FB build, use this for FB builds\r\n.experimental.js - experimental builds\r\n.stable.js - stable builds\r\n.js - used if no other override exists\r\n\r\nThis will be used to have different ES exports for different builds.\r\n\r\n* Switch React to named exports\r\n\r\n* Export named exports from the export point itself\r\n\r\nWe need to re-export the Flow exported types so we can use them in our code.\r\n\r\nWe don't want to use the Flow types from upstream since it doesn't have the non-public APIs that we have.\r\n\r\nThis should be able to use export * but I don't know why it doesn't work.\r\n\r\nThis actually enables Flow typing of React which was just \"any\" before.\r\nThis exposed some Flow errors that needs fixing.\r\n\r\n* Create forks for the react entrypoint\r\n\r\nNone of our builds expose all exports and they all differ in at least one\r\nway, so we need four forks.\r\n\r\n* Set esModule flag to false\r\n\r\nWe don't want to emit the esModule compatibility flag on our CommonJS\r\noutput. For now we treat our named exports as if they're CommonJS.\r\n\r\nThis is a potentially breaking change for scheduler (but all those apis\r\nare unstable), react-is and use-subscription. However, it seems unlikely\r\nthat anyone would rely on this since these only have named exports.\r\n\r\n* Remove unused Feature Flags\r\n\r\n* Let jest observe the stable fork for stable tests\r\n\r\nThis lets it do the negative test by ensuring that the right tests fail.\r\n\r\nHowever, this in turn will make other tests that are not behind\r\n__EXPERIMENTAL__ fail. So I need to do that next.\r\n\r\n* Put all tests that depend on exports behind __EXPERIMENTAL__\r\n\r\nSince there's no way to override the exports using feature flags\r\nin .intern.js anymore we can't use these APIs in stable.\r\n\r\nThe tradeoff here is that we can either enable the negative tests on\r\n\"stable\" that means experimental are expected to fail, or we can disable\r\ntests on stable. This is unfortunate since some of these APIs now run on\r\na \"stable\" config at FB instead of the experimental.\r\n\r\n* Switch ReactDOM to named exports\r\n\r\nSame strategy as React.\r\n\r\nI moved the ReactDOMFB runtime injection to classic.fb.js\r\n\r\nSince we only fork the entrypoint, the `/testing` entrypoint needs to\r\nbe forked too to re-export the same things plus `act`. This is a bit\r\nunfortunate. If it becomes a pattern we can consider forking in the\r\nmodule resolution deeply.\r\n\r\nfix flow\r\n\r\n* Fix ReactDOM Flow Types\r\n\r\nNow that ReactDOM is Flow type checked we need to fix up its types.\r\n\r\n* Configure jest to use stable entry for ReactDOM in non-experimental\r\n\r\n* Remove additional FeatureFlags that are no longer needed\r\n\r\nThese are only flagging the exports and no implementation details so we\r\ncan control them fully through the export overrides."
        }
      },
      {
        "sha": "f3ecd56beacd4a2849a1bac4faab5d41b7ad758b",
        "commit": {
          "message": "Fixed a spelling mistake in a comment. (#18119)"
        }
      },
      {
        "sha": "8e13e770e39a6fc634a87b5d5144ec1e54000a0c",
        "commit": {
          "message": "Remove /testing entry point from 'react' package (#18137)\n\nWe're not actually building this entry point. I can't think of a reason\r\nwe'd need to fork the isomorphic one. We don't really fork it for\r\nanything since it's so generic to work with all renderers.\r\n\r\nSince /profiling doesn't have this, it might confuse the story if we made\r\npeople alias two things for testing but not profiling."
        }
      },
      {
        "sha": "d28bd2994b749c70233334f4105574b692e74980",
        "commit": {
          "message": "remove OSS testing builds (#18138)\n\nThe testing build versions of react-dom are included in the builds right now, but we're not ready to share them yet. This PR removes them for now (back soon for the next release)"
        }
      },
      {
        "sha": "e1c7e651feb7d8f0339db5720cfb61b036ee7290",
        "commit": {
          "message": "Update ReactDebugHooks to handle composite hooks (#18130)\n\nThe useState hook has always composed the useReducer hook. 1:1 composition like this is fine.\r\n\r\nBut some more recent hooks (e.g. useTransition, useDeferredValue) compose multiple hooks internally. This breaks react-debug-tools because it causes off-by-N errors when the debug tools re-renders the function.\r\n\r\nFor example, if a component were to use the useTransition and useMemo hooks, the normal hooks dispatcher would create a list of first state, then callback, then memo hooks, but the debug tools package would expect a list of transition then memo. This can break user code and cause runtime errors in both the react-debug-tools package and in product code.\r\n\r\nThis PR fixes the currently broken hooks by updating debug tools to be aware of the composite hooks (how many times it should call nextHook essentially) and adds tests to make sure they don't get out of sync again. We'll need to add similar tests for future composite hooks (like useMutableSource #18000)."
        }
      },
      {
        "sha": "d166319e864c0097c9e763180df4add375f2f1cd",
        "commit": {
          "message": "[DevTools] Added resize support for Components panel. (#18046)\n\n* feat: DevTools - Added Resize Support.\r\n\r\n* feat: Prettier.\r\n\r\n* feat: DevTools - Added debug comments.\r\n\r\n* feat: DevTools - Removed Use Memo.\r\n\r\n* feat: DevTools - Added types.\r\n\r\n* feat: DevTools - Extracted values to constants.\r\n\r\n* feat: DevTools - Removed useCallback.\r\n\r\n* feat: DevTools - Finished refactoring.\r\n\r\n* feat: DevTools - Merging fixup.\r\n\r\n* feat: DevTools - Prettier fix.\r\n\r\n* feat: DevTools - Extracted code from Components fil.\r\n\r\n* feat: DevTools - Fixed orientation change issue.\r\n\r\n* feat: DevTools - Added flow types for reducer and refs.\r\n\r\n* feat: DevTools - Fixed orientation change on initial load.\r\n\r\n* Update packages/react-devtools-shared/src/devtools/views/Components/ComponentsResizer.js\r\n\r\n* Removed unused `orientationRef`\r\n\r\n* Fix Flow ref issue\r\n\r\nCo-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>"
        }
      },
      {
        "sha": "71418fda3b449d36b81ec8f12e076b81cd816534",
        "commit": {
          "message": "Rearranged some DevTools Components code"
        }
      },
      {
        "sha": "169b1f79beefe6000008ddd9f006f3d3c21ad5c6",
        "commit": {
          "message": "Changelog for 16.13.0 (#18124)\n\n* Changelog for 16.13.0\r\n\r\n* Update CHANGELOG.md"
        }
      },
      {
        "sha": "c1c5499cc3fd179004911b3391a55de1af4de037",
        "commit": {
          "message": "update version numbers for 16.13 (#18143)\n\nalso includes a bugfix when downloading error codes from circleci."
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.12.0",
      "body": "### React DOM\r\n\r\n* Fix passive effects (`useEffect`) not being fired in a multi-root app. ([@acdlite](https://github.com/acdlite) in [#17347](https://github.com/facebook/react/pull/17347))\r\n\r\n### React Is\r\n\r\n* Fix `lazy` and `memo` types considered elements instead of components ([@bvaughn](https://github.com/bvaughn) in [#17278](https://github.com/facebook/react/pull/17278))\r\n\r\n## Artifacts\r\n\r\n• react: https://unpkg.com/react@16.12.0/umd/\r\n• react-art: https://unpkg.com/react-art@16.12.0/umd/\r\n• react-dom: https://unpkg.com/react-dom@16.12.0/umd/\r\n• react-is: https://unpkg.com/react-is@16.12.0/umd/\r\n• react-test-renderer: https://unpkg.com/react-test-renderer@16.12.0/umd/\r\n• scheduler: https://unpkg.com/scheduler@0.18.0/umd/"
    },
    "commits": [
      {
        "sha": "8075c8505b20b2b4418a64ad2fa626231d6d1ebf",
        "commit": {
          "message": "Update local package versions for 16.10 release"
        }
      },
      {
        "sha": "57b2fbb7417a88ab4c99cbe1e0b9def62e5cefd1",
        "commit": {
          "message": "Changelog for 16.11.0"
        }
      },
      {
        "sha": "9c02d26549054090042403c2284f30bd916df30d",
        "commit": {
          "message": "docs: Fixed a typo in readme.md (#17119)"
        }
      },
      {
        "sha": "f6b8d31a76cbbcbbeb2f1d59074dfe72e0c82806",
        "commit": {
          "message": "Rename createSyncRoot to createBlockingRoot (#17165)\n\n* Rename createSyncRoot to createBlockingRoot\r\n\r\n* Fix up"
        }
      },
      {
        "sha": "3f9c03675894e77e134cce971ae75926441adbce",
        "commit": {
          "message": "Typo fix in comment (#17111)"
        }
      },
      {
        "sha": "0f64703edf5970b12a878ea3b5e1e30ef1d71c74",
        "commit": {
          "message": "Update .mailmap (#17177)"
        }
      },
      {
        "sha": "3497ccc14929f6d69d8d48ef41d0b34d1751ce9d",
        "commit": {
          "message": "Add guard to handle modified React elements with non-string keys (#17164)"
        }
      },
      {
        "sha": "048879edadfc43de699765688e9ebfcdf4a681b7",
        "commit": {
          "message": "[react-interactions] Ensure props on scope query function is always object (#17212)"
        }
      },
      {
        "sha": "6cd365cac69682f778e00238d8aa5c69730c13af",
        "commit": {
          "message": "Don't treat the last row in hidden as deleted if already mounted (#17206)\n\nAlready mounted rows that resuspend may be considered as part of a tail\r\nif they're at the end. However, for purposes of the tail=\"...\" option\r\nthey don't get deleted. We deal with that in cutOffTailIfNeeded.\r\n\r\nHowever, if they're also the first to suspend in the \"hidden\" case, we have\r\na special case that deletes the actual rendered row. This needs to consider\r\nif that row was already mounted or things go wrong."
        }
      },
      {
        "sha": "f4e974d26e273c4eb58c0ffa9b479435bf598ea1",
        "commit": {
          "message": "Add Experimental Flight Infrastructure (#16398)\n\n* Add Flight Build and Unify HostFormat Config between Flight and Fizz\r\n\r\n* Add basic resolution of models\r\n\r\n* Add basic Flight fixture\r\n\r\nDemonstrates the streaming protocol.\r\n\r\n* Rename to flight-server to distinguish from the client parts\r\n\r\n* Add Flight Client package and entry point\r\n\r\n* Fix fixture"
        }
      },
      {
        "sha": "8eee0eb01ce3ead0f51ade75fdcf062a748d57a7",
        "commit": {
          "message": "Dispatch commands to both UIManagers from both renderers (#17211)\n\n* Dispatch commands to both UIManagers from both renderers\r\n\r\n* Merge test files"
        }
      },
      {
        "sha": "9a35adc96d6ff99de779aee52bb78d3c24f86c1d",
        "commit": {
          "message": "Only call Profiler onRender when a descendant had work (#17223)"
        }
      },
      {
        "sha": "515746c217ef97a1a5745f15bf9f1cae3c84d2c6",
        "commit": {
          "message": "Add findHostInstance_deprecated to the React Native Renderer (#17224)"
        }
      },
      {
        "sha": "bdcdb69a24612a4a6d88c39937968c32066ed5a6",
        "commit": {
          "message": "Rename findHostInstance_deprecated to findHostInstance_DEPRECATED (#17228)"
        }
      },
      {
        "sha": "d0fc0ba0a688950b8ab24a89f14888a19efa2444",
        "commit": {
          "message": "Revert \"Dispatch commands to both UIManagers from both renderers (#17211)\" (#17232)\n\nThis reverts commit 8eee0eb01ce3ead0f51ade75fdcf062a748d57a7."
        }
      },
      {
        "sha": "273679a78ca0e3561ad3eaac1349187aff8548ab",
        "commit": {
          "message": "DevTools standalone shell changes: (#17213)\n\n* DevTools standalone shell changes:\r\n\r\n1. Update React Native connection wording\r\n2. Tweak styles slightly\r\n\r\n* Tweaked standalone DevTools error warning text"
        }
      },
      {
        "sha": "a1ff9fd7bb919cfe8d18ce9c8b9315d74d0e3405",
        "commit": {
          "message": "Add CodeSandbox CI Config (#17175)\n\n* Add CodeSandbox CI Config\r\n\r\n* Add default sandbox to build\r\n\r\n* Make build more efficient and add scheduler\r\n\r\n* Force build\r\n\r\n* Add scheduler image\r\n\r\n* Add scheduler/tracing to the build\r\n\r\n* Force another build"
        }
      },
      {
        "sha": "6dc2734b41aef944e457eaa23ae218952fce0a54",
        "commit": {
          "message": "Codemod tests to `it.experimental` (#17243)\n\n`it.experimental` marks that a test only works in Experimental builds.\r\n\r\nIt also asserts that a test does *not* work in the stable builds. The\r\nmain benefit is that we're less likely to accidentally expose an\r\nexperimental API before we intend. It also forces us to un- mark an\r\nexperimental test once it become stable."
        }
      },
      {
        "sha": "a2e05b6c148b25590884e8911d4d4acfcb76a487",
        "commit": {
          "message": "[Scheduler] Delete old rAF implementation (#17252)\n\nWe've been using the message loop version for a while. Time to delete."
        }
      },
      {
        "sha": "36fd29f09fae82766207899ac31e462d8ee284e5",
        "commit": {
          "message": "Don't show empty (no work) commits in Profiler (#17253)"
        }
      },
      {
        "sha": "fadc97167f8d2387dfc2c7b2493ba9ffbbb35fcf",
        "commit": {
          "message": "[Flight] Add Client Infrastructure (#17234)\n\n* Change demo to server\r\n\r\n* Expose client in package.json\r\n\r\n* Reorganize tests\r\n\r\nWe don't want unit tests but instead test how both server and clients work\r\ntogether. So this merges server/client test files.\r\n\r\n* Fill in the client implementation a bit\r\n\r\n* Use new client in fixture\r\n\r\n* Add Promise/Uint8Array to lint rule\r\n\r\nI'll probably end up deleting these deps later but they're here for now."
        }
      },
      {
        "sha": "f4148b2561d468c292f184fb35b186efbc5dd758",
        "commit": {
          "message": "[Flight] Move around the Server side a bit (#17251)\n\n* Rename ReactFlightStreamer -> ReactFlightServer\r\n\r\n* Unify Browser/Node stream tests into one file and use the client reader\r\n\r\n* Defer to the actual ReactDOM for HTML rendering for now\r\n\r\nThis will need to use a variant of Fizz to do inline SSR in Flight.\r\nHowever, I don't want to build the whole impl right now but also don't\r\nwant to exclude the use case yet. So I outsource it to the existing\r\nrenderer. Ofc, this doesn't work with Suspense atm."
        }
      },
      {
        "sha": "62ef25077ed440947c19386f33c28db44e10de92",
        "commit": {
          "message": "Avoid bundling in ponyfill for Object.assign in use-subscription package (#17259)"
        }
      },
      {
        "sha": "6095993d461a58da14dae9866486359497af339e",
        "commit": {
          "message": "Types: findHostInstance_DEPRECATED returns React.ElementRef<HostComponent<mixed>> (#17265)\n\n* Types: findHostInstance_DEPRECATED returns React.ElementRef<HostComponent<mixed>>\r\n\r\n* Prettier"
        }
      },
      {
        "sha": "cb09dbe0ab0f42185c4892c045b0c32e04f6b9cb",
        "commit": {
          "message": "[react-interactions] Add handleSimulateChildBlur upon DOM node removal (#17225)\n\n* [react-interactions] Add handleSimulateChildBlur upon DOM node removal"
        }
      },
      {
        "sha": "0f3838a01b0fda0ac5fd054c6be13166697a113c",
        "commit": {
          "message": "Remove `debugRenderPhaseSideEffects` flag (#17270)\n\nThere are two similar flags, `debugRenderPhaseSideEffects` and\r\n`debugRenderPhaseSideEffectsForStrictMode`. The strict mode one is the\r\nonly one that is actually used. I think originally the theory is that\r\nwe would one day turn it on for all components, even outside strict\r\nmode. But what we'll do instead is migrate everyone to strict mode.\r\n\r\nThe only place `debugRenderPhaseSideEffects` was being used was in\r\nan internal test file. I rewrote those tests to use public APIs."
        }
      },
      {
        "sha": "053cf0fedc91a1507080afe43d3be354ec346e9e",
        "commit": {
          "message": "Fix react-is memo and lazy type checks (#17278)"
        }
      },
      {
        "sha": "4f02c93c7cb213355b3c7d2011e531431d1c6dd8",
        "commit": {
          "message": "Fix devtools displaying Anonymous for memo of ref-forwarding components (#17274)\n\n* [react-is] return correct typeOf value of forwardRef\r\n\r\n* [react-devtools-shared] use correct displayName of memo(forwardRef(Component))\r\n\r\n* [react-devtools-shared] add resolveFiberType and resolve fiber type of memo recursively\r\n\r\nResolving the fiber type of memo recursively before passing it to getDisplayName\r\nwill prevent it from displaying \"Anonymous\" as displayName for components\r\nwrapped with both memo and forwardRef: memo(forwardRef(Component))\r\n\r\n* rework resolveFiberType"
        }
      },
      {
        "sha": "cd1bdcd0672d87f275a6394b055dea1016a7f29d",
        "commit": {
          "message": "[react-interactions] Prevent duplicate onPress firing for keyboard Enter (#17266)\n\n* [react-interactions] Prevent duplicate onPress firing for keyboard Enter\r\n\r\n* address feedback"
        }
      },
      {
        "sha": "34527063083195558f98108cde10b5d6ad0d6865",
        "commit": {
          "message": "DevTools cleanup (#17283)\n\n1. Add a Store test for memo, lazy, and forwardRef components\r\n2. Remove dead code for React.lazy\r\n3. Update DT tests to include HOC badge names in the serialized store"
        }
      },
      {
        "sha": "f50f39b55fb09fc78c8fc2bd63d286c147fd30f2",
        "commit": {
          "message": "[Flight] Better compat with http.createServer (#17289)"
        }
      },
      {
        "sha": "dee03049f5690e23787f3ba1afd3150fb3540624",
        "commit": {
          "message": "[Flight] Basic Streaming Suspense Support (#17285)\n\n* Return whether to keep flowing in Host config\r\n\r\n* Emit basic chunk based streaming in the Flight server\r\n\r\nWhen something suspends a new chunk is created.\r\n\r\n* Add reentrancy check\r\n\r\nThe WHATWG API is designed to be pulled recursively.\r\n\r\nWe should refactor to favor that approach.\r\n\r\n* Basic streaming Suspense support on the client\r\n\r\n* Add basic suspense in example\r\n\r\n* Add comment describing the protocol that the server generates"
        }
      },
      {
        "sha": "ce4b3e998191445b2934f6846ee7661578ef6444",
        "commit": {
          "message": "[react-interactions] Add optional searchNodes to Scope.queryAllNodes (#17293)"
        }
      },
      {
        "sha": "e701632ad4112038c4dd8e7302b90c0bb3fc4f2b",
        "commit": {
          "message": "[react-interactions] Change unmount blur logic to a dedicated event (#17291)"
        }
      },
      {
        "sha": "61d3dd0e08a53eebeaf06537b84b78dedbc92168",
        "commit": {
          "message": "Update deepDiffer usage in React Native renderer (#17282)\n\n* Add RN prop diffing test with function values\r\n\r\n* Update RN deepDiffer mock\r\n\r\n* Explicitly ignore functions in RN prop differ"
        }
      },
      {
        "sha": "38dd17ab98ce288fd0d0b68682a6df0f0a49e158",
        "commit": {
          "message": "[RN] Hoist static deepDiffer options object (#17303)"
        }
      },
      {
        "sha": "6cb6b1d6682077852b48b7eae597df58e871ed23",
        "commit": {
          "message": "Add yarn build --unsafe-partial (#17316)\n\n* Add yarn build --partial\r\n\r\n* unsafe-partial"
        }
      },
      {
        "sha": "182f64f938d456b011e0139c07f35275e5d89c53",
        "commit": {
          "message": "[Flight] End-to-End Fixture (#17319)"
        }
      },
      {
        "sha": "be3bfa6fabccd2e76d3bb3841a67f6d8ede7892c",
        "commit": {
          "message": "[Flight] Basic Integration Test (#17307)\n\n* [Flight] Basic Integration Test\r\n\r\n* Just act()\r\n\r\n* Lint\r\n\r\n* Remove unnecessary acts\r\n\r\n* Use Concurrent Mode\r\n\r\n* it.experimental\r\n\r\n* Fix prod test by advancing time\r\n\r\n* Don't observe initial state"
        }
      },
      {
        "sha": "a7b4d51a20a00f0f60b113c3a02326ccf69aef82",
        "commit": {
          "message": "Warn when doing createRoot twice on the same node (another approach) (#17329)\n\n* Unify fields used for createRoot warning and event system\r\n\r\n* Warn when doing createRoot twice on the same node\r\n\r\n* Stricter check for modern roots\r\n\r\n* Unmark asynchronously\r\n\r\n* Fix Flow"
        }
      },
      {
        "sha": "b8f8258775211d2d3b1b144cc6c75148ecd4b8d8",
        "commit": {
          "message": "Split ReactDOM entry point (#17331)\n\n* Split ReactDOM entry point\r\n\r\n* BatchedRoot -> BlockingRoot"
        }
      },
      {
        "sha": "6cff70a740d1e6ad10070ebf88514bd3a49d0f0d",
        "commit": {
          "message": "[react-interactions] Expost host instance to Scope Query function (#17341)"
        }
      },
      {
        "sha": "01bce8c24843b02a0082edb55d3cd4763e7a956d",
        "commit": {
          "message": "Change legacy-events plugin nativeEventTarget to allow null (#17344)"
        }
      },
      {
        "sha": "2c6ea0b3ffffd1a110845327262ecea59ee48dab",
        "commit": {
          "message": "[Native] Add FeatureFlag to dispatch events with instance targets (#17323)\n\n* [Native] Add FeatureFlag to dispatch events with instance targets\r\n\r\n* Prettier"
        }
      },
      {
        "sha": "3dcec3a9258e644f5409405ed22103fa1a90b10d",
        "commit": {
          "message": "[Native] Add FeatureFlag to dispatch events with instance currentTarget (#17345)\n\n* [Native] Add FeatureFlag to dispatch events with instance targets\r\n\r\n* Prettier\r\n\r\n* [Native] Change currentTarget to be an instance behind a flag 2/2"
        }
      },
      {
        "sha": "ade764157ff7ff27ab11ed8b61791a7edef8e683",
        "commit": {
          "message": "[Native] If statement cleanup for null targets (#17346)"
        }
      },
      {
        "sha": "f4cc45ce962adc9f307690e1d5cfa28a288418eb",
        "commit": {
          "message": "[Fresh] Add options to configure RefreshSig and RefreshReg identifiers (#17340)"
        }
      },
      {
        "sha": "b53ea6ca05d2ccb9950b40b33f74dfee0421d872",
        "commit": {
          "message": "[Bugfix] Passive effects triggered by synchronous renders in a multi-root app (#17347)\n\n* Regression test: Effects dropped across roots\r\n\r\nSee #17066\r\n\r\n* [Bugfix] Passive effects loop\r\n\r\nThe bug\r\n-------\r\n\r\nIn a multi-root app, certain passive effects (`useEffect`) are never\r\nfired. See #17066.\r\n\r\nThe underlying problem\r\n----------------------\r\n\r\nThe implicit contract of `flushPassiveEffects` is that, right after\r\ncalling it, there should be no pending passive effects. In the normal\r\ncase, in concurrent mode, this is true. But the current implementation\r\nfails to account for the case where a passive effect schedules\r\nsynchronous work, which in turn schedules additional passive effects.\r\n\r\nThis led to `rootWithPendingPassiveEffects` being overwritten in the\r\ncommit phase, because an assignment that assumed it was replacing null\r\nwas actually replacing a reference to another root, which has the\r\nconsequence of dropping passive effects on that root.\r\n\r\nThe fix\r\n-------\r\n\r\nThe fix I've chosen here is, at the beginning of the commit phase, keep\r\nflushing passive effects in a loop until there are no more.\r\n\r\nThis doesn't not change the \"public\" implementation of\r\n`flushPassiveEffects`, though it arguably should work this way, too. I\r\nsay \"public\" because it's only used by implementation layers on top of\r\nReact which we control: mainly, the legacy version of `act` that does\r\nnot use the mock Scheduler build. So there's probably still a bug\r\nin that `act` implementation.\r\n\r\nI will address `act` in a follow-up. The ideal solution is to replace\r\nthe legacy `act` with one implemented directly in the renderer, using a\r\nspecial testing-only build of React DOM. Since that requires a breaking\r\nchange, we'll need an interim solution. We could make the \"public\" `act`\r\nrecursively flush effects in a loop, as I've done for the commit phase.\r\nHowever, I think a better solution is to stop automatically flushing the\r\nsynchronous update queue at the end of `flushPassiveEffects`, and\r\ninstead require the caller to explicitly call `flushSyncUpdateQueue` (or\r\nthe equivalent) if needed. This follows the same pattern we use\r\ninternally in the work loop, which is designed to avoid factoring\r\nhazards like the one that resulted in this bug."
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.11.0",
      "body": "### React DOM\r\n\r\n* Fix `mouseenter` handlers from firing twice inside nested React containers. [@yuanoook](https://github.com/yuanoook) in [#16928](https://github.com/facebook/react/pull/16928)\r\n* Remove `unstable_createRoot` and `unstable_createSyncRoot` experimental APIs. (These are available in the Experimental channel as `createRoot` and `createSyncRoot`.) ([@acdlite](http://github.com/acdlite) in [#17088](https://github.com/facebook/react/pull/17088))\r\n\r\n## Artifacts\r\n\r\n• react: https://unpkg.com/react@16.11.0/umd/\r\n• react-art: https://unpkg.com/react-art@16.11.0/umd/\r\n• react-dom: https://unpkg.com/react-dom@16.11.0/umd/\r\n• react-is: https://unpkg.com/react-is@16.11.0/umd/\r\n• react-test-renderer: https://unpkg.com/react-test-renderer@16.11.0/umd/\r\n• scheduler: https://unpkg.com/scheduler@0.17.0/umd/\r\n"
    },
    "commits": [
      {
        "sha": "49b0cb6db8e4a32b6523d5e538578d9d9c6db592",
        "commit": {
          "message": "Moving backend injection to the content script (#16900)"
        }
      },
      {
        "sha": "b9811ed5bc710f6318eed6292ad76e4874ac7f99",
        "commit": {
          "message": "[react-interactions] Add wrapping support to FocusList/FocusTable (#16903)"
        }
      },
      {
        "sha": "84e83db1ee6303bc31120af59e20750a0fa299bc",
        "commit": {
          "message": "Updated DevTools CHANGELOG"
        }
      },
      {
        "sha": "b6606ecba80b591ea66db1e2ee1fed72befb4c32",
        "commit": {
          "message": "DevTools shows unsupported renderer version dialog (#16897)\n\n* DevTools shows unsupported renderer version dialog\r\n\r\n* Optimistic CHANGELOG udpate"
        }
      },
      {
        "sha": "a9cd9a765b64fe0048d4f4ce16a535c299240479",
        "commit": {
          "message": "DevTools v4.1.0 -> v4.1.1"
        }
      },
      {
        "sha": "fad5102101e4b34bbd004a9044ae5e46581231ed",
        "commit": {
          "message": "[bugfix] Fix false positive render phase update (#16907)\n\nNeed to reset the current \"debug phase\" inside the catch block.\r\nOtherwise React thinks we're still in the render phase during the\r\nsubsequent event."
        }
      },
      {
        "sha": "db8afe4f6318dba422177a2054204ef089570ad8",
        "commit": {
          "message": "Add HostComponent type to ReactNative (#16898)\n\n* Add HostComponent type to ReactNative\r\n\r\n* Use type alias imports instead of wildcard\r\n\r\n* Fix forgotten Object in measureLayout type"
        }
      },
      {
        "sha": "c8dc7a926e9e5ec0dcf779e91a3730d4069a22a1",
        "commit": {
          "message": "expose isHydrating (#16909)\n\nexpose isHydrating for FB"
        }
      },
      {
        "sha": "93f5f11b79312cc09cdb4cbd8834330a6eebb3c1",
        "commit": {
          "message": "Update local version numbers for 16.10 release"
        }
      },
      {
        "sha": "7dc83a61005319f8e473c00046bfe0f1c7b53eb9",
        "commit": {
          "message": "Changelog for 16.10"
        }
      },
      {
        "sha": "f553515d1ec7049ac85de3a75bc2850a9d4ab70d",
        "commit": {
          "message": "Fix heading level in changelog"
        }
      },
      {
        "sha": "d1121c0174f541435b0619794410e0fb11774bd4",
        "commit": {
          "message": "[react-interactions] Fix virtual click heuristic (#16915)"
        }
      },
      {
        "sha": "d4278663c681ab4b3c3ebb36a19532b43a7c2813",
        "commit": {
          "message": "Replaced === check with Object.is() to support values like NaN (#16934)"
        }
      },
      {
        "sha": "5184346daf5f33fbd3eed388c57e72c638df614a",
        "commit": {
          "message": "DevTools v4.1.1 -> v4.1.2"
        }
      },
      {
        "sha": "b550679617f9fbc92ed853abe3ee94d7aa538425",
        "commit": {
          "message": "Fixed typo in DevTools CHANGELOG"
        }
      },
      {
        "sha": "fe31cc710ec0a768bbeb9f382ec3055a09c97149",
        "commit": {
          "message": "[Selective Hydration] Increase priority for non-synchronous discrete events and retries (#16935)\n\n* Increase retryTime for increased priority dehydrated boundaries\r\n\r\n* Increaese the priority to user blocking for every next discrete boundary"
        }
      },
      {
        "sha": "9d637844e9761a29a49bc53a9b41244d683f89e3",
        "commit": {
          "message": "Remove enableUserBlockingEvents flag (#16882)\n\nSeems like this worked out. We can clean up the flag now."
        }
      },
      {
        "sha": "d8a76ad5804197108f18b988f6d13c767ab41387",
        "commit": {
          "message": "Allow Suspense Mismatch on the Client to Silently Proceed (#16943)\n\n* Regression test: Suspense + hydration + legacy\r\n\r\n* Allow Suspense Mismatch on the Client to Silently Proceed\r\n\r\nThis fixes but isn't actually the semantics that we want this case to have."
        }
      },
      {
        "sha": "22019ef5a2a87ea459bb513634534315f3a2cfa0",
        "commit": {
          "message": "Changelog for v16.10.1"
        }
      },
      {
        "sha": "2a264a9dbe654f9ec29c601097913a9afc76d361",
        "commit": {
          "message": "Update local version numbers for 16.10.1 release"
        }
      },
      {
        "sha": "d3622d0f977def825123f1d5f4cef19888b1eaf1",
        "commit": {
          "message": "chore: updated comment message (#16949)"
        }
      },
      {
        "sha": "10c7dfe3b4acef516b657188e7e1fca72ed91922",
        "commit": {
          "message": "[react-interactins] FocusTable tabScope handling+tabIndex control (#16922)"
        }
      },
      {
        "sha": "ac8e8b3278c69ddb6267ca0658c49af34cc4e785",
        "commit": {
          "message": "[react-interactions] Add tab handling to FocusList (#16958)"
        }
      },
      {
        "sha": "6a3de7a414b25ef3933a6f418a442ab720b8dcd5",
        "commit": {
          "message": "[DevTools] postMessage target origin needs to be '*' for local files (#16953)"
        }
      },
      {
        "sha": "6c73a1e7764dc453e8503c10181fd38eac597451",
        "commit": {
          "message": "Updated DevTools CHANGELOG"
        }
      },
      {
        "sha": "2c8832075b05009bd261df02171bf9888ac76350",
        "commit": {
          "message": "React DevTools v4.1.2 -> v.4.1.3"
        }
      },
      {
        "sha": "05dc814cf061796c54e3aab7dd18a1b54615fc6b",
        "commit": {
          "message": "Remove IIFE wrappers from dev invariant checks (#16963)\n\nThe error transform works by replacing calls to `invariant` with\r\nan `if` statement.\r\n\r\nSince we're replacing a call expression with a statement, Babel wraps\r\nthe new statement in an immediately-invoked function expression (IIFE).\r\nThis wrapper is unnecessary in practice because our `invariant` calls\r\nare always part of their own expression statement.\r\n\r\nIn the production bundle, the function wrappers are removed by Closure.\r\nBut they remain in the development bundles.\r\n\r\nThis commit updates the transform to confirm that an `invariant` call\r\nexpression's parent node is an expression statement. (If not, it throws\r\na transform error.)\r\n\r\nThen, it replaces the expression statement instead of the expression\r\nitself, effectively removing the extraneous IIFE wrapper."
        }
      },
      {
        "sha": "b34f042e5b6fa30c645b71d38a0b1ecf785af2cc",
        "commit": {
          "message": "Fix mouseenter handlers fired twice (#16928)"
        }
      },
      {
        "sha": "34457729a6b78bd319a8082cff032dd55e47c2e8",
        "commit": {
          "message": "[react-interactions] Add allowModifiers flag to FocusList + FocusTable (#16971)"
        }
      },
      {
        "sha": "f6efb224b091a741fad1bc7916b5936ff91f85fe",
        "commit": {
          "message": "[react-interactions] Tap cancels on second pointerdown (#16936)\n\nThis patch causes onTapCancel to be called whenever a second pointer interacts\r\nwith the responder target."
        }
      },
      {
        "sha": "ab1a4f249e61045d523ddbbfb840e868afbbf785",
        "commit": {
          "message": "Move eventSystemFlags to last argument in event plugin extractors (#16978)\n\nFix for necolas/react-native-web#1443"
        }
      },
      {
        "sha": "10277cc5ba3fa1dfca8aac02c375d79f3cabd337",
        "commit": {
          "message": "Remove unused canonical check in fiber host component (#16914)"
        }
      },
      {
        "sha": "bb680a09052b5af6543daf28bfcc3283bbc35cf9",
        "commit": {
          "message": "[Selective Hydration] Prioritize the last continuous target (#16937)\n\n* Prioritize the last continuous target\r\n\r\nThis ensures that the current focus target is always hydrated first.\r\n\r\nSlightly higher than the usual Never expiration time used for hydration.\r\nThe priority increases with each new queued item so that the last always\r\nwins.\r\n\r\n* Don't export the moving target\r\n\r\nIt's not useful for comparison purposes anyway."
        }
      },
      {
        "sha": "de2edc268db827f5110fc56cba240b7eb7301787",
        "commit": {
          "message": "update hideOrUnhideAllChildren to hide portals that aren't wrapped in a host component (#16992)\n\nCurrently, when a node suspends, if its subtree contains a portal, the portal is not hidden. This hides portals in the subtree when it's not wrapped in a host component ."
        }
      },
      {
        "sha": "b33633d932d070c1665f2c8700b025e7da6fbd5d",
        "commit": {
          "message": "[react-interactions] Repurpose React a11y modules (#16997)"
        }
      },
      {
        "sha": "4c5698400f04bbc6d0b4bd766b0993d0bcb37609",
        "commit": {
          "message": "[react-interactions] Remove context.setTimeout & context.clearTimeout (#17000)"
        }
      },
      {
        "sha": "5943b1da6cb49476ee79dd3c06b10d0bd299bfe0",
        "commit": {
          "message": "Fixing grammatical errors in error message (#16973)\n\n* Fixing grammatical errors in error message\r\n\r\n* Fixing grammar error in test file"
        }
      },
      {
        "sha": "e09097a75da040f428ca335e9d181186a61247d1",
        "commit": {
          "message": "chore: upgrade to jest 24 (#15778)\n\n* chore: upgrade to jest 24\r\n\r\n* download react-is from npm manually"
        }
      },
      {
        "sha": "0545f366d4d6b5959f4bb172e810c745f74b9513",
        "commit": {
          "message": "Added trace updates feature (DOM only) (#16989)\n\n* Added trace updates feature (DOM only)\r\n* Updated DevTools CHANGELOG"
        }
      },
      {
        "sha": "a8b8ffb894b19b5a4bc174f8ee59487ed1fe98ff",
        "commit": {
          "message": "DevTools v4.1.3 -> v4.2.0"
        }
      },
      {
        "sha": "d256f88ac64606be7cf6182c55bfe75af7d03bc8",
        "commit": {
          "message": "Update local version numbers for 16.10.2 release"
        }
      },
      {
        "sha": "abedf17597bd4e4c4d922a9b083bbaabb6e62a86",
        "commit": {
          "message": "Changelog for v16.10.2"
        }
      },
      {
        "sha": "26ba38ae4b65375b97b561ec2d6a58ef597647ed",
        "commit": {
          "message": "[EnterLeaveEventPlugin] Fix bug when dealing with unhandled DOM nodes (#17006)"
        }
      },
      {
        "sha": "3a2b5f148d450c69aab67f055fc441d294c23518",
        "commit": {
          "message": "[Selective Hydration] ReactDOM.unstable_scheduleHydration(domNode) (#17004)\n\nAdds an API to explicitly prioritize hydrating the path to a particular DOM node without relying on events to do it.\r\n\r\nThe API uses the current scheduler priority to schedule it. For the same priority, the last one wins. This allows a similar effect as continuous events. This is useful for example to hydrate based on scroll position, or prioritize components that will upgrade to client-rendered-only content.\r\n\r\nI considered having an API that explicitly overrides the current target(s). However that makes it difficult to coordinate across components in an app.\r\n\r\nThis just hydrates one target at a time but if it is blocked on I/O we could consider increasing priority of later targets too."
        }
      },
      {
        "sha": "4bc52ef0dfbb0389cc20b65cef0645afb7b85445",
        "commit": {
          "message": "Revert \"update hideOrUnhideAllChildren to hide portals that aren't wrapped in a host component (#16992)\" (#17011)\n\nThis reverts commit de2edc268db827f5110fc56cba240b7eb7301787."
        }
      },
      {
        "sha": "fff5b1ca773c36d0aa221689d31fee79b0498495",
        "commit": {
          "message": "[react-interactions] Add FocusTable colSpan support (#17019)"
        }
      },
      {
        "sha": "a011aacafa7623bf14654713b130542b4bd2aedb",
        "commit": {
          "message": "[react-interactions] Remove FB builds of a11y components (#17030)"
        }
      },
      {
        "sha": "55731fd8ce7d36a482a50a120cd4da0584ce49de",
        "commit": {
          "message": "[react-interactions] Refine a11y component flow types (#17032)"
        }
      },
      {
        "sha": "cd1b167ad40c5c62cf2a0b32451fe2aebb669d08",
        "commit": {
          "message": "[Scheduler Profiler] Use microsecond precision (#17010)\n\nThe `performance.now` returns a timestamp in milliseconds as a float.\r\nThe browser has the option to adjust the precision of the float, but\r\nit's usually more precise than a millisecond. However, this precision\r\nis lost when the timestamp is logged by the Scheduler profiler, because\r\nwe store the numbers in an Int32Array.\r\n\r\nThis change multiplies the millisecond float value by 1000, giving us\r\nthree more degrees of precision."
        }
      },
      {
        "sha": "71d012ecd07baef6f53d02bebd720794f75266ca",
        "commit": {
          "message": "Remove dormant createBatch experiment (#17035)\n\n* Remove dormant createBatch experiment\r\n\r\nIn a hybrid React app with multiple roots, `createBatch` is used to\r\ncoordinate an update to a root with its imperative container.\r\n\r\nWe've pivoted away from multi-root, hybrid React apps for now to focus\r\non single root apps.\r\n\r\nThis PR removes the API from the codebase. It's possible we'll add back\r\nsome version of this feature in the future.\r\n\r\n* Remove unused export"
        }
      },
      {
        "sha": "5a71cbe7a9e192c23b847be6e0c575b6705f6939",
        "commit": {
          "message": "Remove unused export\n\nMeant to do this in e4b21be but neglected to `git add` the changes."
        }
      },
      {
        "sha": "b71ab61c8f06b7d1c415a0354db607bf2772473e",
        "commit": {
          "message": "[react-interactions] Adds more experimental Scope API methods (#17042)"
        }
      },
      {
        "sha": "4be45be5ff4b26892bab83b5f9022afac1a664fb",
        "commit": {
          "message": "Stop warning about setNativeProps being deprecated (#17045)\n\n* Stop warning about setNativeProps being deprecated\r\n\r\n* Remove ReactNative.setNativeProps\r\n\r\n* Remove more Fabric tests"
        }
      },
      {
        "sha": "22b2642a565cf9160bbf660ab030d07d8273879e",
        "commit": {
          "message": "DevTools test shell tweaks (#17054)\n\n* Updated DevTools shell ignore warning message to account for recent changes in warning text\r\n\r\n* Update DevTools console patching to patch the parent window's console rather than the iframe, to more accurately simulate real usage environment"
        }
      },
      {
        "sha": "0ac8e563d0bdbbbfe12d718710b3959e78d507dd",
        "commit": {
          "message": "[react-interactions] Add getInstanceFromNode support to TestHostRenderer (#17065)\n\nFix bad WeakMap key case\r\n\r\nFix bad WeakMap key case"
        }
      },
      {
        "sha": "75955bf1d7ff6c2c1f4052f4a84dd2ce6944c62e",
        "commit": {
          "message": "Pass prod error messages directly to constructor (#17063)\n\n* Remove \"Invariant Violation\" from dev errors\r\n\r\nWhen I made the change to compile `invariant` to throw expressions, I\r\nleft a small runtime to set the error's `name` property to \"Invariant\r\nViolation\" to maintain the existing behavior.\r\n\r\nI think we can remove it. The argument for keeping it is to preserve\r\ncontinuity in error logs, but this only affects development errors,\r\nanyway: production error messages are replaced with error codes.\r\n\r\n* Pass prod error messages directly to constructor\r\n\r\nUpdates the `invariant` transform to pass an error message string\r\ndirectly to the Error constructor, instead of mutating the\r\nmessage property.\r\n\r\nTurns this code:\r\n\r\n```js\r\ninvariant(condition, 'A %s message that contains %s', adj, noun);\r\n```\r\n\r\ninto this:\r\n\r\n```js\r\nif (!condition) {\r\n  throw Error(\r\n    __DEV__\r\n      ? `A ${adj} message that contains ${noun}`\r\n      : formatProdErrorMessage(ERR_CODE, adj, noun)\r\n  );\r\n}\r\n```"
        }
      },
      {
        "sha": "d5b54d0c35fa7c1b1e5989239478b365493965df",
        "commit": {
          "message": "[SuspenseList] Fix bugs with dropped Promises (#17082)\n\n* Transfer any pending promises from inner boundary to list\r\n\r\nFor non-hidden modes, this boundary should commit so this shouldn't be\r\nneeded but the nested boundary can make a second pass which forces these\r\nto be recreated without resuspending. In this case, the outer list assumes\r\nthat it can collect the inner promises to still rerender if needed.\r\n\r\n* Propagate suspense \"context\" change to nested SuspenseLists\r\n\r\nThis means that we always rerender any nested SuspenseLists together.\r\n\r\nThis bug looks similar to the previous one but is not based on the lack of\r\nretry but that the retry only happens on the outer boundary but the inner\r\ndoesn't get a retry ping since it didn't know about its own promise after\r\nthe second pass."
        }
      },
      {
        "sha": "d364d8555f0c2c44e8fb624068b9fff30d5908ae",
        "commit": {
          "message": "Set up experimental builds (#17071)\n\n* Don't bother including `unstable_` in error\r\n\r\nThe method names don't get stripped out of the production bundles\r\nbecause they are passed as arguments to the error decoder.\r\n\r\nLet's just always use the unprefixed APIs in the messages.\r\n\r\n* Set up experimental builds\r\n\r\nThe experimental builds are packaged exactly like builds in the stable\r\nrelease channel: same file structure, entry points, and npm package\r\nnames. The goal is to match what will eventually be released in stable\r\nas closely as possible, but with additional features turned on.\r\n\r\nVersioning and Releasing\r\n------------------------\r\n\r\nThe experimental builds will be published to the same registry and\r\npackage names as the stable ones. However, they will be versioned using\r\na separate scheme. Instead of semver versions, experimental releases\r\nwill receive arbitrary version strings based on their content hashes.\r\nThe motivation is to thwart attempts to use a version range to match\r\nagainst future experimental releases. The only way to install or depend\r\non an experimental release is to refer to the specific version number.\r\n\r\nBuilding\r\n--------\r\n\r\nI did not use the existing feature flag infra to configure the\r\nexperimental builds. The reason is because feature flags are designed\r\nto configure a single package. They're not designed to generate multiple\r\nforks of the same package; for each set of feature flags, you must\r\ncreate a separate package configuration.\r\n\r\nInstead, I've added a new build dimension called the **release\r\nchannel**. By default, builds use the **stable** channel. There's\r\nalso an **experimental** release channel. We have the option to add more\r\nin the future.\r\n\r\nThere are now two dimensions per artifact: build type (production,\r\ndevelopment, or profiling), and release channel (stable or\r\nexperimental). These are separate dimensions because they are\r\ncombinatorial: there are stable and experimental production builds,\r\nstable and experimental developmenet builds, and so on.\r\n\r\nYou can add something to an experimental build by gating on\r\n`__EXPERIMENTAL__`, similar to how we use `__DEV__`. Anything inside\r\nthese branches will be excluded from the stable builds.\r\nThis gives us a low effort way to add experimental behavior in any\r\npackage without setting up feature flags or configuring a new package."
        }
      },
      {
        "sha": "a8c6a1b34e93f88f285a1a042bf473f39a30c886",
        "commit": {
          "message": "Update release scripts to support experimental releases (#17086)\n\n* Download correct artifacts for release channel\r\n\r\nExperimental builds should pull artifacts from the\r\n`process_artifacts_experimental` job.\r\n\r\nI think instead of two separate CI workflows, a better approach might\r\nbe to build stable artifacts to the `build` directory and the\r\nexperimental artifacts to a `build_experimental` directory, and\r\ngenerate both within the same workflow. This would take some work since\r\nlots of things assume the output directory is `build`, but something\r\nto consider in the future.\r\n\r\n* Prevent experimental promotion to stable\r\n\r\nAdds a check to the `prepare-stable` script to prevent experimental\r\nbuilds from being published using stable semver versions."
        }
      },
      {
        "sha": "fdba0e5ce75f1cf1f82f2937f351bbfdcaadbcc5",
        "commit": {
          "message": "Fixed a bug with illegal invocation for Trusted Types (#17083)\n\n* Fixed a bug with illegal invocation.\r\n\r\n* Fixed the test."
        }
      },
      {
        "sha": "e7704e22a146c2d5b00f8c6bfa6255153272f053",
        "commit": {
          "message": "[babel-plugin-react-jsx] Avoid duplicate \"children\" key in props object (#17094)\n\n* [babel-plugin-react-jsx] Avoid duplicate \"children\" key in props object\r\n\r\n* Use Object.assign approach"
        }
      },
      {
        "sha": "4cb399a433771c84e861d5ca3d38a24733d23ad8",
        "commit": {
          "message": "[react-interactions] Modify Scope query mechanism (#17095)"
        }
      },
      {
        "sha": "30c5daf943bd3bed38e464ac79e38f0e8a27426b",
        "commit": {
          "message": "Remove concurrent apis from stable (#17088)\n\n* Tests run in experimental mode by default\r\n\r\nFor local development, you usually want experiments enabled. Unless\r\nthe release channel is set with an environment variable, tests will\r\nrun with __EXPERIMENTAL__ set to `true`.\r\n\r\n* Remove concurrent APIs from stable builds\r\n\r\nThose who want to try concurrent mode should use the experimental\r\nbuilds instead.\r\n\r\nI've left the `unstable_` prefixed APIs in the Facebook build so we\r\ncan continue experimenting with them internally without blessing them\r\nfor widespread use.\r\n\r\n* Turn on SSR flags in experimental build\r\n\r\n* Remove prefixed concurrent APIs from www build\r\n\r\nInstead we'll use the experimental builds when syncing to www.\r\n\r\n* Remove \"canary\" from internal React version string"
        }
      },
      {
        "sha": "9123c479f4f3a21f897a923aeb33bf0499f4891f",
        "commit": {
          "message": "Enable concurrent APIs in all experimental forks (#17102)\n\nForgot to update the flags in the forked modules."
        }
      },
      {
        "sha": "43562455c992cfc614f4301473443e1360baf7b5",
        "commit": {
          "message": "Temporary patch www fork with prefixed APIs (#17103)\n\nI'm doing this here instead of in the downstream repo so that if the\r\nsync diff gets reverted, it doesn't revert this, too.\r\n\r\nOnce the sync has landed, and the callers are updated in www, I will\r\nremove this."
        }
      },
      {
        "sha": "3ac0eb075d82b19a912c6665eb4f6adb9245cbcb",
        "commit": {
          "message": "Modify Babel React JSX Duplicate Children Fix (#17101)\n\nIf a JSX element has both a children prop and children (ie. <div children={childOne}>{childTwo}</div>), IE throws an Multiple definitions of a property not allowed in strict mode. This modifies the previous fix (which used an Object.assign) by making the duplicate children a sequence expression on the next prop/child instead so that ordering is preserved. For example:\r\n\r\n```\r\n<Component children={useA()} foo={useB()} children={useC()}>{useD()}</Component>\r\n```\r\nshould compile to\r\n```\r\nReact.jsx(Component, {foo: (useA(), useB()), children: (useC(), useD)})\r\n```"
        }
      },
      {
        "sha": "2c832b4dcfa5406be1b16c03c78198e84380fc2e",
        "commit": {
          "message": "Separate sizebot for experimental builds (#17100)\n\nConfigures the sizebot to leave a second comment that tracks the\r\nexperimental build artifacts."
        }
      },
      {
        "sha": "6ff23f2a5da0e60fa008cef97529469945618d06",
        "commit": {
          "message": "Change retry priority to \"Never\" for dehydrated boundaries (#17105)\n\nThis changes the \"default\" retryTime to NoWork which schedules at Normal\r\npri.\r\n\r\nDehydrated bouundaries normally hydrate at Never priority except when they\r\nretry where we accidentally increased them to Normal because Never was used\r\nas the default value. This changes it so NoWork is the default.\r\n\r\nDehydrated boundaries however get initialized to Never as the default.\r\n\r\nTherefore they now hydrate as Never pri unless their priority gets\r\nincreased by a forced rerender or selective hydration.\r\n\r\nThis revealed that erroring at this Never priority can cause an infinite\r\nrerender. So I fixed that too."
        }
      },
      {
        "sha": "d7feeb25ac8cc23133c294fa01932658023130c0",
        "commit": {
          "message": "unstable_createRoot -> createRoot in test (#17107)\n\nFixes test added in #17105, which was based on an earler commit than the\r\none that removed the `unstable_` prefix from `createRoot`."
        }
      },
      {
        "sha": "916937563b4a71f2a61a75699f06122a544f4542",
        "commit": {
          "message": "[react-interactions] Add onFocusWithin event to FocusWithin responder (#17115)"
        }
      },
      {
        "sha": "ed5f010ae51db1544ce92e1a5105e870b5a5098e",
        "commit": {
          "message": "Client render Suspense content if there's no boundary match (#16945)\n\nWithout the enableSuspenseServerRenderer flag there will never be a boundary match. Also when it is enabled, there might not be a boundary match if something was conditionally rendered by mistake.\r\n\r\nWith this PR it will now client render the content of a Suspense boundary in that case and issue a DEV only hydration warning. This is the only sound semantics for this case.\r\n\r\nUnfortunately, landing this will once again break #16938. It will be less bad though because at least it'll just work by client rendering the content instead of hydrating and issue a DEV only warning.\r\n\r\nHowever, we must land this before enabling the enableSuspenseServerRenderer flag since it does this anyway.\r\n\r\nI did notice that we special case fallback={undefined} due to our unfortunate semantics for that. So technically a workaround that works is actually setting the fallback to undefined on the server and during hydration. Then flip it on only after hydration. That could be a workaround if you want to be able to have a Suspense boundary work only after hydration for some reason.\r\n\r\nIt's kind of unfortunate but at least those semantics are internally consistent. So I added a test for that."
        }
      },
      {
        "sha": "7cec15155ac2bb9d8c61dc8ab1951c6226c5cd3b",
        "commit": {
          "message": "Remove prefixed concurrent APIs from www build (#17108)\n\nThe downstream callers have been updated, so we can remove these."
        }
      },
      {
        "sha": "8facc0537390bbdd52359f693ecf445e6f787174",
        "commit": {
          "message": "[react-interactions] Allow event.preventDefault on LegacyPress responder (#17113)\n\n[react-interactions] Allow event.preventDefault on LegacyPress responder"
        }
      },
      {
        "sha": "4fb5bf61dd52473330fb5b3fdf0ffc091054a28c",
        "commit": {
          "message": "[react-interactions] Fix focus-visible heuristic (#17124)\n\nRespond to all keys not just `Tab`"
        }
      },
      {
        "sha": "4eeee358e12c1408a4b40830bb7bb6956cf26b47",
        "commit": {
          "message": "[SuspenseList] Store lastEffect before rendering (#17131)\n\n* Add a failing test for SuspenseList bug\r\n\r\n* Store lastEffect before rendering\r\n\r\nWe can't reset the effect list to null because we don't rereconcile the\r\nchildren so we drop deletion effects if we do that.\r\n\r\nInstead we store the last effect as it was before we started rendering\r\nso we can go back to where it was when we reset it.\r\n\r\nWe actually already do something like this when we delete the last row\r\nfor the tail=\"hidden\" mode so we had a field available for it already."
        }
      },
      {
        "sha": "0b61e26983c20b0a4facb50857133cde4a28555f",
        "commit": {
          "message": "Update RN typings for a shim (#17138)"
        }
      },
      {
        "sha": "685ed561f22ea062281a4c570c7067e6020457c4",
        "commit": {
          "message": "Migrate useDeferredValue and useTransition (#17058)\n\nMigrated useDeferredValue and useTransition from Facebook's www repo into ReactFiberHooks."
        }
      },
      {
        "sha": "c47f59331ee94b1d04f974f075373d368a8c8ab3",
        "commit": {
          "message": "Move SuspenseList to experimental package (#17130)\n\nAlso moves `withSuspenseConfig`"
        }
      },
      {
        "sha": "7082d5a2db5c1e5f49a62aecd90b6858f957da5e",
        "commit": {
          "message": "Don't build non-experimental www bundles (#17139)\n\nReduces the likelihood we'll accidentally sync the wrong ones."
        }
      },
      {
        "sha": "093de5fb43b32c2f587460341d7d35b8947c8fb4",
        "commit": {
          "message": "Lint experimental build artifacts (#17141)\n\nAdds `lint_build` job to the experimental workflow"
        }
      },
      {
        "sha": "3059ab3523d2462635afe4e53629b640b8ef9560",
        "commit": {
          "message": "Add experimental instructions to release README (#17143)"
        }
      },
      {
        "sha": "68fb58029d818979804677a4d1063eb71f2934f4",
        "commit": {
          "message": "Remove unstable_ prefix in various internal uses (#17146)\n\n* Rename unstable_createRoot in DevTools\r\n\r\n* Rename createSyncRoot in warning"
        }
      },
      {
        "sha": "3cc564547c81b6e9a3bd6a04aa0725e668ca6559",
        "commit": {
          "message": "SuspenseList support in DevTools (#17145)\n\n* SuspenseList support in DevTools\r\n\r\nThis adds SuspenseList tags to DevTools so that the name properly shows\r\nup.\r\n\r\nIt also switches to use the tag instead of Symbol type for Suspense\r\ncomponents. We shouldn't rely on the type for any built-ins since that\r\nfield will disappear from the fibers. How the Fibers get created is an\r\nimplementation detail that can change e.g. with a compiler or if we\r\nuse instanceof checks that are faster than symbol comparisons.\r\n\r\n* Add SuspenseList test to shell app"
        }
      },
      {
        "sha": "edc234c730731436fdc4d51bb6cef9de3561facc",
        "commit": {
          "message": "Build script should default to experimental (#17144)\n\n`yarn build` defaults to building in experimental mode. To opt-out, set\r\nthe `RELEASE_CHANNEL` environment variable to `stable`. This is the same\r\nas what we do when running tests via `yarn test`, to make local\r\ndevelopment easier."
        }
      },
      {
        "sha": "349cf5acc3cda0010fa464a3c959c83a78a24bd7",
        "commit": {
          "message": "Experimental test helper: `it.experimental` (#17149)\n\nSpecial version of Jest's `it` for experimental tests. Tests marked as\r\nexperimental will run **both** stable and experimental modes. In\r\nexperimental mode, they work the same as the normal Jest methods. In\r\nstable mode, they are **expected to fail**. This means we can detect\r\nwhen a test previously marked as experimental can be un-marked when the\r\nfeature becomes stable. It also reduces the chances that we accidentally\r\nadd experimental APIs to the stable builds before we intend.\r\n\r\nI added corresponding methods for the focus and skip APIs:\r\n\r\n- `fit` -> `fit.experimental`\r\n- `it.only` -> `it.only.experimental` or `it.experimental.only`\r\n- `xit` -> `xit.experimental`\r\n- `it.skip` -> `it.skip.experimental` or `it.experimental.skip`\r\n\r\nSince `it` is an alias of `test`, `test.experimental` works, too."
        }
      },
      {
        "sha": "1022ee0ec140b8fce47c43ec57ee4a9f80f42eca",
        "commit": {
          "message": "Read current time without marking event start time (#17160)\n\n* Failing test: DevTools hook freezes timeline\r\n\r\nThe DevTools hook calls `requestCurrentTime` after the commit phase has\r\nended, which has the accidnental consequence of freezing the start\r\ntime for subsequent updates. If enough time goes by, the next update\r\nwill instantly expire.\r\n\r\nI'll push a fix in the next commit.\r\n\r\n* Read current time without marking event start time\r\n\r\n`requestCurrentTime` is only meant to be used for updates, because\r\nsubsequent calls within the same event will receive the same time.\r\nMessing this up has bad consequences.\r\n\r\nI renamed it to `requestCurrentTimeForUpdate` and created a new\r\nfunction that returns the current time without the batching heuristic,\r\ncalled `getCurrentTime`.\r\n\r\nSwapping `requestCurrentTime` for `getCurrentTime` in the DevTools\r\nhook fixes the regression test added in the previous commit."
        }
      },
      {
        "sha": "f7ec65eeba6ca9194a09d317fbeb46fd79530b09",
        "commit": {
          "message": "[react-interactions] Make events non-passive to allow preventDefault (#17136)"
        }
      },
      {
        "sha": "5faf377df5267c4248599e14311a75c2f46050c0",
        "commit": {
          "message": "Fixed a style bug in props editor (#17162)"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.10.2",
      "body": "### React DOM\r\n\r\n* Fix regression in react-native-web by restoring order of arguments in event plugin extractors ([@necolas](https://github.com/necolas) in [#16978](https://github.com/facebook/react/pull/16978))\r\n\r\n## Artifacts\r\n\r\n• react: https://unpkg.com/react@16.10.2/umd/\r\n• react-art: https://unpkg.com/react-art@16.10.2/umd/\r\n• react-dom: https://unpkg.com/react-dom@16.10.2/umd/\r\n• react-is: https://unpkg.com/react-is@16.10.2/umd/\r\n• react-test-renderer: https://unpkg.com/react-test-renderer@16.10.2/umd/\r\n• scheduler: https://unpkg.com/scheduler@0.16.2/umd/"
    },
    "commits": [
      {
        "sha": "2f2ab82af602f3a486c2c2c52fcdd3c10144b5db",
        "commit": {
          "message": "Update local version numbers for 16.10.1 release"
        }
      },
      {
        "sha": "4ab6305f6d337c4a78c9e44f18cdd1b3021af7f9",
        "commit": {
          "message": "Move eventSystemFlags to last argument in event plugin extractors (#16978)\n\nFix for necolas/react-native-web#1443"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.10.1",
      "body": "### React DOM\r\n\r\n* Fix regression in Next.js apps by allowing Suspense mismatch during hydration to silently proceed ([@sebmarkbage](https://github.com/sebmarkbage) in [#16943](https://github.com/facebook/react/pull/16943))\r\n"
    },
    "commits": [
      {
        "sha": "d346d92084316ec10714b9ac4bfb1ebcfdf05fb9",
        "commit": {
          "message": "Allow Suspense Mismatch on the Client to Silently Proceed (#16943)\n\n* Regression test: Suspense + hydration + legacy\r\n\r\n* Allow Suspense Mismatch on the Client to Silently Proceed\r\n\r\nThis fixes but isn't actually the semantics that we want this case to have."
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.10.0",
      "body": "### React DOM\r\n\r\n* Fix edge case where a hook update wasn't being memoized. ([@sebmarkbage](http://github.com/sebmarkbage) in [#16359](https://github.com/facebook/react/pull/16359))\r\n* Fix heuristic for determining when to hydrate, so we don't incorrectly hydrate during an update. ([@sebmarkbage](http://github.com/sebmarkbage) in [#16739](https://github.com/facebook/react/pull/16739))\r\n* Clear additional fiber fields during unmount to save memory. ([@trueadm](http://github.com/trueadm) in [#16807](https://github.com/facebook/react/pull/16807))\r\n* Fix bug with required text fields in Firefox. ([@halvves](http://github.com/halvves) in [#16578](https://github.com/facebook/react/pull/16578))\r\n* Prefer `Object.is` instead of inline polyfill, when available. ([@ku8ar](http://github.com/ku8ar) in [#16212](https://github.com/facebook/react/pull/16212))\r\n* Fix bug when mixing Suspense and error handling. ([@acdlite](http://github.com/acdlite) in [#16801](https://github.com/facebook/react/pull/16801))\r\n\r\n\r\n### Scheduler (Experimental)\r\n\r\n* Improve queue performance by switching its internal data structure to a min binary heap. ([@acdlite](http://github.com/acdlite) in [#16245](https://github.com/facebook/react/pull/16245))\r\n* Use `postMessage` loop with short intervals instead of attempting to align to frame boundaries with `requestAnimationFrame`. ([@acdlite](http://github.com/acdlite) in [#16214](https://github.com/facebook/react/pull/16214))\r\n\r\n### useSubscription\r\n\r\n* Avoid tearing issue when a mutation happens and the previous update is still in progress. ([@bvaughn](http://github.com/bvaughn) in [#16623](https://github.com/facebook/react/pull/16623))\r\n\r\n## Artifacts\r\n\r\n• react: https://unpkg.com/react@16.10.0/umd/\r\n• react-art: https://unpkg.com/react-art@16.10.0/umd/\r\n• react-dom: https://unpkg.com/react-dom@16.10.0/umd/\r\n• react-is: https://unpkg.com/react-is@16.10.0/umd/\r\n• react-test-renderer: https://unpkg.com/react-test-renderer@16.10.0/umd/\r\n• scheduler: https://unpkg.com/scheduler@0.16.0/umd/"
    },
    "commits": [
      {
        "sha": "868d02d6c65eb72da9013ab6c00d04a988d3a776",
        "commit": {
          "message": "Added better error reporting for print-warnings errors (#16394)"
        }
      },
      {
        "sha": "a473dca59eed92e94b8fc60c03dfd389a7b04e13",
        "commit": {
          "message": "Merge branch 'master' into devtools-v4-merge"
        }
      },
      {
        "sha": "9ec9938ff46d1c4a02035f4bdd79a819b5e9fc97",
        "commit": {
          "message": "print-warnings script should ignore DevTools packages"
        }
      },
      {
        "sha": "a6aba5a587e52ae48c8d735d5d9a0413e170e512",
        "commit": {
          "message": "Add explicit MIT license file (previously only in package.json)"
        }
      },
      {
        "sha": "41db902ed42d8f61c6c43dc2b038b06be086b6dc",
        "commit": {
          "message": "Removed unused __TEST__ files"
        }
      },
      {
        "sha": "4c4f5fd27fc1d7c16033a1221c9440cd67baace5",
        "commit": {
          "message": "Disable @babel/plugin-transform-block-scoping \"throwIfClosureRequired\" option for tests"
        }
      },
      {
        "sha": "7ce229d3b080ce06b9a5c7a5e667474f3255b954",
        "commit": {
          "message": "Made some incremental progress on Jest tests"
        }
      },
      {
        "sha": "6edff8f5e1c961ff65c182820442525c212216bb",
        "commit": {
          "message": "Added CHANGELOG and READMEs for DevTools v4 NPM packages (#16404)"
        }
      },
      {
        "sha": "a9304e79d467bf9058f4352ddb5450f8a43d4f46",
        "commit": {
          "message": "Add DevTools package placeholder package.json"
        }
      },
      {
        "sha": "85fbe3be3fa645734c68992bb0aa9bc756dab9ad",
        "commit": {
          "message": "Merge branch 'master' into devtools-v4-merge"
        }
      },
      {
        "sha": "ebd1f5ddb0da7e3626b56614e2b5723debadd839",
        "commit": {
          "message": "[react-events] Press: improve test coverage (#16397)\n\n1. Run the tests in both an environment without PointerEvent and one with PointerEvent.\r\n2. Improve test coverage to include both mouse and touch pointers.\r\n3. Change 'Press' so that it only listens to either pointer events or fallbacks events."
        }
      },
      {
        "sha": "9b5985b3c11929f8fc3bf5092d6c94838c7fe3dc",
        "commit": {
          "message": "Added release date to DevTools CHANGELOG"
        }
      },
      {
        "sha": "db9e5c971507e40bdaa41468dde490949c84611f",
        "commit": {
          "message": "Updated all GitHub links to point to React repo"
        }
      },
      {
        "sha": "600c57a9b9f36c8de1d3544bdbadd3babba1bcc7",
        "commit": {
          "message": "Added OVERVIEW.md and updated CHANGELOG to point to it (#16405)"
        }
      },
      {
        "sha": "732f3a6ef162b68e298f2949f006ec9506125d67",
        "commit": {
          "message": "4.0.0-alpha.9 -> 4.0.0-alpha.10"
        }
      },
      {
        "sha": "0763c48ed878fde9cd6163f32f9084ead0c93c85",
        "commit": {
          "message": "Bumped all versions to 4.0.0"
        }
      },
      {
        "sha": "d0dcbe5594d73b4fc0bf863bb1069d8afad325ec",
        "commit": {
          "message": "Changed version name string to show version and date. Moved commit number into description string."
        }
      },
      {
        "sha": "6f86294e686e172fb8da32880f70fa038d644c74",
        "commit": {
          "message": "[DevTools Changelog] Add a note about restoring selection (#16409)\n\nAlso a tiny nit, \"inline\" spelling seems more common in this context. My eyes stumbled at it on every read."
        }
      },
      {
        "sha": "545de6f02e7d8905ba4e1cd358e68bb640a31a0a",
        "commit": {
          "message": "Removed some unnecessary manifest permissions"
        }
      },
      {
        "sha": "c100cc7b31d73d6d5bea3a60d34385fd1d0f31c2",
        "commit": {
          "message": "4.0.0 -> 4.0.1"
        }
      },
      {
        "sha": "527fc4a63f497db1f370a8312807c2a68147edec",
        "commit": {
          "message": "Refactored to remove need for new webNavigation permission"
        }
      },
      {
        "sha": "2bcc6c6d04e302f9c1cd2f724ee2033a999b36b8",
        "commit": {
          "message": "4.0.1 -> 4.0.2"
        }
      },
      {
        "sha": "c1d3f7f1a97adad9441287a92dcd4ac5d2478c38",
        "commit": {
          "message": "[DevTools Changelog] Add a note on 4.0.2"
        }
      },
      {
        "sha": "5e043adba7ead591959904ade16100c146309396",
        "commit": {
          "message": "Added Set+Map to dev shell, even though we don't support deep inspecting them yet"
        }
      },
      {
        "sha": "49399aa3e770a174cef9dad7690508c5949c52a7",
        "commit": {
          "message": "Prettier"
        }
      },
      {
        "sha": "454157dd660f7ed70684a459fff0482bee1d87d1",
        "commit": {
          "message": "Multi-renderer profiling improvements\n\nAdd support for mixed v15/v16 renderers that previously caused profiling to fail with 'profiling not supported by this renderer' type errors"
        }
      },
      {
        "sha": "f61661305964956c29d8ef147e5d1b33b7b701ec",
        "commit": {
          "message": "Display hook values for components that only use context"
        }
      },
      {
        "sha": "74f4a3f97297d121255045c5551ab025fdd441e2",
        "commit": {
          "message": "Improved editing props demo experience for TODO list"
        }
      },
      {
        "sha": "024bac4263f401f63a92070164ae6a257c7ff890",
        "commit": {
          "message": "Support single-quote strings in style editor"
        }
      },
      {
        "sha": "69b2ecc531f24f6e0e0dbbb26844b060d581926b",
        "commit": {
          "message": "Added explicit (empty) label next to empty arrays and objects"
        }
      },
      {
        "sha": "f66a20f4392b4c861d30b4db080337de470cf57e",
        "commit": {
          "message": "Caps lock bug template request for repro steps :)"
        }
      },
      {
        "sha": "ce65df7092ed69b45aa5787b708c1516b2c07427",
        "commit": {
          "message": "Added support for unserializable types (e.g. Set/Map, Immutable)"
        }
      },
      {
        "sha": "2935d6a18d0c10343919891e4245ccec126155e1",
        "commit": {
          "message": "Unserializable data type fix for standalone shell"
        }
      },
      {
        "sha": "95ffd3ccf8c0091e5e573a4b94004636275ea265",
        "commit": {
          "message": "4.0.2 -> 4.0.3"
        }
      },
      {
        "sha": "21e793fb4fce16b938e549de9277a7fdddff40e8",
        "commit": {
          "message": "Added 4.0.1, 4.0.2, and 4.0.3 changelog entries (#16438)\n\n* Added 4.0.1, 4.0.2, and 4.0.3 changelog entries\r\n* Added entry about Map/Set/Immutable"
        }
      },
      {
        "sha": "95ca079556b6aa86b15c3ba98e5b9a302e5fb646",
        "commit": {
          "message": "Fixed standalone bug that prevented backend from being served over localhost:8097"
        }
      },
      {
        "sha": "d97af798d2a295a9e38abfe4a5d6b897adabd39e",
        "commit": {
          "message": "Updated DevTools CHANLOGE to add an unreleased change"
        }
      },
      {
        "sha": "4697f5b37967b85b2c844044aeebb5b1a740875d",
        "commit": {
          "message": "Profiler bugfix for filtering out all commits after selecting a fiber"
        }
      },
      {
        "sha": "3c6a21946686d4dddd0cacd40334533be87bd403",
        "commit": {
          "message": "4.0.3 -> 4.0.4"
        }
      },
      {
        "sha": "e89c19d16c5da3f6d57b762f1d5ca88c831fccaf",
        "commit": {
          "message": "Added DevTools 4.0.4 CHANGELOG entry"
        }
      },
      {
        "sha": "14c2eab7c3cc086459099f4b7b1cdb971b1d1ee2",
        "commit": {
          "message": "Resolved Yarn conflict for object-assign"
        }
      },
      {
        "sha": "d2456c75720463eccbf714380adfd050cf804241",
        "commit": {
          "message": "Fixed standalone target not properly serving backend over localhost:8097"
        }
      },
      {
        "sha": "01b1e7e2cf5cd1fb84318b32a6cb236e6d9b35ef",
        "commit": {
          "message": "Alpha-sort props/state/context keys"
        }
      },
      {
        "sha": "56d1b0fb5991e954c21609dce80d9849eda115fe",
        "commit": {
          "message": "[react-events] DOM event testing library (#16433)\n\nThis patch formalizes the mock native events and event sequences used in unit tests.\r\n\r\nThe `createEventTarget` function returns an object that can be used to dispatch native event sequences on the target without having to manually do so across all the scenarios we need to account for. Unit tests can be written as if we were only working with PointerEvent, but they will dispatch realistic native event sequences based on the execution environment (e.g., is PointerEvent supported?) and pointer type.\r\n\r\n```\r\ndescribe.each(environments)('Suite', (hasPointerEvents) => {\r\n  beforeEach(() => {\r\n    // setup\r\n  });\r\n\r\n  test.each(pointerTypes)('Test', (pointerType) => {\r\n    const target = createEventTarget(node);\r\n    target.pointerdown({pointerType});\r\n    expect(callback).toBeCalled();\r\n  });\r\n});\r\n```\r\n\r\nEvery native event that is dispatched now includes a complete object by default. The properties of the events can be customized. Properties that shouldn't be relied on in responder implementations are excluded from the mock native events to ensure tests will fail. Equivalent properties are normalized across different event types, e.g., 'pointerId' is converted to 'identifier' before a TouchEvent is dispatched."
        }
      },
      {
        "sha": "5441b094a4afe09e48b71ff2e2256b2119aef14b",
        "commit": {
          "message": "4.0.4 -> 4.0.5"
        }
      },
      {
        "sha": "6ae6a7c020d9cdee6f881e50304696d817d2c27e",
        "commit": {
          "message": "Updated React DevTools changelog for 4.0.5"
        }
      },
      {
        "sha": "dce430ad92d7ed6be5b934f4263d4a39e068ee29",
        "commit": {
          "message": "[Flare] Rework the responder dispatching/batching mechanism (#16334)"
        }
      },
      {
        "sha": "56f93a7f38f25284261ee5d287aa32dcb1caf327",
        "commit": {
          "message": "Throw on unhandled SSR suspending (#16460)\n\n* Throw on unhandled SSR suspending\r\n\r\n* Add a nicer message when the flag is off\r\n\r\n* Tweak internal refinement error message"
        }
      },
      {
        "sha": "96eb703bbff49b7d52ad7d41ea18074dc8e7857a",
        "commit": {
          "message": "[ESLint] Forbid top-level use*() calls (#16455)\n\n* Add a way to skip/only tests to RulesOfHooks test\r\n\r\n* [ESLint] Forbid top-level use*() calls\r\n\r\n* Add a regression test for logical expressions\r\n\r\nThis is not a change. Just adding more coverage."
        }
      },
      {
        "sha": "2d68bd09603fc54d927240003810db9aa6f2e3e5",
        "commit": {
          "message": "Fix message loop behavior when host callback is cancelled (#16407)\n\n* Add a regression test for cancelCallback with message loop\r\n\r\n* If there's nothing scheduled, we're not running\r\n\r\n* Add more tests from #16271"
        }
      },
      {
        "sha": "c80678c7606b1895573c23182bfb9a418e2ad31e",
        "commit": {
          "message": "Add \"hydrationOptions\" behind the enableSuspenseCallback flag (#16434)\n\nThis gets invoked when a boundary is either hydrated or if it is deleted\r\nbecause it updated or got deleted before it mounted."
        }
      },
      {
        "sha": "aa56fe34ac40694f422ac8bc42e4d3c5b7efd813",
        "commit": {
          "message": "Improved GitHub issue repro instructions prompt"
        }
      },
      {
        "sha": "2843a1556e778c363757653ad74390d0660b9aba",
        "commit": {
          "message": "Fixed invalid object-assign version (4.0.4 -> 4.0.1)"
        }
      },
      {
        "sha": "69aafbf4dfaab408cd862b10dcea29e6ef0b7bd9",
        "commit": {
          "message": "Fix spelling in react-devtools CHANGELOG.md (#16448)"
        }
      },
      {
        "sha": "da0a47bec3c13bd93793811155de00730d2e27ae",
        "commit": {
          "message": "fix typo in CHNAGELOG.md (#16447)"
        }
      },
      {
        "sha": "efa5dbe7a57c2e761bae90e07391f43ce7c01132",
        "commit": {
          "message": "Update CHANGELOG.md (#16439)\n\n* Update CHANGELOG.md\r\n\r\nFixed typo"
        }
      },
      {
        "sha": "833f20634868961f4786879ee18d94b06971f05f",
        "commit": {
          "message": "Merge branch 'master' into devtools-v4-merge"
        }
      },
      {
        "sha": "3ad50710a769838c9ae9c2d1669c5981e7639092",
        "commit": {
          "message": "Merge branch 'source' of github.com:bvaughn/react-devtools-experimental"
        }
      },
      {
        "sha": "4da836af71f035a25c26814e7f6aa04e0535f4af",
        "commit": {
          "message": "Merged changes from 4.0.0 -> 4.0.5 from DevTools fork"
        }
      },
      {
        "sha": "2e549efae586c1c4426b1c43cc917c6f1c733205",
        "commit": {
          "message": "Moved DevTools custom Flow definitions"
        }
      },
      {
        "sha": "fe943c339d13cb0cd279a5dc907707c96fa3a74c",
        "commit": {
          "message": "Add custom DevTools Flow definitions to shared flowconfig"
        }
      },
      {
        "sha": "66c9fedc34614bd95cba342e07b7ff6cddf2e5e6",
        "commit": {
          "message": "Flow fixes"
        }
      },
      {
        "sha": "507f0fb372705c4c6ac5288db3651019b1d0927b",
        "commit": {
          "message": "Revert \"[ESLint] Forbid top-level use*() calls (#16455)\" (#16522)\n\nThis reverts commit 96eb703bbff49b7d52ad7d41ea18074dc8e7857a."
        }
      },
      {
        "sha": "c433fbb593c7f42263c0209d3ff421aea59fca4c",
        "commit": {
          "message": "Revert \"Revert \"[ESLint] Forbid top-level use*() calls (#16455)\"\" (#16525)\n\n* Revert \"Revert \"[ESLint] Forbid top-level use*() calls (#16455)\" (#16522)\"\r\n\r\nThis reverts commit 507f0fb372705c4c6ac5288db3651019b1d0927b.\r\n\r\n* Update RulesOfHooks.js"
        }
      },
      {
        "sha": "2559111c21a4bb18ab6ade5e464cb42863e9e8b3",
        "commit": {
          "message": "[react-events] Rely on 'buttons' rather than 'button' (#16479)\n\nThe semantics of 'button' on events differs between PointerEvent and\r\nMouseEvent, whereas they are the same for 'buttons'. Furthermore, 'buttons'\r\nallows developers to determine when multiple buttons are pressed as the same\r\ntime.\r\n\r\nhttps://w3c.github.io/pointerevents/#the-button-property"
        }
      },
      {
        "sha": "06728290533bce24b0893461c3f4ddc1547f85b4",
        "commit": {
          "message": "Bump ESLint plugin to 2.0 (#16528)"
        }
      },
      {
        "sha": "3ed289b3b1286007e3f594b0b767b3b64bf3f86c",
        "commit": {
          "message": "Clear canceled task node early (#16403)"
        }
      },
      {
        "sha": "8a01b50fc316761ebc3250d7b3c46c01482ef06c",
        "commit": {
          "message": "eslint-plugin-react-hooks@2.0.1"
        }
      },
      {
        "sha": "79bda69d88ebff9dfc9eeb4640531b8a42842eef",
        "commit": {
          "message": "Renamed DevTools Jest config to be more concistent with others"
        }
      },
      {
        "sha": "6dda81610276b50dcd626e5a9090fe596c8f595c",
        "commit": {
          "message": "Remove emoji prefix from Firefox extension tab labels\n\nFirefox adds these already for React, so the extra emoji character was confusing. For now, we still prepend it for Chrome"
        }
      },
      {
        "sha": "bf9415834f0bf1809cae5d59e2195e2cc1dfdccf",
        "commit": {
          "message": "Fixed outdated extension popup wording"
        }
      },
      {
        "sha": "05f5192e8106d006cc3189ae68c523ca123ae297",
        "commit": {
          "message": "[Partial Hydration] Dispatching events should not work until hydration commits (#16532)\n\n* Refactor a bit to use less property access\r\n\r\n* Add test for invoking an event before mount\r\n\r\n* Add Hydration effect tag\r\n\r\nThis is equivalent to a \"Placement\" effect in that it's a new insertion\r\nto the tree but it doesn't need an actual mutation.\r\n\r\nIt is only used to determine if a subtree has actually mounted yet.\r\n\r\n* Use the Hydration flag for Roots\r\n\r\nPrevious roots had a Placement flag on them as a hack for this case but\r\nsince we have a special flag for it now, we can just use that.\r\n\r\n* Add Flare test"
        }
      },
      {
        "sha": "16c34086380fc4e4ff20fca1ed27e9e35bd98299",
        "commit": {
          "message": "Only warn in case the fourth argument is a function (#16543)"
        }
      },
      {
        "sha": "2f03aa6eed14ae30e586b77e40b2da9ea5e6facc",
        "commit": {
          "message": "[react-events] Fix middle-click for Press (#16546)\n\nBrowsers always report 'buttons' as 0 when a pointer is released."
        }
      },
      {
        "sha": "474b650cac72c9a251fa4a9f8d8d121dff067970",
        "commit": {
          "message": "[react-events] Rename hook exports (#16533)\n\nFor example, 'useHoverResponder' becomes 'useHover'"
        }
      },
      {
        "sha": "0f6e3cd61cf4a5a1491bb3c92780936aebc2a146",
        "commit": {
          "message": "[Scheduler] Profiler Features (second try) (#16542)\n\n* Revert \"Revert \"[Scheduler] Profiling features (#16145)\" (#16392)\"\r\n\r\nThis reverts commit 4ba1412305be3c77b625a70e3c0b9a8638626bd0.\r\n\r\n* Fix copy paste mistake\r\n\r\n* Remove init path dependency on ArrayBuffer\r\n\r\n* Add a regression test for cancelling multiple tasks\r\n\r\n* Prevent deopt from adding isQueued later\r\n\r\n* Remove pop() calls that were added for profiling\r\n\r\n* Verify that Suspend/Unsuspend events match up in tests\r\n\r\nThis currently breaks tests.\r\n\r\n* Treat Suspend and Resume as exiting and entering work loop\r\n\r\nTheir definitions used to be more fuzzy. For example, Suspend didn't always fire on exit, and sometimes fired when we did _not_ exit (such as at task enqueue).\r\n\r\nI chatted to Boone, and he's saying treating Suspend and Resume as strictly exiting and entering the loop is fine for their use case.\r\n\r\n* Revert \"Prevent deopt from adding isQueued later\"\r\n\r\nThis reverts commit 9c30b0b695d81e9c43b296ab93d895e4416ef713.\r\n\r\nUnnecessary because GCC\r\n\r\n* Start counter with 1\r\n\r\n* Group exports into unstable_Profiling namespace\r\n\r\n* No catch in PROD codepath\r\n\r\n* No label TODO\r\n\r\n* No null checks"
        }
      },
      {
        "sha": "fc807720780962729df2ad1b0f53258603c020c7",
        "commit": {
          "message": "[react-events] Ensure updateEventListeners updates in commit phase (#16540)"
        }
      },
      {
        "sha": "84b492f344b16ad37ada3c480c61ceb4b49ae0ff",
        "commit": {
          "message": "Polyfill Symbol usage"
        }
      },
      {
        "sha": "1e3b0b520e1d77ed3926ac9e41bea3a5c7309cad",
        "commit": {
          "message": "Added a null check around memoizedProps"
        }
      },
      {
        "sha": "a39d9c3dff451c5280dded9418a627f37871b94b",
        "commit": {
          "message": "4.0.5 -> 4.0.6"
        }
      },
      {
        "sha": "0da7bd0604a5be7f96572b9f75d16fef5674bc5d",
        "commit": {
          "message": "React DevTools CHANGELOG entry for 4.0.6"
        }
      },
      {
        "sha": "c00a920640d5855888c4aec645e7e58de82cb65c",
        "commit": {
          "message": "Merge branch 'master' into devtools-v4-merge"
        }
      },
      {
        "sha": "13a93e7b82119d60532e3d7c8273c90764ec4bae",
        "commit": {
          "message": "Configured CI to run DevTools tests. Updated other test configs not to include DevTools tests."
        }
      },
      {
        "sha": "4c1514495bf77acad2677b9944726e512691150e",
        "commit": {
          "message": "Merge branch 'source' of github.com:bvaughn/react-devtools-experimental"
        }
      },
      {
        "sha": "9d4fd7a24991598aa2fcaec203dbba5c04d253d1",
        "commit": {
          "message": "Merged changes from 4.0.5 -> 4.0.6 from DevTools fork"
        }
      },
      {
        "sha": "ee4806f47ae594ea20b5296dd913ed67d7809b86",
        "commit": {
          "message": "Fixed flushing problem with tests"
        }
      },
      {
        "sha": "a48593a8d36f5e1c26d0d98b6ceae77642aed5cb",
        "commit": {
          "message": "Iterating on DevTools tests: Trying to run tests against pre-build react-dom and react-test-renderers"
        }
      },
      {
        "sha": "177f357d9da5b21050ddd92084a6f0ce67c09e03",
        "commit": {
          "message": "Updated DevTools test setup to no longer mock test renerer"
        }
      },
      {
        "sha": "e3cc42be97d65abeb3f5907320c88f457265f459",
        "commit": {
          "message": "Fix Console patching test by resetting modules"
        }
      },
      {
        "sha": "896c993ada2875997a0f090e76992eb3c550d973",
        "commit": {
          "message": "Fixed remaining DevTools broken tests by fixing a hydration/spread bug"
        }
      },
      {
        "sha": "892ca8137eea69198c3f5b75cfeb375a4aebce53",
        "commit": {
          "message": "Disabled DevTools tests from yarn-build target"
        }
      },
      {
        "sha": "4ef269606c691f9b8c833f18d75342b34ef021db",
        "commit": {
          "message": "[react-events] Support screen reader virtual clicks (#16584)"
        }
      },
      {
        "sha": "f55b4f8e28053eacde8e11325d99779783abec1c",
        "commit": {
          "message": "CI runs DevTools tests against built source"
        }
      },
      {
        "sha": "9a016c0c2b8e21b43085bf8c282d1a7ec3ee8778",
        "commit": {
          "message": "Removed outdated snapshot"
        }
      },
      {
        "sha": "8c684bf7e19d6942eb9adb9d16aefe5dc8491bfa",
        "commit": {
          "message": "Removed forked DevTools Flow types"
        }
      },
      {
        "sha": "49b0f87d10a2fab056c29f24228acf3ce2bcc26b",
        "commit": {
          "message": "Suppress act/renderer warning for DevTools tests"
        }
      },
      {
        "sha": "8e1434e80e203ebd2cd066772d68f121808c83aa",
        "commit": {
          "message": "Added FB copyright header"
        }
      },
      {
        "sha": "fb316787cbefff7a864beb8268dc395fec535ebb",
        "commit": {
          "message": "Removed unused Chrome Flow types"
        }
      },
      {
        "sha": "33d439f8fd7c899ac315edc18fe316de84806778",
        "commit": {
          "message": "Merge branch 'master' into devtools-v4-merge"
        }
      },
      {
        "sha": "7153dd516f080a62d3f20024c252869b52678c36",
        "commit": {
          "message": "Fixed a StyleEditor variable resolution regression"
        }
      },
      {
        "sha": "bc8b15332b5f10a96135a5e3527833fb7cc8efeb",
        "commit": {
          "message": "Updated README docs, example screenshots, etc"
        }
      },
      {
        "sha": "cb15f18dc1a3a28e67c8fe1101e55b5033d12e96",
        "commit": {
          "message": "[react-events] Improve mock event object accuracy (#16590)\n\n* Better simulation for pointercancel\r\n* Fix pressure values for different pointers\r\n* Add describe/test helpers for pointer events"
        }
      },
      {
        "sha": "f5125377543749a4cee6ac887a006b6567767862",
        "commit": {
          "message": "Babel Transform JSX to React.jsx/React.jsxDEV Plugin (#16432)\n\nThis babel transform is a fork of the @babel/plugin-transform-react-jsx transform and is for experimentation purposes only. We don't plan to own this code in the future, and we will upstream this to Babel at some point once we've proven out the concept.\r\n\r\nAs per the RFC to simplify element creation, we want to change the JSX transform from targeting React.createElement(type, props, children) to React.jsx(type, props, key). This modifies the existing @babel/plugin-transform-react-jsx (and helper) babel plugin to support React.jsx and React.jsxDEV.\r\n\r\nThe main differences between React.jsx/React.jsxDEV and React.createElement are:\r\n1.) key is now passed as an explicit argument rather than through props\r\n3.) children are now passed through props rather than as an explicit argument\r\n4.) props must always be an object\r\n5.) __source and and __self are now passed as separate arguments into React.jsxDEV rather than through props\r\n\r\nPart of the rationale for this change is that we want to deprecate key spread through props because this is an expensive dynamic comparison operation. We want users instead always explicitly pass key as a prop. However, in the interim, we need a way to distinguish between <div {...props} key={foo} /> and <div key={foo} {...props} />. Therefore, until we completely deprecate key spreading, we will use React.createElement to transform <div {...props} key=\"Hi\" /> and React.jsx to transform everything else."
        }
      },
      {
        "sha": "b034ac6d382c301a9d47992e6ad04065a9217d03",
        "commit": {
          "message": "Merge branch 'master' into devtools-v4-merge"
        }
      },
      {
        "sha": "08ce280cbcfa8553c1bd80eeb942027b37f0b7c6",
        "commit": {
          "message": "Updated DT regression fixture path"
        }
      },
      {
        "sha": "ada599142291432adcce16416e6f230680049167",
        "commit": {
          "message": "Removed an unnecessary/unused DT Flow type"
        }
      },
      {
        "sha": "b438699d3620bff236282b049204e1221b3689e9",
        "commit": {
          "message": "Import React DevTools v4\n\nImports the entire React DevTools v4 git repository (with history)."
        }
      },
      {
        "sha": "b8390310b14cce89fd26df83f969505b5f129f10",
        "commit": {
          "message": "Revert \"Import React DevTools v4\"\n\nThis reverts commit b438699d3620bff236282b049204e1221b3689e9."
        }
      },
      {
        "sha": "0f3e82f3c4911335f326ff45091eef76f9bb9297",
        "commit": {
          "message": "Merge branch 'devtools-v4-merge'"
        }
      },
      {
        "sha": "1b585f630b613a5819a2c5e2256e8b575259ca21",
        "commit": {
          "message": "Fix link on error-codes/README.md (#16595)"
        }
      },
      {
        "sha": "01fb68b9bf680ab8bbf96e86501e0fc540b3cc97",
        "commit": {
          "message": "Don't ignore dependencies for render phase update (#16574)"
        }
      },
      {
        "sha": "34aaec6f908e85d56cbc510677bc1c85d87aa57b",
        "commit": {
          "message": "[react-events] Ensure screen reader virtual clicks support preventDefault (#16600)"
        }
      },
      {
        "sha": "996acf9036b8fcf39cca8dc63102d677d529afe2",
        "commit": {
          "message": "Updated DevTools extension build script to work when run remotely (#16603)"
        }
      },
      {
        "sha": "bd79be9b687156067416ffe5219e49a11bd0f1e7",
        "commit": {
          "message": "[react-core] Add experimental React Scope component API (#16587)"
        }
      },
      {
        "sha": "37fcd04681c687bea7f37b0fed673b0802a0e612",
        "commit": {
          "message": "chore: upgrade to danger 9 (#16602)"
        }
      },
      {
        "sha": "557d472fe3d48f3c5e92116e614e83a415e21f18",
        "commit": {
          "message": "add <thead>, <tfoot> to table > tr warning (#16535)"
        }
      },
      {
        "sha": "8a7c2e50f1885d514686071f52ec98b68473cf8b",
        "commit": {
          "message": "Remove duplicate character in regex group (#16572)"
        }
      },
      {
        "sha": "980112b146a4d4bd8178ef559baa12f8abc73027",
        "commit": {
          "message": "rephrase comment (#16559)"
        }
      },
      {
        "sha": "f61138e0681f729c43cf755f48f060e6262a09eb",
        "commit": {
          "message": "Use renderToStaticMarkup for tests (#16516)"
        }
      },
      {
        "sha": "4e544cffee19e9403753bdafa35e70db06d4190a",
        "commit": {
          "message": "[react-events] Split out mixed event responder tests (#16608)"
        }
      },
      {
        "sha": "16329bd9543d894b7d1595df23351fbfa7022b25",
        "commit": {
          "message": "chore: Update nvmrc with latest lts (#16610)"
        }
      },
      {
        "sha": "ac6193687fa09d9139dfebf75a77f2c02e7ebf2b",
        "commit": {
          "message": "add integrity field in yarn.lock (#16601)"
        }
      },
      {
        "sha": "f962feb882cfbd2ebe69d472fcaa391bdfd2b110",
        "commit": {
          "message": "Updated extensions build-from-source instructions in README"
        }
      },
      {
        "sha": "2c1e6bf619e404fd1ac464eb35eff4c09b3861b3",
        "commit": {
          "message": "Adopt Contributor Covenant (#16613)\n\nIn order to foster healthy open source communities, we're adopting the\r\n[Contributor Covenant](https://www.contributor-covenant.org/). It has been\r\nbuilt by open source community members and represents a shared understanding of\r\nwhat is expected from a healthy community."
        }
      },
      {
        "sha": "46f912fd57604bd3c3949b5e8d6cc30a843ab1b9",
        "commit": {
          "message": "[react-core] Add more support for experimental React Scope API (#16621)"
        }
      },
      {
        "sha": "92f094d86d22afa77407a693681d7725e2540225",
        "commit": {
          "message": "fix typo: oncurrent - concurrent (#16633)"
        }
      },
      {
        "sha": "77bb1023986225a12aaa1b45b85703df5deaf95a",
        "commit": {
          "message": "[DevTools] [Profiler]: Save profile now working in Firefox (#16612)\n\n* Added anchor dom element in order to successfully download profiling data.\r\n* Reworked downloadFile to accept a DOMElement in order for FF to successfully download profiling data.\r\n* Prettify downloadFile changes."
        }
      },
      {
        "sha": "f705e2bac7582b2114f381f14546ff6ca02436b9",
        "commit": {
          "message": "Updated pending CHANGELOG for DevTools"
        }
      },
      {
        "sha": "af032764a9f244633eb7ff1a3205d2ec6073b501",
        "commit": {
          "message": "[react-events] Adds preventKeys support to Keyboard responder (#16642)"
        }
      },
      {
        "sha": "539640d89f327743f2872098ec8aad08ab3a4dfd",
        "commit": {
          "message": "[react-events] Various core tweaks for event responder system (#16654)"
        }
      },
      {
        "sha": "7126a37bf4284a30377e08b2ef84f61b64fdb8cd",
        "commit": {
          "message": "[react-events] Keyboard responder propagation handling (#16657)"
        }
      },
      {
        "sha": "9ff60ff16b289a9efce46e21fe223aec1638b5d6",
        "commit": {
          "message": "[react-events] Fix Scope listener issue (#16658)"
        }
      },
      {
        "sha": "c66edb9f8b6baba71df4c21908829f805e57c0b1",
        "commit": {
          "message": "[react-events] Refactor getCurrentTarget to getResponderNode (#16660)"
        }
      },
      {
        "sha": "e86146e714bb98e973404350069915bf2760a1bd",
        "commit": {
          "message": "[react-events] Refine executeUserEventHandler (#16662)"
        }
      },
      {
        "sha": "9ce8711d5a7c84e71587c75d2935966023ee6dbb",
        "commit": {
          "message": "[react-events] Tap responder (#16628)\n\nThis is a partial replacement for the 'Press' responder:\r\n\r\n1. `useTap` is scoped to pointers (no keyboard support). Our current thinking is\r\nthat \"responders\" should be limited to working with pointers, and that they can\r\nbe combined with 'useKeyboard' in user-space. For example, we might create a\r\n'usePress' hook in user-space that combines 'useTap' with 'useKeyboard' to react\r\nto both pointers and keyboard interactions.\r\n\r\n2. `useTap` cancels the gesture once the pointer moves over an element that is\r\nnot within the responder target's subtree. This differs from `usePress` (and\r\nReact Native), where the gesture remains active after the pointer exits the\r\ntarget's subtree and is restarted once the pointer reenters. One of the\r\ndrawbacks with the `usePress` behavior is that it requires repeatedly measuring\r\nDOM elements (which can cause jank) to perform hit region tests. `useTap` avoids\r\ndoing this and relies on `document.elementFromPoint` only to support the\r\nTouchEvent fallbacks.\r\n\r\n3. `useTap` calls `onTapUpdate` when the active gesture's state changes,\r\n`onTapEnd` when the gesture successfully completes. and `onTapCancel` when it\r\nfails. There is no `onTap` callback. `usePress` did not explicitly report back\r\nwhen the gesture failed, and product developers were confused about the\r\ndifference between `onPress` and `onPressEnd`.\r\n\r\n4. `useTap` explicitly separates the PointerEvent implementation from the\r\nMouseEvent/TouchEvent fallback.\r\n\r\n5. `useTap` has better unit test coverage . All pointer types and the fallback\r\nenvironment are tested. The shape of the gesture state object is also defined\r\nand tested."
        }
      },
      {
        "sha": "8d7c733f1fdad55d0f10947931b378edc5e039ad",
        "commit": {
          "message": "[Partial Hydration] Don't invoke listeners on parent of dehydrated event target (#16591)\n\n* Don't invoke listeners on parent of dehydrated event target\r\n\r\n* Move Suspense boundary check to getClosestInstanceFromNode\r\n\r\nNow getClosestInstanceFromNode can return either a host component,\r\nhost text component or suspense component when the suspense\r\ncomponent is dehydrated.\r\n\r\nWe then use that to ignore events on a suspense component.\r\n\r\n* Attach the HostRoot fiber to the DOM container\r\n\r\nThis lets us detect if an event happens on this root's subtree before it\r\nhas rendered something.\r\n\r\n* Add todo\r\n\r\nThe approach of checking isFiberMounted answers if we might be in an\r\nin-progress hydration but it doesn't answer which root or boundary\r\nmight be in-progress so we don't know what to wait for.\r\n\r\nThis needs some refactoring.\r\n\r\n* Refactor isFiberMountedImpl to getNearestMountedFiber\r\n\r\nWe'll need the nearest boundary for event replaying so this prepares for\r\nthat.\r\n\r\nThis surfaced an issue that we attach Hydrating tag on the root but normally\r\nthis (and Placement) is attached on the child. This surfaced an issue\r\nthat this can lead to both Placement and Hydrating effects which is not\r\nsupported so we need to ensure that we only ever use one or the other.\r\n\r\n* Add todo for bug I spotted\r\n\r\n* Cache tags\r\n\r\n* Check the ContainerInstanceKey before the InstanceKey\r\n\r\nThe container is inside the instance, so we must find it before the\r\ninstance, since otherwise we'll miss it."
        }
      },
      {
        "sha": "79e46b67784623f42186f69baa233e5854a8408f",
        "commit": {
          "message": "updated flags from false to dicated on www (#16647)"
        }
      },
      {
        "sha": "d96f478f8a79da3125f6842c16efbc2ae8bcd3bf",
        "commit": {
          "message": "use-subscription tearing fix (#16623)\n\n* Add (failing) subscription tearing test and bugfix\r\n* Added more inline comments to test\r\n* Simplified tearing test case slightly"
        }
      },
      {
        "sha": "040ca0fad7296fcc1fb9a01ebdb169fb32e1bc32",
        "commit": {
          "message": "Enable MessageLoop implementation by default (#16408)"
        }
      },
      {
        "sha": "ff006451ad792ed26793691402bf7b5f813205f7",
        "commit": {
          "message": "[react-events] Fix isTargetWithinNode type (#16671)\n\nisTargetWithinNode passes the childTarget to getClosestInstanceFromNode which\r\ndoes not account for a null value of 'node'."
        }
      },
      {
        "sha": "962dfc2c33710b880d90ba8db4f531040077d48e",
        "commit": {
          "message": "Remove experimental scheduler flags (#16672)"
        }
      },
      {
        "sha": "e11bf42ceac5bb5ef0d7c98d0d075048c94352dd",
        "commit": {
          "message": "Check for Suspense boundary in a root Container (#16673)\n\nIf we find a Container that might mean that we're on a node that is inside\r\na Suspense boundary that is directly inside the Container root.\r\n\r\nImagine the div is a Container and the span is a dehydrated instance:\r\n\r\n```\r\n<div>\r\n  <!--$-->\r\n  <span />\r\n  <!--/$-->\r\n</div>\r\n```\r\n\r\nThere's no way to tests this yet since I'm not actually utilizing\r\nthe return value yet.\r\n\r\nThe solution is to just use the same path to check for a Suspense boundary\r\nas if we find a parent instance."
        }
      },
      {
        "sha": "61836fba2a5446c25aa223d2a8b3939cc90c6d03",
        "commit": {
          "message": "Fix typo: wnless -> unless (#16680)"
        }
      },
      {
        "sha": "206d61f72214e8ae5b935f0bf8628491cb7f0797",
        "commit": {
          "message": "fix typos on react-devtools comments (#16681)"
        }
      },
      {
        "sha": "21d79ce04066ade1098a7ae8990e596e01332a65",
        "commit": {
          "message": "Add FreshRuntime WWW bundle, remove ESLint (#16684)"
        }
      },
      {
        "sha": "9044bb0fa3c60ffe723034486b02168bdf63f786",
        "commit": {
          "message": "[Fresh] Fix a crash with implicit arrow return (#16687)"
        }
      },
      {
        "sha": "2f15881859475cee7945eafbc7252244ce240100",
        "commit": {
          "message": "react-refresh@0.4.1"
        }
      },
      {
        "sha": "b260bef398c4da465a41f6b95bc0cf64deafdfd7",
        "commit": {
          "message": "[Fresh] Add skipEnvCheck option to Babel plugin (#16688)"
        }
      },
      {
        "sha": "9444c876d5731e55d9b9931cb239a5b7170162d3",
        "commit": {
          "message": "Remove wrong copy-paste code in test (#16695)"
        }
      },
      {
        "sha": "f26fe8c0a7950ebee023e30745203a33ef27deb8",
        "commit": {
          "message": "[react-events] Keyboard: fix callback return types (#16693)"
        }
      },
      {
        "sha": "031eba789f0548838cf876b7c497f88aecec86f7",
        "commit": {
          "message": "[react-events] Tap: change order of events (#16694)\n\nBefore:\r\n\r\nstart -> change -> update -> end (cancel) -> change\r\n\r\nNow:\r\n\r\nstart -> change -> update -> change -> end (cancel)"
        }
      },
      {
        "sha": "cc2492ccf14ebc20b2a05ff6806a42b6107e2154",
        "commit": {
          "message": "Schedule passive callbacks before layout effects are invoked (#16713)"
        }
      },
      {
        "sha": "440cbf2ee57420bd36ef90aaae19e6542614677a",
        "commit": {
          "message": "Let's schedule the passive effects even earlier (#16714)\n\nIt turns out I needed to schedule mine in the mutation phase and there\r\nare also clean up life-cycles there."
        }
      },
      {
        "sha": "35f447ddbf652091ce98f102bedc71a054a638f6",
        "commit": {
          "message": "Remove console.log from copyWithSet (#16716)"
        }
      },
      {
        "sha": "4905590e1e9f9798804d71da14a45084880edbb4",
        "commit": {
          "message": "Fixed font family issue in FF. (#16701)"
        }
      },
      {
        "sha": "38c03ce00643c02f61bee69fec16459cea01af04",
        "commit": {
          "message": "Fix typo in commet (#16727)"
        }
      },
      {
        "sha": "fd3e8cb0aea97d7945350b434af3e79f4493c98e",
        "commit": {
          "message": "[react-events] Remove stopPropagation (Press) + use document for delegation (#16730)"
        }
      },
      {
        "sha": "ba6bb0fccf21d6b2c6eeb7a6e1036b0071711c2c",
        "commit": {
          "message": "[Fresh] Hash signatures (#16738)"
        }
      },
      {
        "sha": "240040078885767544ddb650ab06d24756e5ee1e",
        "commit": {
          "message": "react-refresh@0.4.2"
        }
      },
      {
        "sha": "41a78cd85c461d2f029c1863614c73a28faabade",
        "commit": {
          "message": "[react-events] Tap: add maximumDistance prop (#16689)\n\nA prop for configuring the maximum distance that the active pointer can move before the tap is cancelled."
        }
      },
      {
        "sha": "c317fc273b6fbe03e30971f7dd5690e540f6a029",
        "commit": {
          "message": "Correct link for troubleshooting react-dev-tools (#16690) (#16708)\n\n* Correct link for troubleshooting react-dev-tools (#16690)\r\n\r\nAs pointed out in #16690 - the link for 'React Tab Doesn't Show Up' points to the empty README.MD.\r\nThis points it to that section in the v3 version README.MD - until an updated section will be added to the new dev-tools.\r\n\r\n* Add a \"The React Tab Doesn't Show Up\" section\r\n\r\nAdd the troubleshooting section to the react dev tools readme\r\n\r\n* point to the correct section in react-dev-tools readme\r\n\r\nAfter adding the troubleshooting section to the readme - this will point to the correct place\r\n\r\n* Moved README file to GitHub\r\n\r\n* Update new issue link to include DevTools label"
        }
      },
      {
        "sha": "4ef6387d6e79e87c3ebc11a53847fd26ad5e71d9",
        "commit": {
          "message": "[DevTools] [Context] Legacy Context (#16617)\n\n* Added hasLegacyContext check.\r\n\r\n* Passed hasLegacyContext as prop to SelectedElement\r\n\r\n* Changing context labels based on hasLegacyContext\r\n\r\n* Fixed flow types.\r\n\r\n* Fixed typos.\r\n\r\n* Added tests for hasLegacyContext.\r\n\r\n* Renamed test.\r\n\r\n* Removed test imports."
        }
      },
      {
        "sha": "709baf1fecdbc8982aa70957a7bd620a929cea68",
        "commit": {
          "message": "[DevTools] Support for adding props | Improved state/props value editing  (#16700)\n\n* Extracted sanitizeForParse\r\n\r\n* Added canAddEntries flag to InspectedElementTree\r\n\r\n* Added EditableKey component.\r\n\r\n* Added support to add an additional entry.\r\n\r\n* Added support to add more complex data structures in the EditableValue component. Added support to change the dataType of the value that is being changed.\r\n\r\n* Fixed flow error.\r\n\r\n* Removed unneeded fragment.\r\n\r\n* Renamed EditableKey -> EditableName\r\n\r\n* Removed unneeded dependency\r\n\r\n* Removed problematic props to state hook.\r\n\r\n* Prettified changes.\r\n\r\n* Removed unused import.\r\n\r\n* Fixed shouldStringify check.\r\n\r\n* Removed testing props from EditableProps.\r\n\r\n* Made some inline tweaks"
        }
      },
      {
        "sha": "2ce5801c25235b198d99393c193a721547eaefac",
        "commit": {
          "message": "Added upcoming changes to DevTools CHANGELOG"
        }
      },
      {
        "sha": "2c98af77c3633e10ce38f4592718eb08096ceecf",
        "commit": {
          "message": "DevTools: Props editing interface tweaks (#16740)\n\n* Fix DevTools new prop input size\r\n* Don't allow adding new values unless an overridePropsFn function has been provided.\r\n* Do not show empty 'none' label ablve a new prop input"
        }
      },
      {
        "sha": "c93038fabe08f7dc26b1a301ed4518a3bc64102f",
        "commit": {
          "message": "Moved backend injection logic to content script"
        }
      },
      {
        "sha": "788036c7ed51fa2a7fc021bbe3807762072dee33",
        "commit": {
          "message": "Moved backend injection logic to content script"
        }
      },
      {
        "sha": "85c7211014a1364fef8d0c3da512ddf63fb408e8",
        "commit": {
          "message": "Moved injection logic to content script"
        }
      },
      {
        "sha": "d51f062d039b9c3d37ff936574096e456e1cc7ef",
        "commit": {
          "message": "Formatting changes"
        }
      },
      {
        "sha": "8a6cd3cd12932e5c6dfea9529c8cbafb9be46445",
        "commit": {
          "message": "remove ability to inject arbitrary scripts"
        }
      },
      {
        "sha": "e04f4259c4c2063038c47e0364f4d7ac71236bc0",
        "commit": {
          "message": "Handle SuspenseListComponent getting retried (#16745)\n\nThis happens for example when a deleted boundary transfers its pending\r\npromises to the list so that the list can be retried.\r\n\r\nThis wasn't caught by unit tests because this flag wasn't on in those\r\ntests."
        }
      },
      {
        "sha": "b0a8a3e04139eecf3ad46266abdab65e5abe60c7",
        "commit": {
          "message": "Mark root as already hydrated after committing (#16739)\n\n* Mark root as already hydrated after committing\r\n\r\n* Remove current/child check for hydration and rely on the root flag instead"
        }
      },
      {
        "sha": "ab4951fc03750a726e412b90126e0737fbd04014",
        "commit": {
          "message": "Re-arrange slightly to prevent refactor hazard (#16743)\n\n* Track \"pending\" and \"suspended\" ranges\r\n\r\nA FiberRoot can have pending work at many distinct priorities. (Note: we\r\nrefer to these levels as \"expiration times\" to distinguish the concept\r\nfrom Scheduler's notion of priority levels, which represent broad\r\ncategories of work. React expiration times are more granualar. They're\r\nmore like a concurrent thread ID, which also happens to correspond to a\r\nmoment on a timeline. It's an overloaded concept and I'm handwaving over\r\nsome of the details.)\r\n\r\nGiven a root, there's no convenient way to read all the pending levels\r\nin the entire tree, i.e. there's no single queue-like structure that\r\ntracks all the levels, because that granularity of information is not\r\nneeded by our algorithms. Instead we track the subset of information\r\nthat we actually need — most importantly, the highest priority level\r\nthat exists in the entire tree.\r\n\r\nAside from that, the other information we track includes the range of\r\npending levels that are known to be suspended, and therefore should not\r\nbe worked on.\r\n\r\nThis is a refactor of how that information is tracked, and what each\r\nfield represents:\r\n\r\n- A *pending* level is work that is unfinished, or not yet committed.\r\n  This includes work that is suspended from committing.\r\n  `firstPendingTime` and `lastPendingTime` represent the range of\r\n  pending work. (Previously, \"pending\" was the same as \"not suspended.\")\r\n- A *suspended* level is work that did not complete because data was\r\n  missing. `firstSuspendedTime` and `lastSuspendedTime` represent the\r\n  range of suspended work. It is a subset of the pending range. (These\r\n  fields are new to this commit.)\r\n- `nextAfterSuspendedTime` represents the next known level that comes\r\n  after the suspended range.\r\n\r\nThis commit doesn't change much in terms of observable behavior. The one\r\nchange is that, when a level is suspended, React will continue working\r\non the next known level instead of jumping straight to the last pending\r\nlevel. Subsequent commits will use this new structure for a more\r\nsubstantial refactor for how tasks are scheduled per root.\r\n\r\n* Get next expiration time from FiberRoot\r\n\r\nGiven a FiberRoot, we should be able to determine the next expiration\r\ntime that needs to be worked on, taking into account the levels that\r\nare pending, suspended, pinged, and so on.\r\n\r\nThis removes the `expirationTime` argument from\r\n`scheduleCallbackForRoot`, and renames it to `ensureRootIsScheduled` to\r\nreflect the new signature. The expiration time is instead read from the\r\nroot using a new function, `getNextExpirationTimeToWorkOn`.\r\n\r\nThe next step will be to remove the `expirationTime` argument from\r\n`renderRoot`, too.\r\n\r\n* Don't bind expiration time to render callback\r\n\r\nThis is a fragile pattern because there's only meant to be a single\r\ntask per root, running at a single expiration time. Instead of binding\r\nthe expiration time to the render task, or closing over it, we should\r\ndetermine the correct expiration time to work on using fields we\r\nstore on the root object itself.\r\n\r\nThis removes the \"return a continuation\" pattern from the\r\n`renderRoot` function. Continuation handling is now handled by\r\nthe wrapper function, which I've renamed from `runRootCallback` to\r\n`performWorkOnRoot`. That function is merely an entry point to\r\n`renderRoot`, so I've also removed the callback argument.\r\n\r\nSo to sum up, at at the beginning of each task, `performWorkOnRoot`\r\ndetermines which expiration time to work on, then calls `renderRoot`.\r\nAnd before exiting, it checks if it needs to schedule another task.\r\n\r\n* Update error recovery test to match new semantics\r\n\r\n* Remove `lastPendingTime` field\r\n\r\nIt's no longer used anywhere\r\n\r\n* Restart on update to already suspended root\r\n\r\nIf the work-in-progress root already suspended with a delay, then the\r\ncurrent render definitely won't finish. We should interrupt the render\r\nand switch to the incoming update.\r\n\r\n* Restart on suspend if return path has an update\r\n\r\nSimilar to the previous commit, if we suspend with a delay, and\r\nsomething in the return path has a pending update, we should abort\r\nthe current render and switch to the update instead.\r\n\r\n* Track the next unprocessed level globally\r\n\r\nInstead of backtracking the return path. The main advantage over the\r\nbacktracking approach is that we don't have to backtrack from the source\r\nfiber. (The main disadvantages are that it requires another module-level\r\nvariable, and that it could include updates from unrelated\r\nsibling paths.)\r\n\r\n* Re-arrange slightly to prevent refactor hazard\r\n\r\nIt should not be possible to perform any work on a root without\r\ncalling `ensureRootIsScheduled` before exiting. Otherwise, we could\r\nfail to schedule a callback for pending work and the app could freeze.\r\n\r\nTo help prevent a future refactor from introducing such a bug, this\r\nchange makes it so that `renderRoot` is always wrapped in try-finally,\r\nand the `finally` block calls `ensureRootIsScheduled`.\r\n\r\n* Remove recursive calls to `renderRoot`.\r\n\r\nThere are a few leftover cases where `renderRoot` is called recursively.\r\nAll of them are related to synchronously flushing work before its\r\nexpiration time.\r\n\r\nWe can remove these calls by tracking the last expired level on the\r\nroot, similar to what we do for other types of pending work, like pings.\r\n\r\n* Remove argument from performSyncWorkOnRoot\r\n\r\nRead the expiration time from the root, like we do\r\nin performConcurrentWorkOnRoot."
        }
      },
      {
        "sha": "ae724be7becd26f924b3888959b3e84b78a7e34d",
        "commit": {
          "message": "[react-interactions] Add TabFocusContainer and TabbableScope UI components (#16732)"
        }
      },
      {
        "sha": "56114a4b22fee198e9a8a114b8f3c7790acdb541",
        "commit": {
          "message": "Change `trackedTouchCount` console.error to warn (#16750)"
        }
      },
      {
        "sha": "2e75000f404ec7810fac03420b2e2cf215baa69d",
        "commit": {
          "message": "Removed done(), added some comments explaining the change"
        }
      },
      {
        "sha": "3a49dff386ad99ccea320334ba631899bab25e62",
        "commit": {
          "message": "[react-events] Use context.objectAssign in Tap responder (#16748)"
        }
      },
      {
        "sha": "776d1c69b91aafe59027fbf51b8a07d8c7596e78",
        "commit": {
          "message": "Lint fixes"
        }
      },
      {
        "sha": "f09854a9e85cb612f26172f6ea1dea0b3de45aec",
        "commit": {
          "message": "Moved inline comment."
        }
      },
      {
        "sha": "4290967d4c012fcbab4bf73102340fc3a4bbe3f2",
        "commit": {
          "message": "Merge branch 'tt-compat' of https://github.com/onionymous/react into onionymous-tt-compat"
        }
      },
      {
        "sha": "efa780d0abfd2d247a863ade0bd41f31ba2c6c9f",
        "commit": {
          "message": "Removed DT inject() script since it's no longer being used"
        }
      },
      {
        "sha": "8f03109cd269d23999f63644ab50b612de66560e",
        "commit": {
          "message": "Moved backend injection to the content script (#16752)\n\n* Moved backend injection logic to content script\n\n* Moved backend injection logic to content script\n\n* Moved injection logic to content script\n\n* Formatting changes\n\n* remove ability to inject arbitrary scripts\n\n* Removed done(), added some comments explaining the change\n\n* Lint fixes\n\n* Moved inline comment.\n\n* Deleted inject() script since it was no longer being used"
        }
      },
      {
        "sha": "0a2215cc0e3067087ff29644f4c50ee1fc69984b",
        "commit": {
          "message": "[Scheduler][www] Put profiling feature behind flag (#16757)\n\nOur infra currently doesn't support loading a separate profiling\r\nbuild of Scheduler. Until that's fixed, the recommendation is to load\r\na single build and gate the profiling feature behind a flag.\r\n\r\nAlternative to #16659"
        }
      },
      {
        "sha": "3717c25a7e392fa7a9fceb1890ed354c94e05e70",
        "commit": {
          "message": "[react-interactions] More Tab Focus control handling (#16751)"
        }
      },
      {
        "sha": "35a202d0e7d7c4ef3c0768cb85ac5e17b6eb03b3",
        "commit": {
          "message": "[react-events] Ensure we restore currentInstance + currentTimers (#16758)"
        }
      },
      {
        "sha": "ba932a5ad953d7cb36bca273cfeab7eac5700f82",
        "commit": {
          "message": "fix: inspect ClassComponent.render instead of constructor, fixes #16749 (#16759)"
        }
      },
      {
        "sha": "fb39f62925b26bd3d1d0469a7ba698f2818eb14c",
        "commit": {
          "message": "Added upcoming changes to DevTools CHANGELOG"
        }
      },
      {
        "sha": "4b0b556dcf6f84c3e4a4e2a9dd0426c3430d1c86",
        "commit": {
          "message": "[react-interactions] Refactor TabFocusController (#16768)"
        }
      },
      {
        "sha": "a7dabcb60afa1ec4de29501f0b298565af47f9e3",
        "commit": {
          "message": "Revert \"Re-arrange slightly to prevent refactor hazard (#16743)\" (#16769)\n\nThis reverts commit ab4951fc03750a726e412b90126e0737fbd04014.\r\n\r\n* Track \"pending\" and \"suspended\" ranges\r\n\r\nA FiberRoot can have pending work at many distinct priorities. (Note: we\r\nrefer to these levels as \"expiration times\" to distinguish the concept\r\nfrom Scheduler's notion of priority levels, which represent broad\r\ncategories of work. React expiration times are more granualar. They're\r\nmore like a concurrent thread ID, which also happens to correspond to a\r\nmoment on a timeline. It's an overloaded concept and I'm handwaving over\r\nsome of the details.)\r\n\r\nGiven a root, there's no convenient way to read all the pending levels\r\nin the entire tree, i.e. there's no single queue-like structure that\r\ntracks all the levels, because that granularity of information is not\r\nneeded by our algorithms. Instead we track the subset of information\r\nthat we actually need — most importantly, the highest priority level\r\nthat exists in the entire tree.\r\n\r\nAside from that, the other information we track includes the range of\r\npending levels that are known to be suspended, and therefore should not\r\nbe worked on.\r\n\r\nThis is a refactor of how that information is tracked, and what each\r\nfield represents:\r\n\r\n- A *pending* level is work that is unfinished, or not yet committed.\r\n  This includes work that is suspended from committing.\r\n  `firstPendingTime` and `lastPendingTime` represent the range of\r\n  pending work. (Previously, \"pending\" was the same as \"not suspended.\")\r\n- A *suspended* level is work that did not complete because data was\r\n  missing. `firstSuspendedTime` and `lastSuspendedTime` represent the\r\n  range of suspended work. It is a subset of the pending range. (These\r\n  fields are new to this commit.)\r\n- `nextAfterSuspendedTime` represents the next known level that comes\r\n  after the suspended range.\r\n\r\nThis commit doesn't change much in terms of observable behavior. The one\r\nchange is that, when a level is suspended, React will continue working\r\non the next known level instead of jumping straight to the last pending\r\nlevel. Subsequent commits will use this new structure for a more\r\nsubstantial refactor for how tasks are scheduled per root.\r\n\r\n* Get next expiration time from FiberRoot\r\n\r\nGiven a FiberRoot, we should be able to determine the next expiration\r\ntime that needs to be worked on, taking into account the levels that\r\nare pending, suspended, pinged, and so on.\r\n\r\nThis removes the `expirationTime` argument from\r\n`scheduleCallbackForRoot`, and renames it to `ensureRootIsScheduled` to\r\nreflect the new signature. The expiration time is instead read from the\r\nroot using a new function, `getNextExpirationTimeToWorkOn`.\r\n\r\nThe next step will be to remove the `expirationTime` argument from\r\n`renderRoot`, too.\r\n\r\n* Don't bind expiration time to render callback\r\n\r\nThis is a fragile pattern because there's only meant to be a single\r\ntask per root, running at a single expiration time. Instead of binding\r\nthe expiration time to the render task, or closing over it, we should\r\ndetermine the correct expiration time to work on using fields we\r\nstore on the root object itself.\r\n\r\nThis removes the \"return a continuation\" pattern from the\r\n`renderRoot` function. Continuation handling is now handled by\r\nthe wrapper function, which I've renamed from `runRootCallback` to\r\n`performWorkOnRoot`. That function is merely an entry point to\r\n`renderRoot`, so I've also removed the callback argument.\r\n\r\nSo to sum up, at at the beginning of each task, `performWorkOnRoot`\r\ndetermines which expiration time to work on, then calls `renderRoot`.\r\nAnd before exiting, it checks if it needs to schedule another task.\r\n\r\n* Update error recovery test to match new semantics\r\n\r\n* Remove `lastPendingTime` field\r\n\r\nIt's no longer used anywhere\r\n\r\n* Restart on update to already suspended root\r\n\r\nIf the work-in-progress root already suspended with a delay, then the\r\ncurrent render definitely won't finish. We should interrupt the render\r\nand switch to the incoming update.\r\n\r\n* Restart on suspend if return path has an update\r\n\r\nSimilar to the previous commit, if we suspend with a delay, and\r\nsomething in the return path has a pending update, we should abort\r\nthe current render and switch to the update instead.\r\n\r\n* Track the next unprocessed level globally\r\n\r\nInstead of backtracking the return path. The main advantage over the\r\nbacktracking approach is that we don't have to backtrack from the source\r\nfiber. (The main disadvantages are that it requires another module-level\r\nvariable, and that it could include updates from unrelated\r\nsibling paths.)\r\n\r\n* Re-arrange slightly to prevent refactor hazard\r\n\r\nIt should not be possible to perform any work on a root without\r\ncalling `ensureRootIsScheduled` before exiting. Otherwise, we could\r\nfail to schedule a callback for pending work and the app could freeze.\r\n\r\nTo help prevent a future refactor from introducing such a bug, this\r\nchange makes it so that `renderRoot` is always wrapped in try-finally,\r\nand the `finally` block calls `ensureRootIsScheduled`.\r\n\r\n* Remove recursive calls to `renderRoot`.\r\n\r\nThere are a few leftover cases where `renderRoot` is called recursively.\r\nAll of them are related to synchronously flushing work before its\r\nexpiration time.\r\n\r\nWe can remove these calls by tracking the last expired level on the\r\nroot, similar to what we do for other types of pending work, like pings.\r\n\r\n* Remove argument from performSyncWorkOnRoot\r\n\r\nRead the expiration time from the root, like we do\r\nin performConcurrentWorkOnRoot."
        }
      },
      {
        "sha": "b4b8a349a3aa62e693e73cc16a231c3cc59b96de",
        "commit": {
          "message": "[react-interactions] Add experimental FocusGrid API (#16766)"
        }
      },
      {
        "sha": "d6f6b951e12e25b67f681094714a337356d2a310",
        "commit": {
          "message": "Support disabling interaction tracing for suspense promises (#16776)\n\n* Support disabling interaction tracing for suspense promises\r\n\r\nIf a thrown Promise has the __reactDoNotTraceInteractions attribute, React will not wrapped its callbacks to continue tracing any current interaction(s).\r\n\r\n* Added optional '__reactDoNotTraceInteractions' attribute to Flow Thenable type"
        }
      },
      {
        "sha": "137ea783b1073f7b94a0bf252b6344174c65754b",
        "commit": {
          "message": "Re-enable risky work loop changes (#16771)\n\nThe stack of PRs in #16743 was reverted. This adds them back."
        }
      },
      {
        "sha": "0c0b30b8c742d891ad29da0db8bd4ba21021c640",
        "commit": {
          "message": "Remove unnecessary interaction tracing ping wrapper (#16777)"
        }
      },
      {
        "sha": "87eaa90ef8dabd3d557085586d524016cd946d30",
        "commit": {
          "message": "[react-events] Keyboard calls preventDefault on 'click' events (#16779)\n\nMake sure to call preventDefault for any 'click' events that follow a 'keydown'\r\nevent that matches 'preventKeys'"
        }
      },
      {
        "sha": "45898d0be0517b0851beaf2e7df0db3a054a437d",
        "commit": {
          "message": "[Scheduler] Prevent event log from growing unbounded (#16781)\n\nIf a Scheduler profile runs without stopping, the event log will grow\r\nunbounded. Eventually it will run out of memory and the VM will throw\r\nan error.\r\n\r\nTo prevent this from happening, let's automatically stop the profiler\r\nonce the log exceeds a certain limit. We'll also print a warning with\r\nadvice to call `stopLoggingProfilingEvents` explicitly."
        }
      },
      {
        "sha": "45b6443c90d1db08a2ff223ec3fa0b2eafddcb67",
        "commit": {
          "message": "Spelling is fundamental (#16782)"
        }
      },
      {
        "sha": "cdbfa5044b596ba5feb6d96408ada3eb8907e53c",
        "commit": {
          "message": "fix typo inteval -> interval & continutation -> continuation (#16760)\n\n* fix typo alterate -> alternate\r\n\r\n* fix typo interal -> interval & continutation -> continuation"
        }
      },
      {
        "sha": "b8d079b41372290aa1846e3a780d85d05ab8ffc1",
        "commit": {
          "message": "Add trusted types to react on client side (#16157)\n\n* Add trusted types to react on client side\r\n\r\n* Implement changes according to review\r\n\r\n* Remove support for trusted URLs, change TrustedTypes to trustedTypes\r\n\r\n* Add support for deprecated trusted URLs\r\n\r\n* Apply PR suggesstions\r\n\r\n* Warn only once, remove forgotten check, put it behind a flag\r\n\r\n* Move comment\r\n\r\n* Fix PR comments\r\n\r\n* Fix html toString concatenation\r\n\r\n* Fix forgotten else branch\r\n\r\n* Fix PR comments"
        }
      },
      {
        "sha": "9691eb273a8e8b2f36b2d8d89506d002be3a8d1c",
        "commit": {
          "message": "[react-events] Keyboard support for virtual clicks (#16780)\n\nThis accounts for all clicks that are natively dispatched following relevant\r\nkeyboard interactions (e.g., key is \"Enter\"), as well as programmatic clicks,\r\nand screen-reader virtual clicks."
        }
      },
      {
        "sha": "494300b366ef446ccee8811f518ba224c923909e",
        "commit": {
          "message": "[react-ui] Move experimental event+a11y work to react-ui package (#16794)"
        }
      },
      {
        "sha": "3af05de1aaed309f8146bc53f9a4b4d785abdd3f",
        "commit": {
          "message": "[react-ui] usePress from useKeyboard and useTap (#16772)\n\nThis implements 'usePress' in user-space as a combination of 'useKeyboard' and 'useTap'.  The existing 'usePress' API is preserved for now. The previous 'usePress' implementation is moved to 'PressLegacy'."
        }
      },
      {
        "sha": "8e0c574122b3d3eadcffaec1223e95d479b01c6e",
        "commit": {
          "message": "Follow-up to initial Trusted Types support (#16795)\n\n* Follow-up to initial Trusted Types support\r\n\r\n* Fast-path both strings and numbers\r\n\r\n* Move shared objects out of every test"
        }
      },
      {
        "sha": "2f1e8c5f784e288beef9ac5b9365304f841e611f",
        "commit": {
          "message": "[react-core] Clear more properties in detachFiber (#16807)"
        }
      },
      {
        "sha": "f40ceb0010eaddab8cad94c67189837c495a5b57",
        "commit": {
          "message": "[react-ui] FocusGrid -> ReactFocusTable + tweaks and fixes (#16806)"
        }
      },
      {
        "sha": "901139c2910d0dc33f07f85c748c64371f8664f4",
        "commit": {
          "message": "[scheduler][profiler] Start time of delayed tasks (#16809)\n\nFixes a bug in the Scheduler profiler where the start time of a delayed\r\ntasks is always 0."
        }
      },
      {
        "sha": "7c802de797262dba582c8bf99e3793be75b5b73b",
        "commit": {
          "message": "[react-a11y] Add react-ui/accessibility to bundle build (#16804)"
        }
      },
      {
        "sha": "8f1533f4d84bfc8c2bebfac13d7a3dbf2dea7ead",
        "commit": {
          "message": "[react-ui] Fix bundle name [hotfix] (#16811)"
        }
      },
      {
        "sha": "e8c7ddeef2919560da9ffa7e1043a4c6418c8701",
        "commit": {
          "message": "Release script filters DevTools NPM pakcages (#16810)"
        }
      },
      {
        "sha": "70dcdd265d0d930c0d0e3666ca973dc455100f6b",
        "commit": {
          "message": "Updated pending CHANGELOG for DevTools"
        }
      },
      {
        "sha": "d1c25558614164936bb90b6c6dc590106381c446",
        "commit": {
          "message": "[react-devtools-shared] Added string type check for object name prop in getDisplayName function (#16798)\n\n* [react-devtools-shared] Added string type check for object name prop in getDisplayName function from utils.js file; tests included;\r\n\r\n* Re-added empty string check to getDisplayName()\r\n\r\n* Tweaked tests to use real functions\r\n\r\nThis more closely simulates how the utility is being used in production, and would catch cases like anonymous functions (with empty string names)."
        }
      },
      {
        "sha": "d862f0ea566be38d0c6a67447cb3a4bcf256cd55",
        "commit": {
          "message": "Optimize objectIs (#16212)"
        }
      },
      {
        "sha": "18cb59050b4958b5600b8baf5cf03bdaba3b6c88",
        "commit": {
          "message": "[react-core] Do not null fiber.sibling in detachFiber (#16820)"
        }
      },
      {
        "sha": "6ecfa90eb0d9bc369d0e6930bc02d59dfba770d1",
        "commit": {
          "message": "[React Native] Fix for view config registrations (#16821)"
        }
      },
      {
        "sha": "f818af9b03700f681bad0de6041e404cd681319d",
        "commit": {
          "message": "[Fresh] Always remount classes (#16823)"
        }
      },
      {
        "sha": "a5df18a9e5d7cc70c30ce144dcc291e9f64cb451",
        "commit": {
          "message": "prevent firefox marking required textareas invalid (#16578)\n\n* prevent firefox marking required textareas invalid\r\n\r\nBug was caused by an IE10/IE11 bugfix dealing with the placeholder attribute and textContent. Solved by avoiding the IE bugfix when textContent was empty.\r\n\r\nCloses #16402\r\n\r\n* more explicit conditional check for textContent\r\n\r\nre: @philipp-spiess code review\r\n\r\n* clarify textarea test fixture's expected result\r\n\r\nbetter describe the behavior we are testing for\r\nre: @philipp-spiess code review"
        }
      },
      {
        "sha": "924a305780eb71866eb0932027048237b6f5c3cd",
        "commit": {
          "message": "[react-ui] Remove event object warnings (#16822)"
        }
      },
      {
        "sha": "4ddcb8e1344630a63c10790d8e24e1194a1abdce",
        "commit": {
          "message": "[DevTools] Remove Welcome dialog (#16834)"
        }
      },
      {
        "sha": "fd870e6b6a9c35cf4bb77d83dbfe61e07327368f",
        "commit": {
          "message": "[react-ui/events] Tap responder API changes (#16827)\n\nThis patch limits the `onTap*` callbacks to the primary pointer button.\r\nAuxiliary button and modified primary button interactions call\r\n`onAuxiliaryTap`, cancel any active tap, and preserve the native behavior."
        }
      },
      {
        "sha": "35bf9d27a3f9fdf60cea060d20b5c178e437520d",
        "commit": {
          "message": "Exclude react-dom when flow checking other builds (#16737)\n\nThis is because the HostConfig can't be guaranteed to be consistent with\r\nother code such as code that touches the DOM directly.\r\n\r\nIdeally we'd have a more systemic solution to this since it will pop\r\nup for other packages later too."
        }
      },
      {
        "sha": "b5cebedfbe0c05c530ead002b123448b6b71e052",
        "commit": {
          "message": "React DevTools version bump 4.0.6 -> 4.1.0"
        }
      },
      {
        "sha": "08b51aa384125c2169fa5e0371bfdf4e292737a9",
        "commit": {
          "message": "Added React DevTools v4.1.0 release date to CHANGELOG"
        }
      },
      {
        "sha": "57a5805a9f07cbda3fea99b7cca59bd3b2bb8476",
        "commit": {
          "message": "[react-ui] Add preventDefault+stopPropagation to Keyboard + update Focus components (#16833)"
        }
      },
      {
        "sha": "cef47cbc01b3c41ef4bfe3cdf7abd09c34e4a9c2",
        "commit": {
          "message": "Rename experimental react-ui => react-interactions (#16842)"
        }
      },
      {
        "sha": "d7f6dd5a80827aea76fc42f07c77d05abb7180b2",
        "commit": {
          "message": "[react-interactions] Fix typo in FocusTable (#16860)"
        }
      },
      {
        "sha": "70754f10d4119a999ac9a46b6ea8c11a12a1a72d",
        "commit": {
          "message": "[react-interaction] Tweak Focus Table component (#16862)"
        }
      },
      {
        "sha": "312b462d5444c231d5acf656efea6780ad9ba89d",
        "commit": {
          "message": "[react-interactions] Improve consistency of Tap responder (#16837)\n\nMakes sure that touch events with modifier keys behave the same way as other\r\npointer types (i.e., does not call `onTapStart` if the gesture begins with a\r\nmodifier key held down)"
        }
      },
      {
        "sha": "a87d245fc2d0b5eedd5463e6f21bf12443489b15",
        "commit": {
          "message": "[work loop] Prevent work loop from being inlined (#16865)\n\nUses Closure Compiler's `@noinline` directive.\r\n\r\nSee https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#noinline"
        }
      },
      {
        "sha": "0a527707cd8befd21a741ca9646a8551842190b0",
        "commit": {
          "message": "Event Replaying (#16725)\n\n* Add Event Replaying Infra\r\n\r\n* Wire up Roots and Suspense boundaries, to retry events, after they commit\r\n\r\n* Replay discrete events in order in a separate scheduler callback\r\n\r\n* Add continuous events\r\n\r\nThese events only replay their last target if the target is not yet\r\nhydrated. That way we don't have to wait for a previously hovered\r\nboundary before invoking the current target.\r\n\r\n* Enable tests from before\r\n\r\nThese tests were written with replaying in mind and now we can properly\r\nenable them.\r\n\r\n* Unify replaying and dispatching\r\n\r\n* Mark system flags as a replay and pass to legacy events\r\n\r\nThat way we can check if this is a replay and therefore needs a special\r\ncase. One such special case is \"mouseover\" where we check the\r\nrelatedTarget.\r\n\r\n* Eagerly listen to all replayable events\r\n\r\nTo minimize breakages in a minor, I only do this for the new root APIs\r\nsince replaying only matters there anyway. Only if hydrating.\r\n\r\nFor Flare, I have to attach all active listeners since the current\r\nsystem has one DOM listener for each. In a follow up I plan on optimizing\r\nthat by only attaching one if there's at least one active listener\r\nwhich would allow us to start with only passive and then upgrade.\r\n\r\n* Desperate attempt to save bytese\r\n\r\n* Add test for mouseover replaying\r\n\r\nWe need to check if the \"relatedTarget\" is mounted due to how the old\r\nevent system dispatches from the \"out\" event.\r\n\r\n* Fix for nested boundaries and suspense in root container\r\n\r\nThis is a follow up to #16673 which didn't have a test because it wasn't\r\nobservable yet. This shows that it had a bug.\r\n\r\n* Rename RESPONDER_EVENT_SYSTEM to PLUGIN_EVENT_SYSTEM"
        }
      },
      {
        "sha": "013b7ad117834cbb99b4fc0a3d08fdb8622597c9",
        "commit": {
          "message": "[suspense][error handling] Inline renderRoot and fix error handling bug (#16801)\n\n* Outline push/pop logic in `renderRoot`\r\n\r\nI want to get rid of the the `isSync` argument to `renderRoot`, and\r\ninstead use separate functions for concurrent and synchronous render.\r\n\r\nAs a first step, this extracts the push/pop logic that happens before\r\nand after the render phase into helper functions.\r\n\r\n* Extract `catch` block into helper function\r\n\r\nSimilar to previous commit. Extract error handling logic into\r\na separate function so it can be reused.\r\n\r\n* Fork `renderRoot` for sync and concurrent\r\n\r\nRemoves `isSync` argument in favor of separate functions.\r\n\r\n* Extra \"root completion\" logic to separate function\r\n\r\nMoving this out to avoid an accidental early return, which would\r\nbypass the call to `ensureRootIsScheduled` and freeze the UI.\r\n\r\n* Inline `renderRoot`\r\n\r\nInlines `renderRoot` into `performConcurrentWorkOnRoot` and\r\n`performSyncWorkOnRoot`. This lets me remove the `isSync` argument\r\nand also get rid of a redundant try-catch wrapper.\r\n\r\n* [suspense][error handling] Add failing unit test\r\n\r\nCovers an edge case where an error is thrown inside the complete phase\r\nof a component that is in the return path of a component that suspends.\r\nThe second error should also be handled (i.e. able to be captured by\r\nan error boundary.\r\n\r\nThe test is currently failing because there's a call to\r\n`completeUnitOfWork` inside the main render phase `catch` block. That\r\ncall is not itself wrapped in try-catch, so anything that throws is\r\ntreated as a fatal/unhandled error.\r\n\r\nI believe this bug is only observable if something in the host config\r\nthrows; and, only in legacy mode, because in concurrent/batched mode,\r\n`completeUnitOfWork` on fiber that throws follows the \"unwind\" path\r\nonly, not the \"complete\" path, and the \"unwind\" path does not call\r\nany host config methods.\r\n\r\n* [scheduler][profiler] Start time of delayed tasks\r\n\r\nFixes a bug in the Scheduler profiler where the start time of a delayed\r\ntasks is always 0.\r\n\r\n* Remove ad hoc `throw`\r\n\r\nFatal errors (errors that are not captured by an error boundary) are\r\ncurrently rethrown from directly inside the render phase's `catch`\r\nblock. This is a refactor hazard because the code in this branch has\r\nto mirror the code that happens at the end of the function, when exiting\r\nthe render phase in the normal case.\r\n\r\nThis commit moves the throw to the end, using a new root exit status.\r\n\r\n* Handle errors that occur on unwind"
        }
      },
      {
        "sha": "1758b3f7bafdb9197cf9464182f02da355f4c540",
        "commit": {
          "message": "[react-interactions] Add no-op stopPropagation + preventDefault to Press (#16868)\n\nFix"
        }
      },
      {
        "sha": "1a6294d3e2254f03267da3412becbe51188e830f",
        "commit": {
          "message": "[react-interaction] Refactor a11y components more (#16866)"
        }
      },
      {
        "sha": "9b3cde9b627e91f9d4a81093384d579928474c37",
        "commit": {
          "message": "Fix DevTools v4.1 editable hook regression (#16867)\n\n* Fixed a regression in hooks editor from a recent EditableValue change\r\n\r\n* Fixed a reset/state bug in useEditableValue() hook and removed unnecessary useMemo()"
        }
      },
      {
        "sha": "bce2ac63a93fd77e352286a0074ffe471301ab8a",
        "commit": {
          "message": "Revert change to backend injection method from PR #16752 (#16864)\n\nPR #16752 changed how we were injecting the backend script to be done by the content script in order to work around Trusted Type limitations with our previous approach. This may have caused a regression (see #16840) so I'm backing it out to verify."
        }
      },
      {
        "sha": "911104a129d48fb58c5ef4f80339f2e58539186a",
        "commit": {
          "message": "DevTools CHANGELOG update"
        }
      },
      {
        "sha": "c5e7190ed4af266bbc636bda08e766fce9ee68a7",
        "commit": {
          "message": "[react-interactions] Press with useRef instead of useState (#16870)\n\nWe only need to read and modify the value for the lifetime of the hook"
        }
      },
      {
        "sha": "8b580a89d6dbbde8a3ed69475899addef1751116",
        "commit": {
          "message": "Idle updates should not be blocked by hidden work (#16871)\n\n* Idle updates should not be blocked by hidden work\r\n\r\nUse the special `Idle` expiration time for updates that are triggered at\r\nScheduler's `IdlePriority`, instead of `Never`.\r\n\r\nThe key difference between Idle and Never¹ is that Never work can be\r\ncommitted in an inconsistent state without tearing the UI. The main\r\nexample is offscreen content, like a hidden subtree.\r\n\r\n¹ \"Never\" isn't the best name. I originally called it that because it\r\n\"never\" expires, but neither does Idle. Since it's mostly used for\r\noffscreen subtrees, we could call it \"Offscreen.\" However, it's also\r\nused for dehydrated Suspense boundaries, which are inconsistent in the\r\nsense that they haven't finished yet, but aren't visibly inconsistent\r\nbecause the server rendered HTML matches what the hydrated tree would\r\nlook like.\r\n\r\n* Reset as early as possible using local variable\r\n\r\n* Updates in a hidden effect should be Idle\r\n\r\nI had made them Never to avoid an extra render when a hidden effect\r\nupdates the hidden component -- if they are Idle, we have to render once\r\nat Idle, which bails out on the hidden subtree, then again at Never to\r\nactually process the update -- but the problem of needing an extra\r\nrender pass to bail out hidden updates already exists and we should fix\r\nthat properly instead of adding yet another special case."
        }
      },
      {
        "sha": "18d2e0c03e4496a824fdb7f89ea2a3d60c30d49a",
        "commit": {
          "message": "Warning system refactoring (part 1) (#16799)\n\n* Rename lowPriorityWarning to lowPriorityWarningWithoutStack\r\n\r\nThis maintains parity with the other warning-like functions.\r\n\r\n* Duplicate the toWarnDev tests to test toLowPriorityWarnDev\r\n\r\n* Make a lowPriorityWarning version of warning.js\r\n\r\n* Extract both variants in print-warning\r\n\r\nAvoids parsing lowPriorityWarning.js itself as the way it forwards the\r\ncall to lowPriorityWarningWithoutStack is not analyzable."
        }
      },
      {
        "sha": "68a87eee544b2bcdff66c751e07cb55939b9d8ca",
        "commit": {
          "message": "[react-interactions] Add FocusList component (#16875)"
        }
      },
      {
        "sha": "793f176dad4544363149098cc56eb2abff687fe2",
        "commit": {
          "message": "[react-interactions] Make FocusList bundle (#16876)"
        }
      },
      {
        "sha": "ebc299fc2f21a74fffa3f8aa2209259d98702156",
        "commit": {
          "message": "[react-interactions] TabFocus -> FocusManager (#16874)"
        }
      },
      {
        "sha": "32e5c97d11e390e6a3d3ce6a2ab7443daed09747",
        "commit": {
          "message": "[React Native] Improve errors for invalid ViewConfig getter functions (#16879)\n\n* [React Native] Improve logging for missing view configs and invalid view config getter functions\r\n\r\n* [React Native] Improve logging for missing view configs and invalid view config getter functions"
        }
      },
      {
        "sha": "d0ebde77f6d1232cefc0da184d731943d78e86f2",
        "commit": {
          "message": "[react-interactions] Add initial docs explaining React Scopes (#16892)"
        }
      },
      {
        "sha": "d6d83d7060388c6b1b3bc0a28708995de6240ce3",
        "commit": {
          "message": "[react-interactions] Add Portal propagation configuration (#16889)"
        }
      },
      {
        "sha": "0d8c0cd0968150e187ed7132315521d78a5abf61",
        "commit": {
          "message": "These flags are hard coded in our internal config (#16883)\n\nBy hard coding them here they can get properly DCE and don't have to be\r\nsent to users. The internal config should only have dynamic flags."
        }
      },
      {
        "sha": "a06d181af081a17bea466eef2bae1bdaaf8a4b5e",
        "commit": {
          "message": "Include tag in begin/complete invariant (#16881)"
        }
      },
      {
        "sha": "7c3bd08b3767ed69ddf398176de58214561194a0",
        "commit": {
          "message": "[react-interactions] Add more documentation for a11y components (#16894)"
        }
      },
      {
        "sha": "57bf275fbd89afc9afb84cefb950eb74c3573ea7",
        "commit": {
          "message": "[devtools] Add support for React Scope symbol/number (#16893)"
        }
      },
      {
        "sha": "fa1a3262271be165820fa51daeb036ba260205a3",
        "commit": {
          "message": "Update useEditableValue hook to sync external value changes (#16878)\n\n* Update useEditableValue to mirror value cahnges\r\n\r\nPreviously, the hook initialized local state (in useState) to mirror the prop/state value. Updates to the value were ignored though. (Once the state was initialized, it was never updated.) The new hook updates the local/editable state to mirror the external value unless there are already pending, local edits being made.\r\n\r\n* Optimistic CHANGELOG update\r\n\r\n* Added additional useEditableValue() unit test cases"
        }
      },
      {
        "sha": "4bb0e96b4b0dd5db4bb349cd27425e5594970eb3",
        "commit": {
          "message": "[react-interactions] FocusTable key press bound propgataion (#16895)"
        }
      },
      {
        "sha": "3694a3b5e9a5a3c80d47f9889a17d8337573d513",
        "commit": {
          "message": "Selective Hydration (#16880)\n\n* Add Feature Flag for Selective Hydration\r\n\r\n* Enable Synchronous Hydration of Discrete Events\r\n\r\n* Resolve cyclic dependency"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.9.0",
      "body": "### React\r\n\r\n* Add `<React.Profiler>` API for gathering performance measurements programmatically. ([@bvaughn](https://github.com/bvaughn) in [#15172](https://github.com/facebook/react/pull/15172))\r\n* Remove `unstable_ConcurrentMode` in favor of `unstable_createRoot`. ([@acdlite](https://github.com/acdlite) in [#15532](https://github.com/facebook/react/pull/15532))\r\n\r\n### React DOM\r\n\r\n* Deprecate old names for the `UNSAFE_*` lifecycle methods. ([@bvaughn](https://github.com/bvaughn) in [#15186](https://github.com/facebook/react/pull/15186) and [@threepointone](https://github.com/threepointone) in [#16103](https://github.com/facebook/react/pull/16103))\r\n* Deprecate `javascript:` URLs as a common attack surface. ([@sebmarkbage](https://github.com/sebmarkbage) in [#15047](https://github.com/facebook/react/pull/15047))\r\n* Deprecate uncommon \"module pattern\" (factory) components. ([@sebmarkbage](https://github.com/sebmarkbage) in [#15145](https://github.com/facebook/react/pull/15145))\r\n* Add support for the `disablePictureInPicture` attribute on `<video>`. ([@eek](https://github.com/eek) in [#15334](https://github.com/facebook/react/pull/15334))\r\n* Add support for `onLoad` event for `<embed>`. ([@cherniavskii](https://github.com/cherniavskii) in [#15614](https://github.com/facebook/react/pull/15614))\r\n* Add support for editing `useState` state from DevTools. ([@bvaughn](https://github.com/bvaughn) in [#14906](https://github.com/facebook/react/pull/14906))\r\n* Add support for toggling Suspense from DevTools. ([@gaearon](https://github.com/gaearon) in [#15232](https://github.com/facebook/react/pull/15232))\r\n* Warn when `setState` is called from `useEffect`, creating a loop. ([@gaearon](https://github.com/gaearon) in [#15180](https://github.com/facebook/react/pull/15180))\r\n* Fix a memory leak. ([@paulshen](https://github.com/paulshen) in [#16115](https://github.com/facebook/react/pull/16115))\r\n* Fix a crash inside `findDOMNode` for components wrapped in `<Suspense>`. ([@acdlite](https://github.com/acdlite) in [#15312](https://github.com/facebook/react/pull/15312))\r\n* Fix pending effects from being flushed too late. ([@acdlite](https://github.com/acdlite) in [#15650](https://github.com/facebook/react/pull/15650))\r\n* Fix incorrect argument order in a warning message. ([@brickspert](https://github.com/brickspert) in [#15345](https://github.com/facebook/react/pull/15345))\r\n* Fix hiding Suspense fallback nodes when there is an `!important` style. ([@acdlite](https://github.com/acdlite) in [#15861](https://github.com/facebook/react/pull/15861) and [#15882](https://github.com/facebook/react/pull/15882))\r\n* Slightly improve hydration performance. ([@bmeurer](https://github.com/bmeurer) in [#15998](https://github.com/facebook/react/pull/15998))\r\n\r\n### React DOM Server\r\n\r\n* Fix incorrect output for camelCase custom CSS property names. ([@bedakb](https://github.com/bedakb) in [#16167](https://github.com/facebook/react/pull/16167))\r\n\r\n### React Test Utilities and Test Renderer\r\n\r\n* Add `act(async () => ...)` for testing asynchronous state updates. ([@threepointone](https://github.com/threepointone) in [#14853](https://github.com/facebook/react/pull/14853))\r\n* Add support for nesting `act` from different renderers. ([@threepointone](https://github.com/threepointone) in [#16039](https://github.com/facebook/react/pull/16039) and [#16042](https://github.com/facebook/react/pull/16042))\r\n* Warn in Strict Mode if effects are scheduled outside an `act()` call. ([@threepointone](https://github.com/threepointone) in [#15763](https://github.com/facebook/react/pull/15763) and [#16041](https://github.com/facebook/react/pull/16041))\r\n* Warn when using `act` from the wrong renderer. ([@threepointone](https://github.com/threepointone) in [#15756](https://github.com/facebook/react/pull/15756))\r\n\r\n## Artifacts\r\n\r\n• react: https://unpkg.com/react@16.9.0/umd/\r\n• react-art: https://unpkg.com/react-art@16.9.0/umd/\r\n• react-dom: https://unpkg.com/react-dom@16.9.0/umd/\r\n• react-is: https://unpkg.com/react-is@16.9.0/umd/\r\n• react-test-renderer: https://unpkg.com/react-test-renderer@16.9.0/umd/\r\n• scheduler: https://unpkg.com/scheduler@0.15.0/umd/"
    },
    "commits": []
  },
  {
    "release": {
      "tag_name": "v16.9.0-rc.0",
      "body": "This is a release candidate for React v16.9.0.\r\n\r\nChangelog is available in https://github.com/facebook/react/pull/16254.\r\n\r\n## UMD builds\r\n• react: https://unpkg.com/react@16.9.0-rc.0/umd/\r\n• react-art: https://unpkg.com/react-art@16.9.0-rc.0/umd/\r\n• react-dom: https://unpkg.com/react-dom@16.9.0-rc.0/umd/\r\n• react-is: https://unpkg.com/react-is@16.9.0-rc.0/umd/\r\n• react-test-renderer: https://unpkg.com/react-test-renderer@16.9.0-rc.0/umd/\r\n• scheduler: https://unpkg.com/scheduler@0.15.0-rc.0/umd/"
    },
    "commits": [
      {
        "sha": "8af90c8972ab4cfc5fdbca8c576c202ce9cadab8",
        "commit": {
          "message": "Add test for nested avoided boundaries (#15636)\n\n* Add test for nested avoided boundaries\r\n\r\n* Add test for top level avoided boundaries"
        }
      },
      {
        "sha": "b0657fde6aef2e067e6d7808809deb194a857278",
        "commit": {
          "message": "Event API: ensure getFocusableElementsInScope handles suspended trees (#15651)"
        }
      },
      {
        "sha": "668fbd651b6b245da5c42e9e243adc88f0278517",
        "commit": {
          "message": "Fix serial passive effects (#15650)\n\n* Failing test for false positive warning\r\n\r\n* Flush passive effects before discrete events\r\n\r\nCurrently, we check for pending passive effects inside the `setState`\r\nmethod before we add additional updates to the queue, in case those\r\npending effects also add things to the queue.\r\n\r\nHowever, the `setState` method is too late, because the event that\r\ncaused the update might not have ever fired had the passive effects\r\nflushed before we got there.\r\n\r\nThis is the same as the discrete/serial events problem. When a serial\r\nupdate comes in, and there's already a pending serial update, we have to\r\ndo it before we call the user-provided event handlers. Because the event\r\nhandlers themselves might change as a result of the pending update.\r\n\r\nThis commit moves the `flushPassiveEffects` call to before the discrete\r\nevent handlers are called, and removes it from the `setState` method.\r\nNon-discrete events will not cause passive effects to flush, which is\r\nfine, since by definition they are not order dependent."
        }
      },
      {
        "sha": "d34b457ce2a2cee1160dbc90b93312ff9850958c",
        "commit": {
          "message": "Feature flag to revert #15650 (#15659)\n\nPR #15650 is a bugfix but it's technically a semantic change that could\r\ncause regressions. I don't think it will be an issue, since the\r\nprevious behavior was both broken and incoherent, but out of an\r\nabundance of caution, let's wrap it in a flag so we can easily revert\r\nit if necessary."
        }
      },
      {
        "sha": "b899819e77cf0b7fccafaa4bb70363c430b574df",
        "commit": {
          "message": "Use dynamic flag in test renderer in www (#15662)\n\nUses a dynamic flag in www's test renderer build so we can condtionally\r\ndisable the passive effects bugfix. Matches the dynamic flag used in\r\nthe www React DOM build."
        }
      },
      {
        "sha": "f961050a376f2a0d1397fb8129ae0e7d4efa9b52",
        "commit": {
          "message": "Always flushPassiveEffects before rendering\n\nI  mistakenly wrapped this in the revertPassiveEffectsChange feature\nflag. It should flush regardless of the flag."
        }
      },
      {
        "sha": "4bf88ddeca37d5971c05a9ab720f898409c143fd",
        "commit": {
          "message": "Fix <embed> not triggering onLoad (#15614)"
        }
      },
      {
        "sha": "bb89b4eacc4edc0954910955322296789d8e2089",
        "commit": {
          "message": "Bail out of updates in offscreen trees (#15666)\n\n* Bail out of updates in offscreen trees\r\n\r\n* Address review"
        }
      },
      {
        "sha": "aad5a264d27bba113d322613587997d2987ba2d3",
        "commit": {
          "message": "Event API: ensure calculateResponderRegion accounts for page offset (#15671)"
        }
      },
      {
        "sha": "d278a3ff8b2863afb9ab7807e42d31f33c84eb78",
        "commit": {
          "message": "`act()` - s / flushPassiveEffects / Scheduler.unstable_flushWithoutYielding (#15591)\n\n* s/flushPassiveEffects/unstable_flushWithoutYielding\r\n\r\na first crack at flushing the scheduler manually from inside act(). uses unstable_flushWithoutYielding(). The tests that changed, mostly replaced toFlushAndYield(...) with toHaveYielded(). For some tests that tested the state of the tree before flushing effects (but still after updates), I replaced act() with bacthedUpdates().\r\n\r\n* ugh lint\r\n\r\n* pass build, flushPassiveEffects returns nothing now\r\n\r\n* pass test-fire\r\n\r\n* flush all work (not just effects), add a compatibility mode\r\n\r\nof note, unstable_flushWithoutYielding now returns a boolean much like flushPassiveEffects\r\n\r\n* umd build for scheduler/unstable_mock, pass the fixture with it\r\n\r\n* add a comment to Shcduler.umd.js for why we're exporting unstable_flushWithoutYielding\r\n\r\n* run testsutilsact tests in both sync/concurrent modes\r\n\r\n* augh lint\r\n\r\n* use a feature flag for the missing mock scheduler warning\r\n\r\nI also tried writing a test for it, but couldn't get the scheduler to unmock. included the failing test.\r\n\r\n* Update ReactTestUtilsAct-test.js\r\n\r\n- pass the mock scheduler warning test,\r\n- rewrite some tests to use Scheduler.yieldValue\r\n- structure concurrent/legacy suites neatly\r\n\r\n* pass failing tests in batchedmode-test\r\n\r\n* fix pretty/lint/import errors\r\n\r\n* pass test-build\r\n\r\n* nit: pull .create(null) out of the act() call"
        }
      },
      {
        "sha": "95e06ac3d091b6746be80d13840884dc7894b01c",
        "commit": {
          "message": "Event API: isTargetWithinEventResponderScope on unmounted event components (#15672)"
        }
      },
      {
        "sha": "1160b37691d32c9bf385b7e7d7a106adce05c7df",
        "commit": {
          "message": "Event API: Add responder allowMultipleHostChildren flag (#15646)"
        }
      },
      {
        "sha": "9c6de716d028f17736d0892d8a3d8f3ac2cb62bd",
        "commit": {
          "message": "Add withSuspenseConfig API (#15593)\n\n* Add suspendIfNeeded API and a global scope to track it\r\n\r\nAdds a \"current\" suspense config that gets applied to all updates scheduled\r\nduring the current scope.\r\n\r\nI suspect we might want to add other types of configurations to the \"batch\"\r\nso I called it the \"batch config\".\r\n\r\nThis works across renderers/roots but they won't actually necessarily go\r\ninto the same batch.\r\n\r\n* Add the suspenseConfig to all updates created during this scope\r\n\r\n* Compute expiration time based on the timeout of the suspense config\r\n\r\n* Track if there was a processed suspenseConfig this render pass\r\n\r\nWe'll use this info to suspend a commit for longer when necessary.\r\n\r\n* Mark suspended states that should be avoided as a separate flag\r\n\r\nThis lets us track which renders we want to suspend for a short time vs\r\na longer time if possible.\r\n\r\n* Suspend until the full expiration time if something asked to suspend\r\n\r\n* Reenable an old test that we can now repro again\r\n\r\n* Suspend the commit even if it is complete if there is a minimum delay\r\n\r\nThis can be used to implement spinners that don't flicker if the data\r\nand rendering is really fast.\r\n\r\n* Default timeoutMs to low pri expiration if not provided\r\n\r\nThis is a required argument in the type signature but people may not\r\nsupply it and this is a user facing object.\r\n\r\n* Rename to withSuspenseConfig and drop the default config\r\n\r\nThis allow opting out of suspending in some nested scope.\r\n\r\nA lot of time when you use this function you'll use it with high level\r\nhelpers. Those helpers often want to accept some additional configuration\r\nfor suspense and if it should suspend at all. The easiest way is to just\r\nhave the api accept null or a suspense config and pass it through. However,\r\nthen you have to remember that calling suspendIfNeeded has a default.\r\n\r\nIt gets simpler by just saying tat you can pass the config. You can have\r\nyour own default in user space.\r\n\r\n* Track the largest suspense config expiration separately\r\n\r\nThis ensures that if we've scheduled lower pri work that doesn't have a\r\nsuspenseConfig, we don't consider its expiration as the timeout.\r\n\r\n* Add basic tests for functionality using each update mechanism\r\n\r\n* Fix issue when newly created avoided boundary doesn't suspend with delay\r\n\r\n* Add test for loading indicator with minLoadingDurationMs option"
        }
      },
      {
        "sha": "31487dd82e82ef62243806b2e76b23a6fb21d0bc",
        "commit": {
          "message": "[Fresh] Set up initial scaffolding (#15619)\n\n* Add a minimal failing test for hot reload\r\n\r\n* Set up scaffolding for React Fresh\r\n\r\n* Consider type family when comparing elementType\r\n\r\nRendering an element with stale type should not cause it to remount.\r\n\r\nWe only do this for FunctionComponent tag since checking is unnecessary for classes or host components.\r\n\r\n* Add support for forwardRef()\r\n\r\nInitially I thought I would compare families of inner .render functions.\r\n\r\nHowever, there is a corner case where this can create false positives. Such as when you forwardRef(X) the same X twice. Those are supposed to be distinct. But if we compare .render functions, we wouldn't be able to distinguish them after first reload.\r\n\r\nIt seems safer to rely on explicit registration for those. This should be easy when forwardRef() call is in the same file, and usually it would be. For cases like HOCs and style.div`...` factories that return forwardRef(), we could have the __register__ helper itself \"dig deeper\" and register the inner function.\r\n\r\n* Show how forwardRef inner identity can be inferred\r\n\r\nThe __register__ implementation can read the inner identity itself.\r\n\r\n* Add missing __DEV__ to tests\r\n\r\n* Add support for memo() (without fixing bailouts)\r\n\r\nThis adds rudimentary support for memo components. However, we don't actually skip bailouts yet, so this is not very useful by itself alone. Tests have TODOs that we need to remove after bailout skipping is done.\r\n\r\n* Refactor type comparison for clarity\r\n\r\n* Hot update shouldn't re-render ancestor components unnecessarily\r\n\r\nMy code had a bug where it checked for a wrong thing in a wrong set, leading us to always re-render.\r\n\r\nThis fixes the checks so that we only schedule updates for things that were actually edited.\r\n\r\n* Add test coverage for memo(fn, areEqual)\r\n\r\n* Explicitly skip bailouts for hot reloading fibers\r\n\r\nThis forces even memo() with shallow comparison to re-render on hot update.\r\n\r\n* Refactor scheduling update to reduce duplication\r\n\r\n* Remove unused variable in test\r\n\r\n* Don't check presence in a set while not hot reloading\r\n\r\n* Make scheduleHotUpdate() take named arguments\r\n\r\n* Don't keep unedited component types in the type => family map\r\n\r\nIt's unnecessary because if they haven't been edited, there's no special reconciliation logic.\r\n\r\n* Add signatures that force remounting\r\n\r\nSignatures let us force a remount of a type even if from React's point of view, type is the same.\r\n\r\nA type has one current signature. If that signature changes during next hot update, all Fibers with that type should be deleted and remounted.\r\n\r\nWe do this by mutating elementType scheduling a parent.\r\n\r\nThis will be handy to force remount of mismatching Hooks, as well as failed error boundaries.\r\n\r\nFor this to fully work, we'll need to add a way to skip built-in bailouts for all Fiber types. This will be the most invasive and annoying change. I did it for HostRoot in this PR but there's more. I'll add an automated test case that catches the missing bailout bailouts.\r\n\r\n* Support forced remounting for all component types\r\n\r\nThis teaches all parent component types to remount their child if necessary.\r\n\r\nIt also adds tests for them.\r\n\r\n* Remount effects while preserving state for hot reloaded components\r\n\r\nThis makes sure that changes to *code* always propagate.\r\n\r\nIt can break components that aren't resilient to useEffect over-firing, but that seems like a good constraint since you might need to add a dependency later anyway, and this helps avoid coding yourself into the corner.\r\n\r\n* Add missing __DEV__ blocks to tests\r\n\r\n* Fix unused variables in tests\r\n\r\n* Remove outdated TODO\r\n\r\n* Expose scheduleHotUpdate directly\r\n\r\n* Inline isCompatibleType\r\n\r\n* Run one check per component for invalidating deps\r\n\r\nThis also makes the bailouts more targeted--no need to remount useEffect for a parent component of remounted fiber.\r\n\r\n* Resolve .type early\r\n\r\nThis moves resolving to set up the right .type early instead of doing this before render.\r\nA bit more future-proof in case we want to restructure the begin phase later.\r\n\r\nForwardRef is special because its type is a wrapper but it can be hot reloaded by itself.\r\nSo we have a special overload for it that reconstucts the wrapper type if needed.\r\n\r\n* Add a Suspense todo\r\n\r\n* Use current.type !== workInProgress.type for ignoring deps\r\n\r\nThis gets rid of one of the sets.\r\n\r\n* Use workInProgress.type !== current.type check for force re-render\r\n\r\nWe still use a set for forced remount though.\r\n\r\n* Use wip.type !== current.type check in more places\r\n\r\nThis also disables the remounting tests. They need a separate approach.\r\n\r\n* Use a dedicated remount mechanism\r\n\r\n* Add a test for offscreen trees\r\n\r\nIt has a TODO because it seems like offscreen updates are incorrectly applied too soon.\r\n\r\n* Enable offscreen test now that it is fixed\r\n\r\n* Fix corner cases in the new remounting mechanism\r\n\r\n* Remount failed error boundaries on hot reload\r\n\r\n* Fix test now that act() flushes\r\n\r\nThis test is manual so I don't actually want act here.\r\n\r\n* Nits\r\n\r\n* Add comments"
        }
      },
      {
        "sha": "5731e522d4a14e53bd37bb304f831f1f5e9f9f36",
        "commit": {
          "message": "[Fresh] Support lazy() and add Suspense tests (#15681)\n\n* Test that state is not leaked between components\r\n\r\n* Support lazy and add Suspense tests\r\n\r\n* Nits"
        }
      },
      {
        "sha": "ec38def44f2ff696ec0b73c212265fd2324bcdaf",
        "commit": {
          "message": "[Fresh] Don't traverse remounted trees (#15685)\n\n* Don't traverse children when hot reloading needs a remount\r\n\r\nIf we're gonna remount that tree anyway, there is no use in traversing its children beforehand.\r\n\r\n* Add a test verifying hot reload batches updates\r\n\r\nOtherwise there is a risk of it being super slow due to cascades."
        }
      },
      {
        "sha": "0bd9b5d006bec02b7f4149a618e5433f1cc6c6bd",
        "commit": {
          "message": "[Fresh] Support re-rendering lazy() without losing state (#15686)\n\n* Support re-rendering lazy() without losing state\r\n\r\n* Clearer naming"
        }
      },
      {
        "sha": "50b50c26f6724c559a3550b903d2cc2eeffdf092",
        "commit": {
          "message": "Inform DevTools of commit priority level (#15664)\n\n* Pass inferred priority level to DevTools commit hook in PROFILE mode"
        }
      },
      {
        "sha": "9c9ea948520de7e55368b2d1cb58ff39e2ff3c10",
        "commit": {
          "message": "flush only on exiting outermost act() (#15682)"
        }
      },
      {
        "sha": "a398cbd5a769332f0fa24e7fa3d30c909b1d8499",
        "commit": {
          "message": "Flare: update invalid accessor warnings + add no-ops (#15693)"
        }
      },
      {
        "sha": "121acae09060803d2fdc23fdfd2f671a47908d1f",
        "commit": {
          "message": "Flare: simplify dispatchEvent discrete argument (#15694)"
        }
      },
      {
        "sha": "6d4f85b611cd7bac40db44854bab06776ce30c96",
        "commit": {
          "message": "[Fresh] Set up infra for runtime and Babel plugin (#15698)\n\n* Add a stub for React Fresh Babel plugin package\r\n\r\n* Move ReactFresh-test into ReactFresh top level directory\r\n\r\n* Add a stub for React Fresh Runtime entry point\r\n\r\n* Extract Fresh runtime from tests into its entry point"
        }
      },
      {
        "sha": "ef4ac42f8893afd0240d2679db7438f1b599bbd4",
        "commit": {
          "message": "[Flare] Update interactiveUpdates flushing heuristics (#15687)"
        }
      },
      {
        "sha": "d7afe23f141baeb96f1a9ee0c7d014d7e5a388e8",
        "commit": {
          "message": "Rename \"loading\" to \"busy\" in SuspenseConfig API (#15699)\n\nloadingDelayMs -> busyDelayMs\r\nminLoadingDurationMs -> busyMinDurationMs"
        }
      },
      {
        "sha": "7829d8cf99c20d567b3baceab8e9c2a1f60062de",
        "commit": {
          "message": "Fix missing return pointer assignment (#15700)\n\n* Fix missing return pointer assignment\r\n\r\nI found a bug using the fuzz tester that manifested as incorrect\r\nordering of children in the host tree, but whose root cause was a\r\nmissing `return` pointer assignment on a work-in-progress fiber.\r\n\r\nUsually return pointers are set during reconciliation\r\n(`reconcileChildFibers`) but this particular assignment happens inside\r\nthe custom reconciliation implementation used by Suspense boundaries.\r\n\r\nI would not be surprised if there were similar bugs related to incorrect\r\nreturn pointers. You're supposed to update the return pointer\r\nwhenever a work-in-progress fiber is created, but there's nothing in\r\nthe contract of the `createFiber` or `createWorkInProgress` function\r\nthat implies this. I propose that we update their signatures to accept\r\nthe return fiber as an argument. I will do this in a follow-up.\r\n\r\nIn this commit, I rearranged `updateSuspenseComponent` slightly so that\r\nevery call to `createWorkInProgress` or a `createFiber*` function is\r\nimmediately followed by a return pointer assignment.\r\n\r\nI hardcoded the fuzz test case that surfaced the bug.\r\n\r\n* Update all progressed children in list\r\n\r\n`progressedPrimaryChild` is a list, not a single fiber. Need to iterate\r\nthrough every child and update their return pointers."
        }
      },
      {
        "sha": "e180f656f364cd8a0e8441cb268f99a312265b21",
        "commit": {
          "message": "Flare: change flushDiscreteUpdates invariant to warning (#15702)"
        }
      },
      {
        "sha": "f50f9ba5db4fd08693ad9d592bfe6f9ab1b5cdbf",
        "commit": {
          "message": "Fix ReactFiberNewContext spelling (#15692)"
        }
      },
      {
        "sha": "f3109ad8a7ddf7a162e7c9a050ffe6c3efb75491",
        "commit": {
          "message": "Parallelize CircleCI jobs using workflows (#15704)\n\nUpdates the CircleCI config to use the workflows features to run jobs in\r\nparallel, instead of the `parallelism` option. This change alone doesn't\r\nimprove the overall build time much, since almost all of the total time\r\nis spent running the Rollup script, which runs entirely sequentially.\r\nBut it does improve reporting, and should make it easier to add\r\nadditional parallel jobs in the future."
        }
      },
      {
        "sha": "b5dff62faf4c8fd104362f48e3651332b377f28a",
        "commit": {
          "message": "[Flare] Account for fixed elements in getAbsoluteBoundingClientRect (#15707)"
        }
      },
      {
        "sha": "a25a793fe9d38436be7a3e87ce36ebd5d9d84921",
        "commit": {
          "message": "[Flare] update getEventCurrentTarget to use fiber tree (#15708)"
        }
      },
      {
        "sha": "b9ebc37c5b5b59b5eeaf897a4874cfa6df1edc75",
        "commit": {
          "message": "Fix Flow (#15710)"
        }
      },
      {
        "sha": "1c0bdb710dc4d05a581b8f7b17990d1cdbe0a190",
        "commit": {
          "message": "Always run yarn after restoring modules cache (#15712)"
        }
      },
      {
        "sha": "101901dc2d09509fa0b667196e1ac63ec17bc656",
        "commit": {
          "message": "Remove redundant test run (#15713)"
        }
      },
      {
        "sha": "5c2124fc76e59fb4fa805d9543afdd7b6866cb5e",
        "commit": {
          "message": "[Fresh] Initial Babel plugin implementation (#15711)\n\n* Add initial Babel plugin implementation\r\n\r\n* Register exported functions\r\n\r\n* Fix missing declarations\r\n\r\nAlways declare them at the bottom and rely on hoisting.\r\n\r\n* Remove unused code\r\n\r\n* Don't pass filename to tests\r\n\r\nI've decided for now that the plugin doesn't need filename, and it will be handled by module runtime integration instead.\r\n\r\n* Fix bugs\r\n\r\n* Coalesce variable declarations"
        }
      },
      {
        "sha": "d66c8f2d9d0ffec76afe98dea635feabd603b698",
        "commit": {
          "message": "Update sizebot to match name of CircleCI build job (#15714)\n\nThe sizebot scrapes the GitHub `/statuses` endpoint to get the lastest\r\nCircleCI build number for master, in order to fetch the bundle size\r\ninfo for that build, which are stored as build artifacts. (There's gotta\r\nbe a better way to do this, but that's what we have for now.) This\r\nupdates the script to match the name of the updated CircleCI job that\r\ngenerates the bundle sizes."
        }
      },
      {
        "sha": "b962adfc2b979e5526ee099fd43366db7abfcc47",
        "commit": {
          "message": "[Flare] event component displayName is now mandatory (#15717)"
        }
      },
      {
        "sha": "61f62246c8cfb76a4a19d1661eeaa5822ec37b36",
        "commit": {
          "message": "[react-native] Use path-based imports instead of Haste for the RN renderer (#15604)\n\n* [react-native] Use path-based imports instead of Haste for the RN renderer\r\n\r\nTo move React Native to standard path-based imports instead of Haste, the RN renderer that is generated from the code in this repo needs to use path-based imports as well since the generated code is vendored by RN. This commit makes it so the interface between the generated renderers and RN does not rely on Haste and instead uses a private interface explicitly defined by RN. This inverts control of the abstraction so that RN decides the internals to export rather than React deciding what to import.\r\n\r\nOn RN's side, a new module named `react-native/Libraries/ReactPrivate/ReactNativePrivateInterface` explicitly exports the modules used by the renderers in this repo. (There is also a private module for InitializeCore so that we can import it just for the side effects.) On React's side, the various renderer modules access RN internals through the explicit private interface.\r\n\r\nThe Rollup configuration becomes slimmer since the only external package is now `react-native`, and the individual modules are instead listed out in `ReactNativePrivateInterface`.\r\n\r\nTask description: https://github.com/facebook/react-native/issues/24770\r\nSister RN PR (needs to land before this one): https://github.com/facebook/react-native/pull/24782\r\n\r\nTest Plan: Ran unit tests and Flow in this repo. Generated the renderers and manually copied them over to the RN repo. Ran the RN tests and launched the RNTester app.\r\n\r\n* Access natively defined \"nativeFabricUIManager\" instead of importing it\r\n\r\nSome places in the Fabric renderers access `nativeFabricUIManager` (a natively defined global) instead of importing UIManager. While this is coupling across repos that depends on the timing of events, it is necessary until we have a way to defer top-level imports to run after `nativeFabricUIManager` is defined. So for consistency we use `nativeFabricUIManager` everywhere (see the comment in https://github.com/facebook/react/pull/15604#pullrequestreview-236842223 for more context)."
        }
      },
      {
        "sha": "025b07b61038300486b44c71f796a74cbdcd5d9f",
        "commit": {
          "message": "[Flare] Ensure getAbsoluteBoundingClientRect aligns with offsetParent (#15720)"
        }
      },
      {
        "sha": "399cd0d16c52e7087bba2a9c53b659c290f720cd",
        "commit": {
          "message": "Set up cron job to run fuzz tester (#15718)\n\nSets up a CircleCI workflow to run the fuzz tests with a randomly\r\ngenerated seed. The workflow runs on an hourly schedule."
        }
      },
      {
        "sha": "8af1f879299e88f9e370c1f01d90efaeefcefd27",
        "commit": {
          "message": "Rename ReactFiberScheduler -> ReactFiberWorkLoop and extract throwException from Unwind (#15725)\n\n* Rename ReactFiberScheduler to ReactFiberWorkLoop\r\n\r\nThe scheduling part is mostly extracted out to the scheduler package.\r\n\r\nWhat's remaining is mostly around the loop around each section of work.\r\nI name it something with Work in it because it's very related to the\r\nBeginWork, CompleteWork and UnwindWork sections.\r\n\r\n* Extract throwException from UnwindWork\r\n\r\nOur throwing works more like algebraic effects in that it's a separate\r\nphase where we find a handler and we later unwind."
        }
      },
      {
        "sha": "2b58797365ed09394762a304b8518b811a71db2f",
        "commit": {
          "message": "Typo in CircleCI config"
        }
      },
      {
        "sha": "393924879fbba20e43d9de76f9fb4f01c945cefa",
        "commit": {
          "message": "[Fresh] Babel plugin now handles HOCs + add integration tests (#15724)\n\n* Refactor component search to prepare for deeper traversals\r\n\r\n* Register HOCs with intermediate results\r\n\r\n* Register components that are used as JSX types\r\n\r\n* Add integration test skeleton\r\n\r\nThe integration test combines testing runtime together with the Babel plugin. It's a bit harder to debug because multiple things can go wrong, but it helps us build confidence that specific scenarios work well.\r\n\r\n* Add HOC integration test and fix conflict with JSX transform\r\n\r\n* Infer usage from createElement too\r\n\r\nThis helps us avoid dependency on the plugin order.\r\n\r\n* Remove outdated comments\r\n\r\n* Wrap tests in __DEV__\r\n\r\n* Support export default hoc(...) for anonymous functions\r\n\r\n* Fix test indentation\r\n\r\n* Fix comment typo\r\n\r\n* Use named function for test as this case is more important"
        }
      },
      {
        "sha": "5fe97dbe19917b4c49618073ccc5632b593ec9fa",
        "commit": {
          "message": "Remove sizebot race condition (#15735)\n\nSometimes the status of the `build` job is not in the first page of\r\nthe `/statuses` endpoint. The combined `/status` endpoint consolidates\r\nthe entries, though, so it always appears there."
        }
      },
      {
        "sha": "a97b5c07b033e0c7f5be5618bb2fdebc03262a55",
        "commit": {
          "message": "[Flare] More fixes for getAbsoluteBoundingClientRect (#15746)"
        }
      },
      {
        "sha": "287ef30bbada33f222fdbafa6b080b541828df53",
        "commit": {
          "message": "[Flare] Deeply prevent default on anchor elements (#15750)"
        }
      },
      {
        "sha": "401065fe5c822d39a80f2ce4b2821596bdb5f99a",
        "commit": {
          "message": "Adds test for #15732. (#15747)"
        }
      },
      {
        "sha": "7c5645ddb10fb68dc4520e972c34b0ab5f450e35",
        "commit": {
          "message": "Fix double spaces. (#15641)"
        }
      },
      {
        "sha": "d915a4c1f16f9a5f516df0eb79e5a7e35ed89281",
        "commit": {
          "message": "[Suspense] Add Batched Mode variant to fuzz tester (#15734)"
        }
      },
      {
        "sha": "b74fa9868e91f333f5503ea6ce127d508fec1e4c",
        "commit": {
          "message": "Clean up (#15755)\n\nexpirationTime has already been checked if it's sync.\r\n\r\ntimeout can now be longer than 5 seconds when a suspense config is used.\r\nWe might want to adjust the heuristics but it's not internally consistent\r\nwithout this."
        }
      },
      {
        "sha": "556cc6fe1925b8d78f9089769acdf20afaedb281",
        "commit": {
          "message": "[Fresh] Generate signatures for Hooks (#15733)\n\n* Generate signatures for Hooks\r\n\r\nThis currently only works one level deep. For custom Hooks, we'll need to add some way to compose signatures.\r\n\r\n* Be more resilient to plugin conflicts\r\n\r\nThis prevents a class of problems where other plugins cause our visitor to re-run.\r\n\r\nIt's a standard Babel practice, e.g.:\r\n\r\nhttps://github.com/babel/babel/blob/8c7d4b55c99ff34cb9d493d452472e59b5ed1e70/packages/babel-plugin-transform-react-constant-elements/src/index.js#L85-L86\r\n\r\n* Remove unnecessary stuff from debugging\r\n\r\n* Include Foo.useHookName() calls into the signature\r\n\r\n* Add an integration test for adding/removing an effect\r\n\r\n* Add integration test for changing custom Hook order\r\n\r\n* Include custom Hooks into the signatures\r\n\r\n* Fix inferred names for function expressions\r\n\r\n* Support export default hoc(Foo) when Foo is defined separately\r\n\r\n* Add more built-in Hooks"
        }
      },
      {
        "sha": "142cf56cbfe6d470f57e675e4e7079e904832cdd",
        "commit": {
          "message": "[Flare] Adds onContextMenu and fixes some contextmenu related issues (#15761)"
        }
      },
      {
        "sha": "112168f31b60239cd63dfebdfccaddac51841acd",
        "commit": {
          "message": "Lint rule for unminified errors (#15757)\n\n* Lint rule for unminified errors\r\n\r\nAdd a lint rule that fails if an invariant message is not part of the\r\nerror code map.\r\n\r\nThe goal is to be more disciplined about adding and modifiying\r\nproduction error codes. Error codes should be consistent across releases\r\neven if their wording changes, for continuity in logs.\r\n\r\nCurrently, error codes are added to the error code map via an automated\r\nscript that runs right before release. The problem with this approach is\r\nthat if someone modifies an error message in the source, but neglects to\r\nmodify the corresponding message in the error code map, then the message\r\nwill be assigned a new error code, instead of reusing the existing one.\r\n\r\nBecause the error extraction script only runs before a release, people\r\nrarely modify the error code map in practice. By moving the extraction\r\nstep to the PR stage, it forces the author to consider whether the\r\nmessage should be assigned a new error code. It also allows the reviewer\r\nto review the changes.\r\n\r\nThe trade off is that it requires more effort and context to land new\r\nerror messages, or to modify existing ones, particular for new\r\ncontributors who are not familiar with our processes.\r\n\r\nSince we already expect users to lint their code, I would argue the\r\nadditional burden is marginal. Even if they forget to run the lint\r\ncommand locally, they will get quick feedback from the CI lint job,\r\nwhich typically finishes within 2-3 minutes.\r\n\r\n* Add unreleased error messages to map"
        }
      },
      {
        "sha": "30b1a8009ce92d69b6debd1ff45dbb8a60f33b2f",
        "commit": {
          "message": "Don't extract errors in CI (#15758)\n\nRemoves `--extract-errors` argument from CI build script command.\r\nInstead, the author is expected to run `yarn extract-errors` locally\r\nor manually edit the error code map.\r\n\r\nThe lint rule should be sufficient to catch unminified errors, but\r\nas an extra precaution, I added a post-build step that greps the\r\nproduction bundles. The post-build step works even if someone disables\r\nthe lint rule for a specific line or file."
        }
      },
      {
        "sha": "1cc3bba004e96c18d8f812ed64d37d66a8bd666b",
        "commit": {
          "message": "Parallelizes the build script across multiple processes (#15716)\n\n* Write size info to separate file per bundle\r\n\r\n`bundle-sizes.json` contains the combined size information for every\r\nbuild. This makes it easier to store and process, but it prevents us\r\nfrom parallelizing the build script, because each process would need to\r\nwrite to the same file.\r\n\r\nSo I've updated the Rollup script to output individual files per build.\r\nA downstream CI job consolidates them into a single file.\r\n\r\nI have not parallelized the Rollup script yet. I'll do that next.\r\n\r\n* Parallelize the build script\r\n\r\nUses CircleCI's `parallelism` config option to spin up multiple build\r\nprocesses."
        }
      },
      {
        "sha": "8ce8b9ab812907248adb158d7ccdf731b3ede48e",
        "commit": {
          "message": "Update name of CI job in sizebot (#15767)\n\nSame as #15714. I moved the artifacts step to a different job, so I\r\nneed to update the name in the sizebot script to match."
        }
      },
      {
        "sha": "9aad17d60cd8453357ec36e8180b61aaaf313b7e",
        "commit": {
          "message": "using the wrong renderer's act() should warn (#15756)\n\n* warn when using the wrong renderer's act around another renderer's updates\r\n\r\nlike it says. it uses a real object as the sigil (instead of just a boolean). specifically, it uses a renderer's flushPassiveEffects as the sigil. We also run tests for this separate from our main suite (which doesn't allow loading multiple renderers in a suite), but makes sure to run this in CI as well.\r\n\r\n* unneeded (and wrong) comment\r\n\r\n* run the dom fixture on CI\r\n\r\n* update the sigil only in __DEV__\r\n\r\n* remove the obnoxious comment\r\n\r\n* use an explicit export for the sigil"
        }
      },
      {
        "sha": "2670bc34006571cc08b430ca6349be8d1d8db1ba",
        "commit": {
          "message": "React Events: support legacy browser Spacebar key value (#15766)"
        }
      },
      {
        "sha": "ad9a6df58c38e1cab244ded09024b1cc42f4e2c1",
        "commit": {
          "message": "Move fixtures test to its own CI job\n\nRunning it in parallel to the other post-build jobs shaves ~30 seconds\noff the total CI time."
        }
      },
      {
        "sha": "0f7cc2ba845e34d7a312819e27bbfa88cdb7d49f",
        "commit": {
          "message": "React Events: check window before using navigator (#15768)"
        }
      },
      {
        "sha": "3b2302253f13c9cd049fac10784e10b6c582e3b6",
        "commit": {
          "message": "Fix sizebot (#15771)\n\nThe previous naming scheme used the name of the resulting bundle file.\r\nHowever, there are cases where multiple bundles have the same filename.\r\nThis meant whichever bundle finishes last overwrites the previous ones\r\nwith the same name.\r\n\r\nThe updated naming scheme is `bundle-sizes-<CI_NODE_INDEX>.json`.\r\nInstead of generating a separate info file per bundle, it now creates\r\none per process."
        }
      },
      {
        "sha": "113497cc0e9cebf276a30d916c98c15aa075a225",
        "commit": {
          "message": "[Suspense] Change Suspending and Restarting Heuristics (#15769)\n\n* Track most recent commit time of a fallback globally\r\n\r\nThis value is going to be used to avoid committing too many fallback\r\nstates in quick succession. It doesn't really matter where in the tree\r\nthat happened.\r\n\r\nThis means that we now don't really need the concept of SuspenseState\r\nother than has a flag. It could be made cheaper/simpler.\r\n\r\n* Change suspense heuristic\r\n\r\nThis now eagerly commits non-delayed suspended trees, unless they're\r\nonly retries in which case they're throttled to 500ms.\r\n\r\n* Restart early if we're going to suspend later\r\n\r\n* Use the local variable where appropriate\r\n\r\n* Make ReactLazy tests less specific on asserting intermediate states\r\n\r\nThey're not testing the exact states of the suspense boundaries, only\r\nthe result. I keep assertions that they're not already resolved early.\r\n\r\n* Adjust Profiler tests to the new heuristics\r\n\r\n* Update snapshot tests for user timing tests\r\n\r\nI also added a blank initial render to ensuree that we cover the suspended\r\ncase.\r\n\r\n* Adjust Suspense tests to account for new heuristics\r\n\r\nMostly this just means render the Suspense boundary first so that it\r\nbecomes an update instead of initial mount.\r\n\r\n* Track whether we have a ping on the currently rendering level\r\n\r\nIf we get a ping on this level but have not yet suspended, we might\r\nstill suspend later. In that case we should still restart.\r\n\r\n* Add comment about moving markers\r\n\r\nWe should add this to throwException so we get these markers earlier.\r\nI've had to rewrite tests that test restarting to account for the delayed\r\nrestarting heuristic.\r\n\r\nIdeally, we should also be able to restart from within throwException if\r\nwe're already ready to restart. Right now we wait until the next yield.\r\n\r\n* Add test for restarting during throttled retry\r\n\r\n* Add test that we don't restart for initial render\r\n\r\n* Add Suspense Heuristics as a comment in Throw"
        }
      },
      {
        "sha": "63fe08eef56f92956c2d785701cad7f743501e35",
        "commit": {
          "message": "React Events: allow Tab+Alt on Mac in Focus responder (#15679)\n\n* Fix issue with Tab+alt not being considered as isGlobalFocusVisible candidate on Mac\r\n* Add test for Tab+alt on Mac setting pointerType: \"keyboard\" on a focus event"
        }
      },
      {
        "sha": "88b39638206d71affb7ed796067b4f2124954c0a",
        "commit": {
          "message": "[Flare] Remove deprecated keypress event (#15795)\n\n`keypress` is a deprecated event."
        }
      },
      {
        "sha": "73c380fca77a32af167d85c77553ae5d40c6fda8",
        "commit": {
          "message": "WorkPhase -> ExecutionContext\n\nWorkPhase is an enum that represents the currently executing phase of\nthe React update -> render -> commit cycle. However, in practice, it's\nhard to use because different \"phases\" can be nested inside each other.\nFor example, the commit phase can be nested inside the\n\"batched phase.\"\n\nThis replaces WorkPhase with a different concept: ExecutionContext.\nExecutionContext is a bitmask instead of an enum. It represents a stack\nof React entry points. For example, when `batchedUpdates` is called\nfrom inside an effect, the ExecutionContext is\n`BatchedContext | CommitContext`."
        }
      },
      {
        "sha": "91635dd483c0d4b02836565ca14a1aef23a63ad5",
        "commit": {
          "message": "Switch to \"discrete\" and \"continuous\" terminology\n\nEvents were previously described as \"interactive\" or \"non-interactive\"."
        }
      },
      {
        "sha": "7aa35ceae0d3a4d846498f128227ffa7c84900f4",
        "commit": {
          "message": "Fix casing of shouldflushDiscreteUpdates\n\nshouldflushDiscreteUpdates -> shouldFlushDiscreteUpdates"
        }
      },
      {
        "sha": "5763f1d4c458b9d9a769a28b9d92b698bc94533f",
        "commit": {
          "message": "[Events] Nested discrete events across systems\n\nIf an event in the old system is dispatched synchronously within an\nevent from the new system, or vice versa, and the inner event is a\ndiscrete update, React should not flush pending discrete updates before\nfiring the inner event's handlers, even if the outer event is not\ndiscrete.\n\nAnother way of saying this is that nested events should never force\nReact to flush discrete updates.\n\nArguably, if the outer event is not a discrete event, then the inner\nevent _should_ flush the pending events. However, that would be a\nbreaking change. I would argue this isn't so bad, however, given that\nnested events are pretty rare. They don't fit nicely into our event\nmodel regardless, since we don't support nested React renders. In the\nfuture we should consider warning when events are nested."
        }
      },
      {
        "sha": "a383c46788fb0b6b9cb3644c675cc89bf48482ae",
        "commit": {
          "message": "[ESLint] don't warn for Flow type variables (#15804)\n\nIn Exhaustive Deps check for react-hooks don't warn if the dependency is\r\na Flow type variable."
        }
      },
      {
        "sha": "07da821bfda181a7ee750c12d73d09fbef87d0f3",
        "commit": {
          "message": "[react-native] Rewrite Haste imports in RN shims and add .fb.js extension (#15786)\n\nThis commit is a follow-up to https://github.com/facebook/react/pull/15604, which explains more of the rationale behind moving React Native to path-based imports and the work needed in the React repository. In that linked PR, the generated renderers were updated but not the shims; this commit updates the shims.\r\n\r\nThe problem is that FB needs a different copy of the built renderers than the OSS versions so we need a way for FB code to import different modules than in OSS. This was previously done with Haste, but with the removal of Haste from RN, we need another mechanism. Talking with cpojer, we are using a `.fb.js` extension that Metro can be configured to prioritize over `.js`.\r\n\r\nThis commit generates FB's renderers with the `.fb.js` extension and OSS renderers with just `.js`. This way, FB can internally configure Metro to use the `.fb.js` implementations and OSS will use the `.js` ones, letting us swap out which implementation gets bundled.\r\n\r\nTest Plan: Generated the renderers and shims with `yarn build` and then verified that the generated shims don't contain any Haste-style imports. Copied the renderers and shims into RN manually and launched the RNTester app to verify it loads end-to-end. Added `.fb.js` to the extensions in `metro.config.js` and verified that the FB-specific bundles loaded."
        }
      },
      {
        "sha": "fa1e8df116d835e9d2c41a9bd71b32f91bbfb5ad",
        "commit": {
          "message": "chore: use jest-serializer-raw for react-fresh snapshots (#15806)"
        }
      },
      {
        "sha": "4f6cab547bab2001f74998bd3979134e18ae1257",
        "commit": {
          "message": "[Flare] Ignore keyboard interactions on text input children (#15810)"
        }
      },
      {
        "sha": "dd43cb5fb941cb253a9f0197a1f3957aebdcf3d8",
        "commit": {
          "message": "[Flare] Fix isPressWithinResponderRegion logic (#15808)\n\nCompare the viewport-relative coordinates of getBoundingClientRect with those\r\nof the event's client{X,Y} values. This fixes press within scrollable nodes."
        }
      },
      {
        "sha": "b63a41d38a4e08b1a4831f8b210c548bee5b1aa3",
        "commit": {
          "message": "Updated release script to be Workflow aware (#15809)"
        }
      },
      {
        "sha": "2534c0c924d9258b55b730f3ec5f54814beab12d",
        "commit": {
          "message": "[Flare] Add event position properties to Hover responder (#15819)"
        }
      },
      {
        "sha": "8d4fb132ef4014cc57de9e4b7cfa82af2c8c8daa",
        "commit": {
          "message": "[Flare] Fix nativeEvent.x/y for older browsers (#15820)"
        }
      },
      {
        "sha": "7fa5a716e3c0f77ec479768ebe3fa8d09a00af9b",
        "commit": {
          "message": "Use Circle CI API v2 to get artifacts job ID (#15821)"
        }
      },
      {
        "sha": "6b5deeed50769a85e207b436244f7ebe78b800b1",
        "commit": {
          "message": "[Events] Add support for events that are both user-blocking and continuous (#15811)\n\n* [Events] Add EventPriority enum\r\n\r\nReact DOM's DispatchConfig for synthetic events has an `isDiscrete`\r\nfield that affects how updates triggered by an event are scheduled.\r\nEvents are either discrete or continuous.\r\n\r\nThis commit adds an additional type of configuration where an event\r\nhas user-blocking priority, but is not discrete. E.g. updates triggered\r\nby hover are more important than the default, but they don't need to\r\nbe processed serially. Because there are now three types of event\r\npriority instead of two, I've replaced the `isDiscrete` boolean with an\r\nenum: `eventPriority`.\r\n\r\nThis commit implements the new enum value but does not change any\r\nbehavior. I'll enable it behind a feature flag in the next commit.\r\n\r\nI've only implemented this in the legacy event system. I'll leave Flare\r\nfor a follow-up.\r\n\r\n* enableUserBlockingEvents feature flag\r\n\r\nAdds a feature flag to increase the priority of events like `mouseover`,\r\nwithout making them discrete."
        }
      },
      {
        "sha": "cfb79ee5b3d77f8635878194e282096dc9e85ceb",
        "commit": {
          "message": "[Flare] Fix isTouchEvent (#15824)"
        }
      },
      {
        "sha": "d707a757942e9d5a3a4091c894ebf8d416229012",
        "commit": {
          "message": "nit: a quick copy edit for an act() message/comment (#15805)"
        }
      },
      {
        "sha": "7b28ad119e96c85bdc4c23cc8ff6c9e9f5a8a73c",
        "commit": {
          "message": "[Flare] EventPriority enum (#15823)\n\n* Same as previous commit, but for Flare\r\n\r\nI don't know what the public API for setting the event priority should\r\nbe. Right now it accepts a numeric enum, but is this what we want?\r\nMaybe it should be a string enum? I've punted on this for now.\r\n\r\n* Add test for hover events"
        }
      },
      {
        "sha": "843a59ab607d0141985e1309d05a92c338e413cd",
        "commit": {
          "message": "[React Native] Remove eventTypes from ReactNativeBridgeEventPlugin (#15802)"
        }
      },
      {
        "sha": "6aaa43708d28f68c58a24a66d8d09f4b78c79e67",
        "commit": {
          "message": "Rename ReactFeatureFlags to remove the `.fb` suffix. (#15826)"
        }
      },
      {
        "sha": "c72dceffbce0856711d0fde0fb4f2a312734d591",
        "commit": {
          "message": "[Flare] Small Swipe/Drag fixes (#15825)"
        }
      },
      {
        "sha": "73c27d8b4987aecc9e960f29b329c3ac8f46cff3",
        "commit": {
          "message": "[Flare] Add basic Scroll event responder module (#15827)"
        }
      },
      {
        "sha": "d0e041aee83b50e54176d2dc957d86c0f571257e",
        "commit": {
          "message": "[Fresh] Support classes by force-remounting them on edit (#15801)\n\n* Remount classes during hot reload\r\n\r\n* Fix a crash when Hook isn't in scope inside the signature\r\n\r\n* Minor tweaks\r\n\r\n* Support a comment annotation to force state reset\r\n\r\n* Refactoring: pass a function instead of WeakMap\r\n\r\nThis hides the implementation a little bit and reduces how much React knows about the underlying mechanism.\r\n\r\n* Refactor: use forceReset to remount unknown Hooks\r\n\r\nWe already have the logic to reset a component, so let's just reuse it instead of that special case."
        }
      },
      {
        "sha": "8cfcfe0fcb4cea285750cf33c0302f80e5f2c358",
        "commit": {
          "message": "[Flare] Fix ES6 issues with IE11 (#15834)"
        }
      },
      {
        "sha": "def56c979756ef232bd0d3dacf79390506abae5f",
        "commit": {
          "message": "[Fresh] Capture Hook signatures lazily on first render (#15832)\n\n* Split the signature call into two calls\r\n\r\nThis adds a render-time signature call by making __signature__ curried. We need both calls. The init time tells us which type has which signature. The render time call says when's a good time to capture the lazy Hooks tree. This is necessary for supporting inline requires. I will do that in next commit.\r\n\r\n* Lazily compute Hook list on first render\r\n\r\nThis ensures inline requires don't break comparisons between Hook signatures of previous and next versions by caching Hook list at the time of first render.\r\n\r\n* Refactor computing Hook signature keys\r\n\r\nInstead of a traversal during the comparison, explicitly compute full keys. This makes it easier to debug mismatches."
        }
      },
      {
        "sha": "425473f43fd95a564f07ffcf6dbd105cef9f78b9",
        "commit": {
          "message": "[Flare] Improve runtime performance of hit target intersection (#15836)"
        }
      },
      {
        "sha": "f4cd7a38d2a5dc8f9081b41da124ac380d33dc62",
        "commit": {
          "message": " [Flare] Listen to document.body + add stopPropagation to Press (#15853)"
        }
      },
      {
        "sha": "c403ae4d35391878dd61e2efbf342c5baac8efdb",
        "commit": {
          "message": "[Flare] Move Press root event removal till click phase (#15854)"
        }
      },
      {
        "sha": "191920605fa88949e640dbf6da4f8659020a4566",
        "commit": {
          "message": "[Fresh] Implement missing features (#15860)\n\n* Fix existing test\r\n\r\nThis test included a change in variable name. It wasn't needed, and distracts from the actual thing being tested (the annotation).\r\n\r\n* Reset state on edits to initial state argument\r\n\r\n* Add a way to check whether there are hot updates\r\n\r\nprepareUpdate() now returns null if there are none.\r\n\r\n* Add a way to query host nodes for families"
        }
      },
      {
        "sha": "198ed661c51ab2319897eaccd368d21e5ec9a9a6",
        "commit": {
          "message": "[Suspense] Use !important to hide Suspended nodes (#15861)\n\nSuspended nodes are hidden using an inline `display: none` style. We do\r\nthis instead of removing the nodes from the DOM so that their state is\r\npreserved when they are shown again.\r\n\r\nInline styles have the greatest specificity, but they are superseded by\r\n`!important`. To prevent an external style from overriding React's, this\r\ncommit changes the hidden style to `display: none !important`.\r\n\r\nMaYBE AnDREw sHOulD JusT LEArn Css\r\n\r\nI attempted to write a unit test using `getComputedStyle` but JSDOM\r\ndoesn't respect `!important`. I think our existing tests are sufficient\r\nbut if we were to decide we need something more robust, I would set up\r\nan e2e test."
        }
      },
      {
        "sha": "45acbdc0ba05c29f849011eaed5e5b221b219d06",
        "commit": {
          "message": "[Flare] Unsure root events are removed on contextmenu (#15862)"
        }
      },
      {
        "sha": "4d949d7641490d6df5a96848628bb3fea6cced6d",
        "commit": {
          "message": "[React Native] Replace touch discrepancy errors to warnings (#15866)"
        }
      },
      {
        "sha": "e91dd70ba28e7a20da3e5de8d787f3cde56341bd",
        "commit": {
          "message": "Remove disableYielding feature flag (#15654)\n\nObviated by Batched Mode."
        }
      },
      {
        "sha": "b4b3a1dc6689d950ca90fc00469bb0dbf8c41b23",
        "commit": {
          "message": "Fix fuzz test environment variable"
        }
      },
      {
        "sha": "2fe8fd290b0c315d6a9af99f7a4e038a2026598a",
        "commit": {
          "message": "[Suspense] Use style.setProperty to set display (#15882)\n\nFollow up to #15861.\r\n\r\nTurns out you can't set `!important` using a normal property assignment.\r\nYou have to use `style.setProperty`.\r\n\r\nMaybe Andrew *should* just learn CSS.\r\n\r\nIE9 doesn't support `style.setProperty` so we'll fall back to setting\r\n`display: none` without `important`, like we did before #15861 Our\r\nadvice for apps that need to support IE9 will be to avoid using\r\n`!important`. Which seems like good advice in general, but IANACSSE.\r\n\r\nTested on FB and using our Suspense DOM fixture."
        }
      },
      {
        "sha": "de7a09c1e0425f8719fa9c27a583a28ae5d791cb",
        "commit": {
          "message": "[Fresh] Make transform resilient to plugin order (#15883)\n\n* Run Fresh tests in two modes: with and without destructuring\r\n\r\nDestructuring transform messes up the way we collect signatures for Hooks. This adds failing tests.\r\n\r\n* Extract collecting calls to Hooks into a separate visitor\r\n\r\nThis introduces a bit of a perf penalty but makes our plugin resilient to presence of destructuring transform and their order. Fixes new tests.\r\n\r\n* Inline some logic into the call visitor"
        }
      },
      {
        "sha": "a146c1f9ed2f13bb885a5f49623d45f03c0bb424",
        "commit": {
          "message": "[Flare] Refactor of Press to fix various issues (#15878)"
        }
      },
      {
        "sha": "353e0ee47492c42160aab81e60a59b08e40bb0b3",
        "commit": {
          "message": "[Flare] remove stopLocalPropagation option + modify responder ownership (#15889)"
        }
      },
      {
        "sha": "788da69b74d2311ae2669f7936a9a33ec2469241",
        "commit": {
          "message": "[Suspense] Fix bad loading state not being delayed (#15891)\n\nFixes a bug where a bad loading state is initially suspended, but a\r\nsubsequent update with the same expiration time causes it to\r\ncommit immediately."
        }
      },
      {
        "sha": "661562fc52b211cb39459e413c4c5cd5debaf90f",
        "commit": {
          "message": "Fix outdated test comments (#15892)\n\nComments for this unit test are confusing because they refer to an\r\nearlier version of the same test."
        }
      },
      {
        "sha": "801feed95c9fa3e26d1f3e534ac3a88b127652ca",
        "commit": {
          "message": "Interaction tracing works across hidden and SSR hydration boundaries (#15872)\n\n* Interaction tracing works across hidden and SSR hydration boundaries"
        }
      },
      {
        "sha": "f0156766dcfd46cd0e07c70cb64f40acbc2b1a4b",
        "commit": {
          "message": "[Fresh] react-fresh => react-refresh (#15888)"
        }
      },
      {
        "sha": "7985bf7d50b15c1be61326b7f80d56568cef67a3",
        "commit": {
          "message": "Remove outdated test renderer comments (#15898)"
        }
      },
      {
        "sha": "a3c5b1fb8bca787eaeef2f39a72920ea03da179c",
        "commit": {
          "message": "[Fresh] Rename findHostNodesForHotUpdate to findHostInstancesForHotUpdate (#15904)"
        }
      },
      {
        "sha": "cd98e63b47198147cfd140cd4454a6db68e08a9f",
        "commit": {
          "message": "[Fresh] Fall back to Map/Set if Weak equivalents are not available (#15907)\n\n* Fall back to Map/Set if Weak equivalents are not available\r\n\r\n* Fix Prettier vs Flow fighting"
        }
      },
      {
        "sha": "f97b9516664046643bd04eb391861b55910d29ee",
        "commit": {
          "message": "[Flare] add disableContextMenu to Press (#15909)"
        }
      },
      {
        "sha": "98454371a995d73a6cb2f3f4770c13945fb78ea4",
        "commit": {
          "message": "Construct Error at invariant call site for clearer stack traces (#15877)"
        }
      },
      {
        "sha": "689beef6f5d0adab166f5eb0aac59eba6100677a",
        "commit": {
          "message": "[Flare] Move unstable_createEventComponent to ReactDOM (#15890)"
        }
      },
      {
        "sha": "0bd7551146f0a820040daf684c7ab494c7a7f459",
        "commit": {
          "message": "Remove mention of Prepack (#15922)\n\nWe aren't shipping Prepack anytime soon. FB-only: see D15585102."
        }
      },
      {
        "sha": "4a7a39b594f58dbf4e5c36251c4947bda19fce47",
        "commit": {
          "message": "[Flare] Add RN build step for ReactTypes (#15926)"
        }
      },
      {
        "sha": "f4e1ac8cafb75dfab129b95f0eb39591579f3d03",
        "commit": {
          "message": "[Flare] Press events include defaultPrevented (#15916)\n\n* Rename `disableContextMenu` to `preventContextMenu`\r\n* Change the behaviour of `preventContextMenu` so that `onContextMenu` is still called when the native context menu is prevented."
        }
      },
      {
        "sha": "b62ae16429dddefa5f765a747f57933cd7ce73c2",
        "commit": {
          "message": "[Flare] Rename createEventComponent -> createEvent (#15929)"
        }
      },
      {
        "sha": "3af91eb8cee7cbfb482e4bbee91b81822e264916",
        "commit": {
          "message": "[Scheduler] Use continuation pattern for posting host callback (#15910)\n\n* [scheduler] Internal rename: Callback -> Task\r\n\r\nRename Callback type to Task. Does not affect the public API, only\r\ninternal names, though eventually we'll probably want to align with the\r\nWICG Main-thread Scheduling proposal\r\n(https://github.com/WICG/main-thread-scheduling).\r\n\r\n* [scheduler] flushFirstTask() -> flushTask(task)\r\n\r\nPass task as an argument to `flushTask` instead of using a module-\r\nlevel variable.\r\n\r\n* [scheduler] Add startTime field\r\n\r\nThis does not change any semantics, but in the future `startTime` may\r\nrepresent a future time, to support delayed tasks.\r\n\r\n* [Scheduler] Use continuation pattern for host cb\r\n\r\nAs I prepare to implement integrated timers, I noticed some\r\npeculiarities in the Scheduler implementation that could afford to be\r\ncleaned up.\r\n\r\nThis is a refactor and shouldn't affect any observable behavior; mostly\r\nit removes some concepts that existed in earlier iterations of Scheduler\r\nand are no longer needed.\r\n\r\nThe main change is to how the DOM implementation schedules an additional\r\ncallback before yielding to the main thread. It used to follow the same\r\ncode path for scheduling task; now it has its own branch directly\r\ninside the message event handler. The special case for error handling\r\n— where we call `postMessage` immediately without waiting for rAF —\r\nhas similarly been localized inside the catch block of the message\r\nevent handler."
        }
      },
      {
        "sha": "35ef78de3ea988faa2579850667b1c04ec98403e",
        "commit": {
          "message": "[Scheduler] Integrated timers (#15911)\n\nAdds a `delay` option to `scheduleCallback`. When specified, the task is\r\nnot scheduled until after the delay has elapsed.\r\n\r\nDelayed tasks are scheduled on a timer queue maintained by Scheduler,\r\ninstead of directly with the browser. The main benefit is to reduce the\r\nnumber of native browser timers that Scheduler's `message` event handler\r\nhas to contend with; so, after yielding to the browser at the end of the\r\nframe, Scheduler will more quickly regain control of the main thread.\r\nBecause we're able to flush the timer queue without yielding to browser\r\ntimer events, there's also less task switching overhead (though in the\r\nabsence of `isInputPending`, this is mostly a theoretical win since we\r\nyield every frame regardless).\r\n\r\nIf the queue of non-delayed tasks is non-empty — that is, if there is\r\npending CPU bound work — Scheduler is able to avoid a browser timer\r\nentirely by periodically checking its own timer queue while flushing\r\ntasks (inside the `message` event handler). Once the CPU-bound work is\r\ncomplete, if there are still pending delayed tasks, Scheduler will\r\nschedule a single browser timer that fires once the earliest delay\r\nhas elapsed."
        }
      },
      {
        "sha": "e9d0a3ff252ea72b1aa5e8df969304ff5c9aa0a4",
        "commit": {
          "message": "[Fresh] Track mounted roots via DevTools Hook (#15928)\n\n* Track mounted roots via DevTools Hook\r\n\r\n* Add helper utilities to the runtime\r\n\r\nThese utilities will likely be needed by all module systems, so let's just put them here.\r\n\r\n* Wrap more things in __DEV__\r\n\r\n* Fix tests to also be DEV-only"
        }
      },
      {
        "sha": "76864f7ff729f8293e8e772da7ad8416d7def6b3",
        "commit": {
          "message": "Add SuspenseList Component (#15902)\n\n* Add SuspenseList component type\r\n\r\n* Push SuspenseContext for SuspenseList\r\n\r\n* Force Suspense boundaries into their fallback state\r\n\r\nIn the \"together\" mode, we do a second render pass that forces the\r\nfallbacks to stay in place, if not all can unsuspend at once.\r\n\r\n* Add test\r\n\r\n* Transfer thennables to the SuspenseList\r\n\r\nThis way, we end up retrying the SuspenseList in case the nested boundary\r\nthat just suspended doesn't actually get mounted with this set of\r\nthennables. This happens when the second pass renders the fallback\r\ndirectly without first attempting to render the content.\r\n\r\n* Add warning for unsupported displayOrder\r\n\r\n* Add tests for nested sibling boundaries and nested lists\r\n\r\n* Fix nested SuspenseList forwarding thennables\r\n\r\n* Rename displayOrder to revealOrder\r\n\r\nDisplay order has some \"display list\" connotations making it sound like\r\na z-index thing.\r\n\r\nReveal indicates that this isn't really about when something gets rendered\r\nor is ready to be rendered. It's about when content that is already there\r\ngets to be revealed.\r\n\r\n* Add test for avoided boundaries\r\n\r\n* Make SuspenseList a noop in legacy mode\r\n\r\n* Use an explicit suspense list state object\r\n\r\nThis will be used for more things in the directional case."
        }
      },
      {
        "sha": "e61c9e0a2618acde0c6000ef59b0ca3694587e44",
        "commit": {
          "message": "[Flare] Fix Press retention state regression (#15936)"
        }
      },
      {
        "sha": "ff91bfa58ce817c8c8c1cbe8fcdd7584c75c36ee",
        "commit": {
          "message": "[act] reset scope depth on synchronous errors (#15937)\n\n* reset scope depth on synchronous errors\r\n\r\nwe weren't resetting the acting scope depth on sync errors thrown in the callback. this fixes that.\r\n\r\n* typos\r\n\r\n* add a test to make sure sync error propagate"
        }
      },
      {
        "sha": "d4f384d25b9b6da4b88cde08783530df1831d8d4",
        "commit": {
          "message": "[Fresh] Throw in prod and change annotation (#15939)\n\n* Disable React Refresh Babel transform in prod\r\n\r\n* Throw early if React Refresh runtime is imported in production\r\n\r\n* @hot reset -> @refresh reset"
        }
      },
      {
        "sha": "3d0af2aea8c95d748af3b958de20668f247667da",
        "commit": {
          "message": "Don't consider require-like calls to be likely HOCs (#15940)"
        }
      },
      {
        "sha": "5368f7316c8ae489c6a271694166158428ee4a5e",
        "commit": {
          "message": "[Flare] Fix keyboard keyup regression (#15938)"
        }
      },
      {
        "sha": "270dc2e4debe8c198ce6dc9200ab72df4ee4926b",
        "commit": {
          "message": "Add forwards and backwards options to SuspenseList (#15918)\n\n* Add forwards option\r\n\r\n* Add backwards option\r\n\r\n* Add comment\r\n\r\n* Add customized warning messages for case and typos\r\n\r\n* Add some more tests for insertions and updates in start/middle/end"
        }
      },
      {
        "sha": "7a4c3e3b732856618f3a5d0875bb9d563772cb0c",
        "commit": {
          "message": "Make global names more obscure (#15941)"
        }
      },
      {
        "sha": "6ff4c9de1c1c8f47148b68651a9f8ab72b5d31f8",
        "commit": {
          "message": "[Flare] Press: fix stale deactivation region state (#15931)\n\nThe responder region calculation logic wasn't updating the deactivation region\r\nduring the lifetime of an event instance, causing incorrect behaviour when the\r\ncurrent press ends outside the press target and if the press target has moved\r\nsince the last time the first-and-only time the deactivation region was\r\nmeasured."
        }
      },
      {
        "sha": "720db4cbe675e80820ec81abab499492309b9252",
        "commit": {
          "message": "[Flare] Add useEvent hook implementation (#15927)\n\n* [Flare] Add useEvent hook implementation\r\n\r\nValidate hooks have decendent event components\r\n\r\nFew fixes and displayName changes\r\n\r\nFix more responder bugs\r\n\r\nUpdate error codes\r\n\r\n* Add another test\r\n\r\n* Address feedback"
        }
      },
      {
        "sha": "175111de723979161b73c2751c3396d22f405dfa",
        "commit": {
          "message": "Lazily initialize dependencies object (#15944)\n\nMost fibers do not have events or context, so we save memory lazily\r\ninitializing this container node.\r\n\r\nFollow-up from #15927"
        }
      },
      {
        "sha": "4f92fbce5cc409436ec7625ac08d3a709a4d8f31",
        "commit": {
          "message": "[Flare] Move createEvent back to React object (#15943)"
        }
      },
      {
        "sha": "34ce57ae751e0952fd12ab532a3e5694445897ea",
        "commit": {
          "message": "[Flare] Refine flow type annotations (#15950)"
        }
      },
      {
        "sha": "a5ed2f98f97c137322138d48e90d3510e6d83b5a",
        "commit": {
          "message": "[Flare] Guard against stateNode being null (#15952)"
        }
      },
      {
        "sha": "696609d49a06cc54d6f6109a9489fe9970745bb5",
        "commit": {
          "message": "[Fiber] Clear down dependencies during detachFiber (#15947)"
        }
      },
      {
        "sha": "dc298fdf91b6056b097bce0eb05cfe90b873b158",
        "commit": {
          "message": "[Flare] Refinements to useEvent hook (#15955)"
        }
      },
      {
        "sha": "d77d12510b1a1c37484d771a323e0a02cbeb9ba7",
        "commit": {
          "message": "Expire rendering the tail of SuspenseList after a timeout (#15946)\n\n* Expire rendering the tail of SuspenseList after a timeout\r\n\r\nThis is the first Suspense feature that isn't actually dependent on IO.\r\n\r\nThe thinking here is that it's normal for a SuspenseList to show loading\r\nstates, and it'll be designed to handle it one at a time.\r\n\r\nHowever, sometimes there are lists with really big items that take a long\r\ntime to CPU render. Since data can become available as we do that, it is\r\nlikely that we have all the data and become CPU bound.\r\n\r\nIn that case, the list would naively just render until the end and then\r\ndisplay all items at once. I think that's actually what you want for fast\r\nlists. However, for slow ones (like News Feed), you're better off showing\r\na few rows at a time.\r\n\r\nIt's not necessarily one at a time because if you can do many in a short\r\nperiod of time and fit them all on the screen, then it's better to do them\r\nall at once than pop them in one at a time very quickly.\r\n\r\nTherefore, I use a heuristic of trying to render as many rows as I can in\r\n500ms before giving up.\r\n\r\nThis timer starts before the first row of the tail and we only check it\r\nafter. This ensures that we always make a little progress each attempt.\r\nAn alternative approach could be to start the time before doing the head\r\nof the list but we don't want that being slow prevent us from making\r\nfurther progress.\r\n\r\nCurrently, I disable this optimization at Never priority because there's\r\nnothing intermediate that becomes visible anyway.\r\n\r\n* Fix tracing through a SuspenseList\r\n\r\nThis ensures that we can spawn new work during render through arbitrary\r\npriorities.\r\n\r\nWe'll need this for other features too.\r\n\r\nSince each priority can commit separately we need to use an array to\r\ninclude the current interactions on each priority."
        }
      },
      {
        "sha": "8d4ddd33acabe139dea0c9c50386143e6bc994f4",
        "commit": {
          "message": "[Scheduler] Yield less if there's no pending input (#15959)\n\nAt the end of each frame, Scheduler yields control of the main thread so\r\nthe browser can execute important tasks; most importantly, painting the\r\nscreen and responding to user input. There's some overhead involved in\r\nregaining control of the main thread, so we'd like to yield as\r\ninfrequently as possible to keep the UI responsive.\r\n\r\nThe reason we yield on every frame is because there's no way for us to\r\nknow whether we're blocking user input.\r\n\r\n`isInputPending` is an experimental browser API that gives us this\r\ninformation. It tells us whether there's a pending user input, which\r\nalso means it tells us if there's *not* a pending user input. We can use\r\nthis signal to decide whether it's OK not to yield.\r\n\r\nThere's a max frame length after which we'll yield regardless, as a\r\nprecaution against blocking non-input tasks that we don't know about."
        }
      },
      {
        "sha": "6568a79931bb335f2c997ed9efbc533f2677df5c",
        "commit": {
          "message": "[Scheduler] requestPaint (#15960)\n\n* [Scheduler] requestPaint\r\n\r\nSignals to Scheduler that the browser needs to paint the screen. React\r\nwill call it in the commit phase. Scheduler will yield at the end of\r\nthe current frame, even if there is no pending input.\r\n\r\nWhen `isInputPending` is not available, this has no effect, because we\r\nyield at the end of every frame regardless.\r\n\r\nReact will call `requestPaint` in the commit phase as long as there's at\r\nleast one effect. We could choose not to call it if none of the effects\r\nare DOM mutations, but this is so rare that it doesn't seem worthwhile\r\nto bother checking.\r\n\r\n* Fall back gracefully if requestPaint is missing"
        }
      },
      {
        "sha": "e7fcfe104734c081bab7418a22ec74a1a34e0709",
        "commit": {
          "message": "[scheduler] Put isPendingInput behind a flag (#15962)"
        }
      },
      {
        "sha": "595c9414ba1097eceaab8323de35075507f64fac",
        "commit": {
          "message": "[Scheduler] Fix navigator.isInputPending call\n\nMust be called as a method."
        }
      },
      {
        "sha": "4189f712c16cfd6365c163525527a30ef2518b99",
        "commit": {
          "message": "[Scheduler] Increase max frame length to 300\n\nForgot to apply this change before merging.\n\nhttps://github.com/facebook/react/pull/15959#discussion_r296429705"
        }
      },
      {
        "sha": "d271df5c993ba54408969fbfc4b5e0f751a4cf0c",
        "commit": {
          "message": "Use function expression for custom Hook signature argument (#15956)"
        }
      },
      {
        "sha": "39b97e8eb87b2b3b0d938660e1ac12223470fdf5",
        "commit": {
          "message": "Report refreshed families to the caller (#15957)"
        }
      },
      {
        "sha": "e1c5e8720d5d47974c14c125dbaf3dc608a92936",
        "commit": {
          "message": "warn if passive effects get queued outside of an act() call. (#15763)\n\n* warn if passive effects get queued outside of an act() call\r\n\r\nWhile the code itself isn't much (it adds the warning to mountEffect() and updateEffect() in ReactFiberHooks), it does change a lot of our tests. We follow a bad-ish pattern here, which is doing asserts inside act() scopes, but it makes sense for *us* because we're testing intermediate states, and we're manually flush/yield what we need in these tests.\r\n\r\nThis commit has one last failing test. Working on it.\r\n\r\n* pass lint\r\n\r\n* pass failing test, fixes another\r\n\r\n- a test was failing in ReactDOMServerIntegrationHooks while testing an effect; the behaviour of yields was different from browser and server when wrapped with act(). further, because of how we initialized modules, act() around renders wasn't working corrrectly. solved by passing in ReactTestUtils in initModules, and checking on the finally yielded values in the specific test.\r\n- in ReactUpdates, while testing an infinite recursion detection, the test needed to be wrapped in an act(), which would have caused the recusrsion error to throw. solived by rethrowing the error from inside the act().\r\n\r\n* pass ReactDOMServerSuspense\r\n\r\n* stray todo\r\n\r\n* a better message, consistent with the state update one."
        }
      },
      {
        "sha": "04b77c630492963aa2c81ae43fb537fd08b5c056",
        "commit": {
          "message": "followup to #15763, fix failing test in ReactDOMTracing-test (#15972)\n\n* followup to #15763, failing tests in ReactDOMTracing-test\r\n\r\nIt was me. I broke the build.\r\n\r\n* [ignore] add a newline to trigger a build"
        }
      },
      {
        "sha": "d420d2ccb6223a66d5e8fe824ac0d31ed5bf87a1",
        "commit": {
          "message": "[Fresh] Retry failed roots on refresh (#15966)\n\n* Retry failed roots on refresh\r\n\r\n* Don't prevent retry after error -> render(null) special case\r\n\r\nThe check wasn't very resilient because in Concurrent Mode it looks like we can get further follow-up commits even if we captured an error. So we can't reliably distinguish the case where after an error you _manually_ rendered null.\r\n\r\nRetrying on an edit after a tree failed _and_ you rendered null in the same tree seems fine. It's also very unlikely a pattern like this actually exists in the wild."
        }
      },
      {
        "sha": "20f3546963c60c0030881049be0222a05601fa31",
        "commit": {
          "message": "[Flare] Ensure Press event hook does not execute side-effects (#15976)"
        }
      },
      {
        "sha": "fce15f14d38d680f3bdee3a124e9e94e91520e16",
        "commit": {
          "message": "don't fire missing act() warnings for react-art (#15975)\n\n* use toWarnDev for dom fixture tests\r\n\r\nforks toWarnDev from root into fixture/dom, updates tes tests to use it\r\n\r\n* disable act() warnings for react-art()\r\n\r\n- For 'secondary' renderers like react-act, we don't want to fire missing act() warnings; the wrapping renderer will fire warnings anyway, and when it flushes, it flushes effects *across* renderers.\r\n\r\n- I could have used isPrimaryRenderer as the flag, but this is marked as false for react-test-renderer, and we *do* want the warning to fire for it. Hence a new flag.\r\n\r\n* add missing dependency `art` to fixtures/dom"
        }
      },
      {
        "sha": "7439b48cf4356473e4f1596e47aac34c8345163a",
        "commit": {
          "message": "Add explicit support for ESLint 6.0.0 (#15974)\n\nPreemptively update tests wrt 'parser' requiring an absolute\r\npath rather than a package name, even though the project is\r\nstill using ESLint 4.\r\n\r\nFixes #15971"
        }
      },
      {
        "sha": "d48db594ec762e42bb87b328f9442545ee662aa3",
        "commit": {
          "message": "eslint-plugin-react-hooks@1.6.1"
        }
      },
      {
        "sha": "827cbc4d00b668af6bbcca98f1730d4c8a546845",
        "commit": {
          "message": "Rename StatelessComponent to FunctionComponent in react-is/README.md (#15963)"
        }
      },
      {
        "sha": "fd601fb2197c8079733a46b907d049bdbfedfe29",
        "commit": {
          "message": "[Flare] Move all event responders to dom directory (#15981)"
        }
      },
      {
        "sha": "6088a201e12258a6d0e36dbb0d2208a57ec133ba",
        "commit": {
          "message": "[Flare] Fix Press scroll cancellation handling (#15983)"
        }
      },
      {
        "sha": "20da1dae4b9523ee94dc67797b11ec789e3acc68",
        "commit": {
          "message": "Fix error logging in getDerivedStateFromProps (#15797)\n\n* Fix error logging in getDerivedStateFromProps\r\n\r\n* Update tests, don't log for both error boundary methods\r\n\r\n* Re-add change lost in rebase"
        }
      },
      {
        "sha": "9b55bcfc6b4dec5766565a1ba4179be975a2f053",
        "commit": {
          "message": "[Flare] Add Hooks to event modules (#15953)"
        }
      },
      {
        "sha": "4d307de458dfdf25e704cb2ca20b0578bba8998c",
        "commit": {
          "message": "Prefix mock Scheduler APIs with _unstable (#15999)\n\nFor now this is only meant to be consumed via `act`."
        }
      },
      {
        "sha": "dd93357aa073e4cf783475832ec7e354f108d822",
        "commit": {
          "message": "[Flare] Move click handling back into target phase (#15993)"
        }
      },
      {
        "sha": "824e9bec7a3f5aa290e5f4e7d7ad52261a7c5d40",
        "commit": {
          "message": "[Flare] Fix issues with touch + pointer interactions (#15997)"
        }
      },
      {
        "sha": "915dfe6977e17dfdf364bced50e7c26d54ee72ab",
        "commit": {
          "message": "Slightly improve performance of hydration. (#15998)\n\n* Slightly improve performance of hydration.\r\n\r\nAvoid loading nodeType and data couple times from the same node in a row,\r\nbut instead load them only once, which will help engines to run this code\r\nfaster, especially during startup of the application. The general approach\r\nis still not ideal, since hydrating this way forces the browser engine\r\nto materialize JavaScript wrapper objects for all DOM nodes, even if they\r\nare not interesting to hydration itself.\r\n\r\n* Fix condition for COMMENT_NODEs.\r\n\r\n* Improve general code readability"
        }
      },
      {
        "sha": "f11540926d2b28ec1f227a79ec9e95b75708c2e3",
        "commit": {
          "message": "Handle changes at module boundaries (#16002)"
        }
      },
      {
        "sha": "8b88ac2592c5f555f315f9440cbb665dd1e7457a",
        "commit": {
          "message": "[Flare] Remove event targets including TouchHitTarget (#16011)"
        }
      },
      {
        "sha": "9b0bd43550206e04bfe9ca695e5981eff0e2d03f",
        "commit": {
          "message": "[Flare] Re-label Flare flag (#16014)"
        }
      },
      {
        "sha": "eb2ace1281611933ff1d7bd6f757d9bb17b2f5e1",
        "commit": {
          "message": "[Flare] Bring Flare support to React Native Fabric (#15887)"
        }
      },
      {
        "sha": "fbbbea16e11e849d2a75e0b0d66e38266783a01c",
        "commit": {
          "message": "fix word async -> concurrent (#15844)"
        }
      },
      {
        "sha": "933c664ad6173adda1021ee1cc2d9233c3c13e22",
        "commit": {
          "message": "SuspenseList Optimizations (#16005)\n\n* Add a bunch of optimizations to SuspenseList\r\n\r\nWe now are able to bail out of reconciliation and splitting out the tail\r\nduring deep updates that hasn't changed the child props. This only\r\nworks while the list wasn't suspended before.\r\n\r\nI also moved the second render of the \"head\" to the complete phase. This\r\ncleans it up a bit for the tail collapsing PR.\r\n\r\nFor this second pass I also use a new technique of resetting the child\r\nFibers for the second pass. This is effectively a fast path to avoid\r\nreconciling the children against props again.\r\n\r\n* Move to didSuspend from SuspenseListState to the effectTag\r\n\r\nThe effectTag now tracks whether the previous commit was suspended.\r\n\r\nThis frees up SuspenseListState to be render-phase only state.\r\n\r\nWe use null to mean the default \"independent\" mode.\r\n\r\n* Rename to SuspenseListState to SuspenseListRenderState\r\n\r\n* Reuse SuspenseListRenderState across render passes\r\n\r\n* Add optimization to bail out of scanning children if they can't be suspended\r\n\r\nThis optimized the deep update case or initial render without anything\r\nsuspending.\r\n\r\nWe have some information available to us that tell us if nothing has\r\nsuspended in the past and nothing has suspended this render pass.\r\n\r\nThis also fixes a bug where we didn't tag the previous render as having\r\nsuspended boundaries if we didn't need to force a rerender.\r\n\r\n* rm printChildren\r\n\r\noops"
        }
      },
      {
        "sha": "46bd11ac3e086fc25b2704679c69c089803779f7",
        "commit": {
          "message": "Flush sync bug (#16027)\n\n* added flush sync test\r\n\r\n* added code to run flushSync with ImmediatePriority\r\n\r\n* added code to run flushSync with ImmediatePriority\r\n\r\n* fixed flow error\r\n\r\n* fixed flow error"
        }
      },
      {
        "sha": "5cb8f6f344a6f3e296f095b8d151157d1f05c835",
        "commit": {
          "message": "Add tail=\"collapsed\" option to SuspenseList (#16007)\n\n* Add tail=\"collapsed\" option\r\n\r\n* Fix issue with tail exceeding the CPU time limit\r\n\r\nWe used to assume that this didn't suspend but this branch happens in\r\nboth cases. This fixes it so that we first check if we suspended.\r\n\r\nNow we can fix the tail so that it always render an additional fallback\r\nin this scenario."
        }
      },
      {
        "sha": "6cf2234a57450fdc19ffa373df9cecfce74fb8c0",
        "commit": {
          "message": "[Flare] Do not block mouse presses on scroll (#16033)"
        }
      },
      {
        "sha": "a865e4a64292756cb0d4ef4f23dca55ebe4ae221",
        "commit": {
          "message": "Clone a custom hook node before use (#16019)"
        }
      },
      {
        "sha": "a457e02ae3a2d3903fcf8748380b1cc293a2445e",
        "commit": {
          "message": "allow nested `act()`s from different renderers (#16039)\n\n* allow nested `act()`s from different renderers\r\n\r\nThere are usecases where multiple renderers need to oprate inside an act() scope\r\n- ReactDOM.render being used inside another component tree. The parent component will be rendered using ReactTestRenderer.create for a snapshot test or something.\r\n- a ReactDOM instance interacting with a ReactTestRenderer instance (like for the new devtools)\r\n\r\nThis PR changes the way the acting sigils operate to allow for this. It keeps 2 booleans, one attached to React, one attached to the renderer. act() changes these values, and the workloop reads them to decide what warning to trigger.\r\n\r\nI also renamed shouldWarnUnactedUpdates to warnsIfNotActing\r\n\r\n* s/ReactIsActing/IsSomeRendererActing and s/ReactRendererIsActing/IsThisRendererActing"
        }
      },
      {
        "sha": "6b946ad9daa39fbb4959e34060d58393f46f0d0c",
        "commit": {
          "message": "[Flare] Add more functionality to Scroll event resonder (#16036)"
        }
      },
      {
        "sha": "bd846459d6c96e6caa64c44e0fb42696db839447",
        "commit": {
          "message": "[fail] Only warn on unacted effects for strict / non sync modes (#16041)\n\n* only warn on unacted effects for strict / non sync modes\r\n\r\n(basically, when `fiber.mode !== 0b0000`)\r\n\r\nWarnings on unacted effects may be too noisy, especially for legacy apps. This PR fires the warning only when in a non sync mode (concurrent/batched), or when in strict mode. This should make updating easier.\r\n\r\nI also added batched mode tests to the act() suite.\r\n\r\n* explicitly check for modes before warning, explicit tests for all modes"
        }
      },
      {
        "sha": "b8f91e6649ccbd9e3bcb6b5907bb20e411ee2074",
        "commit": {
          "message": "[fail] reset IsThisRendererActing correctly (#16042)\n\n* [fail] reset IsThisRendererActing correctly\r\n\r\nI missed this in https://github.com/facebook/react/pull/16039. I'd pointed at the wrong previous state, corrupting it in further use. This PR fixes that, and adds a test to make sure it doesn't happen again.\r\n\r\n* warn for unacted effects only in strict mode"
        }
      },
      {
        "sha": "b365ee2816896ea9f01c1f65e65d403955762f8f",
        "commit": {
          "message": "[Fire] Remove unused React fire fork (#16046)"
        }
      },
      {
        "sha": "e6bfa327daf1034d207cdf02df373f87f59caa07",
        "commit": {
          "message": "[Flare] Cleanup ReactFiberEvents-test (#16047)"
        }
      },
      {
        "sha": "c64f40d718021b8574e7e245938d0c8072266ee2",
        "commit": {
          "message": "[Flare] Remove dead event target code (#16063)"
        }
      },
      {
        "sha": "786186c6928f729c0fc0316023da071b1cceea13",
        "commit": {
          "message": "[Flare] createInitialState -> getInitialState (#16051)"
        }
      },
      {
        "sha": "c40075a72c4b513506a488b8bbb6d23ef23b1f9e",
        "commit": {
          "message": "[Flare] Remove capture phase Flare events (#16054)"
        }
      },
      {
        "sha": "bd72b04939beccac393d2894eb22028a217fd7f3",
        "commit": {
          "message": "[Flare] Clear pressStart timeout on pointercancel (#16067)"
        }
      },
      {
        "sha": "35d2b3bb5e01d8c388cb17a68608184dc7300892",
        "commit": {
          "message": "fix spelling error: resoltion ->  resolution (#16055)"
        }
      },
      {
        "sha": "aa519c17cc10c071906d06abeade9e1bd0ed3dc1",
        "commit": {
          "message": "[Flare] Add currentTarget and unify RN and DOM codepaths (#16066)"
        }
      },
      {
        "sha": "2a0f6390ed657fa8e2c14c1cf6d9faa2f7b42525",
        "commit": {
          "message": "Fix typos (#16076)"
        }
      },
      {
        "sha": "67e3f3fb6e342f95f00215c84d5d013d7b0e1b33",
        "commit": {
          "message": "[Flare] Revise responder event types (#16081)"
        }
      },
      {
        "sha": "2253bc81d052110e14fd0eeb335d47d580ace82b",
        "commit": {
          "message": "[Flare] Switch from currentTarget model to responderTarget model (#16082)"
        }
      },
      {
        "sha": "8533c0a168138d2442334021751b42e530d08bb8",
        "commit": {
          "message": "[Fabric] Add dispatchCommand to React Native renderers (#16085)\n\n* Add dispatchCommand to the public export of the React Native renderers\r\n\r\n* Fixup invalid check\r\n\r\n* Prettier\r\n\r\n* Prettier"
        }
      },
      {
        "sha": "23b8a25345fe2e1b04eac4eaa801b24aba62f3e1",
        "commit": {
          "message": "[Flare] Remove responder flags to simplify logic (#16084)"
        }
      },
      {
        "sha": "2073a7144e9982cc07cf7c19813e50b02c8bcd1b",
        "commit": {
          "message": "[Flare] Press includes button type (#16100)\n\n1. Allow auxillary button clicks (i.e., middle mouse button) to trigger 'onPressStart' and 'onPressEnd', but never 'onPress'.\r\n2. Report the button type – 'primary' or 'auxillary' – on the press event."
        }
      },
      {
        "sha": "48f6594474c449b3ed62fadedda0ffad5e3a807a",
        "commit": {
          "message": "Add warning when single item or nested arrays are used with SuspenseList (#16094)"
        }
      },
      {
        "sha": "d2d9b1f70112b0ce02b0db6a27861186c16116f4",
        "commit": {
          "message": "[Scheduler] Support inferring priority from stack (#16105)\n\nWhen executing a task, wraps the callback in an extra function whose\r\nname includes the current priority level. Profiling tools with access\r\nto function names can use this to determine the priority of the task."
        }
      },
      {
        "sha": "b7669044d9cce79d8ec56c7af6e45caa992aa0b0",
        "commit": {
          "message": "Use Map instead of object as map in ReactNativeComponentTree (#16107)\n\nReal Maps should now be used in RN JS engines. In theory this should\r\nbe faster (but might not actually be in practice), and it avoids hitting\r\nupper bounds of property max counts.\r\n\r\nWe don't use these types of Maps in Fabric."
        }
      },
      {
        "sha": "3f1dee09a40695730c42ce25fb385cf354db4c30",
        "commit": {
          "message": "expose act() sigil correctly for umd builds (#16110)\n\nafter https://github.com/facebook/react/pull/16039, act was broken for umd builds. This PR fixes it."
        }
      },
      {
        "sha": "ca4d78f9b6178de97ba4692ffb86647f2e2ef04d",
        "commit": {
          "message": "[Flare] Press: fix middle-click handling (#16114)\n\nMake sure the root events are removed after middle-click completes"
        }
      },
      {
        "sha": "29b45596354035754d598d8b23a8233f3d2414f0",
        "commit": {
          "message": ".watchmanconfig must be valid json (#16118)\n\nfaceworldproblems?"
        }
      },
      {
        "sha": "8d413bf2c3679befe8c6b56733b7c6f6e467ec07",
        "commit": {
          "message": "Remove React.error and React.warn (#16126)\n\n* Remove React.error/React.warn with React.getComponentStack"
        }
      },
      {
        "sha": "fcff9c57bc41f58e8802016b4dbc0a7b72cc63ad",
        "commit": {
          "message": "Add tail=\"hidden\" option to SuspenseList (#16024)\n\n* Move misaligned comment\r\n\r\n* Add tail=\"hidden\" option\r\n\r\n* isShowingAnyFallbacks -> findFirstSuspended\r\n\r\n* We can't reset Placement tags or we'll forget to insert them\r\n\r\n* Delete hasSuspendedChildrenAndNewContent optimization"
        }
      },
      {
        "sha": "9f395904c6033598ba8bf47f5497fd6e5077c16d",
        "commit": {
          "message": "Inject ReactDebugCurrentFrame into DevTools so it can append component stacks to warnings in DEV mode (#16127)"
        }
      },
      {
        "sha": "424099da60a399aba200e96110cee6eaea53b0aa",
        "commit": {
          "message": "Inject getCurrentFiber() function to DevTools (#16133)\n\nThis returns the current value of ReactCurrentFiber and enables DevTools to append a custom (owner-only) component stack to warnings and errors in DEV mode."
        }
      },
      {
        "sha": "d9b4c55d53c67045c38b12f5aad57a163e7f63a2",
        "commit": {
          "message": "unify deprecated/unsafe lifecycle warnings, pass tests (#16103)\n\n- redoes #15431 from scratch, taking on the feedback there\r\n- unifies the messaging between \"deprecated\" and UNSAFE_ lifecycle messages. It reorganizes ReactStrictModeWarnings.js to capture and flush all the lifecycle warnings in one procedure each.\r\n- matches the warning from ReactPartialRenderer to match the above change\r\n- passes all the tests\r\n- this also turns on `warnAboutDeprecatedLifecycles` for the test renderer. I think we missed doing so it previously. In a future PR, I'll remove the feature flag altogether.\r\n- this DOES NOT do the same treatment for context warnings, I'll do that in another PR too"
        }
      },
      {
        "sha": "c45c2c3a261ab5a2878c36d9f49de531ef69a121",
        "commit": {
          "message": "Move ReactFiberErrorDialog RN fork into RN itself (#16141)"
        }
      },
      {
        "sha": "ce883a19d845e1faf8d4e1587e7022feda66210a",
        "commit": {
          "message": "useSubscription hook (#15022)\n\n* Added use-subscription package with README"
        }
      },
      {
        "sha": "65b80fdd94d8be59263a032408a2a903dbb55378",
        "commit": {
          "message": "[Flare] Add Input event responder surface (#16148)"
        }
      },
      {
        "sha": "997154bcc7091f93733090497c714e5806424168",
        "commit": {
          "message": "[Flare] Add FocusWithin responder (#16152)\n\nFocusWithin is implemented as a separate responder, which keeps both focus\r\nresponders simple and allows for easier composition of behaviours."
        }
      },
      {
        "sha": "b4178af81b02dfa0e898670ce564c4649fd8947f",
        "commit": {
          "message": "clean up nextEffect pointers (#16115)"
        }
      },
      {
        "sha": "2c4d61e1022ae383dd11fe237f6df8451e6f0310",
        "commit": {
          "message": "Adds experimental fundamental interface (#16049)"
        }
      },
      {
        "sha": "783b8f4ae1320d4a4a1188bf2bd40e8ecb3c1f10",
        "commit": {
          "message": "[Flare] Ensure mouse events can use target to validate press (#16172)"
        }
      },
      {
        "sha": "2bd88e38aad28d4dc1fabd93a5dac0f32d812757",
        "commit": {
          "message": "[Scheduler] Bugfix: Cancelling a continuation (#16151)\n\nCancelling the original task should also cancel its continuation."
        }
      },
      {
        "sha": "3f2cafe8bef0922525b445f7bd2e23ea75c817cf",
        "commit": {
          "message": "[WIP][Scheduler] Use rIC to post first callback (#16166)\n\nScheduler uses `requestAnimationFrame` to post tasks to the browser.\r\nIf this happens at the beginning of a frame, the callback might not\r\nfire until the subsequent frame, even if the main thread is idle.\r\n\r\nOur theory was that this wouldn't be an issue in practice, because once\r\nthe first rAF fires, we schedule the next rAF as early as possible in\r\nthat frame. Combined with our heuristic for computing frame deadlines,\r\nwe shouldn't get any idle time in between frames — only before the\r\n*first* frame.\r\n\r\nThis reasoning holds true when you have a small number of large tasks,\r\nsuch as the ones posted by React. The idle time before the task starts\r\nis negligible relative to the lifetime of the entire task.\r\n\r\nHowever, it does not hold if you have many small tasks posted over a\r\nspan of time, perhaps spawned by a flurry of IO events. In this case,\r\ninstead of single, contiguous rAF loop preceded by an idle frame, you\r\nget many rAF loops preceded by many idle frames. Our new theory is that\r\nthis is contributing to poor main thread utilization during page loads.\r\n\r\nTo try to reclaim as much idle time as possible, this PR adds two\r\nexperimental flags. The first one adds a `requestIdleCallback` call to\r\nstart the rAF loop, which will fire before rAF if there's idle time left\r\nin the frame. (We still call rAF in case there isn't. We start working\r\nin whichever event fires first.)\r\n\r\nThe second flag tries a similar strategy using `setTimeout(fn, 0)`. If\r\nthe timer fires before rAF, we'll assume that the main thread is idle.\r\n\r\nIf either `requestIdleCallback` or `setTimeout` fires before rAF, we'll\r\nimmediately peform some work. Since we don't have a real frame time that\r\nwe can use to compute the frame deadline, we'll do an entire frame\r\nlength of work. This will probably push us past the vsync, but this is\r\nfine because we can catch up during the next frame, by which point a\r\nreal rAF will have fired and the loop can proceed the same way it\r\ndoes today.\r\n\r\nTest plan: Try this on Facebook to see if it improves load times"
        }
      },
      {
        "sha": "03944bfb0bdacfe35b2a1722426ff744ae47d018",
        "commit": {
          "message": "Update Suspense Priority Warning to Include Component that Triggered Update (#16030)\n\nImproved warning whenever lower priority events (ex. data fetching, page load) happen during a high priority update (ex. hover/click events) to include:\r\n1.) Name of component that triggered the high priority update or\r\n2.) Information that the update was triggered on the root"
        }
      },
      {
        "sha": "bbd21066e634c03db67f0b9570de60fdb4879dc0",
        "commit": {
          "message": "[Flare] Press: fix keyboard interactions (#16179)\n\nPrevents Spacebar from scrolling the window.\r\nPrevents Enter from triggering a navigation if preventDefault is true.\r\nFixes the emulated mouse events test."
        }
      },
      {
        "sha": "2237efcef9a8e63c1b3f1bd61481cb215d20986a",
        "commit": {
          "message": "[Fresh] Track unrecoverable errors (#16183)\n\n* [Fresh] Track unrecoverable errors\r\n\r\n* Only initial errors set the flag"
        }
      },
      {
        "sha": "afb59916868395d9e95cfe16abe2e36bf8fc3739",
        "commit": {
          "message": "Enable profiler+tracing for test renderer (#16178)\n\nThis commit just brings the feature flags to parity with other renderers."
        }
      },
      {
        "sha": "bff7abf6ba2426b1172e6f1ccbecd40a478a2c49",
        "commit": {
          "message": "[Scheduler][Bugfix] Multiple rAFs in same frame (#16184)\n\nAlways sets `isRAFLoopRunning` back to false when an animation frame is\r\nscheduled. Fixes a bug where two rAFs fire in the same frame, but the\r\nsecond one exits and fails to schedule a new rAF.\r\n\r\nFixes bug observed in Safari."
        }
      },
      {
        "sha": "19354db511e74d96a1c8b6d8b589a72f025da498",
        "commit": {
          "message": "[Scheduler] Add names to inline functions (#16180)\n\nNoticed when looking at the performance profiler with Luna that it's\r\nhard to tell which event causes `performWorkUntilDeadline` to fire\r\nbecause these functions are anonymous."
        }
      },
      {
        "sha": "509889119360ed83ca6ef3f83bcf01e5aa7dcd81",
        "commit": {
          "message": "[Flare] Redesign core event system (#16163)"
        }
      },
      {
        "sha": "c73e1f236f932c76fbed5be87bf0fd91da6c0549",
        "commit": {
          "message": "flush work on exiting outermost act(), with nested act()s from different renderers (#16181)\n\nGiven this snippet:\r\n```jsx\r\n    TestRenderer.act(() => {\r\n      TestUtils.act(() => {\r\n        TestRenderer.create(<Effecty />);\r\n      });\r\n    });\r\n```\r\nWe want to make sure that all work is only flushed on exiting the outermost act().\r\n\r\nNow, naively doing this based on actingScopeDepth would work with a mocked scheduler, where flushAll() would flush all work across renderers.\r\n\r\nThis doesn't work without mocking the scheduler though; and where flushing work only works per renderer. So we disable this behaviour for a non-mocked scenario. This seems like an ok tradeoff."
        }
      },
      {
        "sha": "42b75ab007a5e7c159933cfdbf2b6845d89fc7f2",
        "commit": {
          "message": "Add suspenseCallback feature for runtime tracing of loading states (#16134)\n\nThis adds a 'SuspenseCallback' feature flag. When the property is set on\r\na suspense component it will be called during the commit phase with a\r\nset of the immediate thenable for this component. This will allow user\r\ncode to build runtime tracing of the cause for a suspense boundary."
        }
      },
      {
        "sha": "06cc9969947e614636e9260849fe5b50514eadfe",
        "commit": {
          "message": "Edit Suspense Priority Warning Message (#16186)\n\n* move 'component that triggered the update' in suspense priority warning message to the beginning of the message\r\n\r\n* renamed warnings"
        }
      },
      {
        "sha": "7ad221126f77de71f4307758518955884dd67453",
        "commit": {
          "message": "[Flare] Ensure Flare components are no-ops for TestRenderer (#16192)"
        }
      },
      {
        "sha": "144dba1a114f2d8b491186639aa38ece82eaef26",
        "commit": {
          "message": "Fix suspenseCallback type warning, add a test (#16194)"
        }
      },
      {
        "sha": "9ae5e38f18b6e27dcddc7ecdfc38eefd678c095a",
        "commit": {
          "message": "Add guard to ensure Profiler onRender prop is function before calling (#16197)"
        }
      },
      {
        "sha": "121bfb03bccf3bdb4c5d1ba7cc53b573edb74434",
        "commit": {
          "message": "update legacy context warning message (#16196)\n\nThe link in the legacy context message doesn't point to anything context related. This changes the link to point to https://fb.me/react-legacy-context, which points to https://reactjs.org/docs/context.html#legacy-api. Also adds a line that it'll probably be gone later."
        }
      },
      {
        "sha": "ed72f402579ccd65c70ac3eb950f74636492c934",
        "commit": {
          "message": "[Flare] Remove references to EventComponent (#16206)"
        }
      },
      {
        "sha": "5b08f7b43fed206c66988f852ba36f0f0e7ffa13",
        "commit": {
          "message": "[Flare] Adds useListener implementation to ReactDebugHooks (#16205)"
        }
      },
      {
        "sha": "e0472709c81f53b333feafb5442319d6d25dda4b",
        "commit": {
          "message": "[Flare] Adds Keyboard event responder (#16204)"
        }
      },
      {
        "sha": "857deb2ed59f58a1bd3887f2ab62ff1df809acba",
        "commit": {
          "message": "Warn when Using DefaultProps on Function Components (#16210)\n\nAs part of the process to deprecate defaultProps on function components (as per a larger proposal outlined in (https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md)), add a warning whenever someone does this."
        }
      },
      {
        "sha": "c0830a0e63247d3ef5f906863d1a40125db03837",
        "commit": {
          "message": "[Scheduler] Test browser implementation details (#16198)\n\nThe Scheduler implementation uses browser APIs like `MessageChannel`,\r\n`requestAnimationFrame`, and `setTimeout` to schedule work on the main\r\nthread. Most of our tests treat these as implementation details;\r\nhowever, the sequence and timing of these APIs are not precisely\r\nspecified, and can vary wildly across browsers.\r\n\r\nTo prevent regressions, we need the ability to simulate specific edge\r\ncases that we may encounter in various browsers.\r\n\r\nThis adds a new test suite that mocks all browser methods used in our\r\nimplementation. It assumes as little as possible about the order and\r\ntiming of events. The only thing it assumes is that\r\nrequestAnimationFrame is passed a frame time that is equal to or less\r\nthan the time returned by performance.now. Everything else can be\r\ncontrolled at will.\r\n\r\nIt also includes Scheduler-specific invariants, e.g. only one rAF\r\ncallback can be scheduled at a time.\r\n\r\nIt overlaps slightly with the existing SchedulerDOM-test suite, which\r\nalso mocks the browser APIs, but exposes a higher-level set of testing\r\nprimitives. I will consolidate the two suites in a follow-up."
        }
      },
      {
        "sha": "b43785e151a06c91e4c8b3e6e01b615bdc37e33a",
        "commit": {
          "message": "Update use-subscription README (#16216)\n\nIt was a little confusing that the question asked when NOT to use this package, then the answer says when to use it. I think this is a little better."
        }
      },
      {
        "sha": "d412eec8396e9b800b2e75a2585111ffa09b4978",
        "commit": {
          "message": "[act] flush work correctly without a mocked scheduler (#16223)\n\nNot returning the value of flushPassiveEffects() in flushWork() meant that with async act, we wouldn't flush all work with cascading effects. This PR fixes that oversight, and adds some tests to catch this in the future."
        }
      },
      {
        "sha": "858c84206ef79f210e552c0128f01d1ae3a0cbf0",
        "commit": {
          "message": "Don't hyphenate custom CSS properties for ReactDOMServer (#16167)\n\n* Do not hyphenate custom CSS property\r\n\r\n* Move check into the processStyleName fn\r\n\r\n* Formatting\r\n\r\n* add test\r\n\r\n* Put isCustomProperty check after conditional return\r\n\r\n* add test to `ReactDOMServerIntegration` and supress warning\r\n\r\n* Don't indexOf twice\r\n\r\n* Simpler fix"
        }
      },
      {
        "sha": "ed57bf8ed4591fc64b44326132e97b8888e4df5a",
        "commit": {
          "message": "[Bugfix] Check tag before calling hook effects (#16215)\n\n* Add failing test for #16215\r\n\r\nNext commit fixes it.\r\n\r\n* [Bugfix] Check tag before calling hook effects\r\n\r\nTODO: Test that triggers this"
        }
      },
      {
        "sha": "0d7141dd49809c3815aeb6fc257d4dfe2607d317",
        "commit": {
          "message": "[Flare] Fix SSR issue with serializing responders prop (#16227)"
        }
      },
      {
        "sha": "75ab53b9e1de662121e68dabb010655943d28d11",
        "commit": {
          "message": "[scheduler] Yield many times per frame, no rAF (#16214)\n\nAdds experimental flag to yield many times per frame using a message\r\nevent loop, instead of the current approach of guessing the next vsync\r\nand yielding at the end of the frame.\r\n\r\nThis new approach forgoes a `requestAnimationFrame` entirely. It posts a\r\nmessage event and performs a small amount of work (5ms) before yielding\r\nto the browser, regardless of where it might be in the vsync cycle. At\r\nthe end of the event, if there's work left over, it posts another\r\nmessage event.\r\n\r\nThis should keep the main thread responsive even for really high frame\r\nrates. It also shouldn't matter if the hardware frame rate changes after\r\npage load (our current heuristic only detects if the frame rate\r\nincreases, not decreases).\r\n\r\nThe main risk is that yielding more often will exacerbate main thread\r\ncontention with other browser tasks.\r\n\r\nLet's try it and see."
        }
      },
      {
        "sha": "9914a19190296ca7e0fd65f7c4f6fe5cc42e29a4",
        "commit": {
          "message": "[Fresh] Transfer refs when remounting (#16241)\n\n* Add a failing test for refs and remounting\r\n\r\n* Transfer ref when remounting"
        }
      },
      {
        "sha": "47656bf2a1bdff25d6ade5bb580ea6ec4e4fcc94",
        "commit": {
          "message": "[Flare] Remove longpress from press responder (#16242)\n\nLong press will move to a separate responder."
        }
      },
      {
        "sha": "55bc393f726ddf3def83ca5a43cfc38a45d2e421",
        "commit": {
          "message": "[Flare] Ensure we check for bad polyfill when creating responders (#16243)"
        }
      },
      {
        "sha": "1912b4a0f1dc68e8f39978b9bac48d7f77b2b97c",
        "commit": {
          "message": "[Flare] Remove delay props from Press (#16247)\n\nMoving working with delays into user-space."
        }
      },
      {
        "sha": "e276a5e85046c2cf336f623d975b1af01b251b5e",
        "commit": {
          "message": "[Flare] Remove delay props from Hover (#16248)\n\nMoving working with delays into user-space."
        }
      },
      {
        "sha": "e6a0473c3c6f501dbe291f60b9ee35760ab99eed",
        "commit": {
          "message": "Warn when rendering tests in concurrent/batched mode without a mocked scheduler (#16207)\n\nConcurrent/Batched mode tests should always be run with a mocked scheduler (v17 or not). This PR adds a warning for the same. I'll put up a separate PR to the docs with a page detailing how to mock the scheduler."
        }
      },
      {
        "sha": "db3ae32b8fe2c3fe24c4f5496aecdeab24b9d719",
        "commit": {
          "message": "flush fallbacks in tests (#16240)\n\nIn this PR, for tests (specifically, code inside an `act()` scope), we immediately trigger work that would have otherwise required a timeout. This makes it simpler to tests loading/spinner states, and makes tests resilient to changes in React.\r\n\r\nFor some of our tests(specifically, ReactSuspenseWithNoopRenderer-test.internal), we _don't_ want fallbacks to immediately trigger, because we're testing intermediate states and such. Added a feature flag `flushSuspenseFallbacksInTests` to disable this behaviour on a per case basis."
        }
      },
      {
        "sha": "f440bfd55911588d90c1d6e00d5a6b8feeda9b48",
        "commit": {
          "message": "Bugfix:  Effects should never have higher than normal priority (#16257)\n\n* Bugfix: Priority when effects are flushed early\r\n\r\nThe priority of passive effects is supposed to be the same as the\r\npriority of the render. This fixes a bug where the priority is sometimes\r\nwrong if the effects are flushed early.\r\n\r\nBut the priority should really never be higher than Normal Priority.\r\nI'll change that in the next commit.\r\n\r\n* Effects never have higher than normal priority\r\n\r\nEffects currently have the same priority as the render that spawns them.\r\nThis changes the behavior so that effects always have normal priority,\r\nor lower if the render priority is lower (e.g. offscreen prerendering).\r\n\r\nThe implementation is a bit awkward because of the way `renderRoot`,\r\n`commitRoot`, and `flushPassiveEffects` are split. This is a known\r\nfactoring problem that I'm planning to address once 16.9 is released."
        }
      },
      {
        "sha": "f939df402c074227014a85256cfe7c80ac30a0bc",
        "commit": {
          "message": "[act] Wrap IsThisRendererActing in DEV check (#16259)\n\n* [act] Wrap IsThisRendererActing in DEV check\r\n\r\nSo that it doesn't leak into the production bundle. Follow-up to #16240.\r\n\r\n* Disable Suspense fallback test in prod"
        }
      },
      {
        "sha": "375616788510d65b0d523fb1b331aefbd737d03d",
        "commit": {
          "message": "Add missing check to unmocked Scheduler warning (#16261)\n\nThe unmocked Scheduler warning doesn't actually check if Scheduler\r\nis mocked."
        }
      },
      {
        "sha": "b5af4fe3c64e1ac254e8fd101fec2f8e414aabf6",
        "commit": {
          "message": "Remove FocusScope (#16267)"
        }
      },
      {
        "sha": "42794557ca44a8c05c71aab698d44d1294236538",
        "commit": {
          "message": "[Flare] Tweaks to Flare system design and API (#16264)"
        }
      },
      {
        "sha": "95674af2ef3c3028d903272f606295209fbb6b65",
        "commit": {
          "message": "Add test of scheduler overhead (#16260)"
        }
      },
      {
        "sha": "0c1ec049f8832d1c27f876844666fda393036800",
        "commit": {
          "message": "Add a feature flag to disable legacy context (#16269)\n\n* Add a feature flag to disable legacy context\r\n\r\n* Address review\r\n\r\n- invariant -> warning\r\n- Make this.context and context argument actually undefined\r\n\r\n* Increase test coverage for lifecycles\r\n\r\n* Also disable it on the server is flag is on\r\n\r\n* Make this.context {} when disabled, but function context is undefined\r\n\r\n* Move checks inside"
        }
      },
      {
        "sha": "a53f5cc22eab9617a1d5473e16ce872c7158edef",
        "commit": {
          "message": "[SuspenseList] Bug fix: Reset renderState when bailing out (#16278)\n\nIf there are adjacent updates we bail out of rendering the suspense list\r\nat all but we may still complete the node. We need to reset the render\r\nstate in that case.\r\n\r\nI restructured so that this is in the same code path so we don't forget it\r\nin the future."
        }
      },
      {
        "sha": "05dce7598a60d38d39a6b32572b54e1408c29d9b",
        "commit": {
          "message": "Fix priority of clean-up function on deletion (#16277)\n\nThe clean-up function of a passive effect (`useEffect`) usually fires\r\nin a post-commit task, after the browser has painted. However, there is\r\nan exception when the component (or its parent) is deleted from the\r\ntree. In that case, we fire the clean-up function during the\r\nsynchronous commit phase, the same phase we use for layout effects.\r\n\r\nThis is a concession to implementation complexity. Calling it in the\r\npassive effect phase would require either traversing the children of the\r\ndeleted fiber again, or including unmount effects as part of the fiber\r\neffect list.\r\n\r\nBecause the functions are called during the sync phase in this case,\r\nthe Scheduler priority is Immediate (the one used for layout) instead\r\nof Normal. We may want to reconsider this trade off later."
        }
      },
      {
        "sha": "c4c9f086eb9b61a36d9d96a847374ea65147b6cb",
        "commit": {
          "message": "BugFix: Suspense priority warning firing when not supposed to (#16256)\n\nPreviously, the suspense priority warning was fired even if the Root wasn't suspended. Changed the warning to fire only when the root is suspended.\r\n\r\nAlso refactored the suspense priority warning so it's easier to read."
        }
      },
      {
        "sha": "6b565ce736657308393e75d507b7c374e1f2bc8c",
        "commit": {
          "message": "Rendering tasks should not jump the queue (#16284)\n\nWhen React schedules a rendering task, it passes a `timeout` option\r\nbased on its expiration time. This is intended to avoid starvation\r\nby other React updates. However, it also affects the relative priority\r\nof React tasks and other Scheduler tasks at the same level, like\r\ndata processing.\r\n\r\nThis adds a feature flag to disable passing a `timeout` option to\r\nScheduler. React tasks will always append themselves to the end of\r\nthe queue, without jumping ahead of already scheduled tasks.\r\n\r\nThis does not affect the order in which React updates within a single\r\nroot are processed, but it could affect updates across multiple roots.\r\n\r\nThis also doesn't remove the expiration from Scheduler. It only means\r\nthat React tasks are not given special treatment."
        }
      },
      {
        "sha": "dc232e6774e60029be7995d1b4e3e37f8ff843ef",
        "commit": {
          "message": "chore: remove outdated comment about gcc (#16232)"
        }
      },
      {
        "sha": "a1dbb852c29d23d5d0b76a0171eb59df4bebf684",
        "commit": {
          "message": "warn if you try to use act() in prod (#16282)\n\nWe have behaviour divergence for act() between prod and dev (specifically, act() + concurrent mode does not flush fallbacks in prod. This doesn't affect anyone in OSS yet)\r\n\r\nWe also don't have a good story for writing tests in prod (and what from what I gather, nobody really writes tests in prod mode).\r\n\r\nWe could have wiped out act() in prod builds, except that _we_ ourselves use act() for our tests when we run them in prod mode.\r\n\r\nThis PR is a compromise to all of this. We will log a warning if you try to use act() in prod mode, and we silence it in our test suites."
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.9.0-alpha.0",
      "body": "## v16.9.0-alpha.0 (April 3, 2019)\r\n\r\n* (`await act(async () => ...)` ([@threepointone](https://github.com/threepointone) in #14853)\r\n\r\n## Artifacts\r\n\r\n* react: https://unpkg.com/react@16.9.0-alpha.0/umd/\r\n* react-art: https://unpkg.com/react-art@16.9.0-alpha.0/umd/\r\n* react-dom: https://unpkg.com/react-dom@16.9.0-alpha.0/umd/\r\n* react-is: https://unpkg.com/react-is@16.9.0-alpha.0/umd/\r\n* react-test-renderer: https://unpkg.com/react-test-renderer@16.9.0-alpha.0/umd/\r\n* scheduler: https://unpkg.com/scheduler@0.14.0-alpha.0/umd/"
    },
    "commits": [
      {
        "sha": "ab7a67b1dc0e44bf74545ccf51a8c143b3af7402",
        "commit": {
          "message": "Fix react-dom/server context leaks when render stream destroyed early (#14706)\n\n* Fix react-dom/server context memory retention\r\n\r\n* Test for pollution of later renders\r\n\r\n* Inline loop\r\n\r\n* More tests"
        }
      },
      {
        "sha": "fad0842fd45e4082feb8036922c77529431628ca",
        "commit": {
          "message": "Release scripts documentation (#14863)\n\n* Improve release script process documentation\r\n* Improved pre-publish instructions/message based on feedback\r\n* Added reminder to attach build artifacts to GitHub release"
        }
      },
      {
        "sha": "0e67969cb1ad8c27a72294662e68fa5d7c2c9783",
        "commit": {
          "message": "Prompt to include UMD build artifact links in GitHub release (#14864)"
        }
      },
      {
        "sha": "c506ded3b275b410517c06e0f55db8f0f70288b5",
        "commit": {
          "message": "Don't discard render phase state updates with the eager reducer optimization (#14852)\n\n* Add test cases for setState(fn) + render phase updates\r\n\r\n* Update eager state and reducer for render phase updates\r\n\r\n* Fix a newly firing warning"
        }
      },
      {
        "sha": "13645d224d66dc7d295c5e65dae4b2bb62ee174d",
        "commit": {
          "message": "Deal with fallback content in Partial Hydration (#14884)\n\n* Replace SSR fallback content with new suspense content\r\n\r\n* The three states of a Dehydrated Suspense\r\n\r\nThis introduces three states for dehydrated suspense boundaries\r\n\r\nPending - This means that the tree is still waiting for additional data or\r\nto be populated with its final content.\r\n\r\nFallback - This means that the tree has entered a permanent fallback state\r\nand no more data from the server is to be expected. This means that the\r\nclient should take over and try to render instead. The fallback nodes will\r\nbe deleted.\r\n\r\nNormal - The node has entered its final content and is now ready to be\r\nhydrated.\r\n\r\n* Rename retryTimedOutBoundary to resolveRetryThenable\r\n\r\nThis doesn't just retry. It assumes that resolving a thenable means that\r\nit is ok to clear it from the thenable cache.\r\n\r\nWe'll reuse the retryTimedOutBoundary logic separately.\r\n\r\n* Register a callback to be fired when a boundary changes away from pending\r\n\r\nIt's now possible to switch from a pending state to either hydrating\r\nor replacing the content."
        }
      },
      {
        "sha": "1493abd7e0e8a3c9c09285c1b990ecb79a53e640",
        "commit": {
          "message": "Deleted empty App.css (#14149)"
        }
      },
      {
        "sha": "dab2fdbbbd6eb560523fe2146c153f6a24e2f8dc",
        "commit": {
          "message": "Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies (#14636)\n\n* Add ESLint rule for useEffect/useCallback/useMemo Hook dependencies\r\n\r\n* Fix ReactiveDependencies rule\r\n\r\n* fix lint errors\r\n\r\n* Support useLayoutEffect\r\n\r\n* Add some failing tests and comments\r\n\r\n* Gather dependencies in child scopes too\r\n\r\n* If we don't find foo.bar.baz in deps, try foo.bar, then foo\r\n\r\n* foo is enough for both foo.bar and foo.baz\r\n\r\n* Shorter rule name\r\n\r\n* Add fixable meta\r\n\r\n* Remove a bunch of code and start from scratch\r\n\r\n* [WIP] Only report errors from dependency array\r\n\r\nThis results in nicer editing experience. Also has autofix.\r\n\r\n* Fix typo\r\n\r\n* [Temp] Skip all tests\r\n\r\n* Fix the first test\r\n\r\n* Revamp the test suite\r\n\r\n* Fix [foo] to include foo.bar\r\n\r\n* Don't suggest call expressions\r\n\r\n* Special case 'current' for refs\r\n\r\n* Don't complain about known static deps\r\n\r\n* Support useImperativeHandle\r\n\r\n* Better punctuation and formatting\r\n\r\n* More uniform message format\r\n\r\n* Treat React.useRef/useState/useReducer as static too\r\n\r\n* Add special message for ref.current\r\n\r\n* Add a TODO case\r\n\r\n* Alphabetize the autofix\r\n\r\n* Only alphabetize if it already was\r\n\r\n* Don't add static deps by default\r\n\r\n* Add an undefined variable case\r\n\r\n* Tweak wording\r\n\r\n* Rename to exhaustive-deps\r\n\r\n* Clean up / refactor a little bit"
        }
      },
      {
        "sha": "b96b61dc4dc9df51532c04b91c53ccdfc84519a8",
        "commit": {
          "message": "Use the canonical nativeTag for Fabric's setNativeProps (#14900)\n\n* Use the canonical nativeTag for Fabric's setNativeProps\r\n\r\n* Fix prettier"
        }
      },
      {
        "sha": "4f4aa69f1b2bdc1ddb00e476f49450e251475e0c",
        "commit": {
          "message": "Adding setNativeProps tests for NativeMethodsMixin (#14901)"
        }
      },
      {
        "sha": "b0f45c0fc6ed690739401be9adccb77a80c4f7ba",
        "commit": {
          "message": "Adding ReactNative.setNativeProps that takes a ref (#14907)\n\n* Adding ReactNative.setNativeProps that takes a ref\r\n\r\n* Adding test for components rendered with Fabric with Paper's setNativeProps\r\n\r\n* Fixing flow types\r\n\r\n* Fix prettier\r\n\r\n* Rename ReactNativeSetNativeProps.js to be more general"
        }
      },
      {
        "sha": "f978d5fde4228843d09af9134e580a8403bd0371",
        "commit": {
          "message": "Fix warning message for new setNativeProps method. on -> with (#14909)"
        }
      },
      {
        "sha": "d0318fb3f946ff359ff1b6e2c09bd7c724e3d05f",
        "commit": {
          "message": "Updating copyright headers, dropping the year (#14893)\n\n* Updating copyright headers, dropping the year\r\n* Update copyright in ReactDOMHooks-test and react-cache LRU.js"
        }
      },
      {
        "sha": "7de4d23919ab5c67a708560a5166b8cdb1547e26",
        "commit": {
          "message": "Fix UMD builds by re-exporting the scheduler priorities (#14914)"
        }
      },
      {
        "sha": "8c1966590a12d213e0d68b7ae8a5563d4db3d694",
        "commit": {
          "message": "Release 16.8.3"
        }
      },
      {
        "sha": "219ce8a9ccf4b61a2e28cbb0494eee4ad15868f4",
        "commit": {
          "message": "Fix tracing fixture (#14917)"
        }
      },
      {
        "sha": "a77bbf1a1c278a39dd7b1afb02f3d92402fcc8a0",
        "commit": {
          "message": "[ESLint] Warn against assignments from inside Hooks (#14916)\n\n* [ESLint] Warn against assignments from inside Hooks\r\n\r\n* Include variable name\r\n\r\n* Add a test for the legit case"
        }
      },
      {
        "sha": "22bb947642dc02888964e2050d134429e8938182",
        "commit": {
          "message": "Release eslint-plugin-react-hooks@1.2.0"
        }
      },
      {
        "sha": "f99fca3cb28e1fbd87e0b647ac43959add290be7",
        "commit": {
          "message": "Fix sample ESLint configuration (#14926)\n\nSee [ESLint docs](https://eslint.org/docs/user-guide/configuring#configuring-rules)"
        }
      },
      {
        "sha": "f708f9e307e5d2579a019b7d53cb06bac63d6d44",
        "commit": {
          "message": "Improve pactch release process docs (#14923)"
        }
      },
      {
        "sha": "33cb3f04f14638e9344dc59ae956f9805c07ab07",
        "commit": {
          "message": "Release script clarifies which test fixture failed (#14922)"
        }
      },
      {
        "sha": "920b0bbb3c308490757accb9b8fc524d19505394",
        "commit": {
          "message": "[scheduler] Pass didTimeout argument to callbacks (#14931)\n\nAs I prepare to refactor the Fiber scheduler, I've noticed some quirks\r\nin our implementation. This PR addressed one of them.\r\n\r\n---\r\n\r\nThere's no reason for a timed out Scheduler callback to check\r\n`shouldYield`, because the value will always be false until the work\r\nhas completed. The `didTimeout` argument provides this information to\r\nthe callback so it can avoid the redundant checks.\r\n\r\nReact's existing check for whether a callback has timed out didn't make\r\nany sense, but happened to work anyway. I don't think the wrongness of\r\nthe old implementation is observable via React APIs but it's\r\nincoherent regardless."
        }
      },
      {
        "sha": "ba708fa79b3db6481b7886f9fdb6bb776d0c2fb9",
        "commit": {
          "message": "Remove ReactNoop.flushDeferredPri and flushUnitsOfWork (#14934)\n\n* Remove ReactNoop.flushDeferredPri and flushUnitsOfWork\r\n\r\nSome of our older tests worked by counting how many times React checked\r\nwhether it should yield to the main thread, instead of something\r\npublicly observable like how many times a component is rendered.\r\n\r\nOur newer tests have converged on a style where we push into a log and\r\nmake assertions on the log. This pattern is less coupled to the\r\nimplementation while still being sufficient to test performance\r\noptimizations, like resuming (whenever we add that back).\r\n\r\nThis commit removes flushDeferredPri and flushUnitsOfWork and upgrades\r\nthe affected tests.\r\n\r\n* Remove shouldYieldToRenderer indirection\r\n\r\nThis wrapper is no longer necessary."
        }
      },
      {
        "sha": "1d6b1660a29c452e954d053a14c5adc42ccf94ba",
        "commit": {
          "message": "Fixed typo (#14943)"
        }
      },
      {
        "sha": "412f88296840f89d95bb619c7ca68e119ccfa0c3",
        "commit": {
          "message": "fix(eslint-plugin-react-hooks): node engine updated to version 7 because of object.entries (#14951)"
        }
      },
      {
        "sha": "1bbfbc98d20d1eb0c7c8ed3772f5bdd0c29ac96c",
        "commit": {
          "message": "[ESLint] Add more cases to exhaustive-deps rule (#14930)\n\n* Add better message for literal dependencies\r\n\r\n* Warn about ref.current in cleanup phase\r\n\r\n* Fix wrong comment\r\n\r\n* Tweak wording"
        }
      },
      {
        "sha": "3989c095002430e0c7316ca0af0870fdf060b5ab",
        "commit": {
          "message": "eslint-plugin-react-hooks@1.3.0"
        }
      },
      {
        "sha": "870214f37ad63333e750f31ef0cc0bde5793aee5",
        "commit": {
          "message": "Deprecate ref.setNativeProps in favor of ReactNative.setNativeProps (#14912)\n\n* Deprecate ref.setNativeProps in favor of ReactNative.setNativeProps\r\n\r\n* Using a feature flag for the setNativeProps warning\r\n\r\n* Removing extra line breaks\r\n\r\n* Set the FB native feature flag to true\r\n\r\n* Prettier"
        }
      },
      {
        "sha": "8e25ed20bd27d126f670d04680db85209f779056",
        "commit": {
          "message": "Unify noop and test renderer assertion APIs (#14952)\n\n* Throw in tests if work is done before emptying log\r\n\r\nTest renderer already does this. Makes it harder to miss unexpected\r\nbehavior by forcing you to assert on every logged value.\r\n\r\n* Convert ReactNoop tests to use jest matchers\r\n\r\nThe matchers warn if work is flushed while the log is empty. This is\r\nthe pattern we already follow for test renderer. I've used the same APIs\r\nas test renderer, so it should be easy to switch between the two."
        }
      },
      {
        "sha": "0b8efb229c0b8e4b0919d855e926c7528e2246f0",
        "commit": {
          "message": "Allow omitting constant primitive deps (#14959)"
        }
      },
      {
        "sha": "4186952a6f3558eb4fae9f6c5f669bd898dc1d97",
        "commit": {
          "message": "Fixed incompatibility between react-debug-tools and useContext() (#14940)\n\n* Refactor hook ordering check to use DEV-only data structure. This enables us to warn about more cases (e.g. useContext, useDebugValue) withou the need to add any overhead to production bundles."
        }
      },
      {
        "sha": "00748c53e183952696157088a858352cc77b0010",
        "commit": {
          "message": "Add new mock build of Scheduler with flush, yield API (#14964)\n\n* Add new mock build of Scheduler with flush, yield API\r\n\r\nTest environments need a way to take control of the Scheduler queue and\r\nincrementally flush work. Our current tests accomplish this either using\r\ndynamic injection, or by using Jest's fake timers feature. Both of these\r\noptions are fragile and rely too much on implementation details.\r\n\r\nIn this new approach, we have a separate build of Scheduler that is\r\nspecifically designed for test environments. We mock the default\r\nimplementation like we would any other module; in our case, via Jest.\r\nThis special build has methods like `flushAll` and `yieldValue` that\r\ncontrol when work is flushed. These methods are based on equivalent\r\nmethods we've been using to write incremental React tests. Eventually\r\nwe may want to migrate the React tests to interact with the mock\r\nScheduler directly, instead of going through the host config like we\r\ncurrently do.\r\n\r\nFor now, I'm using our custom static injection infrastructure to create\r\nthe two builds of Scheduler — a default build for DOM (which falls back\r\nto a naive timer based implementation), and the new mock build. I did it\r\nthis way because it allows me to share most of the implementation, which\r\nisn't specific to a host environment — e.g. everything related to the\r\npriority queue. It may be better to duplicate the shared code instead,\r\nespecially considering that future environments (like React Native) may\r\nhave entirely forked implementations. I'd prefer to wait until the\r\nimplementation stabilizes before worrying about that, but I'm open to\r\nchanging this now if we decide it's important enough.\r\n\r\n* Mock Scheduler in bundle tests, too\r\n\r\n* Remove special case by making regex more restrictive"
        }
      },
      {
        "sha": "3ada82b7416c51290535a054f345b99378c38dcb",
        "commit": {
          "message": "Allow extraneous effect dependencies (#14967)\n\nThis makes cases like\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [activeTab]);\r\n\r\nnot warn.\r\n\r\nHowever, it still warns for unused useCallback/useMemo deps."
        }
      },
      {
        "sha": "53e787b45f633468f5ccdc2012468f1ebbba9d4c",
        "commit": {
          "message": "Replace noop's fake Scheduler implementation with mock Scheduler build (#14969)\n\n* Replace noop's fake Scheduler implementation with mock Scheduler build\r\n\r\nThe noop renderer has its own mock implementation of the Scheduler\r\ninterface, with the ability to partially render work in tests. Now that\r\nthis functionality has been lifted into a proper mock Scheduler build,\r\nwe can use that instead.\r\n\r\nMost of the existing noop tests were unaffected, but I did have to make\r\nsome changes. The biggest one involved passive effects: previously, they\r\nwere scheduled on a separate queue from the queue that handles\r\nrendering. After this change, both rendering and effects are scheduled\r\nin the Scheduler queue. I think this is a better approach because tests\r\nno longer have to worry about the difference; if you call `flushAll`,\r\nall the work is flushed, both rendering and effects. But for those few\r\ntests that do care to flush the rendering without the effects, that's\r\nstill possible using the `yieldValue` API.\r\n\r\nFollow-up: Do the same for test renderer.\r\n\r\n* Fix import to scheduler/unstable_mock"
        }
      },
      {
        "sha": "ccb2a8a44eee74504f1e3f3bebc272cbb1fcc0f0",
        "commit": {
          "message": "Replace test renderer's fake Scheduler implementation with mock build (#14970)\n\n* Replace test renderer's fake Scheduler implementation with mock build\r\n\r\nThe test renderer has its own mock implementation of the Scheduler\r\ninterface, with the ability to partially render work in tests. Now that\r\nthis functionality has been lifted into a proper mock Scheduler build,\r\nwe can use that instead.\r\n\r\n* Fix Profiler tests in prod"
        }
      },
      {
        "sha": "69060e1da6061af845162dcf6854a5d9af28350a",
        "commit": {
          "message": "Swap expect(ReactNoop) for expect(Scheduler) (#14971)\n\n* Swap expect(ReactNoop) for expect(Scheduler)\r\n\r\nIn the previous commits, I upgraded our custom Jest matchers for the\r\nnoop and test renderers to use Scheduler under the hood.\r\n\r\nNow that all these matchers are using Scheduler, we can drop\r\nsupport for passing ReactNoop and test roots and always pass\r\nScheduler directly.\r\n\r\n* Externalize Scheduler in noop and test bundles\r\n\r\nI also noticed we don't need to regenerator runtime in noop anymore."
        }
      },
      {
        "sha": "bb2939ccc23c9895d798f889d9c32848be43225e",
        "commit": {
          "message": "Support editable useState hooks in DevTools (#14906)\n\n* ReactDebugHooks identifies State and Reducer hooks as editable\r\n* Inject overrideHookState() method to DevTools to support editing in DEV builds\r\n* Added an integration test for React DevTools, react-debug-tools, and overrideHookState"
        }
      },
      {
        "sha": "02404d793b84c057e0f3f712f8ce565f81d4b7ab",
        "commit": {
          "message": "Avoid dynamic dispatch for scheduler calls (#14968)"
        }
      },
      {
        "sha": "df7b4768c7931504338ee1093ebcfda3d5974650",
        "commit": {
          "message": "[ESLint] Deduplicate suggested dependencies (#14982)\n\n* Deduplicate suggested dependencies\r\n\r\n* Tweak test cases"
        }
      },
      {
        "sha": "59ef28437ac30ae26fe53a3be1de50754be8b806",
        "commit": {
          "message": "Warn about dependencies outside of render scope (#14990)"
        }
      },
      {
        "sha": "e1e45fb3673b7d23b4f89ab9fa9644fe9539eb9c",
        "commit": {
          "message": "[ESLint] Suggest to destructure props when they are only used as members (#14993)\n\n* Suggest to destructure props when they are only used as members\r\n\r\n* Add more tests\r\n\r\n* Fix a bug"
        }
      },
      {
        "sha": "f16442a10683d8885fcd657c584ed5e40e0a5737",
        "commit": {
          "message": "eslint-plugin-react-hooks@1.4.0"
        }
      },
      {
        "sha": "9d756d903fdd07895fc320962c3fab95fa099bd5",
        "commit": {
          "message": "Revert #14756 changes to ReactFiberScheduler (#14992)\n\n* Revert #14756 changes to ReactFiberScheduler\r\n\r\nThis PR introduced some bugs in concurrent mode during internal testing.\r\nUntil we figure out a proper solution, I'm going to try reverting it.\r\n\r\nNot totally certain this is sufficient to unbreak the bugs we found, but\r\nI'm using this branch to determine that.\r\n\r\n* Add back commented out Scheduler import\r\n\r\nWith a note not to use named imports next time we import Scheduler\r\nin this module."
        }
      },
      {
        "sha": "757a70b25dd33966380409d6c491bc0fe741ce08",
        "commit": {
          "message": "ReactNoop.yield -> Scheduler.yieldValue (#15008)\n\nThese used to be different things, but now ReactNoop.yield merely\r\nre-exports Scheduler.yieldValue, so let's get rid of it."
        }
      },
      {
        "sha": "ce45ca9ba3243124df8a36cf92bae79c2125b427",
        "commit": {
          "message": "Prettier"
        }
      },
      {
        "sha": "ff596e3efb6a2f486e3466b94053d3c857dc8fe7",
        "commit": {
          "message": "fix(auto-version-update): update root package version while publishing (#15005)\n\n* fix(auto-version-update): update root package version while publishing\r\n\r\n* fix(remove-version): remove version field from package json"
        }
      },
      {
        "sha": "fd557d453d37eab29eca18f0507750ab2093669d",
        "commit": {
          "message": "Warn on mount when deps are not an array (#15018)\n\n* Warn on mount when deps are not an array\r\n\r\n* Check other Hooks\r\n\r\n* I can't figure out how to fix error/warning nesting lint\r\n\r\nBut it doesn't really matter much because we test other cases in the other test."
        }
      },
      {
        "sha": "fa5d4ee43b2b7145ab4013b86662e69ea64ab180",
        "commit": {
          "message": "[ESLint] Treat functions that don't capture anything as static (#14996)\n\n* Treat functions that don't capture anything as static\r\n\r\n* Fix comment"
        }
      },
      {
        "sha": "db8d466554a1a85bf9427fb04c1901503d65f93f",
        "commit": {
          "message": "Fix heading in changelog"
        }
      },
      {
        "sha": "a9aa24ed8dc843b76ceb4880b83e776c696cafaf",
        "commit": {
          "message": "16.8.4 and changelog"
        }
      },
      {
        "sha": "5d49dafac80733fbd8699138c766da3339468254",
        "commit": {
          "message": "Enforce deps array in useMemo and useCallback (#15025)"
        }
      },
      {
        "sha": "1e3b6192b54df20ac117a2af56afbe00ac9487b7",
        "commit": {
          "message": "Import Scheduler directly, not via host config (#14984)\n\n* Import Scheduler directly, not via host config\r\n\r\nWe currently schedule asynchronous tasks via the host config. (The host\r\nconfig is a static/build-time dependency injection system that varies\r\nacross different renderers — DOM, native, test, and so on.) Instead of\r\ncalling platform APIs like `requestIdleCallback` directly, each renderer\r\nimplements a method called `scheduleDeferredCallback`.\r\n\r\nWe've since discovered that when scheduling tasks, it's crucial that\r\nReact work is placed in the same queue as other, non-React work on the\r\nmain thread. Otherwise, you easily end up in a starvation scenario where\r\nrendering is constantly interrupted by less important tasks. You need a\r\ncentralized coordinator that is used both by React and by other\r\nframeworks and application code. This coordinator must also have a\r\nconsistent API across all the different host environments, for\r\nconvention's sake and so product code is portable — e.g. so the same\r\ncomponent can work in both React Native and React Native Web.\r\n\r\nThis turned into the Scheduler package. We will have different builds of\r\nScheduler for each of our target platforms. With this approach, we treat\r\nScheduler like a built-in platform primitive that exists wherever React\r\nis supported.\r\n\r\nNow that we have this consistent interface, the indirection of the host\r\nconfig no longer makes sense for the purpose of scheduling tasks. In\r\nfact, we explicitly do not want renderers to scheduled task via any\r\nsystem except the Scheduler package.\r\n\r\nSo, this PR removes `scheduleDeferredCallback` and its associated\r\nmethods from the host config in favor of directly importing Scheduler.\r\n\r\n* Missed an extraneous export"
        }
      },
      {
        "sha": "9b7e1d1389e080d19e71680bbbe979ec58fa7389",
        "commit": {
          "message": "[ESLint] Suggest moving inside a Hook or useCallback when bare function is a dependency (#15026)\n\n* Warn about bare function deps and suggest moving or useCallback\r\n\r\n* Clearer wording"
        }
      },
      {
        "sha": "6d2666bab16ee8c822e848f84a6feb0d42a6d78c",
        "commit": {
          "message": "Fix ESLint rule crash (#15044)"
        }
      },
      {
        "sha": "197703ecc776dd5c1a4d956896603bcc67fb9920",
        "commit": {
          "message": "[ESLint] Add more hints to lint messages (#15046)\n\n* A clearer message for props destructuring where applicable\r\n\r\n* Add line number to the \"move function\" message\r\n\r\n* Add a hint for how to fix callbacks from props\r\n\r\n* Simplify code and harden tests\r\n\r\n* Collect all dependency references for better warnings\r\n\r\n* Suggest updater or reducer where appropriate"
        }
      },
      {
        "sha": "eb6247a9ab7653aac346db08faf0862c58b055df",
        "commit": {
          "message": "More concise messages (#15053)"
        }
      },
      {
        "sha": "03ad9c73e468cafa9cafbd9a51a0c3a16ed3f362",
        "commit": {
          "message": "[ESLint] Tweak setState updater message and add useEffect(async) warning (#15055)\n\n* Use first letter in setCount(c => ...) suggestion\r\n\r\nIn-person testing showed using original variable name confuses people.\r\n\r\n* Warn about async effects"
        }
      },
      {
        "sha": "d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd",
        "commit": {
          "message": "eslint-plugin-react-hooks@1.5.0"
        }
      },
      {
        "sha": "3f4852fa5f932e5e815ef1be39c72ac8be4687d4",
        "commit": {
          "message": "Run Placeholder tests in persistent mode, too (#15013)\n\n* Convert ReactSuspensePlaceholder tests to use noop\r\n\r\nInstead of the test renderer, since test renderer does not support\r\nrunning in persistent mode.\r\n\r\n* Run Placeholder tests in persistent mode, too\r\n\r\n* Fix Flow and lint\r\n\r\n* Hidden text instances should have correct host context\r\n\r\nAdds a test for a subtle edge case that only occurs in persistent mode.\r\n\r\n* createHiddenTextInstance -> cloneHiddenTextInstance\r\n\r\nThis sidesteps the problem where createHiddenTextInstance needs access\r\nto the host context."
        }
      },
      {
        "sha": "bc8bd24c145d386be7f014f04fc927067d18412a",
        "commit": {
          "message": "Run persistent mode tests in CI (#15029)\n\n* Add command to run tests in persistent mode\r\n\r\n* Convert Suspense fuzz tester to use noop renderer\r\n\r\nSo we can run it in persistent mode, too.\r\n\r\n* Don't mutate stateNode in appendAllChildren\r\n\r\nWe can't mutate the stateNode in appendAllChildren because the children\r\ncould be current.\r\n\r\nThis is a bit weird because now the child that we append is different\r\nfrom the one on the fiber stateNode. I think this makes conceptual\r\nsense, but I suspect this likely breaks an assumption in Fabric.\r\n\r\nWith this approach, we no longer need to clone to unhide the children,\r\nso I removed those host config methods.\r\n\r\nFixes bug surfaced by fuzz tester. (The test case that failed was the\r\none that's already hard coded.)\r\n\r\n* In persistent mode, disable test that reads a ref\r\n\r\nRefs behave differently in persistent mode. I added a TODO to write\r\na persistent mode version of this test.\r\n\r\n* Run persistent mode tests in CI\r\n\r\n* test-persistent should skip files without noop\r\n\r\nIf a file doesn't reference react-noop-renderer, we shouldn't bother\r\nrunning it in persistent mode, since the results will be identical to\r\nthe normal test run.\r\n\r\n* Remove module constructor from placeholder tests\r\n\r\nWe don't need this now that we have the ability to run any test file in\r\neither mutation or persistent mode.\r\n\r\n* Revert \"test-persistent should skip files without noop\"\r\n\r\nSeb objected to adding shelljs as a dep and I'm too lazy to worry about\r\nWindows support so whatever I'll just revert this.\r\n\r\n* Delete duplicate file"
        }
      },
      {
        "sha": "6a4a261ee8cf2f95c7a725670dad7763836d8284",
        "commit": {
          "message": "Test suspended children are hidden before layout in persistent mode (#15030)\n\nRefs behave differently in persistent mode, so instead of a ref, the\r\npersistent mode version of this test asserts on the output of the\r\nhost tree."
        }
      },
      {
        "sha": "5d0c3c6c7d0a1f8fe793ca89d3e0f9f71f3e49a1",
        "commit": {
          "message": "[Partial Hydration] Render client-only content at normal priority (#15061)\n\n* Split props changing from permanent fallback state\r\n\r\nThese will need different logic. In this commit, no logic has changed,\r\nonly moved.\r\n\r\n* Delete terminal fallback content in first pass\r\n\r\nIf the dehydrated suspense boundary's fallback content is terminal there\r\nis nothing to show. We need to get actual content on the screen soon.\r\n\r\nIf we deprioritize that work to offscreen, then the timeout heuristics will\r\nbe wrong.\r\n\r\nTherefore, if we have no current and we're already at terminal fallback\r\nstate we'll immediately schedule a deletion and upgrade to real suspense.\r\n\r\n* Show failing case when there is another wrapper boundary\r\n\r\n* Revert \"Delete terminal fallback content in first pass\"\r\n\r\nThis reverts commit ad67ba8928c23f5d9ba22d7e5c202bf27d0e49d3.\r\n\r\n* Use the new approach of leaving work at normal pri to replace fallback"
        }
      },
      {
        "sha": "103378b1eada44561821b1c22ff54e0537cf9764",
        "commit": {
          "message": "Warn for javascript: URLs in DOM sinks (#15047)\n\n* Prevent javascript protocol URLs\r\n\r\n* Just warn when disableJavaScriptURLs is false\r\n\r\nThis avoids a breaking change.\r\n\r\n* Allow framesets\r\n\r\n* Allow <html> to be used in integration tests\r\n\r\nFull document renders requires server rendering so the client path\r\njust uses the hydration path in this case to simplify writing these tests.\r\n\r\n* Detect leading and intermediate characters and test mixed case\r\n\r\nThese are considered valid javascript urls by browser so they must be\r\nincluded in the filter.\r\n\r\nThis is an exact match according to the spec but maybe we should include\r\na super set to be safer?\r\n\r\n* Test updates to ensure we have coverage there too\r\n\r\n* Fix toString invocation and Flow types\r\n\r\nRight now we invoke toString twice when we hydrate (three times\r\nwith the flag off). Ideally we should only do it once even in this case\r\nbut the code structure doesn't really allow for that right now.\r\n\r\n* s/itRejects/itRejectsRendering\r\n\r\n* Dedupe warning and add the unsafe URL to the warning message\r\n\r\n* Add test that fails if g is added to the sanitizer\r\n\r\nThis only affects the prod version since the warning is deduped anyway.\r\n\r\n* Fix prod test"
        }
      },
      {
        "sha": "9d77a317bf5bde7e6edd3c8cd0ebb00feb447223",
        "commit": {
          "message": "Improve async useEffect warning (#15104)"
        }
      },
      {
        "sha": "1204c789776cb01fbaf3e9f032e7e2ba85a44137",
        "commit": {
          "message": "[eslint] Wording tweaks (#15078)\n\n* [eslint] Wording tweaks\r\n\r\nI think these are a little clearer.\r\n\r\n* fix tests"
        }
      },
      {
        "sha": "679402a66b09e129d06f415cd976d18727cc8590",
        "commit": {
          "message": "Improve hydration fixture, support older versions of React (#14118)\n\n* Hydration Fixture: Only load ReactDOMServer if it exists\r\n\r\nFixes an issue where the hydration fixture would try to load in\r\nReactDOMServer below version 14. In version 13, string markup methods\r\nexist on the React namespace.\r\n\r\n* DOM Fixtures: Use class component for App.js\r\n\r\nThis was breaking React 0.13.0.\r\n\r\n* Hydration Fixture: better findDOMNode compatibility\r\n\r\nThis commit fixes an issue where the Hydration DOM fixture was\r\nunusable in React 0.13.0 or lower because of newer API usage.\r\n\r\nIt fixes that by avoiding the use of refs to get the textarea\r\nreference in the code editor component, using various versions of\r\nfindDOMNode as required.\r\n\r\n* Hydration Fixture: Do not show dropdown for single-line errors\r\n\r\nIf an error showed for the hydration fixture, a detail element was\r\nused even if no additional lines could display. In that case, this\r\ncommit changes the component such that it returns a div.\r\n\r\n* Deeper React version support for hydration fixture\r\n\r\nThis commit adds support for versions 0.4.0 of React and higher for\r\nthe hydration fixture.\r\n\r\nThe DOM test fixtures themselves do not support down to React 0.4.0,\r\nwhich would be exhaustive. Instead, the Hydration fixture can pick a\r\nversion to use for its own purposes. By default, this is the version\r\nof React used by the fixtures.\r\n\r\nIn the process of doing this, I had to make some updates to the\r\nrenderer.html document associated with the hydration fixture, and I've\r\nadded some comments to better document the history of API changes."
        }
      },
      {
        "sha": "0c03a474362c27aa9222ae27088782a01402067c",
        "commit": {
          "message": "Adds experimental event API scaffolding (#15108)\n\n* Adds experimental event API scaffolding"
        }
      },
      {
        "sha": "935f60083f6c8bea8b90baa986954d60731a805b",
        "commit": {
          "message": "eslint-plugin-react-hooks@1.5.1"
        }
      },
      {
        "sha": "ab5fe174c69ea4ea5019390f4234a83ef7ce8d52",
        "commit": {
          "message": "Don't set the first option as selected in select tag with `size` attribute  (#14242)\n\n* Set 'size' attribute to select tag if it occurs before appending options\r\n\r\n* Add comment about why size is assigned on select create. Tests\r\n\r\nI added some more clarification for why size must be set on select\r\nelement creation:\r\n\r\n- In the source code\r\n- In the DOM test fixture\r\n- In a unit test\r\n\r\n* Use let, not const in select tag stub assignment"
        }
      },
      {
        "sha": "371bbf36bba53dd25fcab665bd43e7cebeecf6d3",
        "commit": {
          "message": "Add infrastructure for passive/non-passive event support for future API exploration (#15036)\n\n* Add infrastructure for passive/non-passive event support for future event API experimentation"
        }
      },
      {
        "sha": "f1ff4348c1debea8e0ce0fb35cc3fff342569789",
        "commit": {
          "message": "Don't suggest a function as its own dep (#15115)"
        }
      },
      {
        "sha": "52c870c8d9e283283f34b6d113e39e4531ce0b1d",
        "commit": {
          "message": "Fix shallow renderer not allowing hooks in forwardRef render functions (#15100)\n\n* test: Add test for shallow + forwardRef + hook\r\n\r\n* fix(react-test-renderer): shallow forwardRef hooks"
        }
      },
      {
        "sha": "ff4fb6d368c2197871d071b6de8ffd2beb1467b5",
        "commit": {
          "message": "Remove facts tracker (#15111)\n\n* Removed Travis references\r\n\r\n* Remove used facts tracker"
        }
      },
      {
        "sha": "f0621fe232f31cb0fcd63992c3440ec1b4ce5813",
        "commit": {
          "message": "Use same example code for async effect warning (#15118)"
        }
      },
      {
        "sha": "b283d75c17ff40cba1a49956d23b3985b9eb6abe",
        "commit": {
          "message": "Support React.memo in ReactShallowRenderer (#14816)\n\n* Support React.memo in ReactShallowRenderer\r\n\r\nReactShallowRenderer uses element.type frequently, but with React.memo\r\nelements the actual type is element.type.type. This updates\r\nReactShallowRenderer so it uses the correct element type for Memo\r\ncomponents and also validates the inner props for the wrapped\r\ncomponents.\r\n\r\n* Allow Rect.memo to prevent re-renders\r\n\r\n* Support memo(forwardRef())\r\n\r\n* Dont call memo comparison function on initial render\r\n\r\n* Fix test\r\n\r\n* Small tweaks"
        }
      },
      {
        "sha": "035e4cffbd16fd618ed1a5614838656a4a505936",
        "commit": {
          "message": "Change passive checker to use defineProperty (#15121)"
        }
      },
      {
        "sha": "8d60bd4dc2f7128c3de53474db50df000b14f677",
        "commit": {
          "message": "[Shallow] Implement setState for Hooks and remount on type change (#15120)\n\n* Throw away old shallow renderer state on type change\r\n\r\nThis worked in function components but was broken for classes. It incorrectly retained the old instance even if the type was different.\r\n\r\n* Remove _previousComponentIdentity\r\n\r\nWe only needed this because we didn't correctly reset based on type. Now we do so this can go away.\r\n\r\n* Use _reset when unmounting\r\n\r\n* Use arbitrary componentIdentity\r\n\r\nThere was no particular reason it was set to element.type. We just wanted to check if something is a render phase update.\r\n\r\n* Support Hook state updates in shallow renderer"
        }
      },
      {
        "sha": "4162f6026c2f560f286e7853f4929cd5e0135bdd",
        "commit": {
          "message": "Add feature flag to disable yielding (#15119)"
        }
      },
      {
        "sha": "d926936f0b5ebe160819717924d7a124c2f65471",
        "commit": {
          "message": "Eager bailout optimization should always compare to latest reducer (#15124)\n\n* Eager bailout optimization should always compare to latest reducer\r\n\r\n* queue.eagerReducer -> queue.lastRenderedReducer\r\n\r\nThis name is a bit more descriptive.\r\n\r\n* Add test case that uses preceding render phase update"
        }
      },
      {
        "sha": "2b93d686e359c7afa299e2ec5cf63160a32a1155",
        "commit": {
          "message": "Add more info to invalid hook call error message (#15139)\n\n* Add more info to invalid hook call error message\r\n\r\n* Update other renderers + change call to action\r\n\r\n* Update related tests for new hooks error message\r\n\r\n* Fix lint errors"
        }
      },
      {
        "sha": "df7b87d25e74fbbaf19b822096d0651aa3ad6a9f",
        "commit": {
          "message": "Warn for Context.Consumer with contextType (#14831)"
        }
      },
      {
        "sha": "42c3c967d1e4ca4731b47866f2090bc34caa086c",
        "commit": {
          "message": "Compile invariant directly to throw expressions (#15071)\n\n* Transform invariant to custom error type\r\n\r\nThis transforms calls to the invariant module:\r\n\r\n```js\r\ninvariant(condition, 'A %s message that contains %s', adj, noun);\r\n```\r\n\r\nInto throw statements:\r\n\r\n```js\r\nif (!condition) {\r\n  if (__DEV__) {\r\n    throw ReactError(`A ${adj} message that contains ${noun}`);\r\n  } else {\r\n    throw ReactErrorProd(ERR_CODE, adj, noun);\r\n  }\r\n}\r\n```\r\n\r\nThe only thing ReactError does is return an error whose name is set\r\nto \"Invariant Violation\" to match the existing behavior.\r\n\r\nReactErrorProd is a special version used in production that throws\r\na minified error code, with a link to see to expanded form. This\r\nreplaces the reactProdInvariant module.\r\n\r\nAs a next step, I would like to replace our use of the invariant module\r\nfor user facing errors by transforming normal Error constructors to\r\nReactError and ReactErrorProd. (We can continue using invariant for\r\ninternal React errors that are meant to be unreachable, which was the\r\noriginal purpose of invariant.)\r\n\r\n* Use numbers instead of strings for error codes\r\n\r\n* Use arguments instead of an array\r\n\r\nI wasn't sure about this part so I asked Sebastian, and his rationale\r\nwas that using arguments will make ReactErrorProd slightly slower, but\r\nusing an array will likely make all the functions that throw slightly\r\nslower to compile, so it's hard to say which way is better. But since\r\nReactErrorProd is in an error path, and fewer bytes is generally better,\r\nno array is good.\r\n\r\n* Casing nit"
        }
      },
      {
        "sha": "1e3364e764ff8c90c082b90f688e6553c3811366",
        "commit": {
          "message": "Test that we don't suspend when disabling yielding (#15143)"
        }
      },
      {
        "sha": "7ad7386308abd55f12ad9f1cddac6a97860e92eb",
        "commit": {
          "message": "Improve warning for invalid class contextType (#15142)\n\n* Improve warning for invalid class contextType\r\n\r\n* Don't warn for null\r\n\r\n* Grammar"
        }
      },
      {
        "sha": "55cc921c5d3485eb60fe94628b227d4069c97b6c",
        "commit": {
          "message": "Adds react-events package for internal testing (#15150)\n\n* Adds react-events package for internal testing"
        }
      },
      {
        "sha": "acd65db5bc2cd1ab19be66318f3e931054796739",
        "commit": {
          "message": "Deprecate module pattern (factory) components (#15145)"
        }
      },
      {
        "sha": "daeda44d8f5abdb7354742bb69a967302d34d7f9",
        "commit": {
          "message": "Follow up to 15150 (#15152)"
        }
      },
      {
        "sha": "b83e01cade6f86b9a127bdfdda60f625fd14fdcd",
        "commit": {
          "message": "Adds more scaffolding for experimental event API (#15112)\n\n* Adds more scaffolding for experimental event API"
        }
      },
      {
        "sha": "061d6ce3c0310d3b7f2122ad216be01bc4eff956",
        "commit": {
          "message": "fix(react-dom): access iframe contentWindow instead of contentDocument (#15099)\n\nMDN has a list of methods for obtaining the window reference of an\r\niframe:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#Syntax\r\n\r\nfix(react-dom): check if iframe belongs to the same origin\r\n\r\nAccessing the contentDocument of a HTMLIframeElement can cause the browser\r\nto throw, e.g. if it has a cross-origin src attribute.\r\nSafari will show an error in the console when the access results in \"Blocked a frame with origin\". e.g:\r\n\r\n```javascript\r\ntry {\r\n $0.contentDocument.defaultView\r\n} catch (err) {\r\n  console.log('err', err)\r\n}\r\n\r\n> Blocked a frame with origin X from accessing a frame with origin Y. Protocols, domains, and ports must match.\r\n> err – TypeError: null is not an object (evaluating '$0.contentDocument.defaultView')\r\n```\r\n\r\nA safety way is to access one of the cross origin properties: Window or Location\r\nWhich might result in \"SecurityError\" DOM Exception and it is compatible to Safari.\r\n\r\n```javascript\r\ntry {\r\n $0.contentWindow.location.href\r\n} catch (err) {\r\n console.log('err', err)\r\n}\r\n\r\n> err – SecurityError: Blocked a frame with origin \"http://localhost:3001\" from accessing a cross-origin frame. Protocols, domains, and ports must match.\r\n```\r\n\r\nhttps://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl"
        }
      },
      {
        "sha": "c05b4b81f91c0b43a02e101d6a37b3de768f017b",
        "commit": {
          "message": "Link to useLayoutEffect gist in a warning (#15158)"
        }
      },
      {
        "sha": "45f571736cd0fe1d6c9db6cdde85fb2274b1670e",
        "commit": {
          "message": "ReactFiberScheduler -> ReactFiberScheduler.old\n\nDoing this in its own commit so history and blame are preserved."
        }
      },
      {
        "sha": "b1a56abd6aec4379c2fc9400b413f6f42d0c9b1f",
        "commit": {
          "message": "Fork ReactFiberScheduler with feature flag\n\nAdds a feature flag `enableNewScheduler` that toggles between two\nimplementations of ReactFiberScheduler. This will let us land changes in\nmaster while preserving the ability to quickly rollback.\n\nIdeally this will be a short-lived fork. Once we've tested the new\nscheduler for a week or so without issues, we will get rid of it. Until\nthen, we'll need to maintain two parallel implementations and run tests\nagainst both of them. We rarely land changes to ReactFiberScheduler, so\nI don't expect this will be a huge burden.\n\nThis commit does not implement anything new. The flag is still off and\ntests run against the existing implementation.\n\nUse `yarn test-new-scheduler` to run tests against the new one."
        }
      },
      {
        "sha": "66f280c87b05885ee55320a5e107a534a50f9375",
        "commit": {
          "message": "Add internal logic for listening to event responders (#15168)\n\n* Add the logic for listening to event responders"
        }
      },
      {
        "sha": "31518135c25aaa1b5c2799d2a18b6b9e9178409c",
        "commit": {
          "message": "Strengthen nested update counter test coverage (#15166)\n\n* Isolate ReactUpdates-test cases\r\n\r\nThis ensures their behavior is consistent when run in isolation, and that they actually test the cases they're describing.\r\n\r\n* Add coverage for cases where we reset nestedUpdateCounter\r\n\r\nThese cases explicitly verify that we reset the counter in right places.\r\n\r\n* Add a mutually recursive test case\r\n\r\n* Add test coverage for useLayoutEffect loop"
        }
      },
      {
        "sha": "56035dac645af75c1a8aa8deba2bcf89b14a5aa4",
        "commit": {
          "message": "unstable_Profiler -> Profiler (#15172)"
        }
      },
      {
        "sha": "4b8e1641b77d0a5443403b8a2a8fa141c220c1a7",
        "commit": {
          "message": "Fork performWork instead of using boolean flag (#15169)\n\nI inline it into performAsyncWork instead.\r\n\r\nCode that was only relevant to the async callback had leaked into the\r\nperformWork call which is an indication that this was a bad abstraction\r\nand therefore the wrong place to DRY.\r\n\r\nBy inlining I also discovered that minExpirationTime is actually irrelevant\r\nin the yieldy case so we can clean that up."
        }
      },
      {
        "sha": "78968bb3d9049c65f74d42a1b2f4f9f95d2cba42",
        "commit": {
          "message": "Validate useEffect without deps too (#15183)"
        }
      },
      {
        "sha": "f161ee2eb7e78d6cb3d3878fe1812ac1057fedc6",
        "commit": {
          "message": "React.warn() and React.error() (#15170)"
        }
      },
      {
        "sha": "78f2775ed037e9707b1606186625e70693f39613",
        "commit": {
          "message": "Flip event passive logic on passiveBrowserEventsSupported (#15190)"
        }
      },
      {
        "sha": "b1cccd1ed14ff0d5db4fcefbf8b49807a48d7410",
        "commit": {
          "message": "Warn about setState directly in dep-less useEffect (#15184)"
        }
      },
      {
        "sha": "f33e5790b83dc1ae41b2b7d59d53420e7c8383aa",
        "commit": {
          "message": "eslint-plugin-react-hooks@1.6.0"
        }
      },
      {
        "sha": "bfb5a0cfef0aa07f65ad7891be80b43cb27c2dcf",
        "commit": {
          "message": "Add 16.8.5 changelog"
        }
      },
      {
        "sha": "8127a57c44ddc8feaffaa4b9c6abde53c831f2d0",
        "commit": {
          "message": "Update CHANGELOG.md"
        }
      },
      {
        "sha": "db96d637d8bbbdbe0f55c02659bf9ea9463687cc",
        "commit": {
          "message": "Changelog"
        }
      },
      {
        "sha": "8e9a013c079eecd2ac65b52be9deb2ec9a4ddcfb",
        "commit": {
          "message": "Release 16.8.5"
        }
      },
      {
        "sha": "5c2b2c0852c715abda7296bd6e7a2e941ca66969",
        "commit": {
          "message": "Warn about async infinite useEffect loop (#15180)\n\n* Warn about async infinite useEffect loop\r\n\r\n* Make tests sync"
        }
      },
      {
        "sha": "0d5e4c7e096c640419ea0aadb0d09bb9e9a7ddc8",
        "commit": {
          "message": "Remove coverage badge from README (#15216)"
        }
      },
      {
        "sha": "d03ac4b231da8952d2648f73147f9673de46a6ed",
        "commit": {
          "message": "Fix tracing fixture"
        }
      },
      {
        "sha": "80f8b0d5123981969997e07c071bdc6e3884ef58",
        "commit": {
          "message": "Add part of the event responder system for experimental event API (#15179)\n\n* Add part of the event responder system"
        }
      },
      {
        "sha": "d8cb10f11fa0b0ab6ded66bbef86dc874b5e2d90",
        "commit": {
          "message": "Enabled warnAboutDeprecatedLifecycles flag by default (#15186)"
        }
      },
      {
        "sha": "669cafb36f7252e2f83655f48f48a85b0f4e2051",
        "commit": {
          "message": "Adds experimental event component responder surfaces (#15228)\n\n* Adds Press and Hover event modules + more features to the Event Responder System"
        }
      },
      {
        "sha": "1cfd256685c673511090f7be273cf8740a9cf594",
        "commit": {
          "message": "Fix circular module imports causing file size increase (#15231)\n\n* Fix circular module imports causing file size increase"
        }
      },
      {
        "sha": "4148b0511de8a9de93bbab7c6045dc7f259afca3",
        "commit": {
          "message": "Changelog"
        }
      },
      {
        "sha": "fb6b50871b2f0d846f63a51af7ce620ce6b73e48",
        "commit": {
          "message": "Update versions for 16.8.6"
        }
      },
      {
        "sha": "c7a2dce50adc6e6d2b12ea8a17fe7b4efcc27055",
        "commit": {
          "message": "Disable JS urls at build level for www (#15230)\n\nThis will be on by default in open source for the next major."
        }
      },
      {
        "sha": "c6f3524df585c193214e7e685a11b5f2d1953b49",
        "commit": {
          "message": "Adds React event component and React event target support to SSR renderer (#15242)\n\n* Adds React event component and React event target support to SSR renderer"
        }
      },
      {
        "sha": "5d336df70664a9c8db497f57ef9cfbaf59fb28e8",
        "commit": {
          "message": "Allow for null targetFiber for root event handling (#15247)"
        }
      },
      {
        "sha": "700f17be6752a13a8ead86458e343d2d637ee3ee",
        "commit": {
          "message": "Fix longpress in experimental Press event module (#15246)\n\nThe 'longpress' event is dispatched during a press interaction, rather than\r\nafter it has ended.\r\n\r\nThe 'longPressCancelsPress' prop can be used to prevent 'press' being\r\ndispatched if 'longpress' has already been dispatched."
        }
      },
      {
        "sha": "a41b217708fcf2a8a325c83f89a480b2ebd91ce6",
        "commit": {
          "message": "Add additional event API responder surfaces (#15248)\n\n* Add rest of event modules + small fixes"
        }
      },
      {
        "sha": "f4625f51823dd7faa02bba95ae731249ce07246c",
        "commit": {
          "message": "Fix on(Long)PressChange events in experimental press event API (#15256)\n\nMake sure that `onPressChange` is only called if `longPressCancelsPress` is `false`.\r\nAnd make sure that `onLongPressChange` is called when a long press ends."
        }
      },
      {
        "sha": "08055a625e28672f6ab705fd1d063522e337c2c7",
        "commit": {
          "message": "Fix Press module in experimental event API (#15262)\n\nNote: this is for an experimental event API that we're testing out internally at Facebook.\r\n\r\nFixes a regression in f4625f51823dd7faa02bba95ae731249ce07246c"
        }
      },
      {
        "sha": "1b94fd215dfd8ea25f1d9197890c613d4c84d915",
        "commit": {
          "message": "Make setNativeProps a no-op with Fabric renderer (#15094)\n\n* Make setNativeProps a no-op with Fabric renderer\r\n\r\n* Remove unnecessary __DEV__ check"
        }
      },
      {
        "sha": "2e02469fa22d54b0a695037b82843eeaab56b364",
        "commit": {
          "message": "ReactNative's ref.measureLayout now takes a ref (#15126)\n\n* ReactNative's ref.measureLayout now takes a ref\r\n\r\n* Use Object as the additional param type\r\n\r\n* Remove unnecessary whitespace\r\n\r\n* Not supporting ref in mixin or subclass"
        }
      },
      {
        "sha": "7f1f5ddc335cec2d56ce7a555a71ac12e24147e8",
        "commit": {
          "message": "Rename press props in experimental event API (#15263)\n\nNote: this is for an experimental event API that we're testing out internally at Facebook.\r\n\r\n* onPressIn -> onPressStart\r\n* onPressOut -> onPressEnd\r\n* longPressCancelsPress -> onLongPressShouldCancelPress"
        }
      },
      {
        "sha": "a050f3d459edd3b3b27773aa8b18f85fc414473b",
        "commit": {
          "message": "Delete Suspense Fixture (#15273)\n\nAs far as I can tell this build is broken. Let's fix or delete. If I can't\r\ntest, I can't patch it up when I break it."
        }
      },
      {
        "sha": "9444a5472082bbc38b598aa6404d39b9554bbdf7",
        "commit": {
          "message": "Warn on nested EventTragets in experimental event API (#15287)"
        }
      },
      {
        "sha": "5ef0d1d29d42462a6ffde9ec6f9f9ffe8825404a",
        "commit": {
          "message": "Rename hover props in experimental event API and write unit tests (#15283)\n\n* Rename hover props in experimental event API and write unit tests"
        }
      },
      {
        "sha": "4482fddeda166b0ce4ff3e4f1d8f8b6d9b26179c",
        "commit": {
          "message": "Fix host context issues around EventComponents and EventTargets (#15284)"
        }
      },
      {
        "sha": "296c4393da6f8f64b44b4b574e68127389768c4c",
        "commit": {
          "message": "Add Press event prop types and fix a check in Safari (#15288)\n\n* Add PressProps type to event module\r\n\r\n* Move default Press event delays to constants\r\n\r\n* Fix right-click press check for Safari\r\n\r\n* Prettier and Linter\r\n\r\n* Use event.key in press responder\r\n\r\nevent.keyCode is a deprecated API\r\n\r\n* Remove unused props from Press event module"
        }
      },
      {
        "sha": "f243deab8286b9c51f44e47926c1ba0ccb53449a",
        "commit": {
          "message": "Add tests for Press responder event module (#15290)\n\n* Add Press responder event tests\r\n\r\nBehavior being tested takes cues from React Native's Pressability.\r\nA couple of these tests fail and require the Press implementation to be patched."
        }
      },
      {
        "sha": "6a1e6b2f78da3a56aa497902951c6e9ce654eafc",
        "commit": {
          "message": "Experimental event API: loosen EventTarget constraints and warnings (#15292)\n\n* Remove warning for event targets being direct children of event component\r\n\r\n* Addressed feedback and added more test coverage + warnings"
        }
      },
      {
        "sha": "9307932fe5b59c2d5ce8d04823b94ec0e48b206e",
        "commit": {
          "message": "Refactor event object creation for the experimental event API (#15295)\n\n* Refactor event object creation for the experimental event API"
        }
      },
      {
        "sha": "4c75881ee38ba2596c5c603d268f0dff178b8581",
        "commit": {
          "message": "Remove maxDuration from tests (#15272)\n\nWe instead assume a 150ms duration."
        }
      },
      {
        "sha": "aed0e1c30c113cbf748eb312b9f1bf0f598c79a1",
        "commit": {
          "message": "await act(async () => ...) (#14853)\n\nThis took a while, but I'm happy I went through it. Some key moments - recursively flushing effects, flushing microtasks on each async turn, and my team's uncompromising philosophy on code reuse. Really happy with this. I still want to expand test coverage, and I have some more small related todos, but this is good to land. On to the next one. \r\n\r\nSoundtrack to landing this - https://open.spotify.com/track/0MF8I8OUo8kytiOo8aSHYq?si=gSWqUheKQbiQDXzptCXHTg\r\n\r\n* hacked up act(async () => {...})\r\n\r\n* move stuff around\r\n\r\n* merge changes\r\n\r\n* abstract .act warnings and stuff. all renderers. pass all tests.\r\n\r\n* move testutils.act back into testutils\r\n\r\n* move into scheduler, rename some bits\r\n\r\n* smaller bundle\r\n\r\n* a comment for why we don't do typeof === 'function'\r\n\r\n* fix test\r\n\r\n* pass tests - fire, prod\r\n\r\n* lose actContainerElement\r\n\r\n* tighter\r\n\r\n* write a test for TestRenderer\r\n\r\nit's an odd one, because not only does sync act not flush effects correctly, but the async one does (wut). verified it's fine with the dom version.\r\n\r\n* lint\r\n\r\n* rewrote to move flushing logic closer to the renderer\r\n\r\nthe scheduler's `flushPassiveEffects` didn't work as expected for the test renderer, so I decided to go back to the hack (rendering a dumb container) This also makes reactdom not as heavy (by a few bytes, but still).\r\n\r\n* move it around so the delta isn't too bad\r\n\r\n* cleanups\r\n\r\nfix promise chaining\r\npropagate errors correctly\r\ntest for thenable the 'right' way\r\nmore tests!\r\ntidier!\r\nponies!\r\n\r\n* Stray comment\r\n\r\n* recursively flush effects\r\n\r\n* fixed tests\r\n\r\n* lint, move noop.act into react-reconciler\r\n\r\n* microtasks when checking if called, s/called/calledLog, cleanup\r\n\r\n* pass fb lint\r\n\r\nwe could have globally changed our eslint config to assume Promise is available, but that means we expect a promise polyfill on the page, and we don't yet. this code is triggered only in jest anyway, and we're fairly certain Promise will be available there. hence, the once-off disable for the check\r\n\r\n* shorter timers, fix a test, test for Promise\r\n\r\n* use global.Promise for existence check\r\n\r\n* flush microtasks\r\n\r\n* a version that works in browsers (that support postMessage)\r\n\r\nI also added a sanity fixture inside fixtures/dom/ mostly for me.\r\n\r\n* hoist flushEffectsAndMicroTasks\r\n\r\n* pull out tick logic from ReactFiberScheduler\r\n\r\n* fix await act (...sync) hanging\r\n\r\n- fix a hang when awaiting sync logic\r\n- a better async/await test for test renderer\r\n\r\n* feedback changes\r\n\r\n- use node's setImmediate if available\r\n- a warning if MessageChannel isn't available\r\n- rename some functions\r\n\r\n* pass lint/flow checks (without requiring a Promise polyfill/exclusion)\r\n\r\n* prettier\r\n\r\nthe prettiest, even.\r\n\r\n* use globalPromise for the missed await warning\r\n\r\n* __DEV__ check for didWarnAboutMessageChannel\r\n\r\n* thenables and callbacks instead of promises, pass flow/lint\r\n\r\n* tinier. better.\r\n\r\n- pulled most bits out of FiberScheduler\r\n- actedUpdates uses callbacks now\r\n\r\n* pass build validation\r\n\r\n* augh prettier\r\n\r\n* golfing 7 more chars\r\n\r\n* Test that effects are not flushed without also flushing microtasks\r\n\r\n* export doesHavePendingPassiveEffects, nits\r\n\r\n* createAct()\r\n\r\n* dead code\r\n\r\n* missed in merge?\r\n\r\n* lose the preflushing bits\r\n\r\n* ugh prettier\r\n\r\n* removed `actedUpdates()`, created shared/actingUpdatesScopeDepth\r\n\r\n* rearrange imports so builds work, remove the hack versions of flushPassiveEffects\r\n\r\n* represent actingUpdatesScopeDepth as a tuple [number]\r\n\r\n* use a shared flag on React.__SECRET...\r\n\r\n* remove createAct, setup act for all relevant renderers\r\n\r\n* review feedback\r\n\r\nshared/enqueueTask\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\n\r\nsimpler act() internals\r\n\r\nReactSharedInternals.ReactShouldWarnActingUpdates\r\n\r\n* move act() implementation into createReactNoop\r\n\r\n* warnIfNotCurrentlyActingUpdatesInDev condition check order"
        }
      },
      {
        "sha": "4d5cb64aa2beacf982cf0e01628ddda6bd92014c",
        "commit": {
          "message": "Rewrite ReactFiberScheduler for better integration with Scheduler package (#15151)\n\n* Rewrite ReactFiberScheduler\r\n\r\nAdds a new implementation of ReactFiberScheduler behind a feature flag.\r\nWe will maintain both implementations in parallel until the new one\r\nis proven stable enough to replace the old one.\r\n\r\nThe main difference between the implementations is that the new one is\r\nintegrated with the Scheduler package's priority levels.\r\n\r\n* Conditionally add fields to FiberRoot\r\n\r\nSome fields only used by the old scheduler, and some by the new.\r\n\r\n* Add separate build that enables new scheduler\r\n\r\n* Re-enable skipped test\r\n\r\nIf synchronous updates are scheduled by a passive effect, that work\r\nshould be flushed synchronously, even if flushPassiveEffects is\r\ncalled inside batchedUpdates.\r\n\r\n* Passive effects have same priority as render\r\n\r\n* Revert ability to cancel the current callback\r\n\r\nReact doesn't need this anyway because it never schedules callbacks if\r\nit's already rendering.\r\n\r\n* Revert change to FiberDebugPerf\r\n\r\nTurns out this isn't neccessary.\r\n\r\n* Fix ReactFiberScheduler dead code elimination\r\n\r\nShould initialize to nothing, then assign the exports conditionally,\r\ninstead of initializing to the old exports and then reassigning to the\r\nnew ones.\r\n\r\n* Don't yield before commit during sync error retry\r\n\r\n* Call Scheduler.flushAll unconditionally in tests\r\n\r\nInstead of wrapping in enableNewScheduler flag."
        }
      },
      {
        "sha": "38fa84088a4ef0347a89ee176a501c2c2ee8ea96",
        "commit": {
          "message": "Experiemental event API - wrap async dispatched events (#15299)"
        }
      },
      {
        "sha": "fc6a9f1a1ebb5585c543126d397cc945a95f3196",
        "commit": {
          "message": "Add test for async event dispatching (#15300)\n\nVerified that a variant of this test fails as follows when the\r\n`context.withAsyncDispatching` function is excluded (i.e., reproduces the\r\nissue).\r\n\r\n    Expected value to equal:\r\n      [\"press\", \"longpress\", \"longpresschange\"]\r\n    Received:\r\n      [\"press\", \"longpress\", \"longpress\", \"longpresschange\"]"
        }
      },
      {
        "sha": "89064fe68d1f26da78c541a9c64ee093322b9766",
        "commit": {
          "message": "Adds displayName to EventComponent and EventTarget (#15268)\n\n* Adds displayName to EventComponent and EventTarget"
        }
      },
      {
        "sha": "73187239afeda1016313652a776e96c023b8646b",
        "commit": {
          "message": "writing unit tests in experimental event Drag API (#15297)\n\n* writing unit tests in experimental event Drag API\r\n\r\n* add onDragMove unit test\r\n\r\n* fix dragstart event type"
        }
      },
      {
        "sha": "e5c59359c4ccbae31756db4c6f45f2a56cbe2a47",
        "commit": {
          "message": "Prevent bundling of Node polyfills when importing TestUtils/TestRenderer (#15305)"
        }
      },
      {
        "sha": "92a1d8feac32d03ab5ea6ac13ae4941f6ae93b54",
        "commit": {
          "message": "mark react-events as private so we publish script skips it for now (#15307)"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.8.6",
      "body": "## 16.8.6 (March 27, 2019)\r\n\r\n### React DOM\r\n\r\n* Fix an incorrect bailout in `useReducer()`. ([@acdlite](https://github.com/acdlite) in [#15124](https://github.com/facebook/react/pull/15124))\r\n* Fix iframe warnings in Safari DevTools. ([@renanvalentin](https://github.com/renanvalentin) in [#15099](https://github.com/facebook/react/pull/15099))\r\n* Warn if `contextType` is set to `Context.Consumer` instead of `Context`. ([@aweary](https://github.com/aweary) in [#14831](https://github.com/facebook/react/pull/14831))\r\n* Warn if `contextType` is set to invalid values. ([@gaearon](https://github.com/gaearon) in [#15142](https://github.com/facebook/react/pull/15142))\r\n\r\n## Artifacts\r\n* **react**: https://unpkg.com/react@16.8.6/umd/\r\n* **react-art**: https://unpkg.com/react-art@16.8.6/umd/\r\n* **react-dom**: https://unpkg.com/react-dom@16.8.6/umd/\r\n* **react-is**: https://unpkg.com/react-is@16.8.6/umd/\r\n* **react-test-renderer**: https://unpkg.com/react-test-renderer@16.8.6/umd/\r\n* **scheduler**: https://unpkg.com/scheduler@0.13.6/umd/"
    },
    "commits": [
      {
        "sha": "84cc8a31faf4ab589f8ef1454d3717d60f116de7",
        "commit": {
          "message": "Release 16.8.5"
        }
      },
      {
        "sha": "d9fa20d52fc25807851973853b32838ff97354a1",
        "commit": {
          "message": "Eager bailout optimization should always compare to latest reducer (#15124)\n\n* Eager bailout optimization should always compare to latest reducer\r\n\r\n* queue.eagerReducer -> queue.lastRenderedReducer\r\n\r\nThis name is a bit more descriptive.\r\n\r\n* Add test case that uses preceding render phase update"
        }
      },
      {
        "sha": "aa8736a3a9474d9f9714ee315f00e77c0b80ea33",
        "commit": {
          "message": "Warn for Context.Consumer with contextType (#14831)"
        }
      },
      {
        "sha": "e0c2c56dfd58c1145b1e63b9500043dccf675265",
        "commit": {
          "message": "Improve warning for invalid class contextType (#15142)\n\n* Improve warning for invalid class contextType\r\n\r\n* Don't warn for null\r\n\r\n* Grammar"
        }
      },
      {
        "sha": "f00be84b81584f5bc4df137ce00e9e370b49b341",
        "commit": {
          "message": "fix(react-dom): access iframe contentWindow instead of contentDocument (#15099)\n\nMDN has a list of methods for obtaining the window reference of an\r\niframe:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#Syntax\r\n\r\nfix(react-dom): check if iframe belongs to the same origin\r\n\r\nAccessing the contentDocument of a HTMLIframeElement can cause the browser\r\nto throw, e.g. if it has a cross-origin src attribute.\r\nSafari will show an error in the console when the access results in \"Blocked a frame with origin\". e.g:\r\n\r\n```javascript\r\ntry {\r\n $0.contentDocument.defaultView\r\n} catch (err) {\r\n  console.log('err', err)\r\n}\r\n\r\n> Blocked a frame with origin X from accessing a frame with origin Y. Protocols, domains, and ports must match.\r\n> err – TypeError: null is not an object (evaluating '$0.contentDocument.defaultView')\r\n```\r\n\r\nA safety way is to access one of the cross origin properties: Window or Location\r\nWhich might result in \"SecurityError\" DOM Exception and it is compatible to Safari.\r\n\r\n```javascript\r\ntry {\r\n $0.contentWindow.location.href\r\n} catch (err) {\r\n console.log('err', err)\r\n}\r\n\r\n> err – SecurityError: Blocked a frame with origin \"http://localhost:3001\" from accessing a cross-origin frame. Protocols, domains, and ports must match.\r\n```\r\n\r\nhttps://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl"
        }
      },
      {
        "sha": "cd5b8950a07f60c05d6b4e34eb842c26e626674b",
        "commit": {
          "message": "Changelog"
        }
      },
      {
        "sha": "297165f1e12db61c778f8a7118e5e9dc5ebbabe3",
        "commit": {
          "message": "Port tests to old API"
        }
      },
      {
        "sha": "487f4bf2ee7c86176637544c5473328f96ca0ba2",
        "commit": {
          "message": "Update versions for 16.8.6"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.8.5",
      "body": "## 16.8.5 (March 22, 2019)\r\n\r\n### React DOM\r\n\r\n* Don't set the first option as selected in select tag with `size` attribute. ([@kulek1](https://github.com/kulek1) in [#14242](https://github.com/facebook/react/pull/14242))\r\n* Improve the `useEffect(async () => ...)` warning message. ([@gaearon](https://github.com/gaearon) in [#15118](https://github.com/facebook/react/pull/15118))\r\n* Improve the error message sometimes caused by duplicate React. ([@jaredpalmer](https://github.com/jaredpalmer) in [#15139](https://github.com/facebook/react/pull/15139))\r\n\r\n### React DOM Server\r\n\r\n* Improve the `useLayoutEffect` warning message when server rendering. ([@gaearon](https://github.com/gaearon) in [#15158](https://github.com/facebook/react/pull/15158))\r\n\r\n### React Shallow Renderer\r\n\r\n* Fix `setState` in shallow renderer to work with Hooks. ([@gaearon](https://github.com/gaearon) in [#15120](https://github.com/facebook/react/pull/15120))\r\n* Fix shallow renderer to support `React.memo`. ([@aweary](https://github.com/aweary) in [#14816](https://github.com/facebook/react/pull/14816))\r\n* Fix shallow renderer to support Hooks inside `forwardRef`. ([@eps1lon](https://github.com/eps1lon) in [#15100](https://github.com/facebook/react/pull/15100))\r\n\r\n## Artifacts\r\n* **react**: https://unpkg.com/react@16.8.5/umd/\r\n* **react-art**: https://unpkg.com/react-art@16.8.5/umd/\r\n* **react-dom**: https://unpkg.com/react-dom@16.8.5/umd/\r\n* **react-is**: https://unpkg.com/react-is@16.8.5/umd/\r\n* **react-test-renderer**: https://unpkg.com/react-test-renderer@16.8.5/umd/\r\n* **scheduler**: https://unpkg.com/scheduler@0.13.5/umd/"
    },
    "commits": [
      {
        "sha": "13a3788c541dfcaf0dd8e39ad35271742838ca7a",
        "commit": {
          "message": "Improve async useEffect warning (#15104)"
        }
      },
      {
        "sha": "d822d4bbe7fefee12dfd87cd799119714ffa5bac",
        "commit": {
          "message": "Don't set the first option as selected in select tag with `size` attribute  (#14242)\n\n* Set 'size' attribute to select tag if it occurs before appending options\r\n\r\n* Add comment about why size is assigned on select create. Tests\r\n\r\nI added some more clarification for why size must be set on select\r\nelement creation:\r\n\r\n- In the source code\r\n- In the DOM test fixture\r\n- In a unit test\r\n\r\n* Use let, not const in select tag stub assignment"
        }
      },
      {
        "sha": "8f7335875c9ffd552bbbe801f399e97ba25cb640",
        "commit": {
          "message": "Fix shallow renderer not allowing hooks in forwardRef render functions (#15100)\n\n* test: Add test for shallow + forwardRef + hook\r\n\r\n* fix(react-test-renderer): shallow forwardRef hooks"
        }
      },
      {
        "sha": "6b86a6e039c53a42db0497bf92763671dc47da24",
        "commit": {
          "message": "Use same example code for async effect warning (#15118)"
        }
      },
      {
        "sha": "62f5d4a0572d735d94fc0979de62845e93168ba9",
        "commit": {
          "message": "Support React.memo in ReactShallowRenderer (#14816)\n\n* Support React.memo in ReactShallowRenderer\r\n\r\nReactShallowRenderer uses element.type frequently, but with React.memo\r\nelements the actual type is element.type.type. This updates\r\nReactShallowRenderer so it uses the correct element type for Memo\r\ncomponents and also validates the inner props for the wrapped\r\ncomponents.\r\n\r\n* Allow Rect.memo to prevent re-renders\r\n\r\n* Support memo(forwardRef())\r\n\r\n* Dont call memo comparison function on initial render\r\n\r\n* Fix test\r\n\r\n* Small tweaks"
        }
      },
      {
        "sha": "342fa78ed495aea3f25c2f5f1891d96a8c2ea88b",
        "commit": {
          "message": "[Shallow] Implement setState for Hooks and remount on type change (#15120)\n\n* Throw away old shallow renderer state on type change\r\n\r\nThis worked in function components but was broken for classes. It incorrectly retained the old instance even if the type was different.\r\n\r\n* Remove _previousComponentIdentity\r\n\r\nWe only needed this because we didn't correctly reset based on type. Now we do so this can go away.\r\n\r\n* Use _reset when unmounting\r\n\r\n* Use arbitrary componentIdentity\r\n\r\nThere was no particular reason it was set to element.type. We just wanted to check if something is a render phase update.\r\n\r\n* Support Hook state updates in shallow renderer"
        }
      },
      {
        "sha": "b5cb9d345c812892007a5878782837a3e2484093",
        "commit": {
          "message": "Link to useLayoutEffect gist in a warning (#15158)"
        }
      },
      {
        "sha": "1fc13e4b352741c1cbfcb3cf67fbd7776e8f7c19",
        "commit": {
          "message": "Add 16.8.5 changelog"
        }
      },
      {
        "sha": "a0a2e846ce0f265515330ab95174bbf364c87cfc",
        "commit": {
          "message": "Update CHANGELOG.md"
        }
      },
      {
        "sha": "fb572afc14ec5d25aea9be5d752007cc3b2e362f",
        "commit": {
          "message": "Add more info to invalid hook call error message (#15139)\n\n* Add more info to invalid hook call error message\n\n* Update other renderers + change call to action\n\n* Update related tests for new hooks error message\n\n* Fix lint errors"
        }
      },
      {
        "sha": "f9e41e3a519f12cfdc3207e1df44e0d2d9602df9",
        "commit": {
          "message": "Changelog"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.8.4",
      "body": "## 16.8.4 (March 5, 2019)\r\n\r\n### React DOM and other renderers\r\n\r\n- Fix a bug where DevTools caused a runtime error when inspecting a component that used a `useContext` hook. ([@bvaughn](https://github.com/bvaughn) in [#14940](https://github.com/facebook/react/pull/14940))"
    },
    "commits": [
      {
        "sha": "55cf14f98e329ed1efa326ff5c5a32eb80dbe6f1",
        "commit": {
          "message": "Release 16.8.3"
        }
      },
      {
        "sha": "95c2b495439aebeb396c5d5d43587365b9e6db7e",
        "commit": {
          "message": "Cherry picked 4186952 from master, but with manually resolved conflicts.\n\nOriginal commit: Fixed incompatibility between react-debug-tools and useContext() (#14940)\n* Refactor hook ordering check to use DEV-only data structure. This enables us to warn about more cases (e.g. useContext, useDebugValue) withou the need to add any overhead to production bundles."
        }
      },
      {
        "sha": "741aa17a333eb73ae0f4d2c5221664217a99cb6f",
        "commit": {
          "message": "Turning off eslint-plugin-react-hooks for the upcoming patch release"
        }
      },
      {
        "sha": "d8a73b5eb6c7217850103193635ff1b556925ed5",
        "commit": {
          "message": "16.8.4 and changelog"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.8.3",
      "body": "## 16.8.3 (February 21, 2019)\r\n\r\n### React DOM\r\n\r\n* Fix a bug that caused inputs to behave incorrectly in UMD builds. ([@gaearon](https://github.com/gaearon) in [#14914](https://github.com/facebook/react/pull/14914))\r\n* Fix a bug that caused render phase updates to be discarded. ([@gaearon](https://github.com/gaearon) in [#14852](https://github.com/facebook/react/pull/14852))\r\n\r\n### React DOM Server\r\n* Unwind the context stack when a stream is destroyed without completing, to prevent incorrect values during a subsequent render. ([@overlookmotel](https://github.com/overlookmotel) in [#14706](https://github.com/facebook/react/pull/14706/))\r\n\r\n### ESLint Plugin for React Hooks\r\n\r\n* Add a new recommended `exhaustive-deps` rule. ([@gaearon](https://github.com/gaearon) in [#14636](https://github.com/facebook/react/pull/14636))\r\n\r\n## Artifacts\r\n* **react**: https://unpkg.com/react@16.8.3/umd/\r\n* **react-art**: https://unpkg.com/react-art@16.8.3/umd/\r\n* **react-dom**: https://unpkg.com/react-dom@16.8.3/umd/\r\n* **react-is**: https://unpkg.com/react-is@16.8.3/umd/\r\n* **react-test-renderer**: https://unpkg.com/react-test-renderer@16.8.3/umd/\r\n* **scheduler**: https://unpkg.com/scheduler@0.13.3/umd/"
    },
    "commits": [
      {
        "sha": "3e5556043879c9c7b98dd9edfc0e89df0366714b",
        "commit": {
          "message": "Release 16.8.2"
        }
      },
      {
        "sha": "619cdfc624875a03301be4f233bf4e7a24df6eea",
        "commit": {
          "message": "Don't discard render phase state updates with the eager reducer optimization (#14852)\n\n* Add test cases for setState(fn) + render phase updates\r\n\r\n* Update eager state and reducer for render phase updates\r\n\r\n* Fix a newly firing warning"
        }
      },
      {
        "sha": "b668168d4dec542e9022bc779661f691b730dd44",
        "commit": {
          "message": "Fix react-dom/server context leaks when render stream destroyed early (#14706)\n\n* Fix react-dom/server context memory retention\r\n\r\n* Test for pollution of later renders\r\n\r\n* Inline loop\r\n\r\n* More tests"
        }
      },
      {
        "sha": "29b7b775f2ecf878eaf605be959d959030598b07",
        "commit": {
          "message": "Fix UMD builds by re-exporting the scheduler priorities (#14914)"
        }
      }
    ]
  },
  {
    "release": {
      "tag_name": "v16.8.2",
      "body": "\r\n## 16.8.2 (February 14, 2019)\r\n\r\n### React DOM\r\n\r\n* Fix `ReactDOM.render` being ignored inside `useEffect`. ([@gaearon](https://github.com/gaearon) in [#14799](https://github.com/facebook/react/pull/14799))\r\n* Fix a crash when unmounting empty portals. ([@gaearon](https://github.com/gaearon) in [#14820](https://github.com/facebook/react/pull/14820))\r\n* Fix `useImperativeHandle` to work correctly when no deps are specified. ([@gaearon](https://github.com/gaearon) in [#14801](https://github.com/facebook/react/pull/14801))\r\n* Fix `crossOrigin` attribute to work in SVG `image` elements. ([@aweary](https://github.com/aweary) in [#14832](https://github.com/facebook/react/pull/14832))\r\n* Fix a false positive warning when using Suspense with Hooks. ([@gaearon](https://github.com/gaearon) in [#14821](https://github.com/facebook/react/pull/14821))\r\n\r\n### React Test Utils and React Test Renderer\r\n\r\n* Include component stack into the `act()` warning. ([@threepointone](https://github.com/threepointone) in [#14855](https://github.com/facebook/react/pull/14855))\r\n\r\n## Artifacts\r\n* **react**: https://unpkg.com/react@16.8.2/umd/\r\n* **react-art**: https://unpkg.com/react-art@16.8.2/umd/\r\n* **react-dom**: https://unpkg.com/react-dom@16.8.2/umd/\r\n* **react-is**: https://unpkg.com/react-is@16.8.2/umd/\r\n* **react-test-renderer**: https://unpkg.com/react-test-renderer@16.8.2/umd/\r\n* **scheduler**: https://unpkg.com/scheduler@0.13.2/umd/"
    },
    "commits": [
      {
        "sha": "b7cc6b2e6f58848563314b2a46d331284755b84c",
        "commit": {
          "message": "Add 16.8.1 changelog"
        }
      },
      {
        "sha": "45fc46bfa0e761c8382d177c46778e892f949cad",
        "commit": {
          "message": "16.8.1 packages"
        }
      },
      {
        "sha": "aa9423701e99a194d65a8b835882502902a65a50",
        "commit": {
          "message": "Tweaked publish canary message to show newly published version"
        }
      },
      {
        "sha": "1d48b4a68485ce870711e6baa98e5c9f5f213fdf",
        "commit": {
          "message": "Fix hydration with createRoot warning (#14808)\n\nIt's suggesting an API that doesn't exist. Fixed it to reference the actual\r\nAPI."
        }
      },
      {
        "sha": "3e295edd52672518db91af2a457677ee0b6953a1",
        "commit": {
          "message": "Typo fix in comment (#14787)"
        }
      },
      {
        "sha": "c11015ff4f610ac2924d1fc6d569a17657a404fd",
        "commit": {
          "message": "fix spelling mistakes (#14805)"
        }
      },
      {
        "sha": "e15542ee0f9c5ef5646820d59bde3a282e107d02",
        "commit": {
          "message": "use functional component as a first example in readme (#14819)"
        }
      },
      {
        "sha": "1fecba92307041e181ce425082d4d21ec8928728",
        "commit": {
          "message": "Fix crash unmounting an empty Portal (#14820)\n\n* Adds failing test for https://github.com/facebook/react/issues/14811\r\n\r\n* Fix removeChild() crash when removing an empty Portal"
        }
      },
      {
        "sha": "f24a0da6e0f59484e5aafd0825bb1a6ed27d7182",
        "commit": {
          "message": "Fix useImperativeHandle to have no deps by default (#14801)\n\n* Fix useImperativeHandle to have no deps by default\r\n\r\n* Save a byte?\r\n\r\n* Nit: null"
        }
      },
      {
        "sha": "f3a14951ab9bccfd59ca977493b72321b24e50a5",
        "commit": {
          "message": "Partial Hydration (#14717)\n\n* Basic partial hydration test\r\n\r\n* Render comments around Suspense components\r\n\r\nWe need this to be able to identify how far to skip ahead if we're not\r\ngoing to hydrate this subtree yet.\r\n\r\n* Add DehydratedSuspenseComponent type of work\r\n\r\nWill be used for Suspense boundaries that are left with their server\r\nrendered content intact.\r\n\r\n* Add comment node as hydratable instance type as placeholder for suspense\r\n\r\n* Skip past nodes within the Suspense boundary\r\n\r\nThis lets us continue hydrating sibling nodes.\r\n\r\n* A dehydrated suspense boundary comment should be considered a sibling\r\n\r\n* Retry hydrating at offscreen pri or after ping if suspended\r\n\r\n* Enter hydration state when retrying dehydrated suspense boundary\r\n\r\n* Delete all children within a dehydrated suspense boundary when it's deleted\r\n\r\n* Delete server rendered content when props change before hydration completes\r\n\r\n* Make test internal\r\n\r\n* Wrap in act\r\n\r\n* Change SSR Fixture to use Partial Hydration\r\n\r\nThis requires the enableSuspenseServerRenderer flag to be manually enabled\r\nfor the build to work.\r\n\r\n* Changes to any parent Context forces clearing dehydrated content\r\n\r\nWe mark dehydrated boundaries as having child work, since they might have\r\ncomponents that read from the changed context.\r\n\r\nWe check this in beginWork and if it does we treat it as if the input\r\nhas changed (same as if props changes).\r\n\r\n* Wrap in feature flag\r\n\r\n* Treat Suspense boundaries without fallbacks as if not-boundaries\r\n\r\nThese don't come into play for purposes of hydration.\r\n\r\n* Fix clearing of nested suspense boundaries\r\n\r\n* ping -> retry\r\n\r\nCo-Authored-By: sebmarkbage <sebastian@calyptus.eu>\r\n\r\n* Typo\r\n\r\nCo-Authored-By: sebmarkbage <sebastian@calyptus.eu>\r\n\r\n* Use didReceiveUpdate instead of manually comparing props\r\n\r\n* Leave comment for why it's ok to ignore the timeout"
        }
      },
      {
        "sha": "3ae94e1885b673543a30a05906c4f9a0e4b682cb",
        "commit": {
          "message": "Fix ignored sync work in passive effects (#14799)\n\n* Fix ignored sync work in passive effects\r\n\r\n* Fix batching"
        }
      },
      {
        "sha": "c6bee765ba865298c69acdea70e1ec2d79f69efe",
        "commit": {
          "message": "Remove false positive warning and add TODOs about `current` being non-null (#14821)\n\n* Failing test for false positive warning\r\n\r\n* Add tests for forwardRef too\r\n\r\n* Remove the warning and add TODOs"
        }
      },
      {
        "sha": "fa6205d522a9d3e3f228be18dd29f11f8930c394",
        "commit": {
          "message": "Special case crossOrigin for SVG image elements (#14832)"
        }
      },
      {
        "sha": "6d4038f0a638d82e9e528f02cc5a86afb410cf11",
        "commit": {
          "message": "[ShallowRenderer] Queue/rerender on dispatched action after render component with hooks (#14802)\n\n* [shallow-renderer] Rerender on dispatched action out of render"
        }
      },
      {
        "sha": "0e4135e8c2f1bc9cd14f439190aa28865395e4b1",
        "commit": {
          "message": "Revert \"[ShallowRenderer] Queue/rerender on dispatched action after render component with hooks (#14802)\" (#14839)\n\nThis reverts commit 6d4038f0a638d82e9e528f02cc5a86afb410cf11."
        }
      },
      {
        "sha": "08e95543571eacbe88a03382adc9399607d53425",
        "commit": {
          "message": "Statically enable suspense/partial hydration flag in www (#14842)\n\nIt doesn't hurt to have this always on since it is only when we use\r\nSuspense that it matters. This saves some code/checks."
        }
      },
      {
        "sha": "c4d8ef643002a2b181029ffed22abd451fb326df",
        "commit": {
          "message": "Fix typo in code comment (#14836)"
        }
      },
      {
        "sha": "ff188d666bcb4c7aad38009ee61ad292349244b0",
        "commit": {
          "message": "Add React 16.8.2 changelog (#14851)"
        }
      },
      {
        "sha": "c555c008b6e13004c57784950eb325ed1d917575",
        "commit": {
          "message": "Include component stack in 'act(...)' warning (#14855)\n\n* add a component stack trace to the act() warning\r\n\r\n* pass tests\r\n\r\n* nit"
        }
      },
      {
        "sha": "dfabb77a97141baf07cfdad620949874e36516d7",
        "commit": {
          "message": "Include another change in 16.8.2"
        }
      }
    ]
  }
]